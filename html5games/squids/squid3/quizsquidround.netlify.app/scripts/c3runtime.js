// Generated by Construct 3, the game and app creator :: https://www.construct.net
'use strict';
"use strict";
(function(e, b) {
    "object" === typeof exports && "undefined" !== typeof module ? b(exports) : "function" === typeof define && define.amd ? define(["exports"], b) : (e = e || self, b(e.glMatrix = {}))
})(this, function(e) {
    function b(h, n, v) {
        var z = n[0],
            D = n[1],
            E = n[2];
        n = n[3];
        var I = v[0],
            K = v[1],
            O = v[2];
        v = v[3];
        h[0] = z * I + E * K;
        h[1] = D * I + n * K;
        h[2] = z * O + E * v;
        h[3] = D * O + n * v;
        return h
    }

    function a(h, n, v) {
        h[0] = n[0] - v[0];
        h[1] = n[1] - v[1];
        h[2] = n[2] - v[2];
        h[3] = n[3] - v[3];
        return h
    }

    function d(h, n, v) {
        var z = n[0],
            D = n[1],
            E = n[2],
            I = n[3],
            K = n[4];
        n = n[5];
        var O = v[0],
            Q = v[1],
            S = v[2],
            T = v[3],
            Y = v[4];
        v = v[5];
        h[0] = z * O + E * Q;
        h[1] = D * O + I * Q;
        h[2] = z * S + E * T;
        h[3] = D * S + I * T;
        h[4] = z * Y + E * v + K;
        h[5] = D * Y + I * v + n;
        return h
    }

    function c(h, n, v) {
        h[0] = n[0] - v[0];
        h[1] = n[1] - v[1];
        h[2] = n[2] - v[2];
        h[3] = n[3] - v[3];
        h[4] = n[4] - v[4];
        h[5] = n[5] - v[5];
        return h
    }

    function f() {
        var h = new ra(9);
        ra != Float32Array && (h[1] = 0, h[2] = 0, h[3] = 0, h[5] = 0, h[6] = 0, h[7] = 0);
        h[0] = 1;
        h[4] = 1;
        h[8] = 1;
        return h
    }

    function k(h, n, v) {
        var z = n[0],
            D = n[1],
            E = n[2],
            I = n[3],
            K = n[4],
            O = n[5],
            Q = n[6],
            S = n[7];
        n = n[8];
        var T = v[0],
            Y = v[1],
            X = v[2],
            ea = v[3],
            ca = v[4],
            aa = v[5],
            wa = v[6],
            pa =
            v[7];
        v = v[8];
        h[0] = T * z + Y * I + X * Q;
        h[1] = T * D + Y * K + X * S;
        h[2] = T * E + Y * O + X * n;
        h[3] = ea * z + ca * I + aa * Q;
        h[4] = ea * D + ca * K + aa * S;
        h[5] = ea * E + ca * O + aa * n;
        h[6] = wa * z + pa * I + v * Q;
        h[7] = wa * D + pa * K + v * S;
        h[8] = wa * E + pa * O + v * n;
        return h
    }

    function g(h, n, v) {
        h[0] = n[0] - v[0];
        h[1] = n[1] - v[1];
        h[2] = n[2] - v[2];
        h[3] = n[3] - v[3];
        h[4] = n[4] - v[4];
        h[5] = n[5] - v[5];
        h[6] = n[6] - v[6];
        h[7] = n[7] - v[7];
        h[8] = n[8] - v[8];
        return h
    }

    function l(h) {
        h[0] = 1;
        h[1] = 0;
        h[2] = 0;
        h[3] = 0;
        h[4] = 0;
        h[5] = 1;
        h[6] = 0;
        h[7] = 0;
        h[8] = 0;
        h[9] = 0;
        h[10] = 1;
        h[11] = 0;
        h[12] = 0;
        h[13] = 0;
        h[14] = 0;
        h[15] = 1;
        return h
    }

    function m(h,
        n, v) {
        var z = n[0],
            D = n[1],
            E = n[2],
            I = n[3],
            K = n[4],
            O = n[5],
            Q = n[6],
            S = n[7],
            T = n[8],
            Y = n[9],
            X = n[10],
            ea = n[11],
            ca = n[12],
            aa = n[13],
            wa = n[14];
        n = n[15];
        var pa = v[0],
            ua = v[1],
            va = v[2],
            ta = v[3];
        h[0] = pa * z + ua * K + va * T + ta * ca;
        h[1] = pa * D + ua * O + va * Y + ta * aa;
        h[2] = pa * E + ua * Q + va * X + ta * wa;
        h[3] = pa * I + ua * S + va * ea + ta * n;
        pa = v[4];
        ua = v[5];
        va = v[6];
        ta = v[7];
        h[4] = pa * z + ua * K + va * T + ta * ca;
        h[5] = pa * D + ua * O + va * Y + ta * aa;
        h[6] = pa * E + ua * Q + va * X + ta * wa;
        h[7] = pa * I + ua * S + va * ea + ta * n;
        pa = v[8];
        ua = v[9];
        va = v[10];
        ta = v[11];
        h[8] = pa * z + ua * K + va * T + ta * ca;
        h[9] = pa * D + ua * O + va * Y + ta * aa;
        h[10] = pa *
            E + ua * Q + va * X + ta * wa;
        h[11] = pa * I + ua * S + va * ea + ta * n;
        pa = v[12];
        ua = v[13];
        va = v[14];
        ta = v[15];
        h[12] = pa * z + ua * K + va * T + ta * ca;
        h[13] = pa * D + ua * O + va * Y + ta * aa;
        h[14] = pa * E + ua * Q + va * X + ta * wa;
        h[15] = pa * I + ua * S + va * ea + ta * n;
        return h
    }

    function u(h, n, v) {
        var z = n[0],
            D = n[1],
            E = n[2],
            I = n[3],
            K = z + z,
            O = D + D,
            Q = E + E;
        n = z * K;
        var S = z * O;
        z *= Q;
        var T = D * O;
        D *= Q;
        E *= Q;
        K *= I;
        O *= I;
        I *= Q;
        h[0] = 1 - (T + E);
        h[1] = S + I;
        h[2] = z - O;
        h[3] = 0;
        h[4] = S - I;
        h[5] = 1 - (n + E);
        h[6] = D + K;
        h[7] = 0;
        h[8] = z + O;
        h[9] = D - K;
        h[10] = 1 - (n + T);
        h[11] = 0;
        h[12] = v[0];
        h[13] = v[1];
        h[14] = v[2];
        h[15] = 1;
        return h
    }

    function x(h,
        n) {
        h[0] = n[12];
        h[1] = n[13];
        h[2] = n[14];
        return h
    }

    function p(h, n) {
        var v = n[4],
            z = n[5],
            D = n[6],
            E = n[8],
            I = n[9],
            K = n[10];
        h[0] = Math.hypot(n[0], n[1], n[2]);
        h[1] = Math.hypot(v, z, D);
        h[2] = Math.hypot(E, I, K);
        return h
    }

    function r(h, n) {
        var v = new ra(3);
        p(v, n);
        var z = 1 / v[0],
            D = 1 / v[1],
            E = 1 / v[2],
            I = n[0] * z;
        v = n[1] * D;
        var K = n[2] * E,
            O = n[4] * z,
            Q = n[5] * D,
            S = n[6] * E;
        z *= n[8];
        D *= n[9];
        n = n[10] * E;
        E = I + Q + n;
        0 < E ? (I = 2 * Math.sqrt(E + 1), h[3] = .25 * I, h[0] = (S - D) / I, h[1] = (z - K) / I, h[2] = (v - O) / I) : I > Q && I > n ? (I = 2 * Math.sqrt(1 + I - Q - n), h[3] = (S - D) / I, h[0] = .25 * I, h[1] = (v + O) / I,
            h[2] = (z + K) / I) : Q > n ? (I = 2 * Math.sqrt(1 + Q - I - n), h[3] = (z - K) / I, h[0] = (v + O) / I, h[1] = .25 * I, h[2] = (S + D) / I) : (I = 2 * Math.sqrt(1 + n - I - Q), h[3] = (v - O) / I, h[0] = (z + K) / I, h[1] = (S + D) / I, h[2] = .25 * I);
        return h
    }

    function t(h, n, v) {
        h[0] = n[0] - v[0];
        h[1] = n[1] - v[1];
        h[2] = n[2] - v[2];
        h[3] = n[3] - v[3];
        h[4] = n[4] - v[4];
        h[5] = n[5] - v[5];
        h[6] = n[6] - v[6];
        h[7] = n[7] - v[7];
        h[8] = n[8] - v[8];
        h[9] = n[9] - v[9];
        h[10] = n[10] - v[10];
        h[11] = n[11] - v[11];
        h[12] = n[12] - v[12];
        h[13] = n[13] - v[13];
        h[14] = n[14] - v[14];
        h[15] = n[15] - v[15];
        return h
    }

    function q() {
        var h = new ra(3);
        ra != Float32Array &&
            (h[0] = 0, h[1] = 0, h[2] = 0);
        return h
    }

    function w(h) {
        return Math.hypot(h[0], h[1], h[2])
    }

    function y(h, n, v) {
        var z = new ra(3);
        z[0] = h;
        z[1] = n;
        z[2] = v;
        return z
    }

    function C(h, n, v) {
        h[0] = n[0] - v[0];
        h[1] = n[1] - v[1];
        h[2] = n[2] - v[2];
        return h
    }

    function F(h, n, v) {
        h[0] = n[0] * v[0];
        h[1] = n[1] * v[1];
        h[2] = n[2] * v[2];
        return h
    }

    function H(h, n, v) {
        h[0] = n[0] / v[0];
        h[1] = n[1] / v[1];
        h[2] = n[2] / v[2];
        return h
    }

    function M(h, n) {
        return Math.hypot(n[0] - h[0], n[1] - h[1], n[2] - h[2])
    }

    function B(h, n) {
        var v = n[0] - h[0],
            z = n[1] - h[1];
        h = n[2] - h[2];
        return v * v + z * z + h * h
    }

    function A(h) {
        var n =
            h[0],
            v = h[1];
        h = h[2];
        return n * n + v * v + h * h
    }

    function G(h, n) {
        var v = n[0],
            z = n[1],
            D = n[2];
        v = v * v + z * z + D * D;
        0 < v && (v = 1 / Math.sqrt(v));
        h[0] = n[0] * v;
        h[1] = n[1] * v;
        h[2] = n[2] * v;
        return h
    }

    function J(h, n) {
        return h[0] * n[0] + h[1] * n[1] + h[2] * n[2]
    }

    function L(h, n, v) {
        var z = n[0],
            D = n[1];
        n = n[2];
        var E = v[0],
            I = v[1];
        v = v[2];
        h[0] = D * v - n * I;
        h[1] = n * E - z * v;
        h[2] = z * I - D * E;
        return h
    }

    function R() {
        var h = new ra(4);
        ra != Float32Array && (h[0] = 0, h[1] = 0, h[2] = 0, h[3] = 0);
        return h
    }

    function U(h) {
        var n = new ra(4);
        n[0] = h[0];
        n[1] = h[1];
        n[2] = h[2];
        n[3] = h[3];
        return n
    }

    function V(h,
        n, v, z) {
        var D = new ra(4);
        D[0] = h;
        D[1] = n;
        D[2] = v;
        D[3] = z;
        return D
    }

    function ba(h, n) {
        h[0] = n[0];
        h[1] = n[1];
        h[2] = n[2];
        h[3] = n[3];
        return h
    }

    function ia(h, n, v, z, D) {
        h[0] = n;
        h[1] = v;
        h[2] = z;
        h[3] = D;
        return h
    }

    function ja(h, n, v) {
        h[0] = n[0] + v[0];
        h[1] = n[1] + v[1];
        h[2] = n[2] + v[2];
        h[3] = n[3] + v[3];
        return h
    }

    function qa(h, n, v) {
        h[0] = n[0] - v[0];
        h[1] = n[1] - v[1];
        h[2] = n[2] - v[2];
        h[3] = n[3] - v[3];
        return h
    }

    function za(h, n, v) {
        h[0] = n[0] * v[0];
        h[1] = n[1] * v[1];
        h[2] = n[2] * v[2];
        h[3] = n[3] * v[3];
        return h
    }

    function Ca(h, n, v) {
        h[0] = n[0] / v[0];
        h[1] = n[1] / v[1];
        h[2] =
            n[2] / v[2];
        h[3] = n[3] / v[3];
        return h
    }

    function Ma(h, n, v) {
        h[0] = n[0] * v;
        h[1] = n[1] * v;
        h[2] = n[2] * v;
        h[3] = n[3] * v;
        return h
    }

    function Fa(h, n) {
        return Math.hypot(n[0] - h[0], n[1] - h[1], n[2] - h[2], n[3] - h[3])
    }

    function La(h, n) {
        var v = n[0] - h[0],
            z = n[1] - h[1],
            D = n[2] - h[2];
        h = n[3] - h[3];
        return v * v + z * z + D * D + h * h
    }

    function na(h) {
        return Math.hypot(h[0], h[1], h[2], h[3])
    }

    function Sa(h) {
        var n = h[0],
            v = h[1],
            z = h[2];
        h = h[3];
        return n * n + v * v + z * z + h * h
    }

    function Aa(h, n) {
        var v = n[0],
            z = n[1],
            D = n[2];
        n = n[3];
        var E = v * v + z * z + D * D + n * n;
        0 < E && (E = 1 / Math.sqrt(E));
        h[0] =
            v * E;
        h[1] = z * E;
        h[2] = D * E;
        h[3] = n * E;
        return h
    }

    function Na(h, n) {
        return h[0] * n[0] + h[1] * n[1] + h[2] * n[2] + h[3] * n[3]
    }

    function lb(h, n, v, z) {
        var D = n[0],
            E = n[1],
            I = n[2];
        n = n[3];
        h[0] = D + z * (v[0] - D);
        h[1] = E + z * (v[1] - E);
        h[2] = I + z * (v[2] - I);
        h[3] = n + z * (v[3] - n);
        return h
    }

    function mb(h, n) {
        return h[0] === n[0] && h[1] === n[1] && h[2] === n[2] && h[3] === n[3]
    }

    function nb(h, n) {
        var v = h[0],
            z = h[1],
            D = h[2];
        h = h[3];
        var E = n[0],
            I = n[1],
            K = n[2];
        n = n[3];
        return Math.abs(v - E) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(E)) && Math.abs(z - I) <= 1E-6 * Math.max(1, Math.abs(z),
            Math.abs(I)) && Math.abs(D - K) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(K)) && Math.abs(h - n) <= 1E-6 * Math.max(1, Math.abs(h), Math.abs(n))
    }

    function ab() {
        var h = new ra(4);
        ra != Float32Array && (h[0] = 0, h[1] = 0, h[2] = 0);
        h[3] = 1;
        return h
    }

    function ob(h, n, v) {
        v *= .5;
        var z = Math.sin(v);
        h[0] = z * n[0];
        h[1] = z * n[1];
        h[2] = z * n[2];
        h[3] = Math.cos(v);
        return h
    }

    function pb(h, n, v) {
        var z = n[0],
            D = n[1],
            E = n[2];
        n = n[3];
        var I = v[0],
            K = v[1],
            O = v[2];
        v = v[3];
        h[0] = z * v + n * I + D * O - E * K;
        h[1] = D * v + n * K + E * I - z * O;
        h[2] = E * v + n * O + z * K - D * I;
        h[3] = n * v - z * I - D * K - E * O;
        return h
    }

    function qb(h,
        n, v) {
        v *= .5;
        var z = n[0],
            D = n[1],
            E = n[2];
        n = n[3];
        var I = Math.sin(v);
        v = Math.cos(v);
        h[0] = z * v + n * I;
        h[1] = D * v + E * I;
        h[2] = E * v - D * I;
        h[3] = n * v - z * I;
        return h
    }

    function rb(h, n, v) {
        v *= .5;
        var z = n[0],
            D = n[1],
            E = n[2];
        n = n[3];
        var I = Math.sin(v);
        v = Math.cos(v);
        h[0] = z * v - E * I;
        h[1] = D * v + n * I;
        h[2] = E * v + z * I;
        h[3] = n * v - D * I;
        return h
    }

    function sb(h, n, v) {
        v *= .5;
        var z = n[0],
            D = n[1],
            E = n[2];
        n = n[3];
        var I = Math.sin(v);
        v = Math.cos(v);
        h[0] = z * v + D * I;
        h[1] = D * v - z * I;
        h[2] = E * v + n * I;
        h[3] = n * v - E * I;
        return h
    }

    function tb(h, n) {
        var v = n[0],
            z = n[1],
            D = n[2],
            E = Math.sqrt(v * v + z * z + D * D);
        n = Math.exp(n[3]);
        var I = 0 < E ? n * Math.sin(E) / E : 0;
        h[0] = v * I;
        h[1] = z * I;
        h[2] = D * I;
        h[3] = n * Math.cos(E);
        return h
    }

    function ub(h, n) {
        var v = n[0],
            z = n[1],
            D = n[2];
        n = n[3];
        var E = Math.sqrt(v * v + z * z + D * D);
        E = 0 < E ? Math.atan2(E, n) / E : 0;
        h[0] = v * E;
        h[1] = z * E;
        h[2] = D * E;
        h[3] = .5 * Math.log(v * v + z * z + D * D + n * n);
        return h
    }

    function bb(h, n, v, z) {
        var D = n[0],
            E = n[1],
            I = n[2];
        n = n[3];
        var K = v[0],
            O = v[1],
            Q = v[2];
        v = v[3];
        var S = D * K + E * O + I * Q + n * v;
        0 > S && (S = -S, K = -K, O = -O, Q = -Q, v = -v);
        if (1E-6 < 1 - S) {
            var T = Math.acos(S);
            var Y = Math.sin(T);
            S = Math.sin((1 - z) * T) / Y;
            z = Math.sin(z * T) /
                Y
        } else S = 1 - z;
        h[0] = S * D + z * K;
        h[1] = S * E + z * O;
        h[2] = S * I + z * Q;
        h[3] = S * n + z * v;
        return h
    }

    function vb(h, n) {
        var v = n[0] + n[4] + n[8];
        if (0 < v) v = Math.sqrt(v + 1), h[3] = .5 * v, v = .5 / v, h[0] = (n[5] - n[7]) * v, h[1] = (n[6] - n[2]) * v, h[2] = (n[1] - n[3]) * v;
        else {
            var z = 0;
            n[4] > n[0] && (z = 1);
            n[8] > n[3 * z + z] && (z = 2);
            var D = (z + 1) % 3,
                E = (z + 2) % 3;
            v = Math.sqrt(n[3 * z + z] - n[3 * D + D] - n[3 * E + E] + 1);
            h[z] = .5 * v;
            v = .5 / v;
            h[3] = (n[3 * D + E] - n[3 * E + D]) * v;
            h[D] = (n[3 * D + z] + n[3 * z + D]) * v;
            h[E] = (n[3 * E + z] + n[3 * z + E]) * v
        }
        return h
    }

    function wb(h, n, v) {
        var z = .5 * v[0],
            D = .5 * v[1];
        v = .5 * v[2];
        var E = n[0],
            I = n[1],
            K = n[2];
        n = n[3];
        h[0] = E;
        h[1] = I;
        h[2] = K;
        h[3] = n;
        h[4] = z * n + D * K - v * I;
        h[5] = D * n + v * E - z * K;
        h[6] = v * n + z * I - D * E;
        h[7] = -z * E - D * I - v * K;
        return h
    }

    function xb(h, n) {
        h[0] = n[0];
        h[1] = n[1];
        h[2] = n[2];
        h[3] = n[3];
        h[4] = n[4];
        h[5] = n[5];
        h[6] = n[6];
        h[7] = n[7];
        return h
    }

    function yb(h, n, v) {
        var z = n[0],
            D = n[1],
            E = n[2],
            I = n[3],
            K = v[4],
            O = v[5],
            Q = v[6],
            S = v[7],
            T = n[4],
            Y = n[5],
            X = n[6];
        n = n[7];
        var ea = v[0],
            ca = v[1],
            aa = v[2];
        v = v[3];
        h[0] = z * v + I * ea + D * aa - E * ca;
        h[1] = D * v + I * ca + E * ea - z * aa;
        h[2] = E * v + I * aa + z * ca - D * ea;
        h[3] = I * v - z * ea - D * ca - E * aa;
        h[4] = z * S + I * K + D * Q - E * O + T * v + n * ea + Y * aa - X *
            ca;
        h[5] = D * S + I * O + E * K - z * Q + Y * v + n * ca + X * ea - T * aa;
        h[6] = E * S + I * Q + z * O - D * K + X * v + n * aa + T * ca - Y * ea;
        h[7] = I * S - z * K - D * O - E * Q + n * v - T * ea - Y * ca - X * aa;
        return h
    }

    function cb() {
        var h = new ra(2);
        ra != Float32Array && (h[0] = 0, h[1] = 0);
        return h
    }

    function Xa(h, n, v) {
        h[0] = n[0] - v[0];
        h[1] = n[1] - v[1];
        return h
    }

    function db(h, n, v) {
        h[0] = n[0] * v[0];
        h[1] = n[1] * v[1];
        return h
    }

    function eb(h, n, v) {
        h[0] = n[0] / v[0];
        h[1] = n[1] / v[1];
        return h
    }

    function Ya(h, n) {
        return Math.hypot(n[0] - h[0], n[1] - h[1])
    }

    function fb(h, n) {
        var v = n[0] - h[0];
        h = n[1] - h[1];
        return v * v + h * h
    }

    function Ta(h) {
        return Math.hypot(h[0],
            h[1])
    }

    function gb(h) {
        var n = h[0];
        h = h[1];
        return n * n + h * h
    }
    var ra = "undefined" !== typeof Float32Array ? Float32Array : Array,
        Qa = Math.random,
        zb = Math.PI / 180;
    Math.hypot || (Math.hypot = function() {
        for (var h = 0, n = arguments.length; n--;) h += arguments[n] * arguments[n];
        return Math.sqrt(h)
    });
    var Ab = Object.freeze({
            __proto__: null,
            EPSILON: 1E-6,
            get ARRAY_TYPE() {
                return ra
            },
            RANDOM: Qa,
            setMatrixArrayType: function(h) {
                ra = h
            },
            toRadian: function(h) {
                return h * zb
            },
            equals: function(h, n) {
                return Math.abs(h - n) <= 1E-6 * Math.max(1, Math.abs(h), Math.abs(n))
            }
        }),
        Db = Object.freeze({
            __proto__: null,
            create: function() {
                var h = new ra(4);
                ra != Float32Array && (h[1] = 0, h[2] = 0);
                h[0] = 1;
                h[3] = 1;
                return h
            },
            clone: function(h) {
                var n = new ra(4);
                n[0] = h[0];
                n[1] = h[1];
                n[2] = h[2];
                n[3] = h[3];
                return n
            },
            copy: function(h, n) {
                h[0] = n[0];
                h[1] = n[1];
                h[2] = n[2];
                h[3] = n[3];
                return h
            },
            identity: function(h) {
                h[0] = 1;
                h[1] = 0;
                h[2] = 0;
                h[3] = 1;
                return h
            },
            fromValues: function(h, n, v, z) {
                var D = new ra(4);
                D[0] = h;
                D[1] = n;
                D[2] = v;
                D[3] = z;
                return D
            },
            set: function(h, n, v, z, D) {
                h[0] = n;
                h[1] = v;
                h[2] = z;
                h[3] = D;
                return h
            },
            transpose: function(h,
                n) {
                if (h === n) {
                    var v = n[1];
                    h[1] = n[2];
                    h[2] = v
                } else h[0] = n[0], h[1] = n[2], h[2] = n[1], h[3] = n[3];
                return h
            },
            invert: function(h, n) {
                var v = n[0],
                    z = n[1],
                    D = n[2];
                n = n[3];
                var E = v * n - D * z;
                if (!E) return null;
                E = 1 / E;
                h[0] = n * E;
                h[1] = -z * E;
                h[2] = -D * E;
                h[3] = v * E;
                return h
            },
            adjoint: function(h, n) {
                var v = n[0];
                h[0] = n[3];
                h[1] = -n[1];
                h[2] = -n[2];
                h[3] = v;
                return h
            },
            determinant: function(h) {
                return h[0] * h[3] - h[2] * h[1]
            },
            multiply: b,
            rotate: function(h, n, v) {
                var z = n[0],
                    D = n[1],
                    E = n[2];
                n = n[3];
                var I = Math.sin(v);
                v = Math.cos(v);
                h[0] = z * v + E * I;
                h[1] = D * v + n * I;
                h[2] = z * -I +
                    E * v;
                h[3] = D * -I + n * v;
                return h
            },
            scale: function(h, n, v) {
                var z = n[1],
                    D = n[2],
                    E = n[3],
                    I = v[0];
                v = v[1];
                h[0] = n[0] * I;
                h[1] = z * I;
                h[2] = D * v;
                h[3] = E * v;
                return h
            },
            fromRotation: function(h, n) {
                var v = Math.sin(n);
                n = Math.cos(n);
                h[0] = n;
                h[1] = v;
                h[2] = -v;
                h[3] = n;
                return h
            },
            fromScaling: function(h, n) {
                h[0] = n[0];
                h[1] = 0;
                h[2] = 0;
                h[3] = n[1];
                return h
            },
            str: function(h) {
                return "mat2(" + h[0] + ", " + h[1] + ", " + h[2] + ", " + h[3] + ")"
            },
            frob: function(h) {
                return Math.hypot(h[0], h[1], h[2], h[3])
            },
            LDU: function(h, n, v, z) {
                h[2] = z[2] / z[0];
                v[0] = z[0];
                v[1] = z[1];
                v[3] = z[3] - h[2] *
                    v[1];
                return [h, n, v]
            },
            add: function(h, n, v) {
                h[0] = n[0] + v[0];
                h[1] = n[1] + v[1];
                h[2] = n[2] + v[2];
                h[3] = n[3] + v[3];
                return h
            },
            subtract: a,
            exactEquals: function(h, n) {
                return h[0] === n[0] && h[1] === n[1] && h[2] === n[2] && h[3] === n[3]
            },
            equals: function(h, n) {
                var v = h[0],
                    z = h[1],
                    D = h[2];
                h = h[3];
                var E = n[0],
                    I = n[1],
                    K = n[2];
                n = n[3];
                return Math.abs(v - E) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(E)) && Math.abs(z - I) <= 1E-6 * Math.max(1, Math.abs(z), Math.abs(I)) && Math.abs(D - K) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(K)) && Math.abs(h - n) <= 1E-6 * Math.max(1, Math.abs(h),
                    Math.abs(n))
            },
            multiplyScalar: function(h, n, v) {
                h[0] = n[0] * v;
                h[1] = n[1] * v;
                h[2] = n[2] * v;
                h[3] = n[3] * v;
                return h
            },
            multiplyScalarAndAdd: function(h, n, v, z) {
                h[0] = n[0] + v[0] * z;
                h[1] = n[1] + v[1] * z;
                h[2] = n[2] + v[2] * z;
                h[3] = n[3] + v[3] * z;
                return h
            },
            mul: b,
            sub: a
        }),
        Eb = Object.freeze({
            __proto__: null,
            create: function() {
                var h = new ra(6);
                ra != Float32Array && (h[1] = 0, h[2] = 0, h[4] = 0, h[5] = 0);
                h[0] = 1;
                h[3] = 1;
                return h
            },
            clone: function(h) {
                var n = new ra(6);
                n[0] = h[0];
                n[1] = h[1];
                n[2] = h[2];
                n[3] = h[3];
                n[4] = h[4];
                n[5] = h[5];
                return n
            },
            copy: function(h, n) {
                h[0] =
                    n[0];
                h[1] = n[1];
                h[2] = n[2];
                h[3] = n[3];
                h[4] = n[4];
                h[5] = n[5];
                return h
            },
            identity: function(h) {
                h[0] = 1;
                h[1] = 0;
                h[2] = 0;
                h[3] = 1;
                h[4] = 0;
                h[5] = 0;
                return h
            },
            fromValues: function(h, n, v, z, D, E) {
                var I = new ra(6);
                I[0] = h;
                I[1] = n;
                I[2] = v;
                I[3] = z;
                I[4] = D;
                I[5] = E;
                return I
            },
            set: function(h, n, v, z, D, E, I) {
                h[0] = n;
                h[1] = v;
                h[2] = z;
                h[3] = D;
                h[4] = E;
                h[5] = I;
                return h
            },
            invert: function(h, n) {
                var v = n[0],
                    z = n[1],
                    D = n[2],
                    E = n[3],
                    I = n[4];
                n = n[5];
                var K = v * E - z * D;
                if (!K) return null;
                K = 1 / K;
                h[0] = E * K;
                h[1] = -z * K;
                h[2] = -D * K;
                h[3] = v * K;
                h[4] = (D * n - E * I) * K;
                h[5] = (z * I - v * n) * K;
                return h
            },
            determinant: function(h) {
                return h[0] * h[3] - h[1] * h[2]
            },
            multiply: d,
            rotate: function(h, n, v) {
                var z = n[0],
                    D = n[1],
                    E = n[2],
                    I = n[3],
                    K = n[4];
                n = n[5];
                var O = Math.sin(v);
                v = Math.cos(v);
                h[0] = z * v + E * O;
                h[1] = D * v + I * O;
                h[2] = z * -O + E * v;
                h[3] = D * -O + I * v;
                h[4] = K;
                h[5] = n;
                return h
            },
            scale: function(h, n, v) {
                var z = n[1],
                    D = n[2],
                    E = n[3],
                    I = n[4],
                    K = n[5],
                    O = v[0];
                v = v[1];
                h[0] = n[0] * O;
                h[1] = z * O;
                h[2] = D * v;
                h[3] = E * v;
                h[4] = I;
                h[5] = K;
                return h
            },
            translate: function(h, n, v) {
                var z = n[0],
                    D = n[1],
                    E = n[2],
                    I = n[3],
                    K = n[4];
                n = n[5];
                var O = v[0];
                v = v[1];
                h[0] = z;
                h[1] = D;
                h[2] = E;
                h[3] = I;
                h[4] =
                    z * O + E * v + K;
                h[5] = D * O + I * v + n;
                return h
            },
            fromRotation: function(h, n) {
                var v = Math.sin(n);
                n = Math.cos(n);
                h[0] = n;
                h[1] = v;
                h[2] = -v;
                h[3] = n;
                h[4] = 0;
                h[5] = 0;
                return h
            },
            fromScaling: function(h, n) {
                h[0] = n[0];
                h[1] = 0;
                h[2] = 0;
                h[3] = n[1];
                h[4] = 0;
                h[5] = 0;
                return h
            },
            fromTranslation: function(h, n) {
                h[0] = 1;
                h[1] = 0;
                h[2] = 0;
                h[3] = 1;
                h[4] = n[0];
                h[5] = n[1];
                return h
            },
            str: function(h) {
                return "mat2d(" + h[0] + ", " + h[1] + ", " + h[2] + ", " + h[3] + ", " + h[4] + ", " + h[5] + ")"
            },
            frob: function(h) {
                return Math.hypot(h[0], h[1], h[2], h[3], h[4], h[5], 1)
            },
            add: function(h, n, v) {
                h[0] =
                    n[0] + v[0];
                h[1] = n[1] + v[1];
                h[2] = n[2] + v[2];
                h[3] = n[3] + v[3];
                h[4] = n[4] + v[4];
                h[5] = n[5] + v[5];
                return h
            },
            subtract: c,
            multiplyScalar: function(h, n, v) {
                h[0] = n[0] * v;
                h[1] = n[1] * v;
                h[2] = n[2] * v;
                h[3] = n[3] * v;
                h[4] = n[4] * v;
                h[5] = n[5] * v;
                return h
            },
            multiplyScalarAndAdd: function(h, n, v, z) {
                h[0] = n[0] + v[0] * z;
                h[1] = n[1] + v[1] * z;
                h[2] = n[2] + v[2] * z;
                h[3] = n[3] + v[3] * z;
                h[4] = n[4] + v[4] * z;
                h[5] = n[5] + v[5] * z;
                return h
            },
            exactEquals: function(h, n) {
                return h[0] === n[0] && h[1] === n[1] && h[2] === n[2] && h[3] === n[3] && h[4] === n[4] && h[5] === n[5]
            },
            equals: function(h, n) {
                var v =
                    h[0],
                    z = h[1],
                    D = h[2],
                    E = h[3],
                    I = h[4];
                h = h[5];
                var K = n[0],
                    O = n[1],
                    Q = n[2],
                    S = n[3],
                    T = n[4];
                n = n[5];
                return Math.abs(v - K) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(K)) && Math.abs(z - O) <= 1E-6 * Math.max(1, Math.abs(z), Math.abs(O)) && Math.abs(D - Q) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(Q)) && Math.abs(E - S) <= 1E-6 * Math.max(1, Math.abs(E), Math.abs(S)) && Math.abs(I - T) <= 1E-6 * Math.max(1, Math.abs(I), Math.abs(T)) && Math.abs(h - n) <= 1E-6 * Math.max(1, Math.abs(h), Math.abs(n))
            },
            mul: d,
            sub: c
        }),
        Fb = Object.freeze({
            __proto__: null,
            create: f,
            fromMat4: function(h,
                n) {
                h[0] = n[0];
                h[1] = n[1];
                h[2] = n[2];
                h[3] = n[4];
                h[4] = n[5];
                h[5] = n[6];
                h[6] = n[8];
                h[7] = n[9];
                h[8] = n[10];
                return h
            },
            clone: function(h) {
                var n = new ra(9);
                n[0] = h[0];
                n[1] = h[1];
                n[2] = h[2];
                n[3] = h[3];
                n[4] = h[4];
                n[5] = h[5];
                n[6] = h[6];
                n[7] = h[7];
                n[8] = h[8];
                return n
            },
            copy: function(h, n) {
                h[0] = n[0];
                h[1] = n[1];
                h[2] = n[2];
                h[3] = n[3];
                h[4] = n[4];
                h[5] = n[5];
                h[6] = n[6];
                h[7] = n[7];
                h[8] = n[8];
                return h
            },
            fromValues: function(h, n, v, z, D, E, I, K, O) {
                var Q = new ra(9);
                Q[0] = h;
                Q[1] = n;
                Q[2] = v;
                Q[3] = z;
                Q[4] = D;
                Q[5] = E;
                Q[6] = I;
                Q[7] = K;
                Q[8] = O;
                return Q
            },
            set: function(h, n,
                v, z, D, E, I, K, O, Q) {
                h[0] = n;
                h[1] = v;
                h[2] = z;
                h[3] = D;
                h[4] = E;
                h[5] = I;
                h[6] = K;
                h[7] = O;
                h[8] = Q;
                return h
            },
            identity: function(h) {
                h[0] = 1;
                h[1] = 0;
                h[2] = 0;
                h[3] = 0;
                h[4] = 1;
                h[5] = 0;
                h[6] = 0;
                h[7] = 0;
                h[8] = 1;
                return h
            },
            transpose: function(h, n) {
                if (h === n) {
                    var v = n[1],
                        z = n[2],
                        D = n[5];
                    h[1] = n[3];
                    h[2] = n[6];
                    h[3] = v;
                    h[5] = n[7];
                    h[6] = z;
                    h[7] = D
                } else h[0] = n[0], h[1] = n[3], h[2] = n[6], h[3] = n[1], h[4] = n[4], h[5] = n[7], h[6] = n[2], h[7] = n[5], h[8] = n[8];
                return h
            },
            invert: function(h, n) {
                var v = n[0],
                    z = n[1],
                    D = n[2],
                    E = n[3],
                    I = n[4],
                    K = n[5],
                    O = n[6],
                    Q = n[7];
                n = n[8];
                var S = n * I - K * Q,
                    T = -n * E + K * O,
                    Y = Q * E - I * O,
                    X = v * S + z * T + D * Y;
                if (!X) return null;
                X = 1 / X;
                h[0] = S * X;
                h[1] = (-n * z + D * Q) * X;
                h[2] = (K * z - D * I) * X;
                h[3] = T * X;
                h[4] = (n * v - D * O) * X;
                h[5] = (-K * v + D * E) * X;
                h[6] = Y * X;
                h[7] = (-Q * v + z * O) * X;
                h[8] = (I * v - z * E) * X;
                return h
            },
            adjoint: function(h, n) {
                var v = n[0],
                    z = n[1],
                    D = n[2],
                    E = n[3],
                    I = n[4],
                    K = n[5],
                    O = n[6],
                    Q = n[7];
                n = n[8];
                h[0] = I * n - K * Q;
                h[1] = D * Q - z * n;
                h[2] = z * K - D * I;
                h[3] = K * O - E * n;
                h[4] = v * n - D * O;
                h[5] = D * E - v * K;
                h[6] = E * Q - I * O;
                h[7] = z * O - v * Q;
                h[8] = v * I - z * E;
                return h
            },
            determinant: function(h) {
                var n = h[3],
                    v = h[4],
                    z = h[5],
                    D = h[6],
                    E = h[7],
                    I = h[8];
                return h[0] * (I *
                    v - z * E) + h[1] * (-I * n + z * D) + h[2] * (E * n - v * D)
            },
            multiply: k,
            translate: function(h, n, v) {
                var z = n[0],
                    D = n[1],
                    E = n[2],
                    I = n[3],
                    K = n[4],
                    O = n[5],
                    Q = n[6],
                    S = n[7];
                n = n[8];
                var T = v[0];
                v = v[1];
                h[0] = z;
                h[1] = D;
                h[2] = E;
                h[3] = I;
                h[4] = K;
                h[5] = O;
                h[6] = T * z + v * I + Q;
                h[7] = T * D + v * K + S;
                h[8] = T * E + v * O + n;
                return h
            },
            rotate: function(h, n, v) {
                var z = n[0],
                    D = n[1],
                    E = n[2],
                    I = n[3],
                    K = n[4],
                    O = n[5],
                    Q = n[6],
                    S = n[7];
                n = n[8];
                var T = Math.sin(v);
                v = Math.cos(v);
                h[0] = v * z + T * I;
                h[1] = v * D + T * K;
                h[2] = v * E + T * O;
                h[3] = v * I - T * z;
                h[4] = v * K - T * D;
                h[5] = v * O - T * E;
                h[6] = Q;
                h[7] = S;
                h[8] = n;
                return h
            },
            scale: function(h,
                n, v) {
                var z = v[0];
                v = v[1];
                h[0] = z * n[0];
                h[1] = z * n[1];
                h[2] = z * n[2];
                h[3] = v * n[3];
                h[4] = v * n[4];
                h[5] = v * n[5];
                h[6] = n[6];
                h[7] = n[7];
                h[8] = n[8];
                return h
            },
            fromTranslation: function(h, n) {
                h[0] = 1;
                h[1] = 0;
                h[2] = 0;
                h[3] = 0;
                h[4] = 1;
                h[5] = 0;
                h[6] = n[0];
                h[7] = n[1];
                h[8] = 1;
                return h
            },
            fromRotation: function(h, n) {
                var v = Math.sin(n);
                n = Math.cos(n);
                h[0] = n;
                h[1] = v;
                h[2] = 0;
                h[3] = -v;
                h[4] = n;
                h[5] = 0;
                h[6] = 0;
                h[7] = 0;
                h[8] = 1;
                return h
            },
            fromScaling: function(h, n) {
                h[0] = n[0];
                h[1] = 0;
                h[2] = 0;
                h[3] = 0;
                h[4] = n[1];
                h[5] = 0;
                h[6] = 0;
                h[7] = 0;
                h[8] = 1;
                return h
            },
            fromMat2d: function(h,
                n) {
                h[0] = n[0];
                h[1] = n[1];
                h[2] = 0;
                h[3] = n[2];
                h[4] = n[3];
                h[5] = 0;
                h[6] = n[4];
                h[7] = n[5];
                h[8] = 1;
                return h
            },
            fromQuat: function(h, n) {
                var v = n[0],
                    z = n[1],
                    D = n[2];
                n = n[3];
                var E = v + v,
                    I = z + z,
                    K = D + D;
                v *= E;
                var O = z * E;
                z *= I;
                var Q = D * E,
                    S = D * I;
                D *= K;
                E *= n;
                I *= n;
                n *= K;
                h[0] = 1 - z - D;
                h[3] = O - n;
                h[6] = Q + I;
                h[1] = O + n;
                h[4] = 1 - v - D;
                h[7] = S - E;
                h[2] = Q - I;
                h[5] = S + E;
                h[8] = 1 - v - z;
                return h
            },
            normalFromMat4: function(h, n) {
                var v = n[0],
                    z = n[1],
                    D = n[2],
                    E = n[3],
                    I = n[4],
                    K = n[5],
                    O = n[6],
                    Q = n[7],
                    S = n[8],
                    T = n[9],
                    Y = n[10],
                    X = n[11],
                    ea = n[12],
                    ca = n[13],
                    aa = n[14];
                n = n[15];
                var wa = v * K - z * I,
                    pa = v * O - D *
                    I,
                    ua = v * Q - E * I,
                    va = z * O - D * K,
                    ta = z * Q - E * K,
                    Ga = D * Q - E * O,
                    Ha = S * ca - T * ea,
                    Ia = S * aa - Y * ea;
                S = S * n - X * ea;
                var Ja = T * aa - Y * ca;
                T = T * n - X * ca;
                Y = Y * n - X * aa;
                X = wa * Y - pa * T + ua * Ja + va * S - ta * Ia + Ga * Ha;
                if (!X) return null;
                X = 1 / X;
                h[0] = (K * Y - O * T + Q * Ja) * X;
                h[1] = (O * S - I * Y - Q * Ia) * X;
                h[2] = (I * T - K * S + Q * Ha) * X;
                h[3] = (D * T - z * Y - E * Ja) * X;
                h[4] = (v * Y - D * S + E * Ia) * X;
                h[5] = (z * S - v * T - E * Ha) * X;
                h[6] = (ca * Ga - aa * ta + n * va) * X;
                h[7] = (aa * ua - ea * Ga - n * pa) * X;
                h[8] = (ea * ta - ca * ua + n * wa) * X;
                return h
            },
            projection: function(h, n, v) {
                h[0] = 2 / n;
                h[1] = 0;
                h[2] = 0;
                h[3] = 0;
                h[4] = -2 / v;
                h[5] = 0;
                h[6] = -1;
                h[7] = 1;
                h[8] = 1;
                return h
            },
            str: function(h) {
                return "mat3(" + h[0] + ", " + h[1] + ", " + h[2] + ", " + h[3] + ", " + h[4] + ", " + h[5] + ", " + h[6] + ", " + h[7] + ", " + h[8] + ")"
            },
            frob: function(h) {
                return Math.hypot(h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7], h[8])
            },
            add: function(h, n, v) {
                h[0] = n[0] + v[0];
                h[1] = n[1] + v[1];
                h[2] = n[2] + v[2];
                h[3] = n[3] + v[3];
                h[4] = n[4] + v[4];
                h[5] = n[5] + v[5];
                h[6] = n[6] + v[6];
                h[7] = n[7] + v[7];
                h[8] = n[8] + v[8];
                return h
            },
            subtract: g,
            multiplyScalar: function(h, n, v) {
                h[0] = n[0] * v;
                h[1] = n[1] * v;
                h[2] = n[2] * v;
                h[3] = n[3] * v;
                h[4] = n[4] * v;
                h[5] = n[5] * v;
                h[6] = n[6] * v;
                h[7] = n[7] *
                    v;
                h[8] = n[8] * v;
                return h
            },
            multiplyScalarAndAdd: function(h, n, v, z) {
                h[0] = n[0] + v[0] * z;
                h[1] = n[1] + v[1] * z;
                h[2] = n[2] + v[2] * z;
                h[3] = n[3] + v[3] * z;
                h[4] = n[4] + v[4] * z;
                h[5] = n[5] + v[5] * z;
                h[6] = n[6] + v[6] * z;
                h[7] = n[7] + v[7] * z;
                h[8] = n[8] + v[8] * z;
                return h
            },
            exactEquals: function(h, n) {
                return h[0] === n[0] && h[1] === n[1] && h[2] === n[2] && h[3] === n[3] && h[4] === n[4] && h[5] === n[5] && h[6] === n[6] && h[7] === n[7] && h[8] === n[8]
            },
            equals: function(h, n) {
                var v = h[0],
                    z = h[1],
                    D = h[2],
                    E = h[3],
                    I = h[4],
                    K = h[5],
                    O = h[6],
                    Q = h[7];
                h = h[8];
                var S = n[0],
                    T = n[1],
                    Y = n[2],
                    X = n[3],
                    ea = n[4],
                    ca = n[5],
                    aa = n[6],
                    wa = n[7];
                n = n[8];
                return Math.abs(v - S) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(S)) && Math.abs(z - T) <= 1E-6 * Math.max(1, Math.abs(z), Math.abs(T)) && Math.abs(D - Y) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(Y)) && Math.abs(E - X) <= 1E-6 * Math.max(1, Math.abs(E), Math.abs(X)) && Math.abs(I - ea) <= 1E-6 * Math.max(1, Math.abs(I), Math.abs(ea)) && Math.abs(K - ca) <= 1E-6 * Math.max(1, Math.abs(K), Math.abs(ca)) && Math.abs(O - aa) <= 1E-6 * Math.max(1, Math.abs(O), Math.abs(aa)) && Math.abs(Q - wa) <= 1E-6 * Math.max(1, Math.abs(Q), Math.abs(wa)) &&
                    Math.abs(h - n) <= 1E-6 * Math.max(1, Math.abs(h), Math.abs(n))
            },
            mul: k,
            sub: g
        }),
        Gb = Object.freeze({
            __proto__: null,
            create: function() {
                var h = new ra(16);
                ra != Float32Array && (h[1] = 0, h[2] = 0, h[3] = 0, h[4] = 0, h[6] = 0, h[7] = 0, h[8] = 0, h[9] = 0, h[11] = 0, h[12] = 0, h[13] = 0, h[14] = 0);
                h[0] = 1;
                h[5] = 1;
                h[10] = 1;
                h[15] = 1;
                return h
            },
            clone: function(h) {
                var n = new ra(16);
                n[0] = h[0];
                n[1] = h[1];
                n[2] = h[2];
                n[3] = h[3];
                n[4] = h[4];
                n[5] = h[5];
                n[6] = h[6];
                n[7] = h[7];
                n[8] = h[8];
                n[9] = h[9];
                n[10] = h[10];
                n[11] = h[11];
                n[12] = h[12];
                n[13] = h[13];
                n[14] = h[14];
                n[15] = h[15];
                return n
            },
            copy: function(h, n) {
                h[0] = n[0];
                h[1] = n[1];
                h[2] = n[2];
                h[3] = n[3];
                h[4] = n[4];
                h[5] = n[5];
                h[6] = n[6];
                h[7] = n[7];
                h[8] = n[8];
                h[9] = n[9];
                h[10] = n[10];
                h[11] = n[11];
                h[12] = n[12];
                h[13] = n[13];
                h[14] = n[14];
                h[15] = n[15];
                return h
            },
            fromValues: function(h, n, v, z, D, E, I, K, O, Q, S, T, Y, X, ea, ca) {
                var aa = new ra(16);
                aa[0] = h;
                aa[1] = n;
                aa[2] = v;
                aa[3] = z;
                aa[4] = D;
                aa[5] = E;
                aa[6] = I;
                aa[7] = K;
                aa[8] = O;
                aa[9] = Q;
                aa[10] = S;
                aa[11] = T;
                aa[12] = Y;
                aa[13] = X;
                aa[14] = ea;
                aa[15] = ca;
                return aa
            },
            set: function(h, n, v, z, D, E, I, K, O, Q, S, T, Y, X, ea, ca, aa) {
                h[0] = n;
                h[1] = v;
                h[2] = z;
                h[3] = D;
                h[4] =
                    E;
                h[5] = I;
                h[6] = K;
                h[7] = O;
                h[8] = Q;
                h[9] = S;
                h[10] = T;
                h[11] = Y;
                h[12] = X;
                h[13] = ea;
                h[14] = ca;
                h[15] = aa;
                return h
            },
            identity: l,
            transpose: function(h, n) {
                if (h === n) {
                    var v = n[1],
                        z = n[2],
                        D = n[3],
                        E = n[6],
                        I = n[7],
                        K = n[11];
                    h[1] = n[4];
                    h[2] = n[8];
                    h[3] = n[12];
                    h[4] = v;
                    h[6] = n[9];
                    h[7] = n[13];
                    h[8] = z;
                    h[9] = E;
                    h[11] = n[14];
                    h[12] = D;
                    h[13] = I;
                    h[14] = K
                } else h[0] = n[0], h[1] = n[4], h[2] = n[8], h[3] = n[12], h[4] = n[1], h[5] = n[5], h[6] = n[9], h[7] = n[13], h[8] = n[2], h[9] = n[6], h[10] = n[10], h[11] = n[14], h[12] = n[3], h[13] = n[7], h[14] = n[11], h[15] = n[15];
                return h
            },
            invert: function(h,
                n) {
                var v = n[0],
                    z = n[1],
                    D = n[2],
                    E = n[3],
                    I = n[4],
                    K = n[5],
                    O = n[6],
                    Q = n[7],
                    S = n[8],
                    T = n[9],
                    Y = n[10],
                    X = n[11],
                    ea = n[12],
                    ca = n[13],
                    aa = n[14];
                n = n[15];
                var wa = v * K - z * I,
                    pa = v * O - D * I,
                    ua = v * Q - E * I,
                    va = z * O - D * K,
                    ta = z * Q - E * K,
                    Ga = D * Q - E * O,
                    Ha = S * ca - T * ea,
                    Ia = S * aa - Y * ea,
                    Ja = S * n - X * ea,
                    Oa = T * aa - Y * ca,
                    Va = T * n - X * ca,
                    Wa = Y * n - X * aa,
                    Ba = wa * Wa - pa * Va + ua * Oa + va * Ja - ta * Ia + Ga * Ha;
                if (!Ba) return null;
                Ba = 1 / Ba;
                h[0] = (K * Wa - O * Va + Q * Oa) * Ba;
                h[1] = (D * Va - z * Wa - E * Oa) * Ba;
                h[2] = (ca * Ga - aa * ta + n * va) * Ba;
                h[3] = (Y * ta - T * Ga - X * va) * Ba;
                h[4] = (O * Ja - I * Wa - Q * Ia) * Ba;
                h[5] = (v * Wa - D * Ja + E * Ia) * Ba;
                h[6] = (aa * ua -
                    ea * Ga - n * pa) * Ba;
                h[7] = (S * Ga - Y * ua + X * pa) * Ba;
                h[8] = (I * Va - K * Ja + Q * Ha) * Ba;
                h[9] = (z * Ja - v * Va - E * Ha) * Ba;
                h[10] = (ea * ta - ca * ua + n * wa) * Ba;
                h[11] = (T * ua - S * ta - X * wa) * Ba;
                h[12] = (K * Ia - I * Oa - O * Ha) * Ba;
                h[13] = (v * Oa - z * Ia + D * Ha) * Ba;
                h[14] = (ca * pa - ea * va - aa * wa) * Ba;
                h[15] = (S * va - T * pa + Y * wa) * Ba;
                return h
            },
            adjoint: function(h, n) {
                var v = n[0],
                    z = n[1],
                    D = n[2],
                    E = n[3],
                    I = n[4],
                    K = n[5],
                    O = n[6],
                    Q = n[7],
                    S = n[8],
                    T = n[9],
                    Y = n[10],
                    X = n[11],
                    ea = n[12],
                    ca = n[13],
                    aa = n[14];
                n = n[15];
                h[0] = K * (Y * n - X * aa) - T * (O * n - Q * aa) + ca * (O * X - Q * Y);
                h[1] = -(z * (Y * n - X * aa) - T * (D * n - E * aa) + ca * (D * X - E * Y));
                h[2] =
                    z * (O * n - Q * aa) - K * (D * n - E * aa) + ca * (D * Q - E * O);
                h[3] = -(z * (O * X - Q * Y) - K * (D * X - E * Y) + T * (D * Q - E * O));
                h[4] = -(I * (Y * n - X * aa) - S * (O * n - Q * aa) + ea * (O * X - Q * Y));
                h[5] = v * (Y * n - X * aa) - S * (D * n - E * aa) + ea * (D * X - E * Y);
                h[6] = -(v * (O * n - Q * aa) - I * (D * n - E * aa) + ea * (D * Q - E * O));
                h[7] = v * (O * X - Q * Y) - I * (D * X - E * Y) + S * (D * Q - E * O);
                h[8] = I * (T * n - X * ca) - S * (K * n - Q * ca) + ea * (K * X - Q * T);
                h[9] = -(v * (T * n - X * ca) - S * (z * n - E * ca) + ea * (z * X - E * T));
                h[10] = v * (K * n - Q * ca) - I * (z * n - E * ca) + ea * (z * Q - E * K);
                h[11] = -(v * (K * X - Q * T) - I * (z * X - E * T) + S * (z * Q - E * K));
                h[12] = -(I * (T * aa - Y * ca) - S * (K * aa - O * ca) + ea * (K * Y - O * T));
                h[13] = v *
                    (T * aa - Y * ca) - S * (z * aa - D * ca) + ea * (z * Y - D * T);
                h[14] = -(v * (K * aa - O * ca) - I * (z * aa - D * ca) + ea * (z * O - D * K));
                h[15] = v * (K * Y - O * T) - I * (z * Y - D * T) + S * (z * O - D * K);
                return h
            },
            determinant: function(h) {
                var n = h[0],
                    v = h[1],
                    z = h[2],
                    D = h[3],
                    E = h[4],
                    I = h[5],
                    K = h[6],
                    O = h[7],
                    Q = h[8],
                    S = h[9],
                    T = h[10],
                    Y = h[11],
                    X = h[12],
                    ea = h[13],
                    ca = h[14];
                h = h[15];
                return (n * I - v * E) * (T * h - Y * ca) - (n * K - z * E) * (S * h - Y * ea) + (n * O - D * E) * (S * ca - T * ea) + (v * K - z * I) * (Q * h - Y * X) - (v * O - D * I) * (Q * ca - T * X) + (z * O - D * K) * (Q * ea - S * X)
            },
            multiply: m,
            translate: function(h, n, v) {
                var z = v[0],
                    D = v[1];
                v = v[2];
                if (n === h) h[12] = n[0] *
                    z + n[4] * D + n[8] * v + n[12], h[13] = n[1] * z + n[5] * D + n[9] * v + n[13], h[14] = n[2] * z + n[6] * D + n[10] * v + n[14], h[15] = n[3] * z + n[7] * D + n[11] * v + n[15];
                else {
                    var E = n[0];
                    var I = n[1];
                    var K = n[2];
                    var O = n[3];
                    var Q = n[4];
                    var S = n[5];
                    var T = n[6];
                    var Y = n[7];
                    var X = n[8];
                    var ea = n[9];
                    var ca = n[10];
                    var aa = n[11];
                    h[0] = E;
                    h[1] = I;
                    h[2] = K;
                    h[3] = O;
                    h[4] = Q;
                    h[5] = S;
                    h[6] = T;
                    h[7] = Y;
                    h[8] = X;
                    h[9] = ea;
                    h[10] = ca;
                    h[11] = aa;
                    h[12] = E * z + Q * D + X * v + n[12];
                    h[13] = I * z + S * D + ea * v + n[13];
                    h[14] = K * z + T * D + ca * v + n[14];
                    h[15] = O * z + Y * D + aa * v + n[15]
                }
                return h
            },
            scale: function(h, n, v) {
                var z = v[0],
                    D = v[1];
                v = v[2];
                h[0] = n[0] * z;
                h[1] = n[1] * z;
                h[2] = n[2] * z;
                h[3] = n[3] * z;
                h[4] = n[4] * D;
                h[5] = n[5] * D;
                h[6] = n[6] * D;
                h[7] = n[7] * D;
                h[8] = n[8] * v;
                h[9] = n[9] * v;
                h[10] = n[10] * v;
                h[11] = n[11] * v;
                h[12] = n[12];
                h[13] = n[13];
                h[14] = n[14];
                h[15] = n[15];
                return h
            },
            rotate: function(h, n, v, z) {
                var D = z[0],
                    E = z[1];
                z = z[2];
                var I = Math.hypot(D, E, z);
                if (1E-6 > I) return null;
                I = 1 / I;
                D *= I;
                E *= I;
                z *= I;
                var K = Math.sin(v);
                var O = Math.cos(v);
                var Q = 1 - O;
                v = n[0];
                I = n[1];
                var S = n[2];
                var T = n[3];
                var Y = n[4];
                var X = n[5];
                var ea = n[6];
                var ca = n[7];
                var aa = n[8];
                var wa = n[9];
                var pa = n[10];
                var ua =
                    n[11];
                var va = D * D * Q + O;
                var ta = E * D * Q + z * K;
                var Ga = z * D * Q - E * K;
                var Ha = D * E * Q - z * K;
                var Ia = E * E * Q + O;
                var Ja = z * E * Q + D * K;
                var Oa = D * z * Q + E * K;
                D = E * z * Q - D * K;
                E = z * z * Q + O;
                h[0] = v * va + Y * ta + aa * Ga;
                h[1] = I * va + X * ta + wa * Ga;
                h[2] = S * va + ea * ta + pa * Ga;
                h[3] = T * va + ca * ta + ua * Ga;
                h[4] = v * Ha + Y * Ia + aa * Ja;
                h[5] = I * Ha + X * Ia + wa * Ja;
                h[6] = S * Ha + ea * Ia + pa * Ja;
                h[7] = T * Ha + ca * Ia + ua * Ja;
                h[8] = v * Oa + Y * D + aa * E;
                h[9] = I * Oa + X * D + wa * E;
                h[10] = S * Oa + ea * D + pa * E;
                h[11] = T * Oa + ca * D + ua * E;
                n !== h && (h[12] = n[12], h[13] = n[13], h[14] = n[14], h[15] = n[15]);
                return h
            },
            rotateX: function(h, n, v) {
                var z = Math.sin(v);
                v = Math.cos(v);
                var D = n[4],
                    E = n[5],
                    I = n[6],
                    K = n[7],
                    O = n[8],
                    Q = n[9],
                    S = n[10],
                    T = n[11];
                n !== h && (h[0] = n[0], h[1] = n[1], h[2] = n[2], h[3] = n[3], h[12] = n[12], h[13] = n[13], h[14] = n[14], h[15] = n[15]);
                h[4] = D * v + O * z;
                h[5] = E * v + Q * z;
                h[6] = I * v + S * z;
                h[7] = K * v + T * z;
                h[8] = O * v - D * z;
                h[9] = Q * v - E * z;
                h[10] = S * v - I * z;
                h[11] = T * v - K * z;
                return h
            },
            rotateY: function(h, n, v) {
                var z = Math.sin(v);
                v = Math.cos(v);
                var D = n[0],
                    E = n[1],
                    I = n[2],
                    K = n[3],
                    O = n[8],
                    Q = n[9],
                    S = n[10],
                    T = n[11];
                n !== h && (h[4] = n[4], h[5] = n[5], h[6] = n[6], h[7] = n[7], h[12] = n[12], h[13] = n[13], h[14] = n[14], h[15] = n[15]);
                h[0] = D * v - O * z;
                h[1] = E * v - Q * z;
                h[2] = I * v - S * z;
                h[3] = K * v - T * z;
                h[8] = D * z + O * v;
                h[9] = E * z + Q * v;
                h[10] = I * z + S * v;
                h[11] = K * z + T * v;
                return h
            },
            rotateZ: function(h, n, v) {
                var z = Math.sin(v);
                v = Math.cos(v);
                var D = n[0],
                    E = n[1],
                    I = n[2],
                    K = n[3],
                    O = n[4],
                    Q = n[5],
                    S = n[6],
                    T = n[7];
                n !== h && (h[8] = n[8], h[9] = n[9], h[10] = n[10], h[11] = n[11], h[12] = n[12], h[13] = n[13], h[14] = n[14], h[15] = n[15]);
                h[0] = D * v + O * z;
                h[1] = E * v + Q * z;
                h[2] = I * v + S * z;
                h[3] = K * v + T * z;
                h[4] = O * v - D * z;
                h[5] = Q * v - E * z;
                h[6] = S * v - I * z;
                h[7] = T * v - K * z;
                return h
            },
            fromTranslation: function(h, n) {
                h[0] = 1;
                h[1] = 0;
                h[2] = 0;
                h[3] =
                    0;
                h[4] = 0;
                h[5] = 1;
                h[6] = 0;
                h[7] = 0;
                h[8] = 0;
                h[9] = 0;
                h[10] = 1;
                h[11] = 0;
                h[12] = n[0];
                h[13] = n[1];
                h[14] = n[2];
                h[15] = 1;
                return h
            },
            fromScaling: function(h, n) {
                h[0] = n[0];
                h[1] = 0;
                h[2] = 0;
                h[3] = 0;
                h[4] = 0;
                h[5] = n[1];
                h[6] = 0;
                h[7] = 0;
                h[8] = 0;
                h[9] = 0;
                h[10] = n[2];
                h[11] = 0;
                h[12] = 0;
                h[13] = 0;
                h[14] = 0;
                h[15] = 1;
                return h
            },
            fromRotation: function(h, n, v) {
                var z = v[0],
                    D = v[1];
                v = v[2];
                var E = Math.hypot(z, D, v);
                if (1E-6 > E) return null;
                E = 1 / E;
                z *= E;
                D *= E;
                v *= E;
                E = Math.sin(n);
                n = Math.cos(n);
                var I = 1 - n;
                h[0] = z * z * I + n;
                h[1] = D * z * I + v * E;
                h[2] = v * z * I - D * E;
                h[3] = 0;
                h[4] = z * D * I - v * E;
                h[5] =
                    D * D * I + n;
                h[6] = v * D * I + z * E;
                h[7] = 0;
                h[8] = z * v * I + D * E;
                h[9] = D * v * I - z * E;
                h[10] = v * v * I + n;
                h[11] = 0;
                h[12] = 0;
                h[13] = 0;
                h[14] = 0;
                h[15] = 1;
                return h
            },
            fromXRotation: function(h, n) {
                var v = Math.sin(n);
                n = Math.cos(n);
                h[0] = 1;
                h[1] = 0;
                h[2] = 0;
                h[3] = 0;
                h[4] = 0;
                h[5] = n;
                h[6] = v;
                h[7] = 0;
                h[8] = 0;
                h[9] = -v;
                h[10] = n;
                h[11] = 0;
                h[12] = 0;
                h[13] = 0;
                h[14] = 0;
                h[15] = 1;
                return h
            },
            fromYRotation: function(h, n) {
                var v = Math.sin(n);
                n = Math.cos(n);
                h[0] = n;
                h[1] = 0;
                h[2] = -v;
                h[3] = 0;
                h[4] = 0;
                h[5] = 1;
                h[6] = 0;
                h[7] = 0;
                h[8] = v;
                h[9] = 0;
                h[10] = n;
                h[11] = 0;
                h[12] = 0;
                h[13] = 0;
                h[14] = 0;
                h[15] = 1;
                return h
            },
            fromZRotation: function(h, n) {
                var v = Math.sin(n);
                n = Math.cos(n);
                h[0] = n;
                h[1] = v;
                h[2] = 0;
                h[3] = 0;
                h[4] = -v;
                h[5] = n;
                h[6] = 0;
                h[7] = 0;
                h[8] = 0;
                h[9] = 0;
                h[10] = 1;
                h[11] = 0;
                h[12] = 0;
                h[13] = 0;
                h[14] = 0;
                h[15] = 1;
                return h
            },
            fromRotationTranslation: u,
            fromQuat2: function(h, n) {
                var v = new ra(3),
                    z = -n[0],
                    D = -n[1],
                    E = -n[2],
                    I = n[3],
                    K = n[4],
                    O = n[5],
                    Q = n[6],
                    S = n[7],
                    T = z * z + D * D + E * E + I * I;
                0 < T ? (v[0] = 2 * (K * I + S * z + O * E - Q * D) / T, v[1] = 2 * (O * I + S * D + Q * z - K * E) / T, v[2] = 2 * (Q * I + S * E + K * D - O * z) / T) : (v[0] = 2 * (K * I + S * z + O * E - Q * D), v[1] = 2 * (O * I + S * D + Q * z - K * E), v[2] = 2 * (Q * I + S * E + K * D - O * z));
                u(h, n,
                    v);
                return h
            },
            getTranslation: x,
            getScaling: p,
            getRotation: r,
            fromRotationTranslationScale: function(h, n, v, z) {
                var D = n[0],
                    E = n[1],
                    I = n[2],
                    K = n[3],
                    O = D + D,
                    Q = E + E,
                    S = I + I;
                n = D * O;
                var T = D * Q;
                D *= S;
                var Y = E * Q;
                E *= S;
                I *= S;
                O *= K;
                Q *= K;
                K *= S;
                S = z[0];
                var X = z[1];
                z = z[2];
                h[0] = (1 - (Y + I)) * S;
                h[1] = (T + K) * S;
                h[2] = (D - Q) * S;
                h[3] = 0;
                h[4] = (T - K) * X;
                h[5] = (1 - (n + I)) * X;
                h[6] = (E + O) * X;
                h[7] = 0;
                h[8] = (D + Q) * z;
                h[9] = (E - O) * z;
                h[10] = (1 - (n + Y)) * z;
                h[11] = 0;
                h[12] = v[0];
                h[13] = v[1];
                h[14] = v[2];
                h[15] = 1;
                return h
            },
            fromRotationTranslationScaleOrigin: function(h, n, v, z, D) {
                var E = n[0],
                    I = n[1],
                    K = n[2],
                    O = n[3],
                    Q = E + E,
                    S = I + I,
                    T = K + K;
                n = E * Q;
                var Y = E * S,
                    X = E * T;
                E = I * S;
                I *= T;
                var ea = K * T;
                K = O * Q;
                S *= O;
                var ca = O * T,
                    aa = z[0],
                    wa = z[1];
                T = z[2];
                z = D[0];
                O = D[1];
                D = D[2];
                Q = (1 - (E + ea)) * aa;
                var pa = (Y + ca) * aa;
                aa *= X - S;
                Y = (Y - ca) * wa;
                ea = (1 - (n + ea)) * wa;
                wa *= I + K;
                X = (X + S) * T;
                I = (I - K) * T;
                n = (1 - (n + E)) * T;
                h[0] = Q;
                h[1] = pa;
                h[2] = aa;
                h[3] = 0;
                h[4] = Y;
                h[5] = ea;
                h[6] = wa;
                h[7] = 0;
                h[8] = X;
                h[9] = I;
                h[10] = n;
                h[11] = 0;
                h[12] = v[0] + z - (Q * z + Y * O + X * D);
                h[13] = v[1] + O - (pa * z + ea * O + I * D);
                h[14] = v[2] + D - (aa * z + wa * O + n * D);
                h[15] = 1;
                return h
            },
            fromQuat: function(h, n) {
                var v = n[0],
                    z = n[1],
                    D = n[2];
                n = n[3];
                var E = v + v,
                    I = z + z,
                    K = D + D;
                v *= E;
                var O = z * E;
                z *= I;
                var Q = D * E,
                    S = D * I;
                D *= K;
                E *= n;
                I *= n;
                n *= K;
                h[0] = 1 - z - D;
                h[1] = O + n;
                h[2] = Q - I;
                h[3] = 0;
                h[4] = O - n;
                h[5] = 1 - v - D;
                h[6] = S + E;
                h[7] = 0;
                h[8] = Q + I;
                h[9] = S - E;
                h[10] = 1 - v - z;
                h[11] = 0;
                h[12] = 0;
                h[13] = 0;
                h[14] = 0;
                h[15] = 1;
                return h
            },
            frustum: function(h, n, v, z, D, E, I) {
                var K = 1 / (v - n),
                    O = 1 / (D - z),
                    Q = 1 / (E - I);
                h[0] = 2 * E * K;
                h[1] = 0;
                h[2] = 0;
                h[3] = 0;
                h[4] = 0;
                h[5] = 2 * E * O;
                h[6] = 0;
                h[7] = 0;
                h[8] = (v + n) * K;
                h[9] = (D + z) * O;
                h[10] = (I + E) * Q;
                h[11] = -1;
                h[12] = 0;
                h[13] = 0;
                h[14] = I * E * 2 * Q;
                h[15] = 0;
                return h
            },
            perspective: function(h, n, v, z, D) {
                n = 1 / Math.tan(n /
                    2);
                h[0] = n / v;
                h[1] = 0;
                h[2] = 0;
                h[3] = 0;
                h[4] = 0;
                h[5] = n;
                h[6] = 0;
                h[7] = 0;
                h[8] = 0;
                h[9] = 0;
                h[11] = -1;
                h[12] = 0;
                h[13] = 0;
                h[15] = 0;
                null != D && Infinity !== D ? (v = 1 / (z - D), h[10] = (D + z) * v, h[14] = 2 * D * z * v) : (h[10] = -1, h[14] = -2 * z);
                return h
            },
            perspectiveFromFieldOfView: function(h, n, v, z) {
                var D = Math.tan(n.upDegrees * Math.PI / 180),
                    E = Math.tan(n.downDegrees * Math.PI / 180),
                    I = Math.tan(n.leftDegrees * Math.PI / 180);
                n = Math.tan(n.rightDegrees * Math.PI / 180);
                var K = 2 / (I + n),
                    O = 2 / (D + E);
                h[0] = K;
                h[1] = 0;
                h[2] = 0;
                h[3] = 0;
                h[4] = 0;
                h[5] = O;
                h[6] = 0;
                h[7] = 0;
                h[8] = -((I - n) * K * .5);
                h[9] = (D - E) * O * .5;
                h[10] = z / (v - z);
                h[11] = -1;
                h[12] = 0;
                h[13] = 0;
                h[14] = z * v / (v - z);
                h[15] = 0;
                return h
            },
            ortho: function(h, n, v, z, D, E, I) {
                var K = 1 / (n - v),
                    O = 1 / (z - D),
                    Q = 1 / (E - I);
                h[0] = -2 * K;
                h[1] = 0;
                h[2] = 0;
                h[3] = 0;
                h[4] = 0;
                h[5] = -2 * O;
                h[6] = 0;
                h[7] = 0;
                h[8] = 0;
                h[9] = 0;
                h[10] = 2 * Q;
                h[11] = 0;
                h[12] = (n + v) * K;
                h[13] = (D + z) * O;
                h[14] = (I + E) * Q;
                h[15] = 1;
                return h
            },
            lookAt: function(h, n, v, z) {
                var D = n[0],
                    E = n[1];
                n = n[2];
                var I = z[0];
                var K = z[1];
                var O = z[2];
                var Q = v[0];
                z = v[1];
                var S = v[2];
                if (1E-6 > Math.abs(D - Q) && 1E-6 > Math.abs(E - z) && 1E-6 > Math.abs(n - S)) return l(h);
                v = D - Q;
                z =
                    E - z;
                Q = n - S;
                var T = 1 / Math.hypot(v, z, Q);
                v *= T;
                z *= T;
                Q *= T;
                S = K * Q - O * z;
                O = O * v - I * Q;
                I = I * z - K * v;
                (T = Math.hypot(S, O, I)) ? (T = 1 / T, S *= T, O *= T, I *= T) : I = O = S = 0;
                K = z * I - Q * O;
                var Y = Q * S - v * I;
                var X = v * O - z * S;
                (T = Math.hypot(K, Y, X)) ? (T = 1 / T, K *= T, Y *= T, X *= T) : X = Y = K = 0;
                h[0] = S;
                h[1] = K;
                h[2] = v;
                h[3] = 0;
                h[4] = O;
                h[5] = Y;
                h[6] = z;
                h[7] = 0;
                h[8] = I;
                h[9] = X;
                h[10] = Q;
                h[11] = 0;
                h[12] = -(S * D + O * E + I * n);
                h[13] = -(K * D + Y * E + X * n);
                h[14] = -(v * D + z * E + Q * n);
                h[15] = 1;
                return h
            },
            targetTo: function(h, n, v, z) {
                var D = n[0],
                    E = n[1];
                n = n[2];
                var I = z[0],
                    K = z[1],
                    O = z[2];
                z = D - v[0];
                var Q = E - v[1];
                v = n - v[2];
                var S =
                    z * z + Q * Q + v * v;
                0 < S && (S = 1 / Math.sqrt(S), z *= S, Q *= S, v *= S);
                var T = K * v - O * Q;
                O = O * z - I * v;
                I = I * Q - K * z;
                S = T * T + O * O + I * I;
                0 < S && (S = 1 / Math.sqrt(S), T *= S, O *= S, I *= S);
                h[0] = T;
                h[1] = O;
                h[2] = I;
                h[3] = 0;
                h[4] = Q * I - v * O;
                h[5] = v * T - z * I;
                h[6] = z * O - Q * T;
                h[7] = 0;
                h[8] = z;
                h[9] = Q;
                h[10] = v;
                h[11] = 0;
                h[12] = D;
                h[13] = E;
                h[14] = n;
                h[15] = 1;
                return h
            },
            str: function(h) {
                return "mat4(" + h[0] + ", " + h[1] + ", " + h[2] + ", " + h[3] + ", " + h[4] + ", " + h[5] + ", " + h[6] + ", " + h[7] + ", " + h[8] + ", " + h[9] + ", " + h[10] + ", " + h[11] + ", " + h[12] + ", " + h[13] + ", " + h[14] + ", " + h[15] + ")"
            },
            frob: function(h) {
                return Math.hypot(h[0],
                    h[1], h[2], h[3], h[4], h[5], h[6], h[7], h[8], h[9], h[10], h[11], h[12], h[13], h[14], h[15])
            },
            add: function(h, n, v) {
                h[0] = n[0] + v[0];
                h[1] = n[1] + v[1];
                h[2] = n[2] + v[2];
                h[3] = n[3] + v[3];
                h[4] = n[4] + v[4];
                h[5] = n[5] + v[5];
                h[6] = n[6] + v[6];
                h[7] = n[7] + v[7];
                h[8] = n[8] + v[8];
                h[9] = n[9] + v[9];
                h[10] = n[10] + v[10];
                h[11] = n[11] + v[11];
                h[12] = n[12] + v[12];
                h[13] = n[13] + v[13];
                h[14] = n[14] + v[14];
                h[15] = n[15] + v[15];
                return h
            },
            subtract: t,
            multiplyScalar: function(h, n, v) {
                h[0] = n[0] * v;
                h[1] = n[1] * v;
                h[2] = n[2] * v;
                h[3] = n[3] * v;
                h[4] = n[4] * v;
                h[5] = n[5] * v;
                h[6] = n[6] * v;
                h[7] =
                    n[7] * v;
                h[8] = n[8] * v;
                h[9] = n[9] * v;
                h[10] = n[10] * v;
                h[11] = n[11] * v;
                h[12] = n[12] * v;
                h[13] = n[13] * v;
                h[14] = n[14] * v;
                h[15] = n[15] * v;
                return h
            },
            multiplyScalarAndAdd: function(h, n, v, z) {
                h[0] = n[0] + v[0] * z;
                h[1] = n[1] + v[1] * z;
                h[2] = n[2] + v[2] * z;
                h[3] = n[3] + v[3] * z;
                h[4] = n[4] + v[4] * z;
                h[5] = n[5] + v[5] * z;
                h[6] = n[6] + v[6] * z;
                h[7] = n[7] + v[7] * z;
                h[8] = n[8] + v[8] * z;
                h[9] = n[9] + v[9] * z;
                h[10] = n[10] + v[10] * z;
                h[11] = n[11] + v[11] * z;
                h[12] = n[12] + v[12] * z;
                h[13] = n[13] + v[13] * z;
                h[14] = n[14] + v[14] * z;
                h[15] = n[15] + v[15] * z;
                return h
            },
            exactEquals: function(h, n) {
                return h[0] ===
                    n[0] && h[1] === n[1] && h[2] === n[2] && h[3] === n[3] && h[4] === n[4] && h[5] === n[5] && h[6] === n[6] && h[7] === n[7] && h[8] === n[8] && h[9] === n[9] && h[10] === n[10] && h[11] === n[11] && h[12] === n[12] && h[13] === n[13] && h[14] === n[14] && h[15] === n[15]
            },
            equals: function(h, n) {
                var v = h[0],
                    z = h[1],
                    D = h[2],
                    E = h[3],
                    I = h[4],
                    K = h[5],
                    O = h[6],
                    Q = h[7],
                    S = h[8],
                    T = h[9],
                    Y = h[10],
                    X = h[11],
                    ea = h[12],
                    ca = h[13],
                    aa = h[14];
                h = h[15];
                var wa = n[0],
                    pa = n[1],
                    ua = n[2],
                    va = n[3],
                    ta = n[4],
                    Ga = n[5],
                    Ha = n[6],
                    Ia = n[7],
                    Ja = n[8],
                    Oa = n[9],
                    Va = n[10],
                    Wa = n[11],
                    Ba = n[12],
                    Bb = n[13],
                    Cb = n[14];
                n = n[15];
                return Math.abs(v -
                    wa) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(wa)) && Math.abs(z - pa) <= 1E-6 * Math.max(1, Math.abs(z), Math.abs(pa)) && Math.abs(D - ua) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(ua)) && Math.abs(E - va) <= 1E-6 * Math.max(1, Math.abs(E), Math.abs(va)) && Math.abs(I - ta) <= 1E-6 * Math.max(1, Math.abs(I), Math.abs(ta)) && Math.abs(K - Ga) <= 1E-6 * Math.max(1, Math.abs(K), Math.abs(Ga)) && Math.abs(O - Ha) <= 1E-6 * Math.max(1, Math.abs(O), Math.abs(Ha)) && Math.abs(Q - Ia) <= 1E-6 * Math.max(1, Math.abs(Q), Math.abs(Ia)) && Math.abs(S - Ja) <= 1E-6 * Math.max(1, Math.abs(S),
                    Math.abs(Ja)) && Math.abs(T - Oa) <= 1E-6 * Math.max(1, Math.abs(T), Math.abs(Oa)) && Math.abs(Y - Va) <= 1E-6 * Math.max(1, Math.abs(Y), Math.abs(Va)) && Math.abs(X - Wa) <= 1E-6 * Math.max(1, Math.abs(X), Math.abs(Wa)) && Math.abs(ea - Ba) <= 1E-6 * Math.max(1, Math.abs(ea), Math.abs(Ba)) && Math.abs(ca - Bb) <= 1E-6 * Math.max(1, Math.abs(ca), Math.abs(Bb)) && Math.abs(aa - Cb) <= 1E-6 * Math.max(1, Math.abs(aa), Math.abs(Cb)) && Math.abs(h - n) <= 1E-6 * Math.max(1, Math.abs(h), Math.abs(n))
            },
            mul: m,
            sub: t
        }),
        hb = function() {
            var h = q();
            return function(n, v, z, D, E, I) {
                v ||
                    (v = 3);
                z || (z = 0);
                for (D = D ? Math.min(D * v + z, n.length) : n.length; z < D; z += v) h[0] = n[z], h[1] = n[z + 1], h[2] = n[z + 2], E(h, h, I), n[z] = h[0], n[z + 1] = h[1], n[z + 2] = h[2];
                return n
            }
        }();
    hb = Object.freeze({
        __proto__: null,
        create: q,
        clone: function(h) {
            var n = new ra(3);
            n[0] = h[0];
            n[1] = h[1];
            n[2] = h[2];
            return n
        },
        length: w,
        fromValues: y,
        copy: function(h, n) {
            h[0] = n[0];
            h[1] = n[1];
            h[2] = n[2];
            return h
        },
        set: function(h, n, v, z) {
            h[0] = n;
            h[1] = v;
            h[2] = z;
            return h
        },
        add: function(h, n, v) {
            h[0] = n[0] + v[0];
            h[1] = n[1] + v[1];
            h[2] = n[2] + v[2];
            return h
        },
        subtract: C,
        multiply: F,
        divide: H,
        ceil: function(h, n) {
            h[0] = Math.ceil(n[0]);
            h[1] = Math.ceil(n[1]);
            h[2] = Math.ceil(n[2]);
            return h
        },
        floor: function(h, n) {
            h[0] = Math.floor(n[0]);
            h[1] = Math.floor(n[1]);
            h[2] = Math.floor(n[2]);
            return h
        },
        min: function(h, n, v) {
            h[0] = Math.min(n[0], v[0]);
            h[1] = Math.min(n[1], v[1]);
            h[2] = Math.min(n[2], v[2]);
            return h
        },
        max: function(h, n, v) {
            h[0] = Math.max(n[0], v[0]);
            h[1] = Math.max(n[1], v[1]);
            h[2] = Math.max(n[2], v[2]);
            return h
        },
        round: function(h, n) {
            h[0] = Math.round(n[0]);
            h[1] = Math.round(n[1]);
            h[2] = Math.round(n[2]);
            return h
        },
        scale: function(h, n, v) {
            h[0] = n[0] * v;
            h[1] = n[1] * v;
            h[2] = n[2] * v;
            return h
        },
        scaleAndAdd: function(h, n, v, z) {
            h[0] = n[0] + v[0] * z;
            h[1] = n[1] + v[1] * z;
            h[2] = n[2] + v[2] * z;
            return h
        },
        distance: M,
        squaredDistance: B,
        squaredLength: A,
        negate: function(h, n) {
            h[0] = -n[0];
            h[1] = -n[1];
            h[2] = -n[2];
            return h
        },
        inverse: function(h, n) {
            h[0] = 1 / n[0];
            h[1] = 1 / n[1];
            h[2] = 1 / n[2];
            return h
        },
        normalize: G,
        dot: J,
        cross: L,
        lerp: function(h, n, v, z) {
            var D = n[0],
                E = n[1];
            n = n[2];
            h[0] = D + z * (v[0] - D);
            h[1] = E + z * (v[1] - E);
            h[2] = n + z * (v[2] - n);
            return h
        },
        hermite: function(h, n, v, z, D,
            E) {
            var I = E * E,
                K = I * (2 * E - 3) + 1,
                O = I * (E - 2) + E,
                Q = I * (E - 1);
            E = I * (3 - 2 * E);
            h[0] = n[0] * K + v[0] * O + z[0] * Q + D[0] * E;
            h[1] = n[1] * K + v[1] * O + z[1] * Q + D[1] * E;
            h[2] = n[2] * K + v[2] * O + z[2] * Q + D[2] * E;
            return h
        },
        bezier: function(h, n, v, z, D, E) {
            var I = 1 - E,
                K = I * I,
                O = E * E,
                Q = K * I;
            K *= 3 * E;
            I *= 3 * O;
            E *= O;
            h[0] = n[0] * Q + v[0] * K + z[0] * I + D[0] * E;
            h[1] = n[1] * Q + v[1] * K + z[1] * I + D[1] * E;
            h[2] = n[2] * Q + v[2] * K + z[2] * I + D[2] * E;
            return h
        },
        random: function(h, n) {
            n = n || 1;
            var v = 2 * Qa() * Math.PI,
                z = 2 * Qa() - 1,
                D = Math.sqrt(1 - z * z) * n;
            h[0] = Math.cos(v) * D;
            h[1] = Math.sin(v) * D;
            h[2] = z * n;
            return h
        },
        transformMat4: function(h,
            n, v) {
            var z = n[0],
                D = n[1];
            n = n[2];
            var E = v[3] * z + v[7] * D + v[11] * n + v[15];
            E = E || 1;
            h[0] = (v[0] * z + v[4] * D + v[8] * n + v[12]) / E;
            h[1] = (v[1] * z + v[5] * D + v[9] * n + v[13]) / E;
            h[2] = (v[2] * z + v[6] * D + v[10] * n + v[14]) / E;
            return h
        },
        transformMat3: function(h, n, v) {
            var z = n[0],
                D = n[1];
            n = n[2];
            h[0] = z * v[0] + D * v[3] + n * v[6];
            h[1] = z * v[1] + D * v[4] + n * v[7];
            h[2] = z * v[2] + D * v[5] + n * v[8];
            return h
        },
        transformQuat: function(h, n, v) {
            var z = v[0],
                D = v[1],
                E = v[2],
                I = n[0],
                K = n[1];
            n = n[2];
            var O = D * n - E * K,
                Q = E * I - z * n,
                S = z * K - D * I;
            v = 2 * v[3];
            h[0] = I + O * v + 2 * (D * S - E * Q);
            h[1] = K + Q * v + 2 * (E * O - z * S);
            h[2] =
                n + S * v + 2 * (z * Q - D * O);
            return h
        },
        rotateX: function(h, n, v, z) {
            var D = [],
                E = [];
            D[0] = n[0] - v[0];
            D[1] = n[1] - v[1];
            D[2] = n[2] - v[2];
            E[0] = D[0];
            E[1] = D[1] * Math.cos(z) - D[2] * Math.sin(z);
            E[2] = D[1] * Math.sin(z) + D[2] * Math.cos(z);
            h[0] = E[0] + v[0];
            h[1] = E[1] + v[1];
            h[2] = E[2] + v[2];
            return h
        },
        rotateY: function(h, n, v, z) {
            var D = [],
                E = [];
            D[0] = n[0] - v[0];
            D[1] = n[1] - v[1];
            D[2] = n[2] - v[2];
            E[0] = D[2] * Math.sin(z) + D[0] * Math.cos(z);
            E[1] = D[1];
            E[2] = D[2] * Math.cos(z) - D[0] * Math.sin(z);
            h[0] = E[0] + v[0];
            h[1] = E[1] + v[1];
            h[2] = E[2] + v[2];
            return h
        },
        rotateZ: function(h,
            n, v, z) {
            var D = [],
                E = [];
            D[0] = n[0] - v[0];
            D[1] = n[1] - v[1];
            D[2] = n[2] - v[2];
            E[0] = D[0] * Math.cos(z) - D[1] * Math.sin(z);
            E[1] = D[0] * Math.sin(z) + D[1] * Math.cos(z);
            E[2] = D[2];
            h[0] = E[0] + v[0];
            h[1] = E[1] + v[1];
            h[2] = E[2] + v[2];
            return h
        },
        angle: function(h, n) {
            var v = h[0],
                z = h[1],
                D = h[2],
                E = n[0],
                I = n[1],
                K = n[2];
            h = (v = Math.sqrt(v * v + z * z + D * D) * Math.sqrt(E * E + I * I + K * K)) && J(h, n) / v;
            return Math.acos(Math.min(Math.max(h, -1), 1))
        },
        zero: function(h) {
            h[0] = 0;
            h[1] = 0;
            h[2] = 0;
            return h
        },
        str: function(h) {
            return "vec3(" + h[0] + ", " + h[1] + ", " + h[2] + ")"
        },
        exactEquals: function(h,
            n) {
            return h[0] === n[0] && h[1] === n[1] && h[2] === n[2]
        },
        equals: function(h, n) {
            var v = h[0],
                z = h[1];
            h = h[2];
            var D = n[0],
                E = n[1];
            n = n[2];
            return Math.abs(v - D) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(D)) && Math.abs(z - E) <= 1E-6 * Math.max(1, Math.abs(z), Math.abs(E)) && Math.abs(h - n) <= 1E-6 * Math.max(1, Math.abs(h), Math.abs(n))
        },
        sub: C,
        mul: F,
        div: H,
        dist: M,
        sqrDist: B,
        len: w,
        sqrLen: A,
        forEach: hb
    });
    var ib = function() {
        var h = R();
        return function(n, v, z, D, E, I) {
            v || (v = 4);
            z || (z = 0);
            for (D = D ? Math.min(D * v + z, n.length) : n.length; z < D; z += v) h[0] = n[z], h[1] =
                n[z + 1], h[2] = n[z + 2], h[3] = n[z + 3], E(h, h, I), n[z] = h[0], n[z + 1] = h[1], n[z + 2] = h[2], n[z + 3] = h[3];
            return n
        }
    }();
    ib = Object.freeze({
        __proto__: null,
        create: R,
        clone: U,
        fromValues: V,
        copy: ba,
        set: ia,
        add: ja,
        subtract: qa,
        multiply: za,
        divide: Ca,
        ceil: function(h, n) {
            h[0] = Math.ceil(n[0]);
            h[1] = Math.ceil(n[1]);
            h[2] = Math.ceil(n[2]);
            h[3] = Math.ceil(n[3]);
            return h
        },
        floor: function(h, n) {
            h[0] = Math.floor(n[0]);
            h[1] = Math.floor(n[1]);
            h[2] = Math.floor(n[2]);
            h[3] = Math.floor(n[3]);
            return h
        },
        min: function(h, n, v) {
            h[0] = Math.min(n[0], v[0]);
            h[1] = Math.min(n[1],
                v[1]);
            h[2] = Math.min(n[2], v[2]);
            h[3] = Math.min(n[3], v[3]);
            return h
        },
        max: function(h, n, v) {
            h[0] = Math.max(n[0], v[0]);
            h[1] = Math.max(n[1], v[1]);
            h[2] = Math.max(n[2], v[2]);
            h[3] = Math.max(n[3], v[3]);
            return h
        },
        round: function(h, n) {
            h[0] = Math.round(n[0]);
            h[1] = Math.round(n[1]);
            h[2] = Math.round(n[2]);
            h[3] = Math.round(n[3]);
            return h
        },
        scale: Ma,
        scaleAndAdd: function(h, n, v, z) {
            h[0] = n[0] + v[0] * z;
            h[1] = n[1] + v[1] * z;
            h[2] = n[2] + v[2] * z;
            h[3] = n[3] + v[3] * z;
            return h
        },
        distance: Fa,
        squaredDistance: La,
        length: na,
        squaredLength: Sa,
        negate: function(h,
            n) {
            h[0] = -n[0];
            h[1] = -n[1];
            h[2] = -n[2];
            h[3] = -n[3];
            return h
        },
        inverse: function(h, n) {
            h[0] = 1 / n[0];
            h[1] = 1 / n[1];
            h[2] = 1 / n[2];
            h[3] = 1 / n[3];
            return h
        },
        normalize: Aa,
        dot: Na,
        cross: function(h, n, v, z) {
            var D = v[0] * z[1] - v[1] * z[0],
                E = v[0] * z[2] - v[2] * z[0],
                I = v[0] * z[3] - v[3] * z[0],
                K = v[1] * z[2] - v[2] * z[1],
                O = v[1] * z[3] - v[3] * z[1];
            v = v[2] * z[3] - v[3] * z[2];
            z = n[0];
            var Q = n[1],
                S = n[2];
            n = n[3];
            h[0] = Q * v - S * O + n * K;
            h[1] = -(z * v) + S * I - n * E;
            h[2] = z * O - Q * I + n * D;
            h[3] = -(z * K) + Q * E - S * D;
            return h
        },
        lerp: lb,
        random: function(h, n) {
            n = n || 1;
            do {
                var v = 2 * Qa() - 1;
                var z = 2 * Qa() - 1;
                var D = v * v + z * z
            } while (1 <= D);
            do {
                var E = 2 * Qa() - 1;
                var I = 2 * Qa() - 1;
                var K = E * E + I * I
            } while (1 <= K);
            D = Math.sqrt((1 - D) / K);
            h[0] = n * v;
            h[1] = n * z;
            h[2] = n * E * D;
            h[3] = n * I * D;
            return h
        },
        transformMat4: function(h, n, v) {
            var z = n[0],
                D = n[1],
                E = n[2];
            n = n[3];
            h[0] = v[0] * z + v[4] * D + v[8] * E + v[12] * n;
            h[1] = v[1] * z + v[5] * D + v[9] * E + v[13] * n;
            h[2] = v[2] * z + v[6] * D + v[10] * E + v[14] * n;
            h[3] = v[3] * z + v[7] * D + v[11] * E + v[15] * n;
            return h
        },
        transformQuat: function(h, n, v) {
            var z = n[0],
                D = n[1],
                E = n[2],
                I = v[0],
                K = v[1],
                O = v[2];
            v = v[3];
            var Q = v * z + K * E - O * D,
                S = v * D + O * z - I * E,
                T = v * E + I * D - K * z;
            z = -I * z -
                K * D - O * E;
            h[0] = Q * v + z * -I + S * -O - T * -K;
            h[1] = S * v + z * -K + T * -I - Q * -O;
            h[2] = T * v + z * -O + Q * -K - S * -I;
            h[3] = n[3];
            return h
        },
        zero: function(h) {
            h[0] = 0;
            h[1] = 0;
            h[2] = 0;
            h[3] = 0;
            return h
        },
        str: function(h) {
            return "vec4(" + h[0] + ", " + h[1] + ", " + h[2] + ", " + h[3] + ")"
        },
        exactEquals: mb,
        equals: nb,
        sub: qa,
        mul: za,
        div: Ca,
        dist: Fa,
        sqrDist: La,
        len: na,
        sqrLen: Sa,
        forEach: ib
    });
    var jb = function() {
            var h = q(),
                n = y(1, 0, 0),
                v = y(0, 1, 0);
            return function(z, D, E) {
                var I = J(D, E);
                if (-.999999 > I) return L(h, n, D), 1E-6 > w(h) && L(h, v, D), G(h, h), ob(z, h, Math.PI), z;
                if (.999999 < I) return z[0] =
                    0, z[1] = 0, z[2] = 0, z[3] = 1, z;
                L(h, D, E);
                z[0] = h[0];
                z[1] = h[1];
                z[2] = h[2];
                z[3] = 1 + I;
                return Aa(z, z)
            }
        }(),
        kb = function() {
            var h = ab(),
                n = ab();
            return function(v, z, D, E, I, K) {
                bb(h, z, I, K);
                bb(n, D, E, K);
                bb(v, h, n, 2 * K * (1 - K));
                return v
            }
        }(),
        Za = function() {
            var h = f();
            return function(n, v, z, D) {
                h[0] = z[0];
                h[3] = z[1];
                h[6] = z[2];
                h[1] = D[0];
                h[4] = D[1];
                h[7] = D[2];
                h[2] = -v[0];
                h[5] = -v[1];
                h[8] = -v[2];
                return Aa(n, vb(n, h))
            }
        }();
    jb = Object.freeze({
        __proto__: null,
        create: ab,
        identity: function(h) {
            h[0] = 0;
            h[1] = 0;
            h[2] = 0;
            h[3] = 1;
            return h
        },
        setAxisAngle: ob,
        getAxisAngle: function(h,
            n) {
            var v = 2 * Math.acos(n[3]),
                z = Math.sin(v / 2);
            1E-6 < z ? (h[0] = n[0] / z, h[1] = n[1] / z, h[2] = n[2] / z) : (h[0] = 1, h[1] = 0, h[2] = 0);
            return v
        },
        getAngle: function(h, n) {
            h = Na(h, n);
            return Math.acos(2 * h * h - 1)
        },
        multiply: pb,
        rotateX: qb,
        rotateY: rb,
        rotateZ: sb,
        calculateW: function(h, n) {
            var v = n[0],
                z = n[1];
            n = n[2];
            h[0] = v;
            h[1] = z;
            h[2] = n;
            h[3] = Math.sqrt(Math.abs(1 - v * v - z * z - n * n));
            return h
        },
        exp: tb,
        ln: ub,
        pow: function(h, n, v) {
            ub(h, n);
            Ma(h, h, v);
            tb(h, h);
            return h
        },
        slerp: bb,
        random: function(h) {
            var n = Qa(),
                v = Qa(),
                z = Qa(),
                D = Math.sqrt(1 - n);
            n = Math.sqrt(n);
            h[0] = D * Math.sin(2 * Math.PI * v);
            h[1] = D * Math.cos(2 * Math.PI * v);
            h[2] = n * Math.sin(2 * Math.PI * z);
            h[3] = n * Math.cos(2 * Math.PI * z);
            return h
        },
        invert: function(h, n) {
            var v = n[0],
                z = n[1],
                D = n[2];
            n = n[3];
            var E = v * v + z * z + D * D + n * n;
            E = E ? 1 / E : 0;
            h[0] = -v * E;
            h[1] = -z * E;
            h[2] = -D * E;
            h[3] = n * E;
            return h
        },
        conjugate: function(h, n) {
            h[0] = -n[0];
            h[1] = -n[1];
            h[2] = -n[2];
            h[3] = n[3];
            return h
        },
        fromMat3: vb,
        fromEuler: function(h, n, v, z) {
            var D = .5 * Math.PI / 180;
            n *= D;
            v *= D;
            z *= D;
            D = Math.sin(n);
            n = Math.cos(n);
            var E = Math.sin(v);
            v = Math.cos(v);
            var I = Math.sin(z);
            z = Math.cos(z);
            h[0] = D * v * z - n * E * I;
            h[1] = n * E * z + D * v * I;
            h[2] = n * v * I - D * E * z;
            h[3] = n * v * z + D * E * I;
            return h
        },
        str: function(h) {
            return "quat(" + h[0] + ", " + h[1] + ", " + h[2] + ", " + h[3] + ")"
        },
        clone: U,
        fromValues: V,
        copy: ba,
        set: ia,
        add: ja,
        mul: pb,
        scale: Ma,
        dot: Na,
        lerp: lb,
        length: na,
        len: na,
        squaredLength: Sa,
        sqrLen: Sa,
        normalize: Aa,
        exactEquals: mb,
        equals: nb,
        rotationTo: jb,
        sqlerp: kb,
        setAxes: Za
    });
    kb = Object.freeze({
        __proto__: null,
        create: function() {
            var h = new ra(8);
            ra != Float32Array && (h[0] = 0, h[1] = 0, h[2] = 0, h[4] = 0, h[5] = 0, h[6] = 0, h[7] = 0);
            h[3] = 1;
            return h
        },
        clone: function(h) {
            var n =
                new ra(8);
            n[0] = h[0];
            n[1] = h[1];
            n[2] = h[2];
            n[3] = h[3];
            n[4] = h[4];
            n[5] = h[5];
            n[6] = h[6];
            n[7] = h[7];
            return n
        },
        fromValues: function(h, n, v, z, D, E, I, K) {
            var O = new ra(8);
            O[0] = h;
            O[1] = n;
            O[2] = v;
            O[3] = z;
            O[4] = D;
            O[5] = E;
            O[6] = I;
            O[7] = K;
            return O
        },
        fromRotationTranslationValues: function(h, n, v, z, D, E, I) {
            var K = new ra(8);
            K[0] = h;
            K[1] = n;
            K[2] = v;
            K[3] = z;
            D *= .5;
            E *= .5;
            I *= .5;
            K[4] = D * z + E * v - I * n;
            K[5] = E * z + I * h - D * v;
            K[6] = I * z + D * n - E * h;
            K[7] = -D * h - E * n - I * v;
            return K
        },
        fromRotationTranslation: wb,
        fromTranslation: function(h, n) {
            h[0] = 0;
            h[1] = 0;
            h[2] = 0;
            h[3] = 1;
            h[4] =
                .5 * n[0];
            h[5] = .5 * n[1];
            h[6] = .5 * n[2];
            h[7] = 0;
            return h
        },
        fromRotation: function(h, n) {
            h[0] = n[0];
            h[1] = n[1];
            h[2] = n[2];
            h[3] = n[3];
            h[4] = 0;
            h[5] = 0;
            h[6] = 0;
            h[7] = 0;
            return h
        },
        fromMat4: function(h, n) {
            var v = ab();
            r(v, n);
            var z = new ra(3);
            x(z, n);
            wb(h, v, z);
            return h
        },
        copy: xb,
        identity: function(h) {
            h[0] = 0;
            h[1] = 0;
            h[2] = 0;
            h[3] = 1;
            h[4] = 0;
            h[5] = 0;
            h[6] = 0;
            h[7] = 0;
            return h
        },
        set: function(h, n, v, z, D, E, I, K, O) {
            h[0] = n;
            h[1] = v;
            h[2] = z;
            h[3] = D;
            h[4] = E;
            h[5] = I;
            h[6] = K;
            h[7] = O;
            return h
        },
        getReal: ba,
        getDual: function(h, n) {
            h[0] = n[4];
            h[1] = n[5];
            h[2] = n[6];
            h[3] =
                n[7];
            return h
        },
        setReal: ba,
        setDual: function(h, n) {
            h[4] = n[0];
            h[5] = n[1];
            h[6] = n[2];
            h[7] = n[3];
            return h
        },
        getTranslation: function(h, n) {
            var v = n[4],
                z = n[5],
                D = n[6],
                E = n[7],
                I = -n[0],
                K = -n[1],
                O = -n[2];
            n = n[3];
            h[0] = 2 * (v * n + E * I + z * O - D * K);
            h[1] = 2 * (z * n + E * K + D * I - v * O);
            h[2] = 2 * (D * n + E * O + v * K - z * I);
            return h
        },
        translate: function(h, n, v) {
            var z = n[0],
                D = n[1],
                E = n[2],
                I = n[3],
                K = .5 * v[0],
                O = .5 * v[1];
            v = .5 * v[2];
            var Q = n[4],
                S = n[5],
                T = n[6];
            n = n[7];
            h[0] = z;
            h[1] = D;
            h[2] = E;
            h[3] = I;
            h[4] = I * K + D * v - E * O + Q;
            h[5] = I * O + E * K - z * v + S;
            h[6] = I * v + z * O - D * K + T;
            h[7] = -z * K - D * O - E * v + n;
            return h
        },
        rotateX: function(h, n, v) {
            var z = -n[0],
                D = -n[1],
                E = -n[2],
                I = n[3],
                K = n[4],
                O = n[5],
                Q = n[6],
                S = n[7],
                T = K * I + S * z + O * E - Q * D,
                Y = O * I + S * D + Q * z - K * E,
                X = Q * I + S * E + K * D - O * z;
            K = S * I - K * z - O * D - Q * E;
            qb(h, n, v);
            z = h[0];
            D = h[1];
            E = h[2];
            I = h[3];
            h[4] = T * I + K * z + Y * E - X * D;
            h[5] = Y * I + K * D + X * z - T * E;
            h[6] = X * I + K * E + T * D - Y * z;
            h[7] = K * I - T * z - Y * D - X * E;
            return h
        },
        rotateY: function(h, n, v) {
            var z = -n[0],
                D = -n[1],
                E = -n[2],
                I = n[3],
                K = n[4],
                O = n[5],
                Q = n[6],
                S = n[7],
                T = K * I + S * z + O * E - Q * D,
                Y = O * I + S * D + Q * z - K * E,
                X = Q * I + S * E + K * D - O * z;
            K = S * I - K * z - O * D - Q * E;
            rb(h, n, v);
            z = h[0];
            D = h[1];
            E = h[2];
            I = h[3];
            h[4] = T * I + K * z +
                Y * E - X * D;
            h[5] = Y * I + K * D + X * z - T * E;
            h[6] = X * I + K * E + T * D - Y * z;
            h[7] = K * I - T * z - Y * D - X * E;
            return h
        },
        rotateZ: function(h, n, v) {
            var z = -n[0],
                D = -n[1],
                E = -n[2],
                I = n[3],
                K = n[4],
                O = n[5],
                Q = n[6],
                S = n[7],
                T = K * I + S * z + O * E - Q * D,
                Y = O * I + S * D + Q * z - K * E,
                X = Q * I + S * E + K * D - O * z;
            K = S * I - K * z - O * D - Q * E;
            sb(h, n, v);
            z = h[0];
            D = h[1];
            E = h[2];
            I = h[3];
            h[4] = T * I + K * z + Y * E - X * D;
            h[5] = Y * I + K * D + X * z - T * E;
            h[6] = X * I + K * E + T * D - Y * z;
            h[7] = K * I - T * z - Y * D - X * E;
            return h
        },
        rotateByQuatAppend: function(h, n, v) {
            var z = v[0],
                D = v[1],
                E = v[2];
            v = v[3];
            var I = n[0],
                K = n[1],
                O = n[2],
                Q = n[3];
            h[0] = I * v + Q * z + K * E - O * D;
            h[1] = K * v +
                Q * D + O * z - I * E;
            h[2] = O * v + Q * E + I * D - K * z;
            h[3] = Q * v - I * z - K * D - O * E;
            I = n[4];
            K = n[5];
            O = n[6];
            Q = n[7];
            h[4] = I * v + Q * z + K * E - O * D;
            h[5] = K * v + Q * D + O * z - I * E;
            h[6] = O * v + Q * E + I * D - K * z;
            h[7] = Q * v - I * z - K * D - O * E;
            return h
        },
        rotateByQuatPrepend: function(h, n, v) {
            var z = n[0],
                D = n[1],
                E = n[2];
            n = n[3];
            var I = v[0],
                K = v[1],
                O = v[2],
                Q = v[3];
            h[0] = z * Q + n * I + D * O - E * K;
            h[1] = D * Q + n * K + E * I - z * O;
            h[2] = E * Q + n * O + z * K - D * I;
            h[3] = n * Q - z * I - D * K - E * O;
            I = v[4];
            K = v[5];
            O = v[6];
            Q = v[7];
            h[4] = z * Q + n * I + D * O - E * K;
            h[5] = D * Q + n * K + E * I - z * O;
            h[6] = E * Q + n * O + z * K - D * I;
            h[7] = n * Q - z * I - D * K - E * O;
            return h
        },
        rotateAroundAxis: function(h,
            n, v, z) {
            if (1E-6 > Math.abs(z)) return xb(h, n);
            var D = Math.hypot(v[0], v[1], v[2]);
            z *= .5;
            var E = Math.sin(z),
                I = E * v[0] / D,
                K = E * v[1] / D;
            v = E * v[2] / D;
            z = Math.cos(z);
            D = n[0];
            E = n[1];
            var O = n[2],
                Q = n[3];
            h[0] = D * z + Q * I + E * v - O * K;
            h[1] = E * z + Q * K + O * I - D * v;
            h[2] = O * z + Q * v + D * K - E * I;
            h[3] = Q * z - D * I - E * K - O * v;
            D = n[4];
            E = n[5];
            O = n[6];
            n = n[7];
            h[4] = D * z + n * I + E * v - O * K;
            h[5] = E * z + n * K + O * I - D * v;
            h[6] = O * z + n * v + D * K - E * I;
            h[7] = n * z - D * I - E * K - O * v;
            return h
        },
        add: function(h, n, v) {
            h[0] = n[0] + v[0];
            h[1] = n[1] + v[1];
            h[2] = n[2] + v[2];
            h[3] = n[3] + v[3];
            h[4] = n[4] + v[4];
            h[5] = n[5] + v[5];
            h[6] = n[6] +
                v[6];
            h[7] = n[7] + v[7];
            return h
        },
        multiply: yb,
        mul: yb,
        scale: function(h, n, v) {
            h[0] = n[0] * v;
            h[1] = n[1] * v;
            h[2] = n[2] * v;
            h[3] = n[3] * v;
            h[4] = n[4] * v;
            h[5] = n[5] * v;
            h[6] = n[6] * v;
            h[7] = n[7] * v;
            return h
        },
        dot: Na,
        lerp: function(h, n, v, z) {
            var D = 1 - z;
            0 > Na(n, v) && (z = -z);
            h[0] = n[0] * D + v[0] * z;
            h[1] = n[1] * D + v[1] * z;
            h[2] = n[2] * D + v[2] * z;
            h[3] = n[3] * D + v[3] * z;
            h[4] = n[4] * D + v[4] * z;
            h[5] = n[5] * D + v[5] * z;
            h[6] = n[6] * D + v[6] * z;
            h[7] = n[7] * D + v[7] * z;
            return h
        },
        invert: function(h, n) {
            var v = Sa(n);
            h[0] = -n[0] / v;
            h[1] = -n[1] / v;
            h[2] = -n[2] / v;
            h[3] = n[3] / v;
            h[4] = -n[4] / v;
            h[5] = -n[5] /
                v;
            h[6] = -n[6] / v;
            h[7] = n[7] / v;
            return h
        },
        conjugate: function(h, n) {
            h[0] = -n[0];
            h[1] = -n[1];
            h[2] = -n[2];
            h[3] = n[3];
            h[4] = -n[4];
            h[5] = -n[5];
            h[6] = -n[6];
            h[7] = n[7];
            return h
        },
        length: na,
        len: na,
        squaredLength: Sa,
        sqrLen: Sa,
        normalize: function(h, n) {
            var v = Sa(n);
            if (0 < v) {
                v = Math.sqrt(v);
                var z = n[0] / v,
                    D = n[1] / v,
                    E = n[2] / v,
                    I = n[3] / v,
                    K = n[4],
                    O = n[5],
                    Q = n[6];
                n = n[7];
                var S = z * K + D * O + E * Q + I * n;
                h[0] = z;
                h[1] = D;
                h[2] = E;
                h[3] = I;
                h[4] = (K - z * S) / v;
                h[5] = (O - D * S) / v;
                h[6] = (Q - E * S) / v;
                h[7] = (n - I * S) / v
            }
            return h
        },
        str: function(h) {
            return "quat2(" + h[0] + ", " + h[1] + ", " + h[2] +
                ", " + h[3] + ", " + h[4] + ", " + h[5] + ", " + h[6] + ", " + h[7] + ")"
        },
        exactEquals: function(h, n) {
            return h[0] === n[0] && h[1] === n[1] && h[2] === n[2] && h[3] === n[3] && h[4] === n[4] && h[5] === n[5] && h[6] === n[6] && h[7] === n[7]
        },
        equals: function(h, n) {
            var v = h[0],
                z = h[1],
                D = h[2],
                E = h[3],
                I = h[4],
                K = h[5],
                O = h[6];
            h = h[7];
            var Q = n[0],
                S = n[1],
                T = n[2],
                Y = n[3],
                X = n[4],
                ea = n[5],
                ca = n[6];
            n = n[7];
            return Math.abs(v - Q) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(Q)) && Math.abs(z - S) <= 1E-6 * Math.max(1, Math.abs(z), Math.abs(S)) && Math.abs(D - T) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(T)) &&
                Math.abs(E - Y) <= 1E-6 * Math.max(1, Math.abs(E), Math.abs(Y)) && Math.abs(I - X) <= 1E-6 * Math.max(1, Math.abs(I), Math.abs(X)) && Math.abs(K - ea) <= 1E-6 * Math.max(1, Math.abs(K), Math.abs(ea)) && Math.abs(O - ca) <= 1E-6 * Math.max(1, Math.abs(O), Math.abs(ca)) && Math.abs(h - n) <= 1E-6 * Math.max(1, Math.abs(h), Math.abs(n))
        }
    });
    Za = function() {
        var h = cb();
        return function(n, v, z, D, E, I) {
            v || (v = 2);
            z || (z = 0);
            for (D = D ? Math.min(D * v + z, n.length) : n.length; z < D; z += v) h[0] = n[z], h[1] = n[z + 1], E(h, h, I), n[z] = h[0], n[z + 1] = h[1];
            return n
        }
    }();
    Za = Object.freeze({
        __proto__: null,
        create: cb,
        clone: function(h) {
            var n = new ra(2);
            n[0] = h[0];
            n[1] = h[1];
            return n
        },
        fromValues: function(h, n) {
            var v = new ra(2);
            v[0] = h;
            v[1] = n;
            return v
        },
        copy: function(h, n) {
            h[0] = n[0];
            h[1] = n[1];
            return h
        },
        set: function(h, n, v) {
            h[0] = n;
            h[1] = v;
            return h
        },
        add: function(h, n, v) {
            h[0] = n[0] + v[0];
            h[1] = n[1] + v[1];
            return h
        },
        subtract: Xa,
        multiply: db,
        divide: eb,
        ceil: function(h, n) {
            h[0] = Math.ceil(n[0]);
            h[1] = Math.ceil(n[1]);
            return h
        },
        floor: function(h, n) {
            h[0] = Math.floor(n[0]);
            h[1] = Math.floor(n[1]);
            return h
        },
        min: function(h, n, v) {
            h[0] = Math.min(n[0],
                v[0]);
            h[1] = Math.min(n[1], v[1]);
            return h
        },
        max: function(h, n, v) {
            h[0] = Math.max(n[0], v[0]);
            h[1] = Math.max(n[1], v[1]);
            return h
        },
        round: function(h, n) {
            h[0] = Math.round(n[0]);
            h[1] = Math.round(n[1]);
            return h
        },
        scale: function(h, n, v) {
            h[0] = n[0] * v;
            h[1] = n[1] * v;
            return h
        },
        scaleAndAdd: function(h, n, v, z) {
            h[0] = n[0] + v[0] * z;
            h[1] = n[1] + v[1] * z;
            return h
        },
        distance: Ya,
        squaredDistance: fb,
        length: Ta,
        squaredLength: gb,
        negate: function(h, n) {
            h[0] = -n[0];
            h[1] = -n[1];
            return h
        },
        inverse: function(h, n) {
            h[0] = 1 / n[0];
            h[1] = 1 / n[1];
            return h
        },
        normalize: function(h,
            n) {
            var v = n[0],
                z = n[1];
            v = v * v + z * z;
            0 < v && (v = 1 / Math.sqrt(v));
            h[0] = n[0] * v;
            h[1] = n[1] * v;
            return h
        },
        dot: function(h, n) {
            return h[0] * n[0] + h[1] * n[1]
        },
        cross: function(h, n, v) {
            n = n[0] * v[1] - n[1] * v[0];
            h[0] = h[1] = 0;
            h[2] = n;
            return h
        },
        lerp: function(h, n, v, z) {
            var D = n[0];
            n = n[1];
            h[0] = D + z * (v[0] - D);
            h[1] = n + z * (v[1] - n);
            return h
        },
        random: function(h, n) {
            n = n || 1;
            var v = 2 * Qa() * Math.PI;
            h[0] = Math.cos(v) * n;
            h[1] = Math.sin(v) * n;
            return h
        },
        transformMat2: function(h, n, v) {
            var z = n[0];
            n = n[1];
            h[0] = v[0] * z + v[2] * n;
            h[1] = v[1] * z + v[3] * n;
            return h
        },
        transformMat2d: function(h,
            n, v) {
            var z = n[0];
            n = n[1];
            h[0] = v[0] * z + v[2] * n + v[4];
            h[1] = v[1] * z + v[3] * n + v[5];
            return h
        },
        transformMat3: function(h, n, v) {
            var z = n[0];
            n = n[1];
            h[0] = v[0] * z + v[3] * n + v[6];
            h[1] = v[1] * z + v[4] * n + v[7];
            return h
        },
        transformMat4: function(h, n, v) {
            var z = n[0];
            n = n[1];
            h[0] = v[0] * z + v[4] * n + v[12];
            h[1] = v[1] * z + v[5] * n + v[13];
            return h
        },
        rotate: function(h, n, v, z) {
            var D = n[0] - v[0];
            n = n[1] - v[1];
            var E = Math.sin(z);
            z = Math.cos(z);
            h[0] = D * z - n * E + v[0];
            h[1] = D * E + n * z + v[1];
            return h
        },
        angle: function(h, n) {
            var v = h[0];
            h = h[1];
            var z = n[0];
            n = n[1];
            var D = Math.sqrt(v * v +
                h * h) * Math.sqrt(z * z + n * n);
            return Math.acos(Math.min(Math.max(D && (v * z + h * n) / D, -1), 1))
        },
        zero: function(h) {
            h[0] = 0;
            h[1] = 0;
            return h
        },
        str: function(h) {
            return "vec2(" + h[0] + ", " + h[1] + ")"
        },
        exactEquals: function(h, n) {
            return h[0] === n[0] && h[1] === n[1]
        },
        equals: function(h, n) {
            var v = h[0];
            h = h[1];
            var z = n[0];
            n = n[1];
            return Math.abs(v - z) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(z)) && Math.abs(h - n) <= 1E-6 * Math.max(1, Math.abs(h), Math.abs(n))
        },
        len: Ta,
        sub: Xa,
        mul: db,
        div: eb,
        dist: Ya,
        sqrDist: fb,
        sqrLen: gb,
        forEach: Za
    });
    e.glMatrix = Ab;
    e.mat2 =
        Db;
    e.mat2d = Eb;
    e.mat3 = Fb;
    e.mat4 = Gb;
    e.quat = jb;
    e.quat2 = kb;
    e.vec2 = Za;
    e.vec3 = hb;
    e.vec4 = ib;
    Object.defineProperty(e, "__esModule", {
        value: !0
    })
}); {
    "use strict";

    function e(A, G, J) {
        var L = [0, 0];
        var R = A[1][1] - A[0][1];
        var U = A[0][0] - A[1][0];
        A = R * A[0][0] + U * A[0][1];
        var V = G[1][1] - G[0][1];
        var ba = G[0][0] - G[1][0];
        G = V * G[0][0] + ba * G[0][1];
        var ia = R * ba - V * U;
        M(ia, 0, J || 0) || (L[0] = (ba * A - U * G) / ia, L[1] = (R * G - V * A) / ia);
        return L
    }

    function b(A, G, J, L) {
        var R = G[0] - A[0];
        G = G[1] - A[1];
        var U = L[0] - J[0],
            V = L[1] - J[1];
        if (0 === U * G - V * R) return !1;
        L = (R * (J[1] - A[1]) + G * (A[0] - J[0])) / (U * G - V * R);
        A = (U * (A[1] - J[1]) + V * (J[0] - A[0])) / (V * R - U * G);
        return 0 <= L && 1 >= L && 0 <= A && 1 >= A
    }

    function a(A, G, J) {
        return (G[0] - A[0]) *
            (J[1] - A[1]) - (J[0] - A[0]) * (G[1] - A[1])
    }

    function d(A, G, J) {
        return 0 < a(A, G, J)
    }

    function c(A, G, J) {
        return 0 <= a(A, G, J)
    }

    function f(A, G, J) {
        return 0 > a(A, G, J)
    }

    function k(A, G, J) {
        return 0 >= a(A, G, J)
    }
    var tmpPoint1$$module$str$c3runtime = [],
        tmpPoint2$$module$str$c3runtime = [];

    function g(A, G, J, L) {
        if (L) {
            var R = tmpPoint1$$module$str$c3runtime,
                U = tmpPoint2$$module$str$c3runtime;
            R[0] = G[0] - A[0];
            R[1] = G[1] - A[1];
            U[0] = J[0] - G[0];
            U[1] = J[1] - G[1];
            return Math.acos((R[0] * U[0] + R[1] * U[1]) / (Math.sqrt(R[0] * R[0] + R[1] * R[1]) * Math.sqrt(U[0] * U[0] +
                U[1] * U[1]))) < L
        }
        return 0 === a(A, G, J)
    }

    function l(A, G) {
        var J = G[0] - A[0];
        A = G[1] - A[1];
        return J * J + A * A
    }

    function m(A, G) {
        var J = A.length;
        return A[0 > G ? G % J + J : G % J]
    }

    function u(A) {
        A.length = 0
    }

    function x(A, G, J, L) {
        for (; J < L; J++) A.push(G[J])
    }

    function p(A) {
        for (var G = [], J = A.length, L = 0; L !== J; L++) G.push(A.pop());
        for (L = 0; L !== J; L++) A[L] = G[L]
    }

    function r(A, G) {
        return f(m(A, G - 1), m(A, G), m(A, G + 1))
    }
    var tmpLine1$$module$str$c3runtime = [],
        tmpLine2$$module$str$c3runtime = [];

    function t(A, G, J) {
        var L = tmpLine1$$module$str$c3runtime,
            R = tmpLine2$$module$str$c3runtime;
        if (c(m(A, G + 1), m(A, G), m(A, J)) && k(m(A, G - 1), m(A, G), m(A, J))) return !1;
        var U = l(m(A, G), m(A, J));
        for (var V = 0; V !== A.length; ++V)
            if ((V + 1) % A.length !== G && V !== G && c(m(A, G), m(A, J), m(A, V + 1)) && k(m(A, G), m(A, J), m(A, V))) {
                L[0] = m(A, G);
                L[1] = m(A, J);
                R[0] = m(A, V);
                R[1] = m(A, V + 1);
                var ba = e(L, R);
                if (l(m(A, G), ba) < U) return !1
            }
        return !0
    }

    function q(A, G, J) {
        for (var L = 0; L !== A.length; ++L)
            if (L !== G && L !== J && (L + 1) % A.length !== G && (L + 1) % A.length !== J && b(m(A, G), m(A, J), m(A, L), m(A, L + 1))) return !1;
        return !0
    }

    function w(A, G, J, L) {
        L = L || [];
        u(L);
        if (G < J)
            for (var R =
                    G; R <= J; R++) L.push(A[R]);
        else {
            for (R = 0; R <= J; R++) L.push(A[R]);
            for (R = G; R < A.length; R++) L.push(A[R])
        }
        return L
    }

    function y(A) {
        for (var G = [], J, L, R = [], U = Number.MAX_VALUE, V = 0; V < A.length; ++V)
            if (r(A, V))
                for (var ba = 0; ba < A.length; ++ba)
                    if (t(A, V, ba)) {
                        J = y(w(A, V, ba, R));
                        L = y(w(A, ba, V, R));
                        for (var ia = 0; ia < L.length; ia++) J.push(L[ia]);
                        J.length < U && (G = J, U = J.length, G.push([m(A, V), m(A, ba)]))
                    }
        return G
    }

    function C(A, G) {
        if (0 === G.length) return [A];
        if (G instanceof Array && G.length && G[0] instanceof Array && 2 === G[0].length && G[0][0] instanceof Array) {
            A = [A];
            for (var J = 0; J < G.length; J++)
                for (var L = G[J], R = 0; R < A.length; R++) {
                    var U = C(A[R], L);
                    if (U) {
                        A.splice(R, 1);
                        A.push(U[0], U[1]);
                        break
                    }
                }
            return A
        }
        L = G;
        J = A.indexOf(L[0]);
        R = A.indexOf(L[1]);
        return -1 !== J && -1 !== R ? [w(A, J, R), w(A, R, J)] : !1
    }

    function F(A, G, J, L, R) {
        var U = G[1] - A[1];
        G = A[0] - G[0];
        A = U * A[0] + G * A[1];
        var V = L[1] - J[1];
        L = J[0] - L[0];
        J = V * J[0] + L * J[1];
        var ba = U * L - V * G;
        return M(ba, 0, R || 0) ? [0, 0] : [(L * A - G * J) / ba, (U * J - V * A) / ba]
    }

    function H(A, G, J, L, R, U, V) {
        U = U || 100;
        V = V || 0;
        R = R || 25;
        G = "undefined" !== typeof G ? G : [];
        J = J || [];
        L = L || [];
        var ba = [0, 0],
            ia = [0, 0],
            ja = [0, 0],
            qa, za = 0,
            Ca = 0,
            Ma = 0,
            Fa = [],
            La = [];
        if (3 > A.length) return G;
        V++;
        if (V > U) return console.warn("quickDecomp: max level (" + U + ") reached."), G;
        for (var na = 0; na < A.length; ++na)
            if (r(A, na)) {
                J.push(A[na]);
                var Sa = qa = Number.MAX_VALUE;
                for (var Aa = 0; Aa < A.length; ++Aa) {
                    if (d(m(A, na - 1), m(A, na), m(A, Aa)) && k(m(A, na - 1), m(A, na), m(A, Aa - 1)) && (ja = F(m(A, na - 1), m(A, na), m(A, Aa), m(A, Aa - 1)), f(m(A, na + 1), m(A, na), ja))) {
                        var Na = l(A[na], ja);
                        Na < qa && (qa = Na, ia = ja, Ca = Aa)
                    }
                    d(m(A, na + 1), m(A, na), m(A, Aa + 1)) && k(m(A, na + 1),
                        m(A, na), m(A, Aa)) && (ja = F(m(A, na + 1), m(A, na), m(A, Aa), m(A, Aa + 1)), d(m(A, na - 1), m(A, na), ja) && (Na = l(A[na], ja), Na < Sa && (Sa = Na, ba = ja, za = Aa)))
                }
                if (Ca === (za + 1) % A.length) ja[0] = (ia[0] + ba[0]) / 2, ja[1] = (ia[1] + ba[1]) / 2, L.push(ja), na < za ? (x(Fa, A, na, za + 1), Fa.push(ja), La.push(ja), 0 !== Ca && x(La, A, Ca, A.length), x(La, A, 0, na + 1)) : (0 !== na && x(Fa, A, na, A.length), x(Fa, A, 0, za + 1), Fa.push(ja), La.push(ja), x(La, A, Ca, na + 1));
                else {
                    Ca > za && (za += A.length);
                    ba = Number.MAX_VALUE;
                    if (za < Ca) return G;
                    for (Aa = Ca; Aa <= za; ++Aa) c(m(A, na - 1), m(A, na), m(A, Aa)) &&
                        k(m(A, na + 1), m(A, na), m(A, Aa)) && (Na = l(m(A, na), m(A, Aa)), Na < ba && q(A, na, Aa) && (ba = Na, Ma = Aa % A.length));
                    na < Ma ? (x(Fa, A, na, Ma + 1), 0 !== Ma && x(La, A, Ma, A.length), x(La, A, 0, na + 1)) : (0 !== na && x(Fa, A, na, A.length), x(Fa, A, 0, Ma + 1), x(La, A, Ma, na + 1))
                }
                Fa.length < La.length ? (H(Fa, G, J, L, R, U, V), H(La, G, J, L, R, U, V)) : (H(La, G, J, L, R, U, V), H(Fa, G, J, L, R, U, V));
                return G
            }
        G.push(A);
        return G
    }

    function M(A, G, J) {
        return Math.abs(A - G) <= (J || 0)
    }

    function B(A, G, J) {
        return M(A[0], G[0], J) && M(A[1], G[1], J)
    }
    self.polyDecomp = {
        decomp: function(A) {
            var G = y(A);
            return 0 <
                G.length ? C(A, G) : [A]
        },
        quickDecomp: H,
        isSimple: function(A) {
            var G;
            for (G = 0; G < A.length - 1; G++)
                for (var J = 0; J < G - 1; J++)
                    if (b(A[G], A[G + 1], A[J], A[J + 1])) return !1;
            for (G = 1; G < A.length - 2; G++)
                if (b(A[0], A[A.length - 1], A[G], A[G + 1])) return !1;
            return !0
        },
        removeCollinearPoints: function(A, G) {
            for (var J = 0, L = A.length - 1; 3 < A.length && 0 <= L; --L) g(m(A, L - 1), m(A, L), m(A, L + 1), G) && (A.splice(L % A.length, 1), J++);
            return J
        },
        removeDuplicatePoints: function(A, G) {
            for (var J = A.length - 1; 1 <= J; --J)
                for (var L = A[J], R = J - 1; 0 <= R; --R) B(L, A[R], G) && A.splice(J,
                    1)
        },
        makeCCW: function(A) {
            for (var G = 0, J = 1; J < A.length; ++J)
                if (A[J][1] < A[G][1] || A[J][1] === A[G][1] && A[J][0] > A[G][0]) G = J;
            if (d(m(A, G - 1), m(A, G), m(A, G + 1))) return !1;
            p(A);
            return !0
        }
    }
} {
    "use strict";
    let e = !1,
        b = !1,
        a = "dev";
    const d = self.C3 = class {
        constructor() {
            throw TypeError("static class can't be instantiated");
        }
        static SetReady() {
            e = !0
        }
        static IsReady() {
            return e
        }
        static SetAppStarted() {
            b = !0
        }
        static HasAppStarted() {
            return b
        }
        static SetBuildMode(c) {
            a = c
        }
        static GetBuildMode() {
            return a
        }
        static IsReleaseBuild() {
            return "final" === a
        }
    };
    d.isDebug = !1;
    d.isDebugDefend = !1;
    d.hardwareConcurrency = navigator.hardwareConcurrency || 2;
    self.C3X = {}
} {
    "use strict";
    const e = self.C3;
    e.QueryParser = class {
        constructor(b) {
            this._queryString = b;
            this._parameters = new Map;
            this._Parse()
        }
        _Parse() {
            var b = this._queryString;
            if (b.startsWith("?") || b.startsWith("#")) b = b.substr(1);
            b = b.split("&");
            for (const a of b) this._ParseParameter(a)
        }
        _ParseParameter(b) {
            if (b)
                if (b.includes("=")) {
                    var a = b.indexOf("="),
                        d = decodeURIComponent(b.substring(0, a));
                    b = decodeURIComponent(b.substring(a + 1));
                    this._parameters.set(d, b)
                } else this._parameters.set(b, null)
        }
        LogAll() {
            for (const b of this._parameters) console.log("[QueryParser] Parameter '" +
                b[0] + "' = " + (null === b[1] ? "null" : "'" + b[1] + "'"))
        }
        Has(b) {
            return this._parameters.has(b)
        }
        Get(b) {
            b = this._parameters.get(b);
            return "undefined" === typeof b ? null : b
        }
        ClearHash() {
            history.replaceState("", document.title, location.pathname + location.search)
        }
        Reparse(b) {
            this._queryString = b;
            this._parameters.clear();
            this._Parse()
        }
    };
    e.QueryString = new e.QueryParser(location.search);
    e.LocationHashString = new e.QueryParser(location.hash);
    "dev" !== e.QueryString.Get("mode") && e.SetBuildMode("final")
} {
    "use strict";
    const e = self.C3,
        b = navigator.userAgent;
    let a = {
        linux: /linux|openbsd|freebsd|netbsd/i.test(b),
        chromeOS: /CrOS/.test(b),
        windowsTizen: /trident|iemobile|msie|tizen/i.test(b),
        genericMS: /trident|iemobile|msie|edge\//i.test(b),
        opera: /OPR\//.test(b),
        blackberry: /bb10/i.test(b),
        edge: /edge\//i.test(b),
        trident: /trident/i.test(b),
        webkit: /webkit/i.test(b),
        safari: /safari\//i.test(b),
        chrome: /chrome\//i.test(b),
        chromium: /chromium\//i.test(b),
        crosswalk: /crosswalk|xwalk/i.test(b),
        nwjs: /nwjs/i.test(b),
        amazonwebapp: /amazonwebappplatform/i.test(b),
        webview: /wv\)/.test(b),
        android: /android/i.test(b),
        nokia: /nokiabrowser\/[0-9.]+/i.test(b)
    };
    var JSCompiler_object_inline_windows_0 = /windows\s+nt\s+\d+\.\d+/i.exec(b),
        JSCompiler_object_inline_OSX_1 = /mac\s+os\s+x\s+[0-9_]+/i.exec(b),
        JSCompiler_object_inline_android_2 = /android\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_opera_3 = /OPR\/[0-9.]+/.exec(b),
        JSCompiler_object_inline_tizen_4 = /tizen\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_iphone_5 = /iphone\s+os\s+[0-9_]+/i.exec(b),
        JSCompiler_object_inline_ipad_6 =
        /ipad[^)]*os\s+[0-9_]+/i.exec(b),
        JSCompiler_object_inline_winPhone_7 = /windows\s+phone\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_winPhoneOS_8 = /windows\s+phone\s+os\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_chrome_9 = /chrome\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_chromium_10 = /chromium\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_nwjs_11 = /nwjs\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_firefox_12 = /firefox\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_ie_13 = /msie\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_edge_14 =
        /edge\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_edgeChromium_15 = /edg\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_silk_16 = /silk\/[0-9.]+/i.exec(b);
    let d = "(unknown)",
        c = "(unknown)",
        f = "(unknown)",
        k = "(unknown)",
        g = "(unknown)",
        l = "browser",
        m = !1,
        u = !1,
        x = new Map;

    function p(t, q, w) {
        !0 === q ? (w(), x.set(t, !0)) : q && q.length && (w(q[0]), x.set(t, !0))
    }
    p("isWindows", JSCompiler_object_inline_windows_0, t => {
        d = "Windows";
        if (t = t.split(" ")[2]) switch (t) {
            case "5.0":
                c = "2000";
                break;
            case "5.1":
                c = "XP";
                break;
            case "5.2":
                c = "XP";
                break;
            case "6.0":
                c = "Vista";
                break;
            case "6.1":
                c = "7";
                break;
            case "6.2":
                c = "8";
                break;
            case "6.3":
                c = "8.1";
                break;
            case "10.0":
                c = "10"
        }
    });
    p("isOSX", JSCompiler_object_inline_OSX_1, t => {
        d = "Mac OS X";
        (t = t.split(" ")[3]) && (c = t.replace("_", "."))
    });
    p("isLinux", a.linux, () => {
        d = "Linux"
    });
    p("isChromeOS", a.chromeOS, () => {
        d = "Chrome OS"
    });
    p("isAndroid", !a.windowsTizen && JSCompiler_object_inline_android_2, t => {
        d = "Android";
        (t = t.split(" ")[1]) && (c = t)
    });
    p("isTizen", JSCompiler_object_inline_tizen_4, t => {
        d = "Tizen";
        (t = t.split(" ")[1]) && (c =
            t)
    });
    p("isIPhone", !a.windowsTizen && JSCompiler_object_inline_iphone_5, t => {
        d = "iOS";
        (t = t.split(" ")[2]) && (c = t.replace("_", "."))
    });
    p("isIPad", !a.windowsTizen && JSCompiler_object_inline_ipad_6, t => {
        d = "iOS";
        (t = t.split(" ")[3]) && (c = t.replace("_", "."))
    });
    p("isWindowsPhone", JSCompiler_object_inline_winPhone_7, t => {
        d = "Windows Phone";
        (t = t.split(" ")[2]) && (c = t)
    });
    p("isWindowsPhoneOS", JSCompiler_object_inline_winPhoneOS_8, t => {
        d = "Windows Phone";
        (t = t.split(" ")[3]) && (c = t)
    });
    p("isBlackberry", a.blackberry, () => {
        d = "Blackberry";
        c = "10";
        f = "stock";
        g = "webkit"
    });
    p("isChrome", !a.edge && !a.opera && JSCompiler_object_inline_chrome_9, t => {
        f = "Chrome";
        g = "Chromium";
        (t = t.split("/")[1]) && (k = t)
    });
    p("isOpera", JSCompiler_object_inline_opera_3, t => {
        f = "Opera";
        g = "Chromium";
        (t = t.split("/")[1]) && (k = t)
    });
    p("isChromium", JSCompiler_object_inline_chromium_10, t => {
        g = f = "Chromium";
        (t = t.split("/")[1]) && (k = t)
    });
    p("isFirefox", JSCompiler_object_inline_firefox_12, t => {
        f = "Firefox";
        g = "Gecko";
        (t = t.split("/")[1]) && (k = t)
    });
    p("isInternetExplorer", JSCompiler_object_inline_ie_13,
        t => {
            f = "Internet Explorer";
            g = "Trident";
            (t = t.split(" ")[1]) && (k = t)
        });
    p("isTrident", "Internet Explorer" !== f && a.trident, () => {
        g = "Trident";
        var t = /rv:[0-9.]+/i.exec(b);
        t && t.length && (f = "Internet Explorer", (t = t[0].split(":")[1]) && (k = t))
    });
    p("isEdge", JSCompiler_object_inline_edge_14, t => {
        g = f = "Edge";
        (t = t.split("/")[1]) && (k = t)
    });
    p("isEdgeChromium", JSCompiler_object_inline_edgeChromium_15, t => {
        f = "Edge";
        g = "Chromium";
        (t = t.split("/")[1]) && (k = t)
    });
    p("isSafari", a.safari && !a.nokia && !a.chrome && !a.chromium && !a.genericIE &&
        !a.blackberry, () => {
            f = "Safari";
            g = "WebKit";
            var t = /version\/[0-9.]+/i.exec(b),
                q = /crios\/[0-9.]+/i.exec(b),
                w = /fxios\/[0-9.]+/i.exec(b);
            t && t.length && (t = t[0].split("/")[1]) && (k = t);
            q && q.length && (f = "Chrome for iOS", (q = q[0].split("/")[1]) && (k = q));
            w && w.length && (f = "Firefox for iOS", (w = w[0].split("/")[1]) && (k = w))
        });
    p("isSilk", JSCompiler_object_inline_silk_16, t => {
        f = "Silk";
        (t = t.split("/")[1]) && (k = t)
    });
    p("isCrosswalk", a.crosswalk, () => l = "crosswalk");
    p("isCordova", self.device && (self.device.cordova || self.device.phonegap),
        () => l = "cordova");
    p("isNWJS", JSCompiler_object_inline_nwjs_11, t => {
        l = "nwjs";
        f = "NW.js";
        g = "Chromium";
        (t = t.split("/")[1]) && (k = t)
    });
    p("isAmazonWebApp", a.amazonwebapp, () => l = "webapp");
    p("isHomeScreenWebApp", "nwjs" !== l && "undefined" !== typeof window && (window.matchMedia && window.matchMedia("(display-mode: standalone)").matches || navigator.standalone), () => l = "webapp");
    p("isFalseSafari", "Safari" === f && ("Android" === d || "Tizen" === d || "Blackberry" === d), () => f = "stock");
    p("isAndroidWebview", "Chrome" === f && "browser" === l && a.webview,
        () => l = "webview");
    p("isFirefoxOS", "Firefox" === f && "(unknown)" === d, () => d = "Firefox OS");
    p("isAndroidFallback", "(unknown)" === d && !a.windowsTizen && a.android, () => d = "Android");
    p("isTridentFallback", "(unknown)" === d && a.trident, () => g = "Trident");
    p("isWebkitFallback", "(unknown)" === d && a.webkit, () => g = "WebKit");
    p("isDesktop", (() => "Windows" === d || "Mac OS X" === d || "Linux" === d || "Chrome OS" === d || "nwjs" === l)(), () => m = !0);
    u = "nwjs" === l;
    const r = "Mac OS X" === d && navigator.maxTouchPoints && 2 < navigator.maxTouchPoints;
    r && (d = "iOS",
        c = k, u = m = !1);
    e.Platform = {
        OS: d,
        OSVersion: c,
        Browser: f,
        BrowserVersion: k,
        BrowserVersionNumber: parseFloat(k),
        BrowserEngine: g,
        Context: l,
        IsDesktop: m,
        IsMobile: !m,
        IsDesktopApp: u,
        IsChromeWebStore: !!(self.chrome && self.chrome.runtime && self.chrome.runtime.id),
        IsAppleOS: "Mac OS X" === d || "iOS" === d,
        IsIpadOS: r,
        IsLinux: "Linux" === d
    }
}
"use strict"; {
    const e = new Map,
        b = "undefined" !== typeof IDBObjectStore && "function" === typeof IDBObjectStore.prototype.getAll,
        a = "undefined" !== typeof IDBObjectStore && "function" === typeof IDBObjectStore.prototype.getAllKeys;

    function d(r) {
        return new Promise((t, q) => {
            r.onsuccess = () => t(r.result);
            r.onerror = () => q(r.error)
        })
    }

    function c(r) {
        return new Promise((t, q) => {
            r.oncomplete = () => t();
            r.onerror = () => q(r.error);
            r.onabort = () => q(r.error)
        })
    }

    function f(r, t) {
        return g(r, t)
    }

    function k(r, t) {
        return g(r, t, !0)
    }
    async function g(r, t, q = !1,
        w = !0) {
        const y = await l(r);
        try {
            const C = y.transaction(["keyvaluepairs"], q ? "readwrite" : "readonly");
            return t(C)
        } catch (C) {
            if (w && "InvalidStateError" === C.name) return e.delete(r), g(r, t, q, !1);
            throw C;
        }
    }

    function l(r) {
        u(r);
        let t = e.get(r);
        t instanceof Promise || (t = m(r), e.set(r, t), t.catch(q => e.delete(r)));
        return t
    }
    async function m(r) {
        u(r);
        const t = indexedDB.open(r, 2);
        t.addEventListener("upgradeneeded", q => {
            try {
                q.target.result.createObjectStore("keyvaluepairs")
            } catch (w) {
                console.error(`Failed to create objectstore for database ${r}`,
                    w)
            }
        });
        return d(t)
    }

    function u(r) {
        if ("string" !== typeof r) throw new TypeError("expected string");
    }

    function x(r, t) {
        const q = r.objectStore("keyvaluepairs").openCursor();
        return new Promise(w => {
            const y = [];
            q.onsuccess = C => {
                if (C = C.target.result) {
                    switch (t) {
                        case "entries":
                            y.push([C.key, C.value]);
                            break;
                        case "keys":
                            y.push(C.key);
                            break;
                        case "values":
                            y.push(C.value)
                    }
                    C.continue()
                } else w(y)
            }
        })
    }
    class p {
        constructor(r) {
            u(r);
            this.name = r
        }
        async ready() {
            await l(this.name)
        }
        set(r, t) {
            u(r);
            return k(this.name, async q => {
                var w = q.objectStore("keyvaluepairs").put(t,
                    r);
                w = d(w);
                q = c(q);
                await Promise.all([q, w])
            })
        }
        get(r) {
            u(r);
            return f(this.name, async t => {
                var q = t.objectStore("keyvaluepairs").get(r);
                q = d(q);
                t = c(t);
                [, t] = await Promise.all([t, q]);
                return t
            })
        }
        delete(r) {
            u(r);
            return k(this.name, async t => {
                var q = t.objectStore("keyvaluepairs").delete(r);
                q = d(q);
                t = c(t);
                await Promise.all([t, q])
            })
        }
        clear() {
            return k(this.name, async r => {
                var t = r.objectStore("keyvaluepairs").clear();
                t = d(t);
                r = c(r);
                await Promise.all([r, t])
            })
        }
        keys() {
            return f(this.name, async r => {
                if (a) {
                    var t = r.objectStore("keyvaluepairs").getAllKeys();
                    t = d(t)
                } else t = x(r, "keys");
                r = c(r);
                [, r] = await Promise.all([r, t]);
                return r
            })
        }
        values() {
            return f(this.name, async r => {
                if (b) {
                    var t = r.objectStore("keyvaluepairs").getAll();
                    t = d(t)
                } else t = x(r, "values");
                r = c(r);
                [, r] = await Promise.all([r, t]);
                return r
            })
        }
        entries() {
            return f(this.name, async r => {
                var t = x(r, "entries");
                r = c(r);
                [, t] = await Promise.all([r, t]);
                return t
            })
        }
    }
    self.KVStorageContainer = p
}
"use strict"; {
    const e = self.KVStorageContainer,
        b = [/no available storage method found/i, /an attempt was made to break through the security policy of the user agent/i, /the user denied permission to access the database/i, /a mutation operation was attempted on a database that did not allow mutations/i, /idbfactory\.open\(\) called in an invalid security context/i],
        a = new WeakMap;
    let d = !1;
    "undefined" === typeof indexedDB && (d = !0, console.warn("Unable to use local storage because indexedDB is not defined"));

    function c(l) {
        throw Error(`"${l}" is not implemented`);
    }

    function f(l) {
        if ("function" === typeof l) throw Error("localforage callback API is not implemented; please use the promise API instead");
    }

    function k(l) {
        return "object" === typeof l ? new Promise(m => {
            const {
                port1: u,
                port2: x
            } = new MessageChannel;
            x.onmessage = p => m(p.data);
            u.postMessage(l)
        }) : Promise.resolve(l)
    }
    class g {
        constructor(l) {
            this._inst = l;
            a.set(this, new Map)
        }
        _MaybeSwitchToMemoryFallback(l) {
            if (!d)
                for (const m of b)
                    if (l && m.test(l.message)) {
                        console.error("Unable to use local storage, reverting to in-memory store: ",
                            l, l.message);
                        d = !0;
                        break
                    }
        }
        async _getItemFallback(l) {
            l = a.get(this).get(l);
            l = await k(l);
            return "undefined" === typeof l ? null : l
        }
        async _setItemFallback(l, m) {
            m = await k(m);
            a.get(this).set(l, m)
        }
        _removeItemFallback(l) {
            a.get(this).delete(l)
        }
        _clearFallback() {
            a.get(this).clear()
        }
        _keysFallback() {
            return Array.from(a.get(this).keys())
        }
        IsUsingFallback() {
            return d
        }
        async getItem(l, m) {
            f(m);
            if (d) return await this._getItemFallback(l);
            let u;
            try {
                u = await this._inst.get(l)
            } catch (x) {
                this._MaybeSwitchToMemoryFallback(x);
                if (d) return await this._getItemFallback(l);
                console.error(`Error reading '${l}' from storage, returning null: `, x);
                return null
            }
            return "undefined" === typeof u ? null : u
        }
        async setItem(l, m, u) {
            f(u);
            "undefined" === typeof m && (m = null);
            if (d) await this._setItemFallback(l, m);
            else try {
                await this._inst.set(l, m)
            } catch (x) {
                if (this._MaybeSwitchToMemoryFallback(x), d) await this._setItemFallback(l, m);
                else throw x;
            }
        }
        async removeItem(l, m) {
            f(m);
            if (d) this._removeItemFallback(l);
            else try {
                await this._inst.delete(l)
            } catch (u) {
                this._MaybeSwitchToMemoryFallback(u), d ? this._removeItemFallback(l) :
                    console.error(`Error removing '${l}' from storage: `, u)
            }
        }
        async clear(l) {
            f(l);
            if (d) this._clearFallback();
            else try {
                await this._inst.clear()
            } catch (m) {
                this._MaybeSwitchToMemoryFallback(m), d ? this._clearFallback() : console.error("Error clearing storage: ", m)
            }
        }
        async keys(l) {
            f(l);
            if (d) return this._keysFallback();
            l = [];
            try {
                l = await this._inst.keys()
            } catch (m) {
                this._MaybeSwitchToMemoryFallback(m);
                if (d) return this._keysFallback();
                console.error("Error getting storage keys: ", m)
            }
            return l
        }
        ready(l) {
            f(l);
            return d ? Promise.resolve(!0) :
                this._inst.ready()
        }
        createInstance(l) {
            if ("object" !== typeof l) throw new TypeError("invalid options object");
            l = l.name;
            if ("string" !== typeof l) throw new TypeError("invalid store name");
            l = new e(l);
            return new g(l)
        }
        length(l) {
            c("localforage.length()")
        }
        key(l, m) {
            c("localforage.key()")
        }
        iterate(l, m) {
            c("localforage.iterate()")
        }
        setDriver(l) {
            c("localforage.setDriver()")
        }
        config(l) {
            c("localforage.config()")
        }
        defineDriver(l) {
            c("localforage.defineDriver()")
        }
        driver() {
            c("localforage.driver()")
        }
        supports(l) {
            c("localforage.supports()")
        }
        dropInstance() {
            c("localforage.dropInstance()")
        }
        disableMemoryMode() {
            d = !1
        }
    }
    self.localforage = new g(new e("localforage"))
} {
    "use strict";
    const e = self.C3;
    e.Supports = {};
    e.Supports.WebAnimations = (() => {
        try {
            if ("Safari" === e.Platform.Browser || "undefined" === typeof document) return !1;
            const b = document.createElement("div");
            return "undefined" === typeof b.animate ? !1 : "undefined" !== typeof b.animate([{
                opacity: "0"
            }, {
                opacity: "1"
            }], 1E3).reverse
        } catch (b) {
            return !1
        }
    })();
    e.Supports.DialogElement = "undefined" !== typeof HTMLDialogElement;
    e.Supports.RequestIdleCallback = !!self.requestIdleCallback;
    e.Supports.ImageBitmap = !!self.createImageBitmap;
    e.Supports.ImageBitmapOptions = !1;
    if (e.Supports.ImageBitmap) try {
        self.createImageBitmap(new ImageData(32, 32), {
            premultiplyAlpha: "none"
        }).then(b => {
            e.Supports.ImageBitmapOptions = !0
        }).catch(b => {
            e.Supports.ImageBitmapOptions = !1
        })
    } catch (b) {
        e.Supports.ImageBitmapOptions = !1
    }
    e.Supports.ClipboardReadText = !(!navigator.clipboard || !navigator.clipboard.readText || "Firefox" === e.Platform.Browser);
    e.Supports.PermissionsQuery = !(!navigator.permissions || !navigator.permissions.query);
    e.Supports.Proxies = "undefined" !== typeof Proxy;
    e.Supports.DownloadAttribute =
        (() => "undefined" === typeof document ? !1 : "undefined" !== typeof document.createElement("a").download)();
    e.Supports.CanvasToBlob = (() => "undefined" !== typeof HTMLCanvasElement && HTMLCanvasElement.prototype.toBlob)();
    e.Supports.Fetch = "function" === typeof fetch;
    e.Supports.PersistentStorage = !!(self.isSecureContext && "Opera" !== e.Platform.Browser && navigator.storage && navigator.storage.persist);
    e.Supports.StorageQuotaEstimate = !!(self.isSecureContext && navigator.storage && navigator.storage.estimate);
    e.Supports.Fullscreen =
        (() => {
            if ("undefined" === typeof document || "iOS" === e.Platform.OS) return !1;
            const b = document.documentElement;
            return !!(b.requestFullscreen || b.msRequestFullscreen || b.mozRequestFullScreen || b.webkitRequestFullscreen)
        })();
    e.Supports.ImageDecoder = "undefined" !== typeof self.ImageDecoder;
    e.Supports.NativeFileSystemAPI = !!self.showOpenFilePicker;
    e.Supports.NavigatorFontsQuery = !(!navigator.fonts || !navigator.fonts.query)
} {
    "use strict";
    const e = self.C3;
    if (!String.prototype.trimStart) {
        const b = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]*/;
        String.prototype.trimStart = function() {
            return this.replace(b, "")
        }
    }
    if (!String.prototype.trimEnd) {
        const b = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]*$/;
        String.prototype.trimEnd = function() {
            return this.replace(b,
                "")
        }
    }
    String.prototype.replaceAll || (String.prototype.replaceAll = function(b, a) {
        return this.replace(new RegExp(e.EscapeRegex(b), "g"), a)
    });
    Array.prototype.values || (Array.prototype.values = function*() {
        for (const b of this) yield b
    });
    if (!Array.prototype.flat) {
        function b(a, d) {
            return a.reduce((c, f) => {
                0 < d && Array.isArray(f) ? Array.prototype.push.apply(c, b(f, d - 1)) : c.push(f);
                return c
            }, [])
        }
        Array.prototype.flat = function(a = 1) {
            return b(this, a)
        }
    }
    Array.prototype.at || (Array.prototype.at = function(b) {
        b = Math.trunc(b) || 0;
        0 >
            b && (b += this.length);
        if (!(0 > b || b >= this.length)) return this[b]
    });
    String.prototype.at || (String.prototype.at = function(b) {
        b = Math.trunc(b) || 0;
        0 > b && (b += this.length);
        if (!(0 > b || b >= this.length)) return this[b]
    });
    RegExp.escape || (RegExp.escape = function(b) {
        return String(b).replace(/[\\^$*+?.()|[\]{}]/g, "\\$&")
    });
    navigator.storage && !navigator.storage.estimate && navigator.webkitTemporaryStorage && navigator.webkitTemporaryStorage.queryUsageAndQuota && (navigator.storage.estimate = function() {
        return new Promise((b, a) => navigator.webkitTemporaryStorage.queryUsageAndQuota((d,
            c) => b({
            usage: d,
            quota: c
        }), a))
    });
    "undefined" === typeof self.isSecureContext && (self.isSecureContext = "https:" === location.protocol);
    "undefined" === typeof self.globalThis && (self.globalThis = self)
} {
    "use strict";
    const e = self.C3;

    function b(a) {
        let d = e.GetCallStack();
        console.error("Assertion failure: " + a + "\n\nStack trace:\n" + d)
    }
    self.assert = function(a, d) {
        a || b(d)
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X;
    e.IsNumber = function(d) {
        return "number" === typeof d
    };
    e.IsFiniteNumber = function(d) {
        return e.IsNumber(d) && isFinite(d)
    };
    e.RequireNumber = function(d) {
        if (!e.IsNumber(d)) throw new TypeError("expected number");
    };
    e.RequireOptionalNumber = function(d) {
        e.IsNullOrUndefined(d)
    };
    e.RequireNumberInRange = function(d, c, f) {
        if (!e.IsNumber(d) || isNaN(d) || c > d || f < d) throw new RangeError("number outside of range");
    };
    e.RequireAllNumber = function(...d) {
        for (let c of d);
    };
    e.RequireFiniteNumber =
        function(d) {
            if (!e.IsFiniteNumber(d)) throw new TypeError("expected finite number");
        };
    e.RequireOptionalFiniteNumber = function(d) {
        e.IsNullOrUndefined(d)
    };
    e.RequireAllFiniteNumber = function(...d) {
        for (let c of d);
    };
    e.IsString = function(d) {
        return "string" === typeof d
    };
    e.RequireString = function(d) {
        if (!e.IsString(d)) throw new TypeError("expected string");
    };
    e.RequireOptionalString = function(d) {
        e.IsNullOrUndefined(d)
    };
    e.RequireAllString = function(...d) {
        for (let c of d);
    };
    e.IsSimpleObject = function(d) {
        return "object" !==
            typeof d || null === d ? !1 : (d = Object.getPrototypeOf(d)) ? d.constructor === Object : null === d
    };
    e.RequireSimpleObject = function(d) {
        if (!e.IsSimpleObject(d)) throw new TypeError("expected simple object");
    };
    e.RequireOptionalSimpleObject = function(d) {
        if (!e.IsNullOrUndefined(d) && !e.IsSimpleObject(d)) throw new TypeError("expected simple object");
    };
    e.IsObject = function(d) {
        return "object" === typeof d && null !== d && !Array.isArray(d)
    };
    e.RequireObject = function(d) {
        if (!e.IsObject(d)) throw new TypeError("expected object");
    };
    e.RequireOptionalObject =
        function(d) {
            e.IsNullOrUndefined(d)
        };
    e.RequireAllObject = function(...d) {
        for (let c of d);
    };
    e.IsFileLike = function(d) {
        return e.IsInstanceOf(d, Blob) && "string" === typeof d.name
    };
    e.RequireFileLike = function(d) {
        if (!e.IsFileLike(d)) throw new TypeError("expected file");
    };
    e.RequireOptionalFileLike = function(d) {
        e.IsNullOrUndefined(d)
    };
    e.IsArray = function(d) {
        return Array.isArray(d)
    };
    e.RequireArray = function(d) {
        if (!e.IsArray(d)) throw new TypeError("expected array");
    };
    e.RequireOptionalArray = function(d) {
        e.IsNullOrUndefined(d)
    };
    e.RequireAllArray = function(...d) {
        for (let c of d);
    };
    e.Is2DArray = function(d) {
        return e.IsArray(d) ? d.length ? e.IsArray(d[0]) ? !0 : !1 : !0 : !1
    };
    e.Require2DArray = function(d) {
        if (!e.Is2DArray(d)) throw new TypeError("expected 2d array");
        for (let c of d)
            if (!e.IsArray(c)) throw new TypeError("expected 2d array");
    };
    e.RequireOptional2DArray = function(d) {
        e.IsNullOrUndefined(d)
    };
    e.IsFunction = function(d) {
        return "function" === typeof d
    };
    e.RequireFunction = function(d, c) {
        if (!e.IsFunction(d)) throw new TypeError("expected function");
        if (!e.IsNullOrUndefined(c) && d !== c) throw new TypeError("expected same function reference");
    };
    e.RequireOptionalFunction = function(d) {
        e.IsNullOrUndefined(d)
    };
    e.RequireAllFunction = function(...d) {
        for (let c of d);
    };
    e.RequireAnyFunction = function(d, ...c) {
        if (!e.IsFunction(d)) throw new TypeError("expected function");
        if (!c.length) throw Error("missing comparison functions");
        for (let f of c)
            if (!e.IsNullOrUndefined(f) && d === f) return;
        throw new TypeError("expected same function reference");
    };
    e.RequireOptionalAllFunction =
        function(...d) {
            if (!e.IsNullOrUndefined(d))
                for (let c of d);
        };
    e.IsInstanceOf = function(d, c) {
        return d instanceof c
    };
    e.IsInstanceOfAny = function(d, ...c) {
        for (let f of c)
            if (e.IsInstanceOf(d, f)) return !0;
        return !1
    };
    e.RequireInstanceOf = function(d, c) {
        if (!e.IsInstanceOf(d, c)) throw new TypeError("unexpected type");
    };
    e.RequireOptionalInstanceOf = function(d, c) {
        e.IsNullOrUndefined(d)
    };
    e.RequireAllInstanceOf = function(d, ...c) {
        for (let f of c);
    };
    e.RequireAnyInstanceOf = function(d, ...c) {
        if (!e.IsInstanceOfAny(d, ...c)) throw new TypeError("unexpected type");
    };
    e.RequireAnyOptionalInstanceOf = function(d, ...c) {
        if (!e.IsNullOrUndefined(d) && !e.IsInstanceOfAny(d, ...c)) throw new TypeError("unexpected type");
    };
    e.IsArrayOf = function(d, c) {
        for (let f of d)
            if (!e.IsInstanceOf(f, c)) return !1;
        return !0
    };
    e.IsArrayOfFiniteNumbers = function(d) {
        for (let c of d)
            if (!e.IsFiniteNumber(c)) return !1;
        return !0
    };
    e.RequireArrayOf = function(d, c) {
        for (let f of d);
    };
    e.RequireOptionalArrayOf = function(d, c) {
        if (!e.IsNullOrUndefined(d))
            for (let f of d);
    };
    e.RequireArrayOfAny = function(d, ...c) {
        for (let f of d);
    };
    e.RequireOptionalArrayOfAny = function(d, ...c) {
        if (!e.IsNullOrUndefined(d))
            for (let f of d);
    };
    e.IsDOMNode = function(d, c) {
        return e.IsNullOrUndefined(d) || !e.IsString(d.nodeName) ? !1 : !c || e.equalsNoCase(d.nodeName, c)
    };
    e.RequireDOMNode = function(d, c) {
        if (e.IsNullOrUndefined(d) || !e.IsString(d.nodeName)) throw new TypeError("expected DOM node");
        if (c && !e.equalsNoCase(d.nodeName, c)) throw new TypeError(`expected DOM '${c}' node`);
    };
    e.RequireOptionalDOMNode = function(d, c) {
        e.IsNullOrUndefined(d)
    };
    e.IsHTMLElement = function(d,
        c) {
        return e.IsNullOrUndefined(d) || !e.IsString(d.tagName) ? !1 : !c || e.equalsNoCase(d.tagName, c)
    };
    e.RequireHTMLElement = function(d, c) {
        if (e.IsNullOrUndefined(d) || !e.IsString(d.tagName)) throw new TypeError("expected HTML element");
        if (c && !e.equalsNoCase(d.tagName, c)) throw new TypeError(`expected HTML '${c}' element`);
    };
    e.RequireOptionalHTMLElement = function(d, c) {
        e.IsNullOrUndefined(d)
    };
    e.IsDrawable = function(d) {
        return e.IsHTMLElement(d, "img") || e.IsHTMLElement(d, "canvas") || e.IsHTMLElement(d, "video") || "undefined" !==
            typeof OffscreenCanvas && d instanceof OffscreenCanvas || "undefined" !== typeof ImageBitmap && d instanceof ImageBitmap
    };
    e.RequireDrawable = function(d) {
        if (!e.IsDrawable(d)) throw new TypeError("expected drawable");
    };
    e.RequireOptionalDrawable = function(d) {
        e.IsNullOrUndefined(d)
    };
    e.IsDrawableOrImageData = function(d) {
        return d instanceof ImageData ? !0 : e.IsDrawable(d)
    };
    e.RequireDrawableOrImageData = function(d) {
        if (!e.IsDrawableOrImageData(d)) throw new TypeError("expected drawable or image data");
    };
    e.RequireOptionalDrawableOrImageData =
        function(d) {
            if (!e.IsNullOrUndefined(d) && !e.IsDrawableOrImageData(d)) throw new TypeError("expected drawable or image data");
        };
    e.IsStringLike = function(d) {
        return "string" === typeof d || d instanceof e.HtmlString || d instanceof e.BBString
    };
    e.RequireStringLike = function(d) {
        if (!e.IsStringLike(d)) throw new TypeError("expected string-like");
    };
    e.RequireOptionalStringLike = function(d) {
        e.IsNullOrUndefined(d)
    };
    e.RequireAllStringLike = function(...d) {
        for (let c of d);
    };
    e.RequireOverride = function() {
        throw Error("must be overridden");
    };
    e.NotYetImplemented = function() {
        throw Error("not yet implemented");
    };
    e.IsDefined = function(d, ...c) {
        if ("undefined" === typeof d) return !1;
        for (let f of c) {
            if ("undefined" === typeof d[f]) return !1;
            d = d[f]
        }
        return !0
    };
    e.IsNullOrUndefined = function(d) {
        return "undefined" === typeof d || null === d
    };
    e.AreArrayElementsOfSameType = function(d) {
        let c = d[0].constructor;
        for (let f of d)
            if (f.constructor !== c) return !1;
        return c
    };
    e.AreArrayElementsOfType = function(d, c) {
        for (let f of d)
            if (!(f instanceof c)) return !1;
        return !0
    };
    const a = Object.getPrototypeOf(Uint8Array);
    e.IsTypedArray = function(d) {
        return e.IsInstanceOf(d, a)
    };
    e.RequireTypedArray = function(d) {};
    e.WeakRequireTypedArray = function(d) {
        e.WeakRequireInstanceOf(d, a)
    };
    e.WeakRequireAnyInstanceOf = function(d, ...c) {
        if (!e.WeakIsAnyInstanceOf(d, ...c)) throw new TypeError("unexpected type");
    };
    e.WeakIsAnyInstanceOf = function(d, ...c) {
        for (const f of c)
            if (e.WeakIsInstanceOf(d, f)) return !0;
        return !1
    };
    e.WeakRequireInstanceOf = function(d, c) {
        if (!e.WeakIsInstanceOf(d, c)) throw new TypeError("unexpected type");
    };
    e.WeakIsInstanceOf =
        function(d, c) {
            for (; d = Object.getPrototypeOf(d);)
                if (d.constructor.name === c.name) return !0;
            return !1
        };
    b.RequireNumber = e.RequireNumber;
    b.RequireOptionalNumber = e.RequireOptionalNumber;
    b.RequireFiniteNumber = e.RequireFiniteNumber;
    b.RequireOptionalFiniteNumber = e.RequireOptionalFiniteNumber;
    b.RequireString = e.RequireString;
    b.RequireOptionalString = e.RequireOptionalString;
    b.RequireObject = e.RequireObject;
    b.RequireOptionalObject = e.RequireOptionalObject;
    b.RequireArray = e.RequireArray;
    b.RequireOptionalArray = e.RequireOptionalArray;
    b.RequireFunction = e.RequireFunction;
    b.RequireOptionalFunction = e.RequireOptionalFunction;
    b.RequireInstanceOf = e.RequireInstanceOf;
    b.RequireOptionalInstanceOf = e.RequireOptionalInstanceOf;
    b.IsNullOrUndefined = e.IsNullOrUndefined
} {
    "use strict";
    const e = self.C3,
        b = new Map;
    e.RafLog = function(t, ...q) {
        b.has(t) || b.set(t, -1); - 1 === b.get(t) && b.set(t, requestAnimationFrame(() => {
            console.log(`%c${t}`, "font-weight: bold", ...q);
            b.set(t, -1)
        }))
    };
    e.GetCallStack = function() {
        return Error().stack
    };
    e.Debugger = function() {
        debugger
    };
    e.cast = function(t, q) {
        return t && t instanceof q ? t : null
    };
    e.getName = function(t) {
        return "undefined" === typeof t ? "undefined" : null === t ? "null" : "boolean" === typeof t ? "<boolean>" : e.IsNumber(t) ? "<number>" : e.IsString(t) ? "<string>" : e.IsArray(t) ?
            "<array>" : "symbol" === typeof t ? "<" + t.toString() + ">" : e.IsFunction(t) ? t.name && "Function" !== t.name ? t.name : "<anonymous function>" : "object" === typeof t ? t.constructor && t.constructor.name && "Object" !== t.constructor.name ? t.constructor.name : "<anonymous object>" : "<unknown>"
    };
    e.getType = function(t) {
        return null === t ? "null" : Array.isArray(t) ? "array" : typeof t
    };
    e.range = function*(t, q) {
        if (!isFinite(Math.abs(t - q))) throw Error("Invalid parameters");
        if (t > q)
            for (--t; t >= q; t--) yield t;
        else
            for (; t < q; t++) yield t
    };

    function a(t, q) {
        t =
            e.getType(t);
        q = e.getType(q);
        return "null" === t || "null" === q ? !0 : "undefined" === t || "undefined" === q ? !1 : t === q
    }
    let d = new Map,
        c = new Map,
        f = new WeakMap,
        k = new WeakMap;
    e.DefendHandler = {};
    const g = new Set(["then", "splice"]);

    function l(t) {
        console.warn("[Defence] " + t + " @", e.GetCallStack())
    }
    e.DefendHandler.get = function(t, q) {
        q in t || "symbol" === typeof q || g.has(q) || l(`Accessed missing property '${q}' from defended object '${e.getName(t)}', returning undefined`);
        k.has(t) && "symbol" !== typeof q && !g.has(q) && l(`Accessed property '${q}' on a released object '${e.getName(t)}'\nObject was originally released at: ${k.get(t)})\nCall stack at access: `);
        return t[q]
    };
    e.DefendHandler.set = function(t, q, w) {
        q in t || d.has(t) || l(`Set non-existent property '${q}' to '${w}' on defended object '${e.getName(t)}'`);
        a(t[q], w) || d.has(t) || l(`Set '${e.getType(t[q])}' property '${q}' to type '${e.getType(w)}' on defended object '${e.getName(t)}'`);
        k.has(t) && l(`Set property '${q}' on a released object '${e.getName(t)}'\nObject was originally released at: ${k.get(t)})\nCall stack at access: `);
        t[q] = w;
        return !0
    };
    e.DefendHandler.deleteProperty = function(t, q) {
        throw new ReferenceError(`Cannot delete property '${q}' from defended object '${e.getName(t)}'`);
    };
    e.DefendHandler.defineProperty = function(t, q, w) {
        throw new ReferenceError(`Cannot define property '${q}' on defended object '${e.getName(t)}'`);
    };
    e.DefendHandler.enumerate = function(t) {
        throw new ReferenceError(`Cannot enumerate defended object '${e.getName(t)}'`);
    };
    let m = -1;

    function u() {
        m = -1;
        if (0 < d.size || 0 < c.size) {
            let t = [...new Set([...d.keys()].map(q => e.getName(q)))].join();
            console.warn(`An object derived from DefendedBase was not protected with debugDefend(). This will disable some checks. See the coding guidelines! Possible affected class names: ${t}`);
            d.clear();
            c.clear()
        }
    }
    e.DefendedBase = class {
        constructor() {
            if (e.isDebugDefend && e.Supports.Proxies) {
                var t = new.target;
                t = Object.create(t.prototype);
                var q = new Proxy(t, e.DefendHandler);
                d.set(t, q);
                c.set(q, t);
                f.set(q, t); - 1 === m && (m = requestAnimationFrame(u));
                return q
            }
        }
    };
    e.debugDefend = function(t) {
        if (e.isDebugDefend && e.Supports.Proxies && t instanceof e.DefendedBase) {
            if (!c.has(t)) return t;
            let q = c.get(t);
            c.delete(t);
            d.delete(q);
            return t
        }
        return e.isDebug ? Object.seal(t) : t
    };
    e.New = function(t, ...q) {
        let w;
        try {
            w = new t(...q)
        } catch (y) {
            throw c.clear(),
                d.clear(), y;
        }
        e.isDebugDefend && r(t, w);
        return e.debugDefend(w)
    };
    e.Release = function(t) {
        (t = f.get(t)) && k.set(t, e.GetCallStack())
    };
    e.WasReleased = function(t) {
        return (t = f.get(t)) ? !!k.get(t) : !1
    };
    let x = new Map;

    function p(t) {
        let q = new Set;
        for (let w in t) q.add(w);
        return q
    }

    function r(t, q) {
        q = p(q);
        let w = x.get(t);
        if (w) {
            let y = [];
            for (let C of w.values()) q.has(C) ? q.delete(C) : y.push(C);
            e.appendArray(y, [...q]);
            y.length && console.warn(`[Defence] '${e.getName(t)}' constructor creates inconsistent properties: ${y.join(", ")}`)
        } else x.set(t,
            q)
    }
    e.PerfMark = class {
        constructor(t) {
            this._name = "";
            t && this.start(t)
        }
        start(t) {
            this._name = t;
            performance.mark(this._name + "-Start")
        }
        end() {
            performance.mark(this._name + "-End");
            performance.measure(this._name, this._name + "-Start", this._name + "-End")
        }
        next(t) {
            this.end();
            this._name = t;
            performance.mark(this._name + "-Start")
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = 2 * Math.PI,
        a = Math.PI / 180,
        d = 180 / Math.PI;
    e.wrap = function(k, g, l) {
        k = Math.floor(k);
        g = Math.floor(g);
        l = Math.floor(l);
        return k < g ? (k = l - (g - k) % (l - g), k === l ? 0 : k) : g + (k - g) % (l - g)
    };
    e.mapToRange = function(k, g, l, m, u) {
        return (k - g) * (u - m) / (l - g) + m
    };
    e.normalize = function(k, g, l) {
        return (k - g) / (l - g)
    };
    e.clamp = function(k, g, l) {
        return k < g ? g : k > l ? l : k
    };
    e.clampAngle = function(k) {
        k %= b;
        0 > k && (k += b);
        return k
    };
    e.toRadians = function(k) {
        return k * a
    };
    e.toDegrees = function(k) {
        return k * d
    };
    e.distanceTo = function(k, g, l, m) {
        return Math.hypot(l -
            k, m - g)
    };
    e.distanceSquared = function(k, g, l, m) {
        k = l - k;
        g = m - g;
        return k * k + g * g
    };
    e.angleTo = function(k, g, l, m) {
        return Math.atan2(m - g, l - k)
    };
    e.angleDiff = function(k, g) {
        if (k === g) return 0;
        k = Math.sin(k) * Math.sin(g) + Math.cos(k) * Math.cos(g);
        return 1 <= k ? 0 : -1 >= k ? Math.PI : Math.acos(k)
    };
    e.angleRotate = function(k, g, l) {
        let m = Math.sin(k),
            u = Math.cos(k),
            x = Math.sin(g),
            p = Math.cos(g);
        return Math.acos(m * x + u * p) > l ? 0 < u * x - m * p ? e.clampAngle(k + l) : e.clampAngle(k - l) : e.clampAngle(g)
    };
    e.angleClockwise = function(k, g) {
        return 0 >= Math.cos(k) * Math.sin(g) -
            Math.sin(k) * Math.cos(g)
    };
    e.angleLerp = function(k, g, l, m = 0) {
        let u = e.angleDiff(k, g);
        m *= b;
        return e.angleClockwise(g, k) ? e.clampAngle(k + (u + m) * l) : e.clampAngle(k - (u + m) * l)
    };
    e.angleLerpClockwise = function(k, g, l, m = 0) {
        const u = e.angleDiff(k, g);
        m *= b;
        return e.angleClockwise(g, k) ? e.clampAngle(k + (u + m) * l) : e.clampAngle((b - u + m) * l)
    };
    e.angleLerpAntiClockwise = function(k, g, l, m = 0) {
        const u = e.angleDiff(k, g);
        m *= b;
        return e.angleClockwise(g, k) ? e.clampAngle((-b + u - m) * l) : e.clampAngle(k - (u + m) * l)
    };
    e.lerp = function(k, g, l) {
        return k + l * (g -
            k)
    };
    e.unlerp = function(k, g, l) {
        return k === g ? 0 : (l - k) / (g - k)
    };
    e.relerp = function(k, g, l, m, u) {
        return e.lerp(m, u, e.unlerp(k, g, l))
    };
    e.qarp = function(k, g, l, m) {
        return e.lerp(e.lerp(k, g, m), e.lerp(g, l, m), m)
    };
    e.cubic = function(k, g, l, m, u) {
        return e.lerp(e.qarp(k, g, l, u), e.qarp(g, l, m, u), u)
    };
    e.cosp = function(k, g, l) {
        return (k + g + (k - g) * Math.cos(l * Math.PI)) / 2
    };
    e.isPOT = function(k) {
        return 0 < k && 0 === (k - 1 & k)
    };
    e.nextHighestPowerOfTwo = function(k) {
        --k;
        for (let g = 1; 32 > g; g <<= 1) k |= k >> g;
        return k + 1
    };
    e.roundToNearestFraction = function(k, g) {
        return Math.round(k *
            g) / g
    };
    e.floorToNearestFraction = function(k, g) {
        return Math.floor(k * g) / g
    };
    e.round6dp = function(k) {
        return Math.round(1E6 * k) / 1E6
    };
    e.toFixed = function(k, g) {
        k = k.toFixed(g);
        for (g = k.length - 1; 0 <= g && "0" === k.charAt(g); --g);
        0 <= g && "." === k.charAt(g) && --g;
        return 0 > g ? k : k.substr(0, g + 1)
    };
    e.PackRGB = function(k, g, l) {
        return e.clamp(k, 0, 255) | e.clamp(g, 0, 255) << 8 | e.clamp(l, 0, 255) << 16
    };
    e.PackRGBAEx = function(k, g, l, m) {
        k = e.clamp(Math.floor(1024 * k), -8192, 8191);
        g = e.clamp(Math.floor(1024 * g), -8192, 8191);
        l = e.clamp(Math.floor(1024 * l), -8192, 8191);
        m = e.clamp(Math.floor(1023 * m), 0, 1023);
        0 > k && (k += 16384);
        0 > g && (g += 16384);
        0 > l && (l += 16384);
        return -(274877906944 * k + 16777216 * g + 1024 * l + m)
    };
    e.PackRGBEx = function(k, g, l) {
        return e.PackRGBAEx(k, g, l, 1)
    };

    function c(k) {
        return 0 === k && 0 > 1 / k
    }
    e.GetRValue = function(k) {
        if (0 <= k) return (k & 255) / 255;
        k = Math.floor(-k / 274877906944);
        8191 < k && (k -= 16384);
        return k / 1024
    };
    e.GetGValue = function(k) {
        if (0 <= k) return ((k & 65280) >> 8) / 255;
        k = Math.floor(-k % 274877906944 / 16777216);
        8191 < k && (k -= 16384);
        return k / 1024
    };
    e.GetBValue = function(k) {
        if (0 <=
            k) return ((k & 16711680) >> 16) / 255;
        k = Math.floor(-k % 16777216 / 1024);
        8191 < k && (k -= 16384);
        return k / 1024
    };
    e.GetAValue = function(k) {
        return c(k) ? 0 : 0 <= k ? 1 : Math.floor(-k % 1024) / 1023
    };
    e.greatestCommonDivisor = function(k, g) {
        k = Math.floor(k);
        for (g = Math.floor(g); 0 !== g;) {
            let l = g;
            g = k % g;
            k = l
        }
        return k
    };
    const f = [
        [3, 2],
        [4, 3],
        [5, 4],
        [5, 3],
        [6, 5],
        [14, 9],
        [16, 9],
        [16, 10],
        [21, 9]
    ];
    e.getAspectRatio = function(k, g) {
        k = Math.floor(k);
        g = Math.floor(g);
        if (k === g) return [1, 1];
        for (var l of f) {
            let m = k / l[0] * l[1];
            if (1 > Math.abs(g - m)) return l.slice(0);
            m = k / l[1] * l[0];
            if (1 > Math.abs(g - m)) return [l[1], l[0]]
        }
        l = e.greatestCommonDivisor(k, g);
        return [k / l, g / l]
    };
    e.segmentsIntersect = function(k, g, l, m, u, x, p, r) {
        var t = Math.min(k, l),
            q = Math.max(u, p);
        if (Math.max(k, l) < Math.min(u, p) || t > q) return !1;
        t = Math.min(g, m);
        q = Math.max(x, r);
        if (Math.max(g, m) < Math.min(x, r) || t > q) return !1;
        t = u - k + p - l;
        q = x - g + r - m;
        k = l - k;
        g = m - g;
        u = p - u;
        x = r - x;
        r = Math.abs(g * u - x * k);
        return Math.abs(u * q - x * t) > r ? !1 : Math.abs(k * q - g * t) <= r
    };
    e.segmentsIntersectPreCalc = function(k, g, l, m, u, x, p, r, t, q, w, y) {
        const C = Math.max(t, w);
        if (x < Math.min(t, w) || u > C) return !1;
        u = Math.max(q, y);
        if (r < Math.min(q, y) || p > u) return !1;
        p = t - k + w - l;
        r = q - g + y - m;
        k = l - k;
        g = m - g;
        t = w - t;
        q = y - q;
        y = Math.abs(g * t - q * k);
        return Math.abs(t * r - q * p) > y ? !1 : Math.abs(k * r - g * p) <= y
    };
    e.segmentIntersectsQuad = function(k, g, l, m, u) {
        const x = Math.min(k, l),
            p = Math.max(k, l),
            r = Math.min(g, m),
            t = Math.max(g, m),
            q = u.getTlx(),
            w = u.getTly(),
            y = u.getTrx(),
            C = u.getTry(),
            F = u.getBrx(),
            H = u.getBry(),
            M = u.getBlx();
        u = u.getBly();
        return e.segmentsIntersectPreCalc(k, g, l, m, x, p, r, t, q, w, y, C) || e.segmentsIntersectPreCalc(k,
            g, l, m, x, p, r, t, y, C, F, H) || e.segmentsIntersectPreCalc(k, g, l, m, x, p, r, t, F, H, M, u) || e.segmentsIntersectPreCalc(k, g, l, m, x, p, r, t, M, u, q, w)
    };
    e.segmentIntersectsAnyN = function(k, g, l, m, u) {
        const x = Math.min(k, l),
            p = Math.max(k, l),
            r = Math.min(g, m),
            t = Math.max(g, m);
        let q = 0;
        for (let w = u.length - 4; q <= w; q += 2)
            if (e.segmentsIntersectPreCalc(k, g, l, m, x, p, r, t, u[q], u[q + 1], u[q + 2], u[q + 3])) return !0;
        return e.segmentsIntersectPreCalc(k, g, l, m, x, p, r, t, u[q], u[q + 1], u[0], u[1])
    };
    e.rayIntersect = function(k, g, l, m, u, x, p, r) {
        l -= k;
        x = r - x;
        const t = l *
            x - (m - g) * (p - u);
        if (0 === t) return 2;
        m = ((g - m) * (p - k) + l * (r - g)) / t;
        return 0 < m && 1.000001 > m ? (x * (p - k) + (u - p) * (r - g)) / t : 2
    };
    e.rayIntersectExtended = function(k, g, l, m, u, x, p, r, t) {
        const q = (p - u) * t;
        t *= r - x;
        return e.rayIntersect(k, g, l, m, u - q, x - t, p + q, r + t)
    };
    e.isPointInTriangleInclusive = function(k, g, l, m, u, x, p, r) {
        u -= l;
        x -= m;
        p -= l;
        r -= m;
        k -= l;
        l = g - m;
        g = u * u + x * x;
        m = u * p + x * r;
        u = u * k + x * l;
        x = p * p + r * r;
        p = p * k + r * l;
        r = 1 / (g * x - m * m);
        x = (x * u - m * p) * r;
        u = (g * p - m * u) * r;
        return 0 <= x && 0 <= u && 1 >= x + u
    };
    e.triangleCartesianToBarycentric = function(k, g, l, m, u, x, p, r) {
        u -= l;
        x -=
            m;
        p -= l;
        r -= m;
        k -= l;
        const t = g - m;
        g = u * u + x * x;
        m = u * p + x * r;
        l = p * p + r * r;
        u = k * u + t * x;
        x = k * p + t * r;
        p = g * l - m * m;
        r = (l * u - m * x) / p;
        u = (g * x - m * u) / p;
        return [1 - r - u, r, u]
    };
    e.triangleBarycentricToCartesian = function(k, g, l, m, u, x, p, r, t) {
        return [k * m + g * x + l * r, k * u + g * p + l * t]
    }
} {
    "use strict";
    const e = self.C3;
    let b = null,
        a = "";
    if ("undefined" !== typeof document) {
        b = document;
        const l = document.querySelector("base");
        if (a = l && l.hasAttribute("href") ? l.getAttribute("href") : "") a.startsWith("/") && (a = a.substr(1)), a.endsWith("/") || (a += "/")
    }
    e.GetBaseHref = function() {
        return a
    };
    e.GetBaseURL = function() {
        if (!b) return "";
        const l = b.location;
        return e.GetPathFromURL(l.origin + l.pathname) + a
    };
    e.GetPathFromURL = function(l) {
        if (!l.length || l.endsWith("/") || l.endsWith("\\")) return l;
        const m = Math.max(l.lastIndexOf("/"),
            l.lastIndexOf("\\"));
        return -1 === m ? "" : l.substr(0, m + 1)
    };
    e.GetFilenameFromURL = function(l) {
        if (!l.length) return l;
        if (l.endsWith("/") || l.endsWith("\\")) return "";
        const m = Math.max(l.lastIndexOf("/"), l.lastIndexOf("\\"));
        return -1 === m ? l : l.substr(m + 1)
    };
    e.GetFileExtension = function(l) {
        let m = l.lastIndexOf(".");
        return 1 > m ? "" : l.substr(m)
    };
    e.GetFileNamePart = function(l) {
        let m = l.lastIndexOf(".");
        return 1 > m ? l : l.substr(0, m)
    };
    e.NormalizeFileSeparator = function(l) {
        return l.replace(/\\/g, "/")
    };
    e.IsFileExtension = function(l,
        m) {
        l = l ? e.GetFileExtension(l).slice(1) : "";
        return m === l
    };
    e.FileNameEquals = function(l, m) {
        let u, x;
        e.IsFileLike(l) && (u = e.GetFileNamePart(l.name));
        e.IsString(l) && (u = e.GetFileNamePart(l));
        e.IsFileLike(m) && (x = e.GetFileNamePart(m.name));
        e.IsString(m) && (x = e.GetFileNamePart(m));
        return u === x
    };
    e.ParseFilePath = function(l) {
        l = e.NormalizeFileSeparator(l);
        let m = /^\w:\//.exec(l);
        m ? (m = m[0], l = l.slice(3), "/" !== l[0] && (l = "/" + l)) : m = "";
        l = l.replace(/\/{2,}/g, "/");
        1 < l.length && "/" === l.slice(-1) && (l = l.slice(0, -1));
        var u = l.lastIndexOf("/") +
            1;
        let x = "",
            p = l,
            r = "";
        0 < u && (x = l.slice(0, u), p = l.slice(u));
        l = p;
        u = p.lastIndexOf(".");
        0 < u && (r = p.slice(u), l = p.slice(0, -r.length));
        return {
            dir: x,
            base: p,
            name: l,
            root: m,
            ext: r,
            full: m + x + p
        }
    };
    e.Wait = function(l, m) {
        return new Promise((u, x) => {
            self.setTimeout(u, l, m)
        })
    };
    e.swallowException = function(l) {
        try {
            l()
        } catch (m) {
            e.isDebug && console.warn("Swallowed exception: ", m)
        }
    };
    e.noop = function() {};
    e.equalsNoCase = function(l, m) {
        return "string" !== typeof l || "string" !== typeof m ? !1 : l === m || l.normalize().toLowerCase() === m.normalize().toLowerCase()
    };
    e.equalsCase = function(l, m) {
        return "string" !== typeof l || "string" !== typeof m ? !1 : l === m ? !0 : l.normalize() === m.normalize()
    };
    e.typedArraySet16 = function(l, m, u) {
        l[u++] = m[0];
        l[u++] = m[1];
        l[u++] = m[2];
        l[u++] = m[3];
        l[u++] = m[4];
        l[u++] = m[5];
        l[u++] = m[6];
        l[u++] = m[7];
        l[u++] = m[8];
        l[u++] = m[9];
        l[u++] = m[10];
        l[u++] = m[11];
        l[u++] = m[12];
        l[u++] = m[13];
        l[u++] = m[14];
        l[u] = m[15]
    };
    e.truncateArray = function(l, m) {
        l.length = m
    };
    e.clearArray = function(l) {
        l && 0 !== l.length && e.truncateArray(l, 0)
    };
    e.clear2DArray = function(l) {
        if (l) {
            for (let m = 0; m <
                l.length; m++) e.truncateArray(l[m], 0);
            e.truncateArray(l, 0)
        }
    };
    e.extendArray = function(l, m, u) {
        m |= 0;
        var x = l.length;
        if (!(m <= x))
            for (; x < m; ++x) l.push(u)
    };
    e.resizeArray = function(l, m, u) {
        m |= 0;
        const x = l.length;
        m < x ? e.truncateArray(l, m) : m > x && e.extendArray(l, m, u)
    };
    e.shallowAssignArray = function(l, m) {
        e.clearArray(l);
        e.appendArray(l, m)
    };
    e.appendArray = function(l, m) {
        if (1E4 > m.length) l.push(...m);
        else
            for (let u = 0, x = m.length; u < x; ++u) l.push(m[u])
    };
    e.arrayRemove = function(l, m) {
        m = Math.floor(m);
        if (!(0 > m || m >= l.length)) {
            for (var u =
                    l.length - 1; m < u; ++m) l[m] = l[m + 1];
            e.truncateArray(l, u)
        }
    };
    e.arrayFindRemove = function(l, m) {
        m = l.indexOf(m);
        0 <= m && l.splice(m, 1)
    };
    e.arraysEqual = function(l, m) {
        let u = l.length;
        if (m.length !== u) return !1;
        for (let x = 0; x < u; ++x)
            if (l[x] !== m[x]) return !1;
        return !0
    };
    e.arrayFilterOut = function(l, m) {
        let u = [],
            x = 0;
        for (let p = 0, r = l.length; p < r; ++p) {
            let t = l[p];
            m(t) ? u.push(t) : (l[x] = t, ++x)
        }
        e.truncateArray(l, x);
        return u
    };
    e.arrayRemoveAllInSet = function(l, m) {
        const u = l.length;
        let x = 0;
        for (let p = 0, r = l.length; p < r; ++p) {
            let t = l[p];
            m.has(t) ||
                (l[x++] = t)
        }
        e.truncateArray(l, x);
        return u - x
    };
    e.isArrayIndexInBounds = function(l, m) {
        return l !== Math.floor(l) ? !1 : 0 <= l && l < m.length
    };
    e.validateArrayIndex = function(l, m) {
        if (!e.isArrayIndexInBounds(l, m)) throw new RangeError("array index out of bounds");
    };
    e.cloneArray = function(l) {
        return l.slice()
    };
    e.deepCloneArray = function(l, m) {
        let u = [];
        for (let x of l)
            if (e.IsObject(x)) {
                l = m(x);
                if (!l) throw Error("missing clone");
                if (l.constructor !== x.constructor) throw Error("object is not a clone");
                u.push(l)
            } else e.IsArray(x) ?
                u.push(e.deepCloneArray(x, m)) : u.push(x);
        return u
    };
    e.clone2DArray = function(l) {
        let m = [];
        for (let u of l) m.push(u.slice());
        return m
    };
    e.mergeSets = function(l, m) {
        return new Set([...l, ...m])
    };
    e.mergeSetsInPlace = function(l, m) {
        for (const u of m) l.add(u);
        return l
    };
    e.first = function(l) {
        for (let m of l) return m;
        return null
    };
    e.xor = function(l, m) {
        return !l !== !m
    };
    e.compare = function(l, m, u) {
        switch (m) {
            case 0:
                return l === u;
            case 1:
                return l !== u;
            case 2:
                return l < u;
            case 3:
                return l <= u;
            case 4:
                return l > u;
            case 5:
                return l >= u;
            default:
                return !1
        }
    };
    e.hasAnyOwnProperty = function(l) {
        for (let m in l)
            if (l.hasOwnProperty(m)) return !0;
        return !1
    };
    e.PromiseAllWithProgress = function(l, m) {
        return l.length ? new Promise((u, x) => {
            const p = [];
            let r = 0,
                t = !1;
            for (let q = 0, w = l.length; q < w; ++q) p.push(void 0), l[q].then(y => {
                t || (p[q] = y, ++r, r === l.length ? u(p) : m(r, l.length))
            }).catch(y => {
                t = !0;
                x(y)
            })
        }) : Promise.resolve([])
    };
    let d = [];
    e.AddLibraryMemoryCallback = function(l) {
        d.push(l)
    };
    e.GetEstimatedLibraryMemoryUsage = function() {
        let l = 0;
        for (let m of d) {
            let u = m();
            l += u
        }
        return Math.floor(l)
    };
    let c = 1;
    const f = new Map,
        k = new MessageChannel;
    k.port2.onmessage = function(l) {
        l = l.data;
        const m = f.get(l);
        f.delete(l);
        m && m(performance.now())
    };
    e.RequestUnlimitedAnimationFrame = function(l) {
        const m = c++;
        f.set(m, l);
        k.port1.postMessage(m);
        return m
    };
    e.CancelUnlimitedAnimationFrame = function(l) {
        f.delete(l)
    };
    e.PostTask = e.RequestUnlimitedAnimationFrame;
    e.WaitForNextTask = function() {
        return new Promise(l => e.PostTask(l))
    };
    const g = new Set;
    e.RequestPostAnimationFrame = function(l) {
        const m = self.requestAnimationFrame(async u => {
            await e.WaitForNextTask();
            g.has(m) && (g.delete(m), l(u))
        });
        g.add(m);
        return m
    };
    e.CancelPostAnimationFrame = function(l) {
        g.has(l) && (self.cancelAnimationFrame(l), g.delete(l))
    }
} {
    "use strict";
    const e = self.C3;
    e.IsAbsoluteURL = function(b) {
        return /^(?:[a-z\-]+:)?\/\//.test(b) || "data:" === b.substr(0, 5) || "blob:" === b.substr(0, 5)
    };
    e.IsRelativeURL = function(b) {
        return !e.IsAbsoluteURL(b)
    };
    e.ThrowIfNotOk = function(b) {
        if (!b.ok) throw Error(`fetch '${b.url}' response returned ${b.status} ${b.statusText}`);
    };
    e.FetchOk = function(b, a) {
        return fetch(b, a).then(d => {
            e.ThrowIfNotOk(d);
            return d
        })
    };
    e.FetchText = function(b) {
        return e.FetchOk(b).then(a => a.text())
    };
    e.FetchJson = function(b) {
        return e.FetchOk(b).then(a =>
            a.json())
    };
    e.FetchBlob = function(b) {
        return e.FetchOk(b).then(a => a.blob())
    };
    e.FetchArrayBuffer = function(b) {
        return e.FetchOk(b).then(a => a.arrayBuffer())
    };
    e.FetchImage = function(b) {
        return new Promise((a, d) => {
            const c = new Image;
            c.onload = () => a(c);
            c.onerror = f => d(f);
            c.src = b
        })
    };
    e.BlobToArrayBuffer = function(b) {
        return "function" === typeof b.arrayBuffer ? b.arrayBuffer() : new Promise((a, d) => {
            const c = new FileReader;
            c.onload = () => a(c.result);
            c.onerror = () => d(c.error);
            c.readAsArrayBuffer(b)
        })
    };
    e.BlobToString = function(b) {
        return "function" ===
            typeof b.text ? b.text() : new Promise((a, d) => {
                const c = new FileReader;
                c.onload = () => a(c.result);
                c.onerror = () => d(c.error);
                c.readAsText(b)
            })
    };
    e.BlobToJson = function(b) {
        return e.BlobToString(b).then(a => JSON.parse(a))
    };
    e.BlobToImage = async function(b, a) {
        b = URL.createObjectURL(b);
        try {
            const d = await e.FetchImage(b);
            URL.revokeObjectURL(b);
            b = "";
            a && "function" === typeof d.decode && await d.decode();
            return d
        } finally {
            b && URL.revokeObjectURL(b)
        }
    };
    e.CreateCanvas = function(b, a) {
        if ("undefined" !== typeof document && "function" ===
            typeof document.createElement) {
            const d = document.createElement("canvas");
            d.width = b;
            d.height = a;
            return d
        }
        return new OffscreenCanvas(b, a)
    };
    e.CanvasToBlob = function(b, a, d) {
        "number" !== typeof d && (d = 1);
        a = a || "image/png";
        d = e.clamp(d, 0, 1);
        return b.toBlob ? new Promise(c => b.toBlob(c, a, d)) : b.convertToBlob ? b.convertToBlob({
            type: a,
            quality: d
        }) : e.Asyncify(() => e.CanvasToBlobSync(b, a, d))
    };
    e.CanvasToBlobSync = function(b, a, d) {
        "number" !== typeof d && (d = 1);
        a = a || "image/png";
        d = e.clamp(d, 0, 1);
        return e.DataURIToBinaryBlobSync(b.toDataURL(a,
            d))
    };
    e.DataURIToBinaryBlobSync = function(b) {
        b = e.ParseDataURI(b);
        return e.BinaryStringToBlob(b.data, b.mime_type)
    };
    e.ParseDataURI = function(b) {
        if ("data:" !== b.substr(0, 5)) throw new URIError("expected data: uri");
        var a = b.indexOf(",");
        if (0 > a) throw new URIError("expected comma in data: uri");
        var d = b.substring(5, a);
        b = b.substring(a + 1);
        a = d.split(";");
        d = a[0] || "";
        let c = a[2];
        b = "base64" === a[1] || "base64" === c ? atob(b) : decodeURIComponent(b);
        return {
            mime_type: d,
            data: b
        }
    };
    e.BinaryStringToBlob = function(b, a) {
        var d = b.length;
        let c = d >> 2,
            f = new Uint8Array(d),
            k = new Uint32Array(f.buffer, 0, c),
            g, l;
        for (l = g = 0; g < c; ++g) k[g] = b.charCodeAt(l++) | b.charCodeAt(l++) << 8 | b.charCodeAt(l++) << 16 | b.charCodeAt(l++) << 24;
        for (d &= 3; d--;) f[l] = b.charCodeAt(l), ++l;
        return a ? new Blob([f], {
            type: a
        }) : new Blob([f])
    };
    e.DrawableToBlob = function(b, a, d) {
        const c = e.CreateCanvas(b.width, b.height);
        c.getContext("2d").drawImage(b, 0, 0);
        return e.CanvasToBlob(c, a, d)
    };
    e.ImageDataToBlobSync = function(b, a, d) {
        const c = e.CreateCanvas(b.width, b.height);
        c.getContext("2d").putImageData(b,
            0, 0);
        return e.CanvasToBlobSync(c, a, d)
    };
    e.ImageDataToBlob = function(b, a, d) {
        if (e.Supports.ImageBitmapOptions) return createImageBitmap(b, {
            premultiplyAlpha: "none"
        }).then(c => e.DrawableToBlob(c, a, d));
        if (e.Supports.ImageBitmap) return createImageBitmap(b).then(c => e.DrawableToBlob(c, a, d)); {
            const c = e.CreateCanvas(b.width, b.height);
            c.getContext("2d").putImageData(b, 0, 0);
            return e.CanvasToBlob(c, a, d)
        }
    };
    e.CopySet = function(b, a) {
        b.clear();
        for (const d of a) b.add(d)
    };
    e.MapToObject = function(b) {
        const a = Object.create(null);
        for (const [d, c] of b.entries()) a[d] = c;
        return a
    };
    e.ObjectToMap = function(b, a) {
        a.clear();
        for (const [d, c] of Object.entries(b)) a.set(d, c)
    };
    e.ToSuperJSON = function d(a) {
        if ("object" === typeof a && null !== a) {
            if (a instanceof Set) return {
                _c3type_: "set",
                data: [...a].map(c => d(c))
            };
            if (a instanceof Map) return {
                _c3type_: "map",
                data: [...a].map(c => [c[0], d(c[1])])
            }; {
                const c = Object.create(null);
                for (const [f, k] of Object.entries(a)) c[f] = d(k);
                return c
            }
        }
        return a
    };
    e.FromSuperJSON = function c(d) {
        if ("object" === typeof d & null !== d) {
            if ("set" ===
                d._c3type_) return new Set(d.data.map(f => c(f)));
            if ("map" === d._c3type_) return new Map(d.data.map(f => [f[0], c(f[1])])); {
                const f = Object.create(null);
                for (const [k, g] of Object.entries(d)) f[k] = c(g);
                return f
            }
        }
        return d
    };
    e.CSSToCamelCase = function(d) {
        let c = "",
            f = !1;
        for (const k of d) "-" === k ? f = !0 : f ? (c += k.toUpperCase(), f = !1) : c += k;
        return c
    };
    e.IsIterator = function(d) {
        return "object" === typeof d && "function" === typeof d.next
    };
    e.MakeFilledArray = function(d, c) {
        const f = [];
        if ("function" === typeof c)
            for (var k = 0; k < d; ++k) f.push(c());
        else
            for (k = 0; k < d; ++k) f.push(c);
        return f
    }
} {
    "use strict";
    const e = self.C3,
        b = /([0-9.]+),([0-9.]+)%?,([0-9.]+)%?/i,
        a = /([0-9.]+),([0-9.]+)%?,([0-9.]+)%?,([0-9.])/i;

    function d(f) {
        return 0 === f.length ? "00" : 1 === f.length ? "0" + f : f
    }

    function c(f, k, g) {
        0 > g && (g += 1);
        1 < g && --g;
        return g < 1 / 6 ? f + 6 * (k - f) * g : .5 > g ? k : g < 2 / 3 ? f + (k - f) * (2 / 3 - g) * 6 : f
    }
    e.Color = class {
        constructor(f, k, g, l) {
            this._a = this._b = this._g = this._r = 0;
            f instanceof e.Color ? this.set(f) : this.setRgba(f || 0, k || 0, g || 0, l || 0)
        }
        setRgb(f, k, g) {
            this._r = +f;
            this._g = +k;
            this._b = +g;
            this.clamp();
            return this
        }
        setRgba(f, k, g, l) {
            this._r = +f;
            this._g = +k;
            this._b = +g;
            this._a = +l;
            this.clamp();
            return this
        }
        set(f) {
            this._r = f._r;
            this._g = f._g;
            this._b = f._b;
            this._a = f._a;
            return this
        }
        copy(f) {
            return this.set(f)
        }
        add(f) {
            this._r += f._r;
            this._g += f._g;
            this._b += f._b;
            this._a += f._a;
            this.clamp()
        }
        addRgb(f, k, g, l = 0) {
            this._r += +f;
            this._g += +k;
            this._b += +g;
            this._a += +l;
            this.clamp()
        }
        diff(f) {
            this.setR(Math.max(this._r, f._r) - Math.min(this._r, f._r));
            this.setG(Math.max(this._g, f._g) - Math.min(this._g, f._g));
            this.setB(Math.max(this._b, f._b) - Math.min(this._b, f._b));
            this.setA(Math.max(this._a,
                f._a) - Math.min(this._a, f._a));
            this.clamp()
        }
        copyRgb(f) {
            this._r = f._r;
            this._g = f._g;
            this._b = f._b
        }
        setR(f) {
            this._r = e.clamp(+f, 0, 1)
        }
        getR() {
            return this._r
        }
        setG(f) {
            this._g = e.clamp(+f, 0, 1)
        }
        getG() {
            return this._g
        }
        setB(f) {
            this._b = e.clamp(+f, 0, 1)
        }
        getB() {
            return this._b
        }
        setA(f) {
            this._a = e.clamp(+f, 0, 1)
        }
        getA() {
            return this._a
        }
        clone() {
            return e.New(e.Color, this._r, this._g, this._b, this._a)
        }
        toArray() {
            return [this._r, this._g, this._b, this._a]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        writeToTypedArray(f, k) {
            f[k++] =
                this._r;
            f[k++] = this._g;
            f[k++] = this._b;
            f[k] = this._a
        }
        equals(f) {
            return this._r === f._r && this._g === f._g && this._b === f._b && this._a === f._a
        }
        equalsIgnoringAlpha(f) {
            return this._r === f._r && this._g === f._g && this._b === f._b
        }
        equalsRgb(f, k, g) {
            return this._r === f && this._g === k && this._b === g
        }
        equalsRgba(f, k, g, l) {
            return this._r === f && this._g === k && this._b === g && this._a === l
        }
        multiply(f) {
            this._r *= f._r;
            this._g *= f._g;
            this._b *= f._b;
            this._a *= f._a
        }
        multiplyAlpha(f) {
            this._r *= f;
            this._g *= f;
            this._b *= f;
            this._a *= f
        }
        premultiply() {
            this._r *= this._a;
            this._g *= this._a;
            this._b *= this._a;
            return this
        }
        unpremultiply() {
            this._r /= this._a;
            this._g /= this._a;
            this._b /= this._a;
            return this
        }
        clamp() {
            this._r = e.clamp(this._r, 0, 1);
            this._g = e.clamp(this._g, 0, 1);
            this._b = e.clamp(this._b, 0, 1);
            this._a = e.clamp(this._a, 0, 1);
            return this
        }
        setFromRgbValue(f) {
            this._r = e.GetRValue(f);
            this._g = e.GetGValue(f);
            this._b = e.GetBValue(f);
            this._a = e.GetAValue(f)
        }
        getCssRgb(f, k, g) {
            f = e.IsFiniteNumber(f) ? f : this.getR();
            k = e.IsFiniteNumber(k) ? k : this.getG();
            g = e.IsFiniteNumber(g) ? g : this.getB();
            return `rgb(${100*
f}%, ${100*k}%, ${100*g}%)`
        }
        getCssRgba(f, k, g, l) {
            f = e.IsFiniteNumber(f) ? f : this.getR();
            k = e.IsFiniteNumber(k) ? k : this.getG();
            g = e.IsFiniteNumber(g) ? g : this.getB();
            l = e.IsFiniteNumber(l) ? l : this.getA();
            return `rgba(${100*f}%, ${100*k}%, ${100*g}%, ${l})`
        }
        toHexString() {
            const f = Math.round(255 * this.getR()),
                k = Math.round(255 * this.getG()),
                g = Math.round(255 * this.getB());
            return "#" + d(f.toString(16)) + d(k.toString(16)) + d(g.toString(16))
        }
        parseHexString(f) {
            if ("string" !== typeof f) return !1;
            f = f.trim();
            "#" === f.charAt(0) && (f =
                f.substr(1));
            let k, g;
            if (3 === f.length) k = parseInt(f[0], 16) / 15, g = parseInt(f[1], 16) / 15, f = parseInt(f[2], 16) / 15;
            else if (6 === f.length) k = parseInt(f.substr(0, 2), 16) / 255, g = parseInt(f.substr(2, 2), 16) / 255, f = parseInt(f.substr(4, 2), 16) / 255;
            else return !1;
            isFinite(k) && this.setR(k);
            isFinite(g) && this.setG(g);
            isFinite(f) && this.setB(f);
            this.setA(1);
            return !0
        }
        toCommaSeparatedRgb() {
            const f = Math.round(255 * this.getR()),
                k = Math.round(255 * this.getG()),
                g = Math.round(255 * this.getB());
            return `${f}, ${k}, ${g}`
        }
        toRgbArray() {
            const f =
                Math.round(255 * this.getR()),
                k = Math.round(255 * this.getG()),
                g = Math.round(255 * this.getB());
            return [f, k, g]
        }
        parseCommaSeparatedRgb(f) {
            if ("string" !== typeof f) return !1;
            f = f.replace(/^rgb\(|\)|%/, "");
            var k = f.split(",");
            if (3 > k.length) return !1;
            f = parseInt(k[0].trim(), 10) / 255;
            const g = parseInt(k[1].trim(), 10) / 255;
            k = parseInt(k[2].trim(), 10) / 255;
            isFinite(f) && this.setR(f);
            isFinite(g) && this.setG(g);
            isFinite(k) && this.setB(k);
            this.setA(1);
            return !0
        }
        parseCommaSeparatedPercentageRgb(f) {
            if ("string" !== typeof f) return !1;
            f =
                f.replace(/^rgb\(|\)|%/, "");
            var k = f.split(",");
            if (3 > k.length) return !1;
            f = parseInt(k[0].trim(), 10) / 100;
            const g = parseInt(k[1].trim(), 10) / 100;
            k = parseInt(k[2].trim(), 10) / 100;
            isFinite(f) && this.setR(f);
            isFinite(g) && this.setG(g);
            isFinite(k) && this.setB(k);
            this.setA(1);
            return !0
        }
        parseCommaSeparatedRgba(f) {
            if ("string" !== typeof f) return !1;
            f = f.replace(/^rgba\(|\)|%/, "");
            var k = f.split(",");
            if (4 > k.length) return !1;
            f = parseInt(k[0].trim(), 10) / 255;
            const g = parseInt(k[1].trim(), 10) / 255,
                l = parseInt(k[2].trim(), 10) / 255;
            k =
                parseFloat(k[3].trim());
            isFinite(f) && this.setR(f);
            isFinite(g) && this.setG(g);
            isFinite(l) && this.setB(l);
            isFinite(k) && this.setA(k);
            return !0
        }
        parseCommaSeparatedPercentageRgba(f) {
            if ("string" !== typeof f) return !1;
            f = f.replace(/^rgba\(|\)|%/, "");
            var k = f.split(",");
            if (4 > k.length) return !1;
            f = parseInt(k[0].trim(), 10) / 100;
            const g = parseInt(k[1].trim(), 10) / 100,
                l = parseInt(k[2].trim(), 10) / 100;
            k = parseFloat(k[3].trim());
            isFinite(f) && this.setR(f);
            isFinite(g) && this.setG(g);
            isFinite(l) && this.setB(l);
            isFinite(k) && this.setA(k);
            return !0
        }
        parseString(f) {
            if ("string" !== typeof f) return !1;
            f = f.replace(/\s+/, "");
            if (f.includes(",")) {
                if (f.startsWith("rgb(")) return f.includes("%") ? this.parseCommaSeparatedPercentageRgb(f) : this.parseCommaSeparatedRgb(f);
                if (f.startsWith("rgba(")) return f.includes("%") ? this.parseCommaSeparatedPercentageRgba(f) : this.parseCommaSeparatedRgba(f);
                if (f.startsWith("hsl(") || f.startsWith("hsla(")) return this.parseHSLString(f); {
                    const k = f.split(",");
                    if (f.includes("%")) {
                        if (3 === k.length) return this.parseCommaSeparatedPercentageRgb(f);
                        if (4 === k.length) return this.parseCommaSeparatedPercentageRgba(f)
                    } else {
                        if (3 === k.length) return this.parseCommaSeparatedRgb(f);
                        if (4 === k.length) return this.parseCommaSeparatedRgba(f)
                    }
                    return !1
                }
            }
            return this.parseHexString(f)
        }
        toJSON() {
            return [this._r, this._g, this._b, this._a]
        }
        setFromHSLA(f, k, g, l) {
            f %= 360;
            k = e.clamp(k, 0, 100);
            g = e.clamp(g, 0, 100);
            l = e.clamp(l, 0, 1);
            f /= 360;
            k /= 100;
            g /= 100;
            if (0 === k) g = k = f = g;
            else {
                const m = .5 > g ? g * (1 + k) : g + k - g * k,
                    u = 2 * g - m;
                g = c(u, m, f + 1 / 3);
                k = c(u, m, f);
                f = c(u, m, f - 1 / 3)
            }
            this.setR(g);
            this.setG(k);
            this.setB(f);
            this.setA(l);
            return this
        }
        parseHSLString(f) {
            var k = f.replace(/ |hsl|hsla|\(|\)|;/gi, "");
            f = b.exec(k);
            k = a.exec(k);
            return f && 4 === f.length ? (this.setFromHSLA(+f[1], +f[2], +f[3], 1), !0) : k && 5 === k.length ? (this.setFromHSLA(+f[1], +f[2], +f[3], +f[4]), !0) : !1
        }
        toHSLAString() {
            var f = this._r;
            const k = this._g,
                g = this._b,
                l = this._a,
                m = e.Color.GetHue(f, k, g),
                u = e.Color.GetSaturation(f, k, g);
            f = e.Color.GetLuminosity(f, k, g);
            return `hsla(${m}, ${u}%, ${f}%, ${l})`
        }
        toHSLAArray() {
            const f = this._r,
                k = this._g,
                g = this._b;
            return [e.Color.GetHue(f,
                k, g), e.Color.GetSaturation(f, k, g), e.Color.GetLuminosity(f, k, g), this._a]
        }
        setFromJSON(f) {
            !Array.isArray(f) || 3 > f.length || (this._r = f[0], this._g = f[1], this._b = f[2], this._a = 4 <= f.length ? f[3] : 1)
        }
        set r(f) {
            this.setR(f)
        }
        get r() {
            return this.getR()
        }
        set g(f) {
            this.setG(f)
        }
        get g() {
            return this.getG()
        }
        set b(f) {
            this.setB(f)
        }
        get b() {
            return this.getB()
        }
        set a(f) {
            this.setA(f)
        }
        get a() {
            return this.getA()
        }
        setAtIndex(f, k) {
            switch (f) {
                case 0:
                    this.setR(k);
                    break;
                case 1:
                    this.setG(k);
                    break;
                case 2:
                    this.setB(k);
                    break;
                case 3:
                    this.setA(k);
                    break;
                default:
                    throw new RangeError("invalid color index");
            }
        }
        getAtIndex(f) {
            switch (f) {
                case 0:
                    return this.getR();
                case 1:
                    return this.getG();
                case 2:
                    return this.getB();
                case 3:
                    return this.getA();
                default:
                    throw new RangeError("invalid color index");
            }
        }
        static Equals(f, k) {
            let g;
            if (Array.isArray(f)) g = new e.Color, g.setFromJSON(f);
            else if (f instanceof e.Color) g = f;
            else throw Error("unexpected type");
            if (Array.isArray(k)) f = new e.Color, f.setFromJSON(k);
            else if (k instanceof e.Color) f = k;
            else throw Error("unexpected type");
            return g.equals(f)
        }
        static DiffChannel(f, k) {
            return e.clamp(Math.max(f, k) - Math.min(f, k), 0, 1)
        }
        static Diff(f, k) {
            const g = new e.Color;
            g.setR(Math.max(f._r, k._r) - Math.min(f._r, k._r));
            g.setG(Math.max(f._g, k._g) - Math.min(f._g, k._g));
            g.setB(Math.max(f._b, k._b) - Math.min(f._b, k._b));
            g.setA(Math.max(f._a, k._a) - Math.min(f._a, k._a));
            return g
        }
        static DiffNoAlpha(f, k) {
            const g = new e.Color(0, 0, 0, 1);
            g.setR(Math.max(f._r, k._r) - Math.min(f._r, k._r));
            g.setG(Math.max(f._g, k._g) - Math.min(f._g, k._g));
            g.setB(Math.max(f._b, k._b) -
                Math.min(f._b, k._b));
            return g
        }
        static GetHue(f, k, g) {
            const l = Math.max(f, k, g),
                m = Math.min(f, k, g);
            if (l === m) return 0;
            let u = 0;
            switch (l) {
                case f:
                    u = (k - g) / (l - m) + (k < g ? 6 : 0);
                    break;
                case k:
                    u = (g - f) / (l - m) + 2;
                    break;
                case g:
                    u = (f - k) / (l - m) + 4
            }
            return Math.round(u / 6 * 360)
        }
        static GetSaturation(f, k, g) {
            const l = Math.max(f, k, g);
            f = Math.min(f, k, g);
            if (l === f) return 0;
            k = l - f;
            return Math.round(100 * (.5 < (l + f) / 2 ? k / (2 - l - f) : k / (l + f)))
        }
        static GetLuminosity(f, k, g) {
            const l = Math.max(f, k, g);
            return l ? Math.round((l + Math.min(f, k, g)) / 2 * 100) : 0
        }
    };
    e.Color.White =
        Object.freeze(e.New(e.Color, 1, 1, 1, 1));
    e.Color.Black = Object.freeze(e.New(e.Color, 0, 0, 0, 1));
    e.Color.TransparentBlack = Object.freeze(e.New(e.Color, 0, 0, 0, 0))
} {
    "use strict";
    const e = self.C3;
    e.Vector2 = class {
        constructor(b, a) {
            this._y = this._x = 0;
            b instanceof e.Vector2 ? this.copy(b) : this.set(b || 0, a || 0)
        }
        set(b, a) {
            this._x = +b;
            this._y = +a
        }
        copy(b) {
            this._x = b._x;
            this._y = b._y
        }
        equals(b) {
            return this._x === b._x && this._y === b._y
        }
        equalsValues(b, a) {
            return this._x === b && this._y === a
        }
        setX(b) {
            this._x = +b
        }
        getX() {
            return this._x
        }
        setY(b) {
            this._y = +b
        }
        getY() {
            return this._y
        }
        toArray() {
            return [this._x, this._y]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        writeToTypedArray(b, a) {
            b[a++] =
                this._x;
            b[a] = this._y
        }
        offset(b, a) {
            this._x += +b;
            this._y += +a
        }
        scale(b, a) {
            this._x *= b;
            this._y *= a
        }
        divide(b, a) {
            this._x /= b;
            this._y /= a
        }
        round() {
            this._x = Math.round(this._x);
            this._y = Math.round(this._y)
        }
        floor() {
            this._x = Math.floor(this._x);
            this._y = Math.floor(this._y)
        }
        ceil() {
            this._x = Math.ceil(this._x);
            this._y = Math.ceil(this._y)
        }
        angle() {
            return e.angleTo(0, 0, this._x, this._y)
        }
        lengthSquared() {
            return this._x * this._x + this._y * this._y
        }
        length() {
            return Math.sqrt(this.lengthSquared())
        }
        rotatePrecalc(b, a) {
            const d = this._x * a - this._y *
                b;
            this._y = this._y * a + this._x * b;
            this._x = d
        }
        rotate(b) {
            0 !== b && this.rotatePrecalc(Math.sin(b), Math.cos(b))
        }
        rotateAbout(b, a, d) {
            0 === b || a === this._x && d === this._y || (this._x -= a, this._y -= d, this.rotatePrecalc(Math.sin(b), Math.cos(b)), this._x += +a, this._y += +d)
        }
        move(b, a) {
            0 !== a && (this._x += Math.cos(b) * a, this._y += Math.sin(b) * a)
        }
        normalize() {
            const b = this.length();
            0 !== b && 1 !== b && (this._x /= b, this._y /= b)
        }
        clamp(b, a) {
            this._x = e.clamp(this._x, b, a);
            this._y = e.clamp(this._y, b, a)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Rect = class {
        constructor(b, a, d, c) {
            this._bottom = this._right = this._top = this._left = 0;
            b instanceof e.Rect ? this.copy(b) : this.set(b || 0, a || 0, d || 0, c || 0)
        }
        set(b, a, d, c) {
            this._left = +b;
            this._top = +a;
            this._right = +d;
            this._bottom = +c
        }
        setWH(b, a, d, c) {
            b = +b;
            a = +a;
            this._left = b;
            this._top = a;
            this._right = b + +d;
            this._bottom = a + +c
        }
        copy(b) {
            this._left = +b._left;
            this._top = +b._top;
            this._right = +b._right;
            this._bottom = +b._bottom
        }
        clone() {
            return new e.Rect(this._left, this._top, this._right, this._bottom)
        }
        static Merge(b,
            a) {
            const d = new e.Rect;
            d.setLeft(Math.min(b._left, a._left));
            d.setTop(Math.min(b._top, a._top));
            d.setRight(Math.max(b._right, a._right));
            d.setBottom(Math.max(b._bottom, a._bottom));
            return d
        }
        static FromObject(b) {
            return new e.Rect(b.left, b.top, b.right, b.bottom)
        }
        equals(b) {
            return this._left === b._left && this._top === b._top && this._right === b._right && this._bottom === b._bottom
        }
        equalsWH(b, a, d, c) {
            return this._left === b && this._top === a && this.width() === d && this.height() === c
        }
        setLeft(b) {
            this._left = +b
        }
        getLeft() {
            return this._left
        }
        setTop(b) {
            this._top = +b
        }
        getTop() {
            return this._top
        }
        setRight(b) {
            this._right = +b
        }
        getRight() {
            return this._right
        }
        setBottom(b) {
            this._bottom = +b
        }
        getBottom() {
            return this._bottom
        }
        toArray() {
            return [this._left, this._top, this._right, this._bottom]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        toDOMRect() {
            return new DOMRect(this._left, this._top, this.width(), this.height())
        }
        writeToTypedArray(b, a) {
            b[a++] = this._left;
            b[a++] = this._top;
            b[a++] = this._right;
            b[a] = this._bottom
        }
        writeAsQuadToTypedArray(b, a) {
            b[a++] = this._left;
            b[a++] = this._top;
            b[a++] = this._right;
            b[a++] = this._top;
            b[a++] = this._right;
            b[a++] = this._bottom;
            b[a++] = this._left;
            b[a] = this._bottom
        }
        writeAsQuadToTypedArray3D(b, a, d) {
            b[a++] = this._left;
            b[a++] = this._top;
            b[a++] = d;
            b[a++] = this._right;
            b[a++] = this._top;
            b[a++] = d;
            b[a++] = this._right;
            b[a++] = this._bottom;
            b[a++] = d;
            b[a++] = this._left;
            b[a++] = this._bottom;
            b[a] = d
        }
        width() {
            return this._right - this._left
        }
        height() {
            return this._bottom - this._top
        }
        midX() {
            return (this._left + this._right) / 2
        }
        midY() {
            return (this._top + this._bottom) / 2
        }
        offset(b, a) {
            b = +b;
            a = +a;
            this._left += b;
            this._top += a;
            this._right += b;
            this._bottom += a
        }
        offsetLeft(b) {
            this._left += +b
        }
        offsetTop(b) {
            this._top += +b
        }
        offsetRight(b) {
            this._right += +b
        }
        offsetBottom(b) {
            this._bottom += +b
        }
        toSquare(b) {
            if ("x" !== b) throw Error("invalid axis, only 'x' supported");
            this._bottom = this._top < this._bottom ? this._left < this._right ? this._top + this.width() : this._top - this.width() : this._left < this._right ? this._top - this.width() : this._top + this.width()
        }
        inflate(b, a) {
            b = +b;
            a = +a;
            this._left -= b;
            this._top -= a;
            this._right += b;
            this._bottom +=
                a
        }
        deflate(b, a) {
            b = +b;
            a = +a;
            this._left += b;
            this._top += a;
            this._right -= b;
            this._bottom -= a
        }
        multiply(b, a) {
            this._left *= b;
            this._top *= a;
            this._right *= b;
            this._bottom *= a
        }
        divide(b, a) {
            this._left /= b;
            this._top /= a;
            this._right /= b;
            this._bottom /= a
        }
        mirrorAround(b) {
            this._left = +b - this._left;
            this._right = +b - this._right
        }
        flipAround(b) {
            this._top = +b - this._top;
            this._bottom = +b - this._bottom
        }
        swapLeftRight() {
            const b = this._left;
            this._left = this._right;
            this._right = b
        }
        swapTopBottom() {
            const b = this._top;
            this._top = this._bottom;
            this._bottom =
                b
        }
        shuntY(b) {
            const a = this._top;
            this._top = +b - this._bottom;
            this._bottom = +b - a
        }
        round() {
            this._left = Math.round(this._left);
            this._top = Math.round(this._top);
            this._right = Math.round(this._right);
            this._bottom = Math.round(this._bottom)
        }
        roundInner() {
            this._left = Math.ceil(this._left);
            this._top = Math.ceil(this._top);
            this._right = Math.floor(this._right);
            this._bottom = Math.floor(this._bottom)
        }
        roundOuter() {
            this._left = Math.floor(this._left);
            this._top = Math.floor(this._top);
            this._right = Math.ceil(this._right);
            this._bottom = Math.ceil(this._bottom)
        }
        floor() {
            this._left =
                Math.floor(this._left);
            this._top = Math.floor(this._top);
            this._right = Math.floor(this._right);
            this._bottom = Math.floor(this._bottom)
        }
        ceil() {
            this._left = Math.ceil(this._left);
            this._top = Math.ceil(this._top);
            this._right = Math.ceil(this._right);
            this._bottom = Math.ceil(this._bottom)
        }
        clamp(b, a, d, c) {
            this._left < b && (this._left = +b);
            this._top < a && (this._top = +a);
            this._right > d && (this._right = +d);
            this._bottom > c && (this._bottom = +c)
        }
        clampFlipped(b, a, d, c) {
            this._left < b && (this._left = +b);
            this._top > a && (this._top = +a);
            this._right >
                d && (this._right = +d);
            this._bottom < c && (this._bottom = +c)
        }
        normalize() {
            this._left > this._right && this.swapLeftRight();
            this._top > this._bottom && this.swapTopBottom()
        }
        intersectsRect(b) {
            return !(b._right < this._left || b._bottom < this._top || b._left > this._right || b._top > this._bottom)
        }
        intersectsRectOffset(b, a, d) {
            return !(b._right + a < this._left || b._bottom + d < this._top || b._left + a > this._right || b._top + d > this._bottom)
        }
        containsPoint(b, a) {
            return b >= this._left && b <= this._right && a >= this._top && a <= this._bottom
        }
        containsRect(b) {
            return b._left >=
                this._left && b._top >= this._top && b._right <= this._right && b._bottom <= this._bottom
        }
        expandToContain(b) {
            b._left < this._left && (this._left = +b._left);
            b._top < this._top && (this._top = +b._top);
            b._right > this._right && (this._right = +b._right);
            b._bottom > this._bottom && (this._bottom = +b._bottom)
        }
        lerpInto(b) {
            this._left = e.lerp(b._left, b._right, this._left);
            this._top = e.lerp(b._top, b._bottom, this._top);
            this._right = e.lerp(b._left, b._right, this._right);
            this._bottom = e.lerp(b._top, b._bottom, this._bottom)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Quad = class {
        constructor(b, a, d, c, f, k, g, l) {
            this._bly = this._blx = this._bry = this._brx = this._try = this._trx = this._tly = this._tlx = 0;
            b instanceof e.Quad ? this.copy(b) : this.set(b || 0, a || 0, d || 0, c || 0, f || 0, k || 0, g || 0, l || 0)
        }
        set(b, a, d, c, f, k, g, l) {
            this._tlx = +b;
            this._tly = +a;
            this._trx = +d;
            this._try = +c;
            this._brx = +f;
            this._bry = +k;
            this._blx = +g;
            this._bly = +l
        }
        setRect(b, a, d, c) {
            this.set(b, a, d, a, d, c, b, c)
        }
        copy(b) {
            this._tlx = b._tlx;
            this._tly = b._tly;
            this._trx = b._trx;
            this._try = b._try;
            this._brx = b._brx;
            this._bry =
                b._bry;
            this._blx = b._blx;
            this._bly = b._bly
        }
        equals(b) {
            return this._tlx === b._tlx && this._tly === b._tly && this._trx === b._trx && this._try === b._try && this._brx === b._brx && this._bry === b._bry && this._blx === b._blx && this._bly === b._bly
        }
        setTlx(b) {
            this._tlx = +b
        }
        getTlx() {
            return this._tlx
        }
        setTly(b) {
            this._tly = +b
        }
        getTly() {
            return this._tly
        }
        setTrx(b) {
            this._trx = +b
        }
        getTrx() {
            return this._trx
        }
        setTry(b) {
            this._try = +b
        }
        getTry() {
            return this._try
        }
        setBrx(b) {
            this._brx = +b
        }
        getBrx() {
            return this._brx
        }
        setBry(b) {
            this._bry = +b
        }
        getBry() {
            return this._bry
        }
        setBlx(b) {
            this._blx = +b
        }
        getBlx() {
            return this._blx
        }
        setBly(b) {
            this._bly = +b
        }
        getBly() {
            return this._bly
        }
        toDOMQuad() {
            return new DOMQuad(new DOMPoint(this._tlx, this._tly), new DOMPoint(this._trx, this._try), new DOMPoint(this._brx, this._bry), new DOMPoint(this._blx, this._bly))
        }
        toArray() {
            return [this._tlx, this._tly, this._trx, this._try, this._brx, this._bry, this._blx, this._bly]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        writeToTypedArray(b, a) {
            b[a++] = this._tlx;
            b[a++] = this._tly;
            b[a++] = this._trx;
            b[a++] = this._try;
            b[a++] = this._brx;
            b[a++] = this._bry;
            b[a++] = this._blx;
            b[a] = this._bly
        }
        writeToTypedArray3D(b, a, d) {
            b[a++] = this._tlx;
            b[a++] = this._tly;
            b[a++] = d;
            b[a++] = this._trx;
            b[a++] = this._try;
            b[a++] = d;
            b[a++] = this._brx;
            b[a++] = this._bry;
            b[a++] = d;
            b[a++] = this._blx;
            b[a++] = this._bly;
            b[a] = d
        }
        offset(b, a) {
            b = +b;
            a = +a;
            this._tlx += b;
            this._tly += a;
            this._trx += b;
            this._try += a;
            this._brx += b;
            this._bry += a;
            this._blx += b;
            this._bly += a
        }
        round() {
            this._tlx = Math.round(this._tlx);
            this._tly = Math.round(this._tly);
            this._trx = Math.round(this._trx);
            this._try = Math.round(this._try);
            this._brx = Math.round(this._brx);
            this._bry = Math.round(this._bry);
            this._blx = Math.round(this._blx);
            this._bly = Math.round(this._bly)
        }
        floor() {
            this._tlx = Math.floor(this._tlx);
            this._tly = Math.floor(this._tly);
            this._trx = Math.floor(this._trx);
            this._try = Math.floor(this._try);
            this._brx = Math.floor(this._brx);
            this._bry = Math.floor(this._bry);
            this._blx = Math.floor(this._blx);
            this._bly = Math.floor(this._bly)
        }
        ceil() {
            this._tlx = Math.ceil(this._tlx);
            this._tly = Math.ceil(this._tly);
            this._trx = Math.ceil(this._trx);
            this._try =
                Math.ceil(this._try);
            this._brx = Math.ceil(this._brx);
            this._bry = Math.ceil(this._bry);
            this._blx = Math.ceil(this._blx);
            this._bly = Math.ceil(this._bly)
        }
        setFromRect(b) {
            this._tlx = b._left;
            this._tly = b._top;
            this._trx = b._right;
            this._try = b._top;
            this._brx = b._right;
            this._bry = b._bottom;
            this._blx = b._left;
            this._bly = b._bottom
        }
        setFromRotatedRect(b, a) {
            0 === a ? this.setFromRect(b) : this.setFromRotatedRectPrecalc(b, Math.sin(a), Math.cos(a))
        }
        setFromRotatedRectPrecalc(b, a, d) {
            const c = b._left * a,
                f = b._top * a,
                k = b._right * a;
            a *= b._bottom;
            const g = b._left * d,
                l = b._top * d,
                m = b._right * d;
            b = b._bottom * d;
            this._tlx = g - f;
            this._tly = l + c;
            this._trx = m - f;
            this._try = l + k;
            this._brx = m - a;
            this._bry = b + k;
            this._blx = g - a;
            this._bly = b + c
        }
        getBoundingBox(b) {
            b.set(Math.min(this._tlx, this._trx, this._brx, this._blx), Math.min(this._tly, this._try, this._bry, this._bly), Math.max(this._tlx, this._trx, this._brx, this._blx), Math.max(this._tly, this._try, this._bry, this._bly))
        }
        containsPoint(b, a) {
            var d = this._trx - this._tlx,
                c = this._try - this._tly;
            const f = this._brx - this._tlx,
                k = this._bry - this._tly;
            b -= this._tlx;
            a -= this._tly;
            var g = d * d + c * c;
            let l = d * f + c * k;
            c = d * b + c * a;
            const m = f * f + k * k,
                u = f * b + k * a;
            let x = 1 / (g * m - l * l);
            d = (m * c - l * u) * x;
            g = (g * u - l * c) * x;
            if (0 <= d && 0 < g && 1 > d + g) return !0;
            d = this._blx - this._tlx;
            c = this._bly - this._tly;
            g = d * d + c * c;
            l = d * f + c * k;
            c = d * b + c * a;
            x = 1 / (g * m - l * l);
            d = (m * c - l * u) * x;
            g = (g * u - l * c) * x;
            return 0 <= d && 0 < g && 1 > d + g
        }
        midX() {
            return (this._tlx + this._trx + this._brx + this._blx) / 4
        }
        midY() {
            return (this._tly + this._try + this._bry + this._bly) / 4
        }
        intersectsSegment(b, a, d, c) {
            return this.containsPoint(b, a) || this.containsPoint(d, c) ?
                !0 : e.segmentIntersectsQuad(b, a, d, c, this)
        }
        intersectsQuad(b) {
            var a = b.midX(),
                d = b.midY();
            if (this.containsPoint(a, d)) return !0;
            a = this.midX();
            d = this.midY();
            if (b.containsPoint(a, d)) return !0;
            a = this._tlx;
            d = this._tly;
            const c = this._trx,
                f = this._try,
                k = this._brx,
                g = this._bry,
                l = this._blx,
                m = this._bly;
            return e.segmentIntersectsQuad(a, d, c, f, b) || e.segmentIntersectsQuad(c, f, k, g, b) || e.segmentIntersectsQuad(k, g, l, m, b) || e.segmentIntersectsQuad(l, m, a, d, b)
        }
        rotatePointsAnticlockwise() {
            const b = this._tlx,
                a = this._tly;
            this._tlx =
                this._trx;
            this._tly = this._try;
            this._trx = this._brx;
            this._try = this._bry;
            this._brx = this._blx;
            this._bry = this._bly;
            this._blx = b;
            this._bly = a
        }
        mirror() {
            this._swap(0, 2);
            this._swap(1, 3);
            this._swap(6, 4);
            this._swap(7, 5)
        }
        flip() {
            this._swap(0, 6);
            this._swap(1, 7);
            this._swap(2, 4);
            this._swap(3, 5)
        }
        diag() {
            this._swap(2, 6);
            this._swap(3, 7)
        }
        _swap(b, a) {
            const d = this._getAtIndex(b);
            this._setAtIndex(b, this._getAtIndex(a));
            this._setAtIndex(a, d)
        }
        _getAtIndex(b) {
            switch (b) {
                case 0:
                    return this._tlx;
                case 1:
                    return this._tly;
                case 2:
                    return this._trx;
                case 3:
                    return this._try;
                case 4:
                    return this._brx;
                case 5:
                    return this._bry;
                case 6:
                    return this._blx;
                case 7:
                    return this._bly;
                default:
                    throw new RangeError("invalid quad point index");
            }
        }
        _setAtIndex(b, a) {
            a = +a;
            switch (b) {
                case 0:
                    this._tlx = a;
                    break;
                case 1:
                    this._tly = a;
                    break;
                case 2:
                    this._trx = a;
                    break;
                case 3:
                    this._try = a;
                    break;
                case 4:
                    this._brx = a;
                    break;
                case 5:
                    this._bry = a;
                    break;
                case 6:
                    this._blx = a;
                    break;
                case 7:
                    this._bly = a;
                    break;
                default:
                    throw new RangeError("invalid quad point index");
            }
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = [0, 0, 1, 0, 1, 1, 0, 1],
        a = e.New(e.Quad);
    e.CollisionPoly = class extends e.DefendedBase {
        constructor(d, c = !0) {
            super();
            d || (d = b);
            this._ptsArr = Float64Array.from(d);
            this._bbox = new e.Rect;
            this._isBboxChanged = !0;
            this._enabled = c
        }
        Release() {}
        pointsArr() {
            return this._ptsArr
        }
        pointCount() {
            return this._ptsArr.length / 2
        }
        setPoints(d) {
            this._ptsArr.length === d.length ? this._ptsArr.set(d) : this._ptsArr = Float64Array.from(d);
            this._isBboxChanged = !0
        }
        setDefaultPoints() {
            this.setPoints(b)
        }
        copy(d) {
            this.setPoints(d._ptsArr)
        }
        setBboxChanged() {
            this._isBboxChanged = !0
        }
        _updateBbox() {
            if (this._isBboxChanged) {
                var d = this._ptsArr,
                    c = d[0],
                    f = d[1],
                    k = c,
                    g = f;
                for (let l = 0, m = d.length; l < m; l += 2) {
                    const u = d[l],
                        x = d[l + 1];
                    u < c && (c = u);
                    u > k && (k = u);
                    x < f && (f = x);
                    x > g && (g = x)
                }
                this._bbox.set(c, f, k, g);
                this._isBboxChanged = !1
            }
        }
        setFromRect(d, c, f) {
            let k = this._ptsArr;
            8 !== k.length && (this._ptsArr = k = new Float64Array(8));
            k[0] = d.getLeft() - c;
            k[1] = d.getTop() - f;
            k[2] = d.getRight() - c;
            k[3] = d.getTop() - f;
            k[4] = d.getRight() - c;
            k[5] = d.getBottom() - f;
            k[6] = d.getLeft() - c;
            k[7] = d.getBottom() - f;
            this._bbox.copy(d);
            0 === c && 0 ===
                f || this._bbox.offset(-c, -f);
            this._isBboxChanged = !1
        }
        setFromQuad(d, c, f) {
            a.copy(d);
            a.offset(c, f);
            this.setPoints(a.toArray());
            this._isBboxChanged = !0
        }
        transform(d, c, f) {
            let k = 0,
                g = 1;
            0 !== f && (k = Math.sin(f), g = Math.cos(f));
            this.transformPrecalc(d, c, k, g)
        }
        transformPrecalc(d, c, f, k) {
            const g = this._ptsArr;
            for (let l = 0, m = g.length; l < m; l += 2) {
                const u = l + 1,
                    x = g[l] * d,
                    p = g[u] * c;
                g[l] = x * k - p * f;
                g[u] = p * k + x * f
            }
            this._isBboxChanged = !0
        }
        offset(d, c) {
            const f = this._ptsArr;
            for (let k = 0, g = f.length; k < g; k += 2) f[k] += d, f[k + 1] += c
        }
        containsPoint(d, c) {
            const f =
                this._ptsArr;
            if (d === f[0] && c === f[1]) return !0;
            this._updateBbox();
            var k = this._bbox;
            const g = k.getLeft() - 110,
                l = k.getTop() - 101,
                m = k.getRight() + 131;
            k = k.getBottom() + 120;
            let u, x, p, r, t, q, w, y;
            g < d ? (u = g, p = d) : (u = d, p = g);
            l < c ? (x = l, r = c) : (x = c, r = l);
            m < d ? (t = m, w = d) : (t = d, w = m);
            k < c ? (q = k, y = c) : (q = c, y = k);
            let C = 0,
                F = 0;
            for (let M = 0, B = f.length; M < B; M += 2) {
                var H = (M + 2) % B;
                const A = f[M],
                    G = f[M + 1],
                    J = f[H];
                H = f[H + 1];
                e.segmentsIntersectPreCalc(g, l, d, c, u, p, x, r, A, G, J, H) && ++C;
                e.segmentsIntersectPreCalc(m, k, d, c, t, w, q, y, A, G, J, H) && ++F
            }
            return 1 === C % 2 ||
                1 === F % 2
        }
        intersectsPoly(d, c, f) {
            const k = d._ptsArr,
                g = this._ptsArr;
            if (this.containsPoint(k[0] + c, k[1] + f) || d.containsPoint(g[0] - c, g[1] - f)) return !0;
            for (let m = 0, u = g.length; m < u; m += 2) {
                var l = (m + 2) % u;
                d = g[m];
                const x = g[m + 1],
                    p = g[l];
                l = g[l + 1];
                let r, t, q, w;
                d < p ? (r = d, q = p) : (r = p, q = d);
                x < l ? (t = x, w = l) : (t = l, w = x);
                for (let y = 0, C = k.length; y < C; y += 2) {
                    const F = (y + 2) % C;
                    if (e.segmentsIntersectPreCalc(d, x, p, l, r, q, t, w, k[y] + c, k[y + 1] + f, k[F] + c, k[F + 1] + f)) return !0
                }
            }
            return !1
        }
        intersectsSegment(d, c, f, k, g, l) {
            if (this.containsPoint(f - d, k - c) || this.containsPoint(g -
                    d, l - c)) return !0;
            let m, u, x, p;
            f < g ? (m = f, x = g) : (m = g, x = f);
            k < l ? (u = k, p = l) : (u = l, p = k);
            const r = this._ptsArr;
            for (let t = 0, q = r.length; t < q; t += 2) {
                const w = (t + 2) % q;
                if (e.segmentsIntersectPreCalc(f, k, g, l, m, x, u, p, r[t] + d, r[t + 1] + c, r[w] + d, r[w + 1] + c)) return !0
            }
            return !1
        }
        mirror(d) {
            const c = this._ptsArr;
            for (let f = 0, k = c.length; f < k; f += 2) c[f] = 2 * d - c[f];
            this._isBboxChanged = !0
        }
        flip(d) {
            const c = this._ptsArr;
            for (let f = 0, k = c.length; f < k; f += 2) {
                const g = f + 1;
                c[g] = 2 * d - c[g]
            }
            this._isBboxChanged = !0
        }
        diag() {
            const d = this._ptsArr;
            for (let c = 0, f = d.length; c <
                f; c += 2) {
                const k = c + 1,
                    g = d[c];
                d[c] = d[k];
                d[k] = g
            }
            this._isBboxChanged = !0
        }
        GetMidX() {
            const d = this._ptsArr;
            let c = 0;
            for (let f = 0, k = d.length; f < k; f += 2) c += d[f];
            return c / this.pointCount()
        }
        GetMidY() {
            const d = this._ptsArr;
            let c = 0;
            for (let f = 0, k = d.length; f < k; f += 2) c += d[f + 1];
            return c / this.pointCount()
        }
        GetPointsArray() {
            return this._ptsArr
        }
        GetPointCount() {
            return this.pointCount()
        }
        IsEnabled() {
            return this._enabled
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.PairMap = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._firstMap = new Map;
            if (b)
                for (const [a, d, c] of b) this.Set(a, d, c)
        }
        Release() {
            this.Clear();
            this._firstMap = null
        }
        Clear() {
            const b = this._firstMap;
            for (const a of b.values()) a.clear();
            b.clear()
        }
        Set(b, a, d) {
            const c = this._firstMap;
            let f = c.get(b);
            f || (f = new Map, c.set(b, f));
            f.set(a, d)
        }
        Get(b, a) {
            return (b = this._firstMap.get(b)) ? b.get(a) : b
        }
        Has(b, a) {
            return (b = this._firstMap.get(b)) ? b.has(a) : !1
        }
        Delete(b, a) {
            const d = this._firstMap,
                c = d.get(b);
            if (!c) return !1;
            (a = c.delete(a)) && 0 === c.size && d.delete(b);
            return a
        }
        DeleteEither(b) {
            const a = this._firstMap,
                d = a.get(b);
            d && (d.clear(), a.delete(b));
            for (const [c, f] of a.entries()) f.delete(b) && 0 === f.size && a.delete(c)
        }
        GetSize() {
            let b = 0;
            for (const a of this._firstMap.values()) b += a.size;
            return b
        }* values() {
            for (const b of this._firstMap.values()) yield* b.values()
        }* keyPairs() {
            for (const [b, a] of this._firstMap.entries())
                for (const d of a.keys()) yield [b, d]
        }* entries() {
            for (const [b, a] of this._firstMap.entries())
                for (const [d,
                        c
                    ] of a.entries()) yield [b, d, c]
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.ArraySet = class extends e.DefendedBase {
        constructor() {
            super();
            this._set = new Set;
            this._arr = [];
            this._needToRebuildArray = !1
        }
        Release() {
            this.Clear()
        }
        Clear() {
            this._set.clear();
            e.clearArray(this._arr);
            this._needToRebuildArray = !1
        }
        Add(b) {
            this._set.has(b) || (this._set.add(b), this._needToRebuildArray || this._arr.push(b))
        }
        Has(b) {
            return this._set.has(b)
        }
        Delete(b) {
            this._set.delete(b) && (this._needToRebuildArray = !0)
        }
        GetSize() {
            return this._set.size
        }
        IsEmpty() {
            return 0 === this._set.size
        }
        GetArray() {
            this._needToRebuildArray &&
                (this._RebuildArray(), this._needToRebuildArray = !1);
            return this._arr
        }
        _RebuildArray() {
            const b = this._arr;
            e.clearArray(b);
            for (const a of this._set) b.push(a)
        }
    }
} {
    "use strict";
    const e = new Map,
        b = new Map,
        a = new Map,
        d = new Map,
        c = new Map,
        f = new Map;
    f.set("linear", "noease");
    f.set("default", "noease");
    self.Ease = class p {
        constructor() {}
        static InheritEase() {
            return "default"
        }
        static DefaultEase() {
            return "noease"
        }
        static GetEditorEaseNames(r, ...t) {
            this._CreateEaseMap();
            a.has(r) || a.set(r, new Map);
            r = [...a.get(r).keys()];
            r.sort();
            return [...b.keys()].concat(r).filter(q => !t.includes(q))
        }
        static GetRuntimeEaseNames() {
            this._CreateEaseMap();
            const r = [...d.keys()];
            r.sort();
            return [...b.keys()].concat(r)
        }
        static IsNamePredefined(r) {
            this._CreateEaseMap();
            return [...b.keys()].includes(r)
        }
        static _GetEase(r) {
            const t = f.get(r);
            if (t) return e.get(t);
            if (p.IsNamePredefined(r)) return e.get(r);
            if (c.has(r)) return c.get(r)
        }
        static GetEditorEase(r, t) {
            this._CreateEaseMap();
            const q = p._GetEase(r);
            return q ? q : a.get(t).get(r)
        }
        static GetRuntimeEase(r) {
            this._CreateEaseMap();
            const t = p._GetEase(r);
            return t ? t : d.get(r)
        }
        static GetEaseFromIndex(r) {
            this._CreateEaseMap();
            return this.GetRuntimeEaseNames()[r]
        }
        static GetIndexForEase(r, t) {
            this._CreateEaseMap();
            return this.GetEditorEaseNames(t).indexOf(r)
        }
        static _CreateEaseMap() {
            0 ===
                e.size && (this._AddPredifinedEase("default", () => {}), this._AddPredifinedEase("noease", this.NoEase), this._AddPredifinedEase("easeinsine", this.EaseInSine), this._AddPredifinedEase("easeoutsine", this.EaseOutSine), this._AddPredifinedEase("easeinoutsine", this.EaseInOutSine), this._AddPredifinedEase("easeinelastic", this.EaseInElastic), this._AddPredifinedEase("easeoutelastic", this.EaseOutElastic), this._AddPredifinedEase("easeinoutelastic", this.EaseInOutElastic), this._AddPredifinedEase("easeinback", this.EaseInBack),
                    this._AddPredifinedEase("easeoutback", this.EaseOutBack), this._AddPredifinedEase("easeinoutback", this.EaseInOutBack), this._AddPredifinedEase("easeinbounce", this.EaseInBounce), this._AddPredifinedEase("easeoutbounce", this.EaseOutBounce), this._AddPredifinedEase("easeinoutbounce", this.EaseInOutBounce), this._AddPredifinedEase("easeincubic", this.EaseInCubic), this._AddPredifinedEase("easeoutcubic", this.EaseOutCubic), this._AddPredifinedEase("easeinoutcubic", this.EaseInOutCubic), this._AddPredifinedEase("easeinquad",
                        this.EaseInQuad), this._AddPredifinedEase("easeoutquad", this.EaseOutQuad), this._AddPredifinedEase("easeinoutquad", this.EaseInOutQuad), this._AddPredifinedEase("easeinquart", this.EaseInQuart), this._AddPredifinedEase("easeoutquart", this.EaseOutQuart), this._AddPredifinedEase("easeinoutquart", this.EaseInOutQuart), this._AddPredifinedEase("easeinquint", this.EaseInQuint), this._AddPredifinedEase("easeoutquint", this.EaseOutQuint), this._AddPredifinedEase("easeinoutquint", this.EaseInOutQuint), this._AddPredifinedEase("easeincirc",
                        this.EaseInCirc), this._AddPredifinedEase("easeoutcirc", this.EaseOutCirc), this._AddPredifinedEase("easeinoutcirc", this.EaseInOutCirc), this._AddPredifinedEase("easeinexpo", this.EaseInExpo), this._AddPredifinedEase("easeoutexpo", this.EaseOutExpo), this._AddPredifinedEase("easeinoutexpo", this.EaseInOutExpo), this._AddPrivateCustomEase("cubicbezier", this.EaseCubicBezier), this._AddPrivateCustomEase("spline", this.EaseSpline))
        }
        static _AddPredifinedEase(r, t) {
            p._AddEase(r, t, "predefined")
        }
        static _AddPrivateCustomEase(r,
            t) {
            p._AddEase(r, t, "private")
        }
        static AddCustomEase(r, t, q) {
            this._CreateEaseMap();
            p._AddEase(r, t, "custom", q)
        }
        static RemoveCustomEase(r, t) {
            this.IsNamePredefined(r) || [...c.keys()].includes(r) || (t = a.get(t)) && t.delete(r)
        }
        static _AddEase(r, t, q, w) {
            switch (q) {
                case "predefined":
                    e.set(r, t);
                    b.set(r, t);
                    break;
                case "custom":
                    w ? (a.has(w) || a.set(w, new Map), a.get(w).set(r, t)) : d.set(r, t);
                    break;
                case "private":
                    e.set(r, t);
                    c.set(r, t);
                    break;
                default:
                    throw Error("unexpected ease mode");
            }
        }
        static NoEase(r, t, q, w) {
            return q * r / w + t
        }
        static EaseInQuad(r,
            t, q, w) {
            return q * (r /= w) * r + t
        }
        static EaseOutQuad(r, t, q, w) {
            return -q * (r /= w) * (r - 2) + t
        }
        static EaseInOutQuad(r, t, q, w) {
            return 1 > (r /= w / 2) ? q / 2 * r * r + t : -q / 2 * (--r * (r - 2) - 1) + t
        }
        static EaseInCubic(r, t, q, w) {
            return q * (r /= w) * r * r + t
        }
        static EaseOutCubic(r, t, q, w) {
            return q * ((r = r / w - 1) * r * r + 1) + t
        }
        static EaseInOutCubic(r, t, q, w) {
            return 1 > (r /= w / 2) ? q / 2 * r * r * r + t : q / 2 * ((r -= 2) * r * r + 2) + t
        }
        static EaseInQuart(r, t, q, w) {
            return q * (r /= w) * r * r * r + t
        }
        static EaseOutQuart(r, t, q, w) {
            return -q * ((r = r / w - 1) * r * r * r - 1) + t
        }
        static EaseInOutQuart(r, t, q, w) {
            return 1 > (r /=
                w / 2) ? q / 2 * r * r * r * r + t : -q / 2 * ((r -= 2) * r * r * r - 2) + t
        }
        static EaseInQuint(r, t, q, w) {
            return q * (r /= w) * r * r * r * r + t
        }
        static EaseOutQuint(r, t, q, w) {
            return q * ((r = r / w - 1) * r * r * r * r + 1) + t
        }
        static EaseInOutQuint(r, t, q, w) {
            return 1 > (r /= w / 2) ? q / 2 * r * r * r * r * r + t : q / 2 * ((r -= 2) * r * r * r * r + 2) + t
        }
        static EaseInSine(r, t, q, w) {
            return -q * Math.cos(r / w * (Math.PI / 2)) + q + t
        }
        static EaseOutSine(r, t, q, w) {
            return q * Math.sin(r / w * (Math.PI / 2)) + t
        }
        static EaseInOutSine(r, t, q, w) {
            return -q / 2 * (Math.cos(Math.PI * r / w) - 1) + t
        }
        static EaseInExpo(r, t, q, w) {
            return 0 === r ? t : q * Math.pow(2,
                10 * (r / w - 1)) + t
        }
        static EaseOutExpo(r, t, q, w) {
            return r === w ? t + q : q * (-Math.pow(2, -10 * r / w) + 1) + t
        }
        static EaseInOutExpo(r, t, q, w) {
            return 0 === r ? t : r === w ? t + q : 1 > (r /= w / 2) ? q / 2 * Math.pow(2, 10 * (r - 1)) + t : q / 2 * (-Math.pow(2, -10 * --r) + 2) + t
        }
        static EaseInCirc(r, t, q, w) {
            return -q * (Math.sqrt(1 - (r /= w) * r) - 1) + t
        }
        static EaseOutCirc(r, t, q, w) {
            return q * Math.sqrt(1 - (r = r / w - 1) * r) + t
        }
        static EaseInOutCirc(r, t, q, w) {
            return 1 > (r /= w / 2) ? -q / 2 * (Math.sqrt(1 - r * r) - 1) + t : q / 2 * (Math.sqrt(1 - (r -= 2) * r) + 1) + t
        }
        static EaseInElastic(r, t, q, w) {
            let y = 0,
                C = q;
            if (0 === r) return t;
            if (1 === (r /= w)) return t + q;
            y || (y = .3 * w);
            C < Math.abs(q) ? (C = q, q = y / 4) : q = y / (2 * Math.PI) * Math.asin(q / C);
            return -(C * Math.pow(2, 10 * --r) * Math.sin(2 * (r * w - q) * Math.PI / y)) + t
        }
        static EaseOutElastic(r, t, q, w) {
            let y, C = 0,
                F = q;
            if (0 === r) return t;
            if (1 === (r /= w)) return t + q;
            C || (C = .3 * w);
            F < Math.abs(q) ? (F = q, y = C / 4) : y = C / (2 * Math.PI) * Math.asin(q / F);
            return F * Math.pow(2, -10 * r) * Math.sin(2 * (r * w - y) * Math.PI / C) + q + t
        }
        static EaseInOutElastic(r, t, q, w) {
            let y, C = 0,
                F = q;
            if (0 === r) return t;
            if (2 === (r /= w / 2)) return t + q;
            C || (C = .3 * w * 1.5);
            F < Math.abs(q) ? (F = q,
                y = C / 4) : y = C / (2 * Math.PI) * Math.asin(q / F);
            return 1 > r ? -.5 * F * Math.pow(2, 10 * --r) * Math.sin(2 * (r * w - y) * Math.PI / C) + t : F * Math.pow(2, -10 * --r) * Math.sin(2 * (r * w - y) * Math.PI / C) * .5 + q + t
        }
        static EaseInBack(r, t, q, w, y) {
            void 0 === y && (y = 1.70158);
            return q * (r /= w) * r * ((y + 1) * r - y) + t
        }
        static EaseOutBack(r, t, q, w, y) {
            void 0 === y && (y = 1.70158);
            return q * ((r = r / w - 1) * r * ((y + 1) * r + y) + 1) + t
        }
        static EaseInOutBack(r, t, q, w, y) {
            void 0 === y && (y = 1.70158);
            return 1 > (r /= w / 2) ? q / 2 * r * r * (((y *= 1.525) + 1) * r - y) + t : q / 2 * ((r -= 2) * r * (((y *= 1.525) + 1) * r + y) + 2) + t
        }
        static EaseInBounce(r,
            t, q, w) {
            return q - p.EaseOutBounce(w - r, 0, q, w) + t
        }
        static EaseOutBounce(r, t, q, w) {
            return (r /= w) < 1 / 2.75 ? 7.5625 * q * r * r + t : r < 2 / 2.75 ? q * (7.5625 * (r -= 1.5 / 2.75) * r + .75) + t : r < 2.5 / 2.75 ? q * (7.5625 * (r -= 2.25 / 2.75) * r + .9375) + t : q * (7.5625 * (r -= 2.625 / 2.75) * r + .984375) + t
        }
        static EaseInOutBounce(r, t, q, w) {
            return r < w / 2 ? .5 * p.EaseInBounce(2 * r, 0, q, w) + t : .5 * p.EaseOutBounce(2 * r - w, 0, q, w) + .5 * q + t
        }
        static EaseCubicBezier(r, t, q, w, y) {
            return t + 3 * r * (q - t) + 3 * r ** 2 * (t + w - 2 * q) + r ** 3 * (y - t + 3 * q - 3 * w)
        }
        static EaseSpline(r, t, q, w, y, C, F, H, M, B) {
            if (w === y && C === F) return r;
            r = x(r, t, w, C, H, B);
            t = k(q, y, F, M);
            w = g(q, y, F, M);
            q = l(q, y, F, M);
            return m(r, t, w, q)
        }
        static GetBezierSamples(r, t, q, w) {
            const y = [],
                C = k(r, t, q, w),
                F = g(r, t, q, w);
            r = l(r, t, q, w);
            for (t = 0; 11 > t; ++t) q = m(.1 * t, C, F, r), y.push(q);
            return y
        }
    };
    const k = (p, r, t, q) => q - 3 * t + 3 * r - p,
        g = (p, r, t, q) => 3 * t - 6 * r + 3 * p,
        l = (p, r, t, q) => 3 * (r - p),
        m = (p, r, t, q) => ((r * p + t) * p + q) * p,
        u = (p, r, t, q) => 3 * r * p * p + 2 * t * p + q,
        x = (p, r, t, q, w, y) => {
            if (1 == p) return 1;
            for (var C = 0, F = 1, H = y[F]; 10 != F && H <= p;) F++, H = y[F], C += .1;
            F--;
            H = y[F];
            y = C + (p - H) / (y[F + 1] - H) * .1;
            F = k(r, t, q, w);
            H = g(r, t, q, w);
            r = l(r,
                t, q, w);
            t = u(y, F, H, r);
            if (0 !== t)
                if (.02 <= t)
                    for (C = 0; 4 > C; ++C) t = m(y, F, H, r) - p, q = u(y, F, H, r), y -= t / q;
                else {
                    t = C;
                    C += .1;
                    q = 0;
                    let M;
                    do y = t + (C - t) / 2, w = m(y, F, H, r) - p, 0 < w ? C = y : t = y, w = 1E-7 < Math.abs(w), M = 10 > ++q; while (w && M)
                }
            return y
        }
} {
    "use strict";
    const e = self.C3;

    function b(a) {
        e.IsString(a)
    }
    e.ProbabilityTable = class {
        constructor() {
            this._items = [];
            this._totalWeight = 0
        }
        Release() {
            this.Clear();
            this._items = null
        }
        Clear() {
            e.clear2DArray(this._items);
            this._totalWeight = 0
        }
        GetTotalWeight() {
            return this._totalWeight
        }
        Sample(a = Math.random() * this.GetTotalWeight()) {
            let d = 0;
            for (const [c, f] of this._items)
                if (d += c, a < d) return f;
            return 0
        }
        AddItem(a, d) {
            b(d);
            this._totalWeight += a;
            this._items.push([a, d])
        }
        RemoveItem(a, d) {
            b(d);
            const c = 0 === a;
            for (let f = 0; f < this._items.length; f++) {
                const k =
                    this._items[f],
                    g = k[1] === d;
                if ((c || k[0] === a) && g) {
                    this._items.splice(f, 1);
                    this._totalWeight -= k[0];
                    break
                }
            }
        }
        asJSON() {
            return JSON.stringify(this._items)
        }
        static fromJSON(a) {
            const d = new e.ProbabilityTable;
            a = JSON.parse(a);
            for (const c of a) d.AddItem(c[0], c[1]);
            return d
        }
    }
}
"use strict";
self.C3.Event = class {
    constructor(e, b) {
        this.type = e;
        this.cancelable = !!b;
        this.isAsync = this.propagationStopped = this.defaultPrevented = !1
    }
    preventDefault() {
        if (!this.cancelable) throw Error(`event '${this.type}' is not cancelable`);
        this.defaultPrevented = !0
    }
    stopPropagation() {
        if (!this.cancelable) throw Error(`event '${this.type}' cannot be stopped`);
        if (this.isAsync) throw Error(`cannot stop async event '${this.type}' propagation`);
        this.propagationStopped = !0
    }
}; {
    "use strict";
    const e = self.C3;
    e.Event.Handler = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._type = b;
            this._captureListeners = [];
            this._captureListenersSet = new Set;
            this._listeners = [];
            this._listenersSet = new Set;
            this._fireDepth = 0;
            this._queueModifyListeners = []
        }
        Release() {
            0 < this._fireDepth || (e.clearArray(this._captureListeners), this._captureListenersSet.clear(), e.clearArray(this._listeners), this._listenersSet.clear(), e.clearArray(this._queueModifyListeners), e.Release(this))
        }
        _AddListener(b, a) {
            this._IsFiring() ?
                this._queueModifyListeners.push({
                    op: "add",
                    func: b,
                    capture: a
                }) : a ? this._captureListenersSet.has(b) || (this._captureListeners.push(b), this._captureListenersSet.add(b)) : this._listenersSet.has(b) || (this._listeners.push(b), this._listenersSet.add(b))
        }
        _RemoveListener(b, a) {
            this._IsFiring() ? this._queueModifyListeners.push({
                op: "remove",
                func: b,
                capture: a
            }) : a ? this._captureListenersSet.has(b) && (this._captureListenersSet.delete(b), e.arrayFindRemove(this._captureListeners, b)) : this._listenersSet.has(b) && (this._listenersSet.delete(b),
                e.arrayFindRemove(this._listeners, b))
        }
        _IsEmpty() {
            return !this._captureListeners.length && !this._listeners.length
        }
        _IsFiring() {
            return 0 < this._fireDepth
        }
        _ProcessQueuedListeners() {
            const b = new Set,
                a = new Set;
            for (const d of this._queueModifyListeners)
                if ("add" === d.op) this._AddListener(d.func, d.capture), d.capture ? a.delete(d.func) : b.delete(d.func);
                else if ("remove" === d.op) d.capture ? (this._captureListenersSet.delete(d.func), a.add(d.func)) : (this._listenersSet.delete(d.func), b.add(d.func));
            else throw Error("invalid op");
            e.arrayRemoveAllInSet(this._listeners, b);
            e.arrayRemoveAllInSet(this._captureListeners, a);
            e.clearArray(this._queueModifyListeners)
        }
        _FireCancellable(b) {
            this._IncreaseFireDepth();
            let a = !1;
            for (let d = 0, c = this._captureListeners.length; d < c; ++d)
                if (this._captureListeners[d](b), b.propagationStopped) {
                    a = !0;
                    break
                }
            if (!a)
                for (let d = 0, c = this._listeners.length; d < c && (this._listeners[d](b), !b.propagationStopped); ++d);
            this._DecreaseFireDepth();
            return !b.defaultPrevented
        }
        _FireNonCancellable(b) {
            this._IncreaseFireDepth();
            for (let a = 0, d = this._captureListeners.length; a < d; ++a) this._captureListeners[a](b);
            for (let a = 0, d = this._listeners.length; a < d; ++a) this._listeners[a](b);
            this._DecreaseFireDepth();
            return !0
        }
        _IncreaseFireDepth() {
            this._fireDepth++
        }
        _DecreaseFireDepth() {
            this._fireDepth--;
            0 === this._fireDepth && 0 < this._queueModifyListeners.length && this._ProcessQueuedListeners()
        }
        SetDelayRemoveEventsEnabled(b) {
            b ? this._IncreaseFireDepth() : this._DecreaseFireDepth()
        }
        _FireAsync(b) {
            let a = [];
            for (let d = 0, c = this._captureListeners.length; d <
                c; ++d) {
                let f = this._captureListeners[d];
                a.push(e.Asyncify(() => f(b)))
            }
            for (let d = 0, c = this._listeners.length; d < c; ++d) {
                let f = this._listeners[d];
                a.push(e.Asyncify(() => f(b)))
            }
            return Promise.all(a).then(() => !b.defaultPrevented)
        }
        _FireAndWait_AsyncOptional(b) {
            const a = [];
            this._IncreaseFireDepth();
            for (let c = 0, f = this._captureListeners.length; c < f; ++c) {
                var d = this._captureListeners[c](b);
                d instanceof Promise && a.push(d)
            }
            for (let c = 0, f = this._listeners.length; c < f; ++c) d = this._listeners[c](b), d instanceof Promise && a.push(d);
            this._DecreaseFireDepth();
            return a.length ? Promise.all(a).then(() => !b.defaultPrevented) : !b.defaultPrevented
        }
        async _FireAndWaitAsync(b) {
            return await this._FireAndWait_AsyncOptional(b)
        }
        async _FireAndWaitAsyncSequential(b) {
            this._IncreaseFireDepth();
            for (let d = 0, c = this._captureListeners.length; d < c; ++d) {
                var a = this._captureListeners[d](b);
                a instanceof Promise && await a
            }
            for (let d = 0, c = this._listeners.length; d < c; ++d) a = this._listeners[d](b), a instanceof Promise && await a;
            this._DecreaseFireDepth();
            return !b.defaultPrevented
        }* _FireAsGenerator(b) {
            this._IncreaseFireDepth();
            for (let d = 0, c = this._captureListeners.length; d < c; ++d) {
                var a = this._captureListeners[d](b);
                e.IsIterator(a) && (yield* a)
            }
            for (let d = 0, c = this._listeners.length; d < c; ++d) a = this._listeners[d](b), e.IsIterator(a) && (yield* a);
            this._DecreaseFireDepth()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Event.Dispatcher = class extends e.DefendedBase {
        constructor() {
            super();
            this._eventHandlers = new Map;
            this._dispatcherWasReleased = !1
        }
        Release() {
            if (this._dispatcherWasReleased) throw Error("already released");
            this.ClearEvents();
            this._dispatcherWasReleased = !0;
            e.Release(this)
        }
        WasReleased() {
            return this._dispatcherWasReleased
        }
        ClearEvents() {
            for (let b of this._eventHandlers.values()) b.Release();
            this._eventHandlers.clear()
        }
        _GetHandlerByType(b, a) {
            let d = this._eventHandlers.get(b);
            return d ?
                d : a ? (d = e.New(e.Event.Handler, b), this._eventHandlers.set(b, d), d) : null
        }
        HasAnyHandlerFor(b) {
            return this._eventHandlers.has(b)
        }
        addEventListener(b, a, d) {
            this._GetHandlerByType(b, !0)._AddListener(a, !!d)
        }
        removeEventListener(b, a, d) {
            let c = this._GetHandlerByType(b, !1);
            c && (c._RemoveListener(a, !!d), c._IsEmpty() && this._eventHandlers.delete(b))
        }
        dispatchEvent(b) {
            const a = this._GetHandlerByType(b.type, !1);
            return a ? b.cancelable ? a._FireCancellable(b) : a._FireNonCancellable(b) : !0
        }
        dispatchEventAsync(b) {
            const a = this._GetHandlerByType(b.type, !1);
            if (!a) return Promise.resolve(!0);
            b.isAsync = !0;
            return a._FireAsync(b)
        }
        async dispatchEventAndClearAsync(b) {
            const a = this._GetHandlerByType(b.type, !1);
            if (!a) return !0;
            this._eventHandlers.delete(b.type);
            b.isAsync = !0;
            b = await a._FireAsync(b);
            a.Release();
            return b
        }
        async dispatchEventAndWaitAsync(b) {
            const a = this._GetHandlerByType(b.type, !1);
            return a ? await a._FireAndWaitAsync(b) : !0
        }
        dispatchEventAndWait_AsyncOptional(b) {
            const a = this._GetHandlerByType(b.type, !1);
            return a ? a._FireAndWait_AsyncOptional(b) : !0
        }
        async dispatchEventAndWaitAsyncSequential(b) {
            const a =
                this._GetHandlerByType(b.type, !1);
            return a ? await a._FireAndWaitAsyncSequential(b) : !0
        }
        dispatchGeneratorEvent(b) {
            const a = this._GetHandlerByType(b.type, !1);
            if (!a) return null;
            if (b.cancelable) throw Error("not supported");
            return a._FireAsGenerator(b)
        }
        SetDelayRemoveEventsEnabled(b) {
            for (const a of this._eventHandlers.values()) a.SetDelayRemoveEventsEnabled(b)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = "undefined" !== typeof requestIdleCallback;
    let a = [],
        d = -1,
        c = 0;

    function f(m) {
        d = b && 0 === c ? requestIdleCallback(k, {
            timeout: 35
        }) : setTimeout(k, 0 < c ? 1 : m)
    }

    function k(m) {
        d = -1;
        if (a.length) {
            var u = performance.now(),
                x = 0;
            do {
                g(a.shift());
                var p = performance.now();
                ++x;
                var r = (p - u) / x * 1.1
            } while (a.length && (b && 0 === c && "undefined" !== typeof m ? r < m.timeRemaining() : 12 > p - u + r)); - 1 === d && a.length && f(Math.max(16 - (p - u), 4))
        }
    }

    function g(m) {
        let u;
        try {
            u = m.func()
        } catch (x) {
            m.reject(x);
            return
        }
        m.resolve(u)
    }
    let l =
        e.QueryString.Has("disable-asyncify");
    l && console.warn("[Asyncify] Asyncify has been disabled due to disable-asyncify in the query string. Some work will now be done synchronously.");
    e.Asyncify = function(m) {
        let u = null;
        e.isDebug && (u = e.GetCallStack());
        return new Promise((x, p) => {
            a.push({
                func: m,
                resolve: x,
                reject: p,
                stack: u
            });
            l ? g(a.pop()) : -1 === d && f(16)
        })
    };
    e.Asyncify.SetHighThroughputMode = function(m) {
        if (m) ++c;
        else if (--c, 0 > c) throw Error("already turned off high throughput mode");
    }
} {
    "use strict";
    const e = self.C3;
    let b = -1;

    function a() {
        b = -1
    }
    e.FastGetDateNow = function() {
        -1 === b && (b = Date.now(), self.setTimeout(a, 16));
        return b
    };
    let d = -1,
        c = -1,
        f = new Set;

    function k() {
        c = d = -1;
        let g = Date.now();
        for (let l of f)
            if (l._CheckTimeout(g)) {
                let m = l._GetDeadline();
                if (-1 === c || m < c) c = m
            } else f.delete(l); - 1 !== c && (d = self.setTimeout(k, Math.max(c - g + 100, 1E3)))
    }
    e.IdleTimeout = class {
        constructor(g, l) {
            this._callback = g;
            this._timeout = 1E3 * l;
            this._deadline = 0;
            this._isActive = !1
        }
        Reset() {
            let g = e.FastGetDateNow();
            this._deadline =
                g + this._timeout;
            this._isActive || (f.add(this), this._isActive = !0); - 1 === d ? (c = this._deadline, d = self.setTimeout(k, this._timeout + 100)) : this._deadline < c && c > g + 1E3 && (self.clearTimeout(d), c = this._deadline, d = self.setTimeout(k, this._timeout + 100))
        }
        _CheckTimeout(g) {
            return g >= this._deadline ? this._callback() ? (this._deadline = g + this._timeout, !0) : this._isActive = !1 : !0
        }
        _GetDeadline() {
            return this._deadline
        }
        Cancel() {
            this._isActive && (f.delete(this), this._isActive = !1, 0 === f.size && -1 !== d && (self.clearTimeout(d), c = d = -1))
        }
        Release() {
            this.Cancel();
            this._callback = null
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Disposable = class b {
        constructor(a) {
            this._disposed = !1;
            this._disposeAction = a
        }
        Dispose() {
            this._disposed || (this._disposed = !0, this._disposeAction && (this._disposeAction(), this._disposeAction = null))
        }
        IsDisposed() {
            return this._disposed
        }
        Release() {
            this.Dispose()
        }
        static Release(a) {
            return new b(() => a.Release())
        }
        static From(a, d, c, f, k) {
            if ("undefined" === typeof f || null === f) f = !1;
            else if ("boolean" !== typeof f && "object" !== typeof f) throw new TypeError("invalid event listener options");
            k &&
                (c = c.bind(k));
            if (d.includes(" ")) {
                d = d.split(" ");
                k = new e.CompositeDisposable;
                for (let g of d) a.addEventListener(g, c, f), k.Add(e.New(e.Disposable, () => a.removeEventListener(g, c, f)));
                return k
            }
            a.addEventListener(d, c, f);
            return e.New(e.Disposable, () => a.removeEventListener(d, c, f))
        }
    };
    e.StubDisposable = class extends e.Disposable {
        SetAction(b) {
            this._disposeAction = b
        }
    };
    e.CompositeDisposable = class extends e.Disposable {
        constructor(...b) {
            super();
            this._disposables = new Set;
            for (let a of b) this.Add(a)
        }
        Add(...b) {
            if (this._disposed) throw Error("already disposed");
            for (let a of b) this._disposables.add(a)
        }
        Remove(b) {
            if (this._disposed) throw Error("already disposed");
            this._disposables.delete(b)
        }
        RemoveAll() {
            if (this._disposed) throw Error("already disposed");
            if (this._disposables) {
                for (let b of this._disposables) b.Dispose();
                this._disposables.clear()
            }
        }
        IsDisposed() {
            return this._disposed
        }
        Dispose() {
            if (this._disposed) throw Error("already disposed");
            this._disposed = !0;
            for (let b of this._disposables) b.Dispose();
            this._disposables.clear();
            this._disposables = null
        }
        Release() {
            this.Dispose()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.KahanSum = class extends e.DefendedBase {
        constructor() {
            super();
            this._sum = this._t = this._y = this._c = 0
        }
        Add(b) {
            this._y = +b - this._c;
            this._t = this._sum + this._y;
            this._c = this._t - this._sum - this._y;
            this._sum = this._t
        }
        Subtract(b) {
            this._sum -= +b
        }
        Get() {
            return this._sum
        }
        Reset() {
            this._sum = this._t = this._y = this._c = 0
        }
        Set(b) {
            this._t = this._y = this._c = 0;
            this._sum = +b
        }
        Release() {}
    }
} {
    "use strict";
    const e = self.C3,
        b = {
            RBnode: function(a) {
                this.tree = a;
                this.left = this.right = this.tree.sentinel;
                this.parent = null;
                this.color = !1;
                this.key = null
            },
            RedBlackSet: function(a) {
                this.size = 0;
                this.sentinel = new b.RBnode(this);
                this.sentinel.color = !1;
                this.root = this.sentinel;
                this.root.parent = this.sentinel;
                this.compare = a || this.default_compare
            }
        };
    b.RedBlackSet.prototype.default_compare = function(a, d) {
        return a < d ? -1 : d < a ? 1 : 0
    };
    b.RedBlackSet.prototype.clone = function() {
        var a = new b.RedBlackSet(this.compare);
        a.insertAll(this);
        return a
    };
    b.RedBlackSet.prototype.clear = function() {
        this.size = 0;
        this.sentinel = new b.RBnode(this);
        this.sentinel.color = !1;
        this.root = this.sentinel;
        this.root.parent = this.sentinel
    };
    b.RedBlackSet.prototype.leftRotate = function(a) {
        var d = a.right;
        a.right = d.left;
        d.left != this.sentinel && (d.left.parent = a);
        d.parent = a.parent;
        a.parent == this.sentinel ? this.root = d : a == a.parent.left ? a.parent.left = d : a.parent.right = d;
        d.left = a;
        a.parent = d
    };
    b.RedBlackSet.prototype.rightRotate = function(a) {
        var d = a.left;
        a.left = d.right;
        d.right !=
            this.sentinel && (d.right.parent = a);
        d.parent = a.parent;
        a.parent == this.sentinel ? this.root = d : a == a.parent.right ? a.parent.right = d : a.parent.left = d;
        d.right = a;
        a.parent = d
    };
    b.RedBlackSet.prototype.insert = function(a) {
        if (this.contains(a)) this.get_(a).key = a;
        else {
            var d = new b.RBnode(this);
            d.key = a;
            a = this.sentinel;
            for (var c = this.root; c != this.sentinel;) a = c, c = 0 > this.compare(d.key, c.key) ? c.left : c.right;
            d.parent = a;
            a == this.sentinel ? this.root = d : 0 > this.compare(d.key, a.key) ? a.left = d : a.right = d;
            d.left = this.sentinel;
            d.right = this.sentinel;
            d.color = !0;
            this.insertFixup(d);
            this.size++
        }
    };
    b.RedBlackSet.prototype.insertFixup = function(a) {
        for (; a != this.sentinel && a != this.root && 1 == a.parent.color;)
            if (a.parent == a.parent.parent.left) {
                var d = a.parent.parent.right;
                1 == d.color ? (a.parent.color = !1, d.color = !1, a.parent.parent.color = !0, a = a.parent.parent) : (a == a.parent.right && (a = a.parent, this.leftRotate(a)), a.parent.color = !1, a.parent.parent.color = !0, a.parent.parent != this.sentinel && this.rightRotate(a.parent.parent))
            } else d = a.parent.parent.left, 1 == d.color ? (a.parent.color = !1, d.color = !1, a.parent.parent.color = !0, a = a.parent.parent) : (a == a.parent.left && (a = a.parent, this.rightRotate(a)), a.parent.color = !1, a.parent.parent.color = !0, a.parent.parent != this.sentinel && this.leftRotate(a.parent.parent));
        this.root.color = !1
    };
    b.RedBlackSet.prototype.delete_ = function(a) {
        var d = a.left == this.sentinel || a.right == this.sentinel ? a : this.successor_(a);
        var c = d.left != this.sentinel ? d.left : d.right;
        c.parent = d.parent;
        d.parent == this.sentinel ? this.root = c : d == d.parent.left ? d.parent.left = c : d.parent.right =
            c;
        d != a && (a.key = d.key);
        0 == d.color && this.deleteFixup(c);
        this.size--
    };
    b.RedBlackSet.prototype.deleteFixup = function(a) {
        for (; a != this.root && 0 == a.color;)
            if (a == a.parent.left) {
                var d = a.parent.right;
                1 == d.color && (d.color = !1, a.parent.color = !0, this.leftRotate(a.parent), d = a.parent.right);
                0 == d.left.color && 0 == d.right.color ? (d.color = !0, a = a.parent) : (0 == d.right.color && (d.left.color = !1, d.color = !0, this.rightRotate(d), d = a.parent.right), d.color = a.parent.color, a.parent.color = !1, d.right.color = !1, this.leftRotate(a.parent),
                    a = this.root)
            } else d = a.parent.left, 1 == d.color && (d.color = !1, a.parent.color = !0, this.rightRotate(a.parent), d = a.parent.left), 0 == d.right.color && 0 == d.left.color ? (d.color = !0, a = a.parent) : (0 == d.left.color && (d.right.color = !1, d.color = !0, this.leftRotate(d), d = a.parent.left), d.color = a.parent.color, a.parent.color = !1, d.left.color = !1, this.rightRotate(a.parent), a = this.root);
        a.color = !1
    };
    b.RedBlackSet.prototype.remove = function(a) {
        a = this.get_(a);
        if (a != this.sentinel) {
            var d = a.key;
            this.delete_(a);
            return d
        }
        return null
    };
    b.RedBlackSet.prototype.removeSwapped =
        function(a, d) {
            this.remove(d)
        };
    b.RedBlackSet.prototype.min = function(a) {
        for (; a.left != this.sentinel;) a = a.left;
        return a
    };
    b.RedBlackSet.prototype.max = function(a) {
        for (; a.right != this.sentinel;) a = a.right;
        return a
    };
    b.RedBlackSet.prototype.successor_ = function(a) {
        if (a.right != this.sentinel) return this.min(a.right);
        for (var d = a.parent; d != this.sentinel && a == d.right;) a = d, d = d.parent;
        return d
    };
    b.RedBlackSet.prototype.predeccessor_ = function(a) {
        if (a.left != this.sentinel) return this.max(a.left);
        for (var d = a.parent; d != this.sentinel &&
            a == d.left;) a = d, d = d.parent;
        return d
    };
    b.RedBlackSet.prototype.successor = function(a) {
        if (0 < this.size) {
            a = this.get_(a);
            if (a == this.sentinel) return null;
            if (a.right != this.sentinel) return this.min(a.right).key;
            for (var d = a.parent; d != this.sentinel && a == d.right;) a = d, d = d.parent;
            return d != this.sentinel ? d.key : null
        }
        return null
    };
    b.RedBlackSet.prototype.predecessor = function(a) {
        if (0 < this.size) {
            a = this.get_(a);
            if (a == this.sentinel) return null;
            if (a.left != this.sentinel) return this.max(a.left).key;
            for (var d = a.parent; d != this.sentinel &&
                a == d.left;) a = d, d = d.parent;
            return d != this.sentinel ? d.key : null
        }
        return null
    };
    b.RedBlackSet.prototype.getMin = function() {
        return this.min(this.root).key
    };
    b.RedBlackSet.prototype.getMax = function() {
        return this.max(this.root).key
    };
    b.RedBlackSet.prototype.get_ = function(a) {
        for (var d = this.root; d != this.sentinel && 0 != this.compare(d.key, a);) d = 0 > this.compare(a, d.key) ? d.left : d.right;
        return d
    };
    b.RedBlackSet.prototype.contains = function(a) {
        return null != this.get_(a).key
    };
    b.RedBlackSet.prototype.getValues = function() {
        var a = [];
        this.forEach(function(d) {
            a.push(d)
        });
        return a
    };
    b.RedBlackSet.prototype.insertAll = function(a) {
        if ("array" == b.typeOf(a))
            for (var d = 0; d < a.length; d++) this.insert(a[d]);
        else if ("function" == b.typeOf(a.forEach)) a.forEach(this.insert, this);
        else if ("function" == b.typeOf(a.getValues))
            for (a = a.getValues(), d = 0; d < a.length; d++) this.insert(a[d]);
        else if ("object" == b.typeOf(a))
            for (d in a) this.insert(a[d])
    };
    b.RedBlackSet.prototype.removeAll = function(a) {
        if ("array" == b.typeOf(a))
            for (var d = 0; d < a.length; d++) this.remove(a[d]);
        else if ("function" == b.typeOf(a.forEach)) a.forEach(this.removeSwapped, this);
        else if ("function" == b.typeOf(a.getValues))
            for (a = a.getValues(), d = 0; d < a.length; d++) this.remove(a[d]);
        else if ("object" == b.typeOf(a))
            for (d in a) this.remove(a[d])
    };
    b.RedBlackSet.prototype.containsAll = function(a) {
        if ("array" == b.typeOf(a)) {
            for (var d = 0; d < a.length; d++)
                if (!this.contains(a[d])) return !1;
            return !0
        }
        if ("function" == b.typeOf(a.forEach)) return a.every(this.contains, this);
        if ("function" == b.typeOf(a.getValues)) {
            a = a.getValues();
            for (d =
                0; d < a.length; d++)
                if (!this.contains(a[d])) return !1;
            return !0
        }
        if ("object" == b.typeOf(a)) {
            for (d in a)
                if (!this.contains(a[d])) return !1;
            return !0
        }
    };
    b.RedBlackSet.prototype.range = function(a, d) {
        var c = [];
        this.traverseFromTo(function(f) {
            c.push(f)
        }, a, d);
        return c
    };
    b.RedBlackSet.prototype.traverse = function(a, d) {
        if (!this.isEmpty())
            for (var c = this.min(this.root); c != this.sentinel && !a.call(d, c.key, this);) c = this.successor_(c)
    };
    b.RedBlackSet.prototype.traverseFrom = function(a, d, c) {
        if (!this.isEmpty())
            for (d = this.get_(d); d !=
                this.sentinel && !a.call(c, d.key, this);) d = this.successor_(d)
    };
    b.RedBlackSet.prototype.traverseTo = function(a, d, c) {
        if (!this.isEmpty()) {
            var f = this.min(this.root);
            for (d = this.get_(d); f != d && !a.call(c, f.key, this);) f = this.successor_(f)
        }
    };
    b.RedBlackSet.prototype.traverseFromTo = function(a, d, c, f) {
        if (!this.isEmpty())
            for (d = this.get_(d), c = this.get_(c); d != c && !a.call(f, d.key, this);) d = this.successor_(d)
    };
    b.RedBlackSet.prototype.traverseBackwards = function(a, d) {
        if (!this.isEmpty())
            for (var c = this.max(this.root); c != this.sentinel &&
                !a.call(d, c.key, this);) c = this.predeccessor_(c)
    };
    b.RedBlackSet.prototype.forEach = function(a, d) {
        if (!this.isEmpty())
            for (var c = this.min(this.root); c != this.sentinel; c = this.successor_(c)) a.call(d, c.key, c.key, this)
    };
    b.RedBlackSet.prototype.some = function(a, d) {
        if (this.isEmpty()) return !1;
        for (var c = this.min(this.root); c != this.sentinel; c = this.successor_(c))
            if (a.call(d, c.key, c.key, this)) return !0;
        return !1
    };
    b.RedBlackSet.prototype.every = function(a, d) {
        if (this.isEmpty()) return !1;
        for (var c = this.min(this.root); c != this.sentinel; c =
            this.successor_(c))
            if (!a.call(d, c.key, c.key, this)) return !1;
        return !0
    };
    b.RedBlackSet.prototype.map = function(a, d) {
        var c = [];
        if (this.isEmpty()) return c;
        for (var f = this.min(this.root); f != this.sentinel; f = this.successor_(f)) c.push(a.call(d, f.key, f.key, this));
        return c
    };
    b.RedBlackSet.prototype.filter = function(a, d) {
        var c = [];
        if (this.isEmpty()) return c;
        for (var f = this.min(this.root); f != this.sentinel; f = this.successor_(f)) a.call(d, f.key, f.key, this) && c.push(f.key);
        return c
    };
    b.RedBlackSet.prototype.getCount = function() {
        return this.size
    };
    b.RedBlackSet.prototype.isEmpty = function() {
        return 0 == this.size
    };
    b.RedBlackSet.prototype.isSubsetOf = function(a) {
        var d = b.getCount(a);
        if (this.getCount() > d) return !1;
        d = 0;
        if (this.isEmpty()) return !0;
        for (var c = this.min(this.root); c != this.sentinel; c = this.successor_(c)) b.contains.call(a, a, c.key) && d++;
        return d == this.getCount()
    };
    b.RedBlackSet.prototype.intersection = function(a) {
        var d = new b.RedBlackSet(this.compare);
        if (this.isEmpty()) return d;
        for (var c = this.min(this.root); c != this.sentinel; c = this.successor_(c)) a.contains.call(a,
            c.key, c.key, this) && d.insert(c.key);
        return d
    };
    e.RedBlackSet = class extends e.DefendedBase {
        constructor(a) {
            super();
            this._rbSet = new b.RedBlackSet(a);
            this._enableQueue = !1;
            this._queueInsert = new Set;
            this._queueRemove = new Set
        }
        Add(a) {
            this._enableQueue ? this._rbSet.contains(a) ? this._queueRemove.delete(a) : this._queueInsert.add(a) : this._rbSet.insert(a)
        }
        Remove(a) {
            this._enableQueue ? this._rbSet.contains(a) ? this._queueRemove.add(a) : this._queueInsert.delete(a) : this._rbSet.remove(a)
        }
        Has(a) {
            return this._enableQueue ? this._queueInsert.has(a) ?
                !0 : !this._queueRemove.has(a) && this._rbSet.contains(a) : this._rbSet.contains(a)
        }
        Clear() {
            this._rbSet.clear();
            this._queueInsert.clear();
            this._queueRemove.clear()
        }
        toArray() {
            if (this._enableQueue) throw Error("cannot be used in queueing mode");
            return this._rbSet.getValues()
        }
        GetSize() {
            return this._rbSet.getCount() + this._queueInsert.size - this._queueRemove.size
        }
        IsEmpty() {
            return 0 === this.GetSize()
        }
        Front() {
            if (this.IsEmpty()) throw Error("empty set");
            if (this._enableQueue) throw Error("cannot be used in queueing mode");
            const a = this._rbSet;
            return a.min(a.root).key
        }
        Shift() {
            if (this.IsEmpty()) throw Error("empty set");
            if (this._enableQueue) throw Error("cannot be used in queueing mode");
            const a = this.Front();
            this.Remove(a);
            return a
        }
        SetQueueingEnabled(a) {
            a = !!a;
            if (this._enableQueue !== a && (this._enableQueue = a, !a)) {
                for (const d of this._queueRemove) this._rbSet.remove(d);
                this._queueRemove.clear();
                for (const d of this._queueInsert) this._rbSet.insert(d);
                this._queueInsert.clear()
            }
        }
        ForEach(a) {
            this._rbSet.forEach(a)
        }* values() {
            if (!this.IsEmpty()) {
                var a =
                    this._rbSet;
                for (let d = a.min(a.root); d != a.sentinel; d = a.successor_(d)) yield d.key
            }
        }[Symbol.iterator]() {
            return this.values()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.PromiseThrottle = class {
        constructor(b = e.hardwareConcurrency) {
            this._maxParallel = b;
            this._queue = [];
            this._activeCount = 0
        }
        Add(b) {
            return new Promise((a, d) => {
                this._queue.push({
                    func: b,
                    resolve: a,
                    reject: d
                });
                this._MaybeStartNext()
            })
        }
        _FindInQueue(b) {
            for (let a = 0, d = this._queue.length; a < d; ++a)
                if (this._queue[a].func === b) return a;
            return -1
        }
        RemoveAndResolve(b, a) {
            b = this._FindInQueue(b);
            if (-1 === b) throw Error("cannot find promise to resolve");
            this._queue[b].resolve(a);
            this._queue.splice(b,
                1)
        }
        RemoveAndReject(b, a) {
            b = this._FindInQueue(b);
            if (-1 === b) throw Error("cannot find promise to reject");
            this._queue[b].reject(a);
            this._queue.splice(b, 1)
        }
        async _MaybeStartNext() {
            if (this._queue.length && !(this._activeCount >= this._maxParallel)) {
                this._activeCount++;
                var b = this._queue.shift();
                try {
                    const a = await b.func();
                    b.resolve(a)
                } catch (a) {
                    b.reject(a)
                }
                this._activeCount--;
                this._MaybeStartNext()
            }
        }
        static async Batch(b, a) {
            const d = [];
            let c = !1;
            const f = async g => {
                    for (;
                        (g = a.pop()) && !c;) try {
                        d.push(await g())
                    } catch (l) {
                        throw c = !0, l;
                    }
                },
                k = [];
            for (; b--;) k.push(f());
            await Promise.all(k);
            return d
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.RateLimiter = class {
        constructor(b, a, d) {
            this._callback = b;
            this._interval = a;
            this._intervalOnBattery = d || 2 * a;
            this._timerId = -1;
            this._lastCallTime = -Infinity;
            this._timerCallFunc = () => this._OnTimer();
            this._canRunImmediate = this._ignoreReset = !1;
            this._callbackArguments = null
        }
        SetCanRunImmediate(b) {
            this._canRunImmediate = !!b
        }
        _GetInterval() {
            return "undefined" !== typeof e.Battery && e.Battery.IsOnBatteryPower() ? this._intervalOnBattery : this._interval
        }
        Call(...b) {
            if (-1 === this._timerId) {
                this._callbackArguments =
                    b;
                b = e.FastGetDateNow();
                var a = b - this._lastCallTime,
                    d = this._GetInterval();
                a >= d && this._canRunImmediate ? (this._lastCallTime = b, this._RunCallback()) : this._timerId = self.setTimeout(this._timerCallFunc, Math.max(d - a, 4))
            }
        }
        _RunCallback() {
            this._ignoreReset = !0;
            const b = this._callbackArguments;
            this._callbackArguments = null;
            b ? this._callback(...b) : this._callback();
            this._ignoreReset = !1
        }
        Reset() {
            this._ignoreReset || (this._CancelTimer(), this._callbackArguments = null, this._lastCallTime = e.FastGetDateNow())
        }
        _OnTimer() {
            this._timerId = -1;
            this._lastCallTime = e.FastGetDateNow();
            this._RunCallback()
        }
        _CancelTimer() {
            -1 !== this._timerId && (self.clearTimeout(this._timerId), this._timerId = -1)
        }
        Release() {
            this._CancelTimer();
            this._timerCallFunc = this._callbackArguments = this._callback = null
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SVGRasterManager = class {
        constructor() {
            this._images = new Map;
            this._allowNpotSurfaces = !1;
            this._redrawCallback = this._releaseResultCallback = this._rasterAtSizeCallback = this._getBaseSizeCallback = null
        }
        SetNpotSurfaceAllowed(b) {
            this._allowNpotSurfaces = !!b
        }
        IsNpotSurfaceAllowed() {
            return this._allowNpotSurfaces
        }
        SetGetBaseSizeCallback(b) {
            this._getBaseSizeCallback = b
        }
        GetBaseSize(b) {
            if (!this._getBaseSizeCallback) throw Error("no get base size callback set");
            return this._getBaseSizeCallback(b)
        }
        SetRasterAtSizeCallback(b) {
            this._rasterAtSizeCallback =
                b
        }
        RasterAtSize(b, a, d, c, f, k) {
            if (!this._rasterAtSizeCallback) throw Error("no raster at size callback set");
            return this._rasterAtSizeCallback(b, a, d, c, f, k)
        }
        SetReleaseResultCallback(b) {
            this._releaseResultCallback = b
        }
        ReleaseResult(b) {
            if (!this._releaseResultCallback) throw Error("no release result callback set");
            this._releaseResultCallback(b)
        }
        SetRedrawCallback(b) {
            this._redrawCallback = b
        }
        Redraw() {
            if (!this._redrawCallback) throw Error("no redraw callback set");
            this._redrawCallback()
        }
        AddImage(b) {
            let a = this._images.get(b);
            a || (a = e.New(e.SVGRasterImage, this, b), this._images.set(b, a));
            a.IncReference();
            return a
        }
        _RemoveImage(b) {
            this._images.delete(b.GetDataSource())
        }
        OnTexturesChanged() {
            for (const b of this._images.values()) b.ReleaseRasterizedResult(), b.ForceRasterAgain()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SVGRasterImage = class {
        constructor(b, a) {
            this._manager = b;
            this._dataSource = a;
            this._baseHeight = this._baseWidth = this._refCount = 0;
            this._getBaseSizePromise = this._manager.GetBaseSize(a).then(d => {
                this._baseWidth = d[0];
                this._baseHeight = d[1];
                this._manager.Redraw()
            }).catch(d => {
                console.error("[SVG] Error loading SVG: ", d);
                this._hadError = !0;
                this._manager.Redraw()
            });
            this._rasterImageHeight = this._rasterImageWidth = this._rasterSurfaceHeight = this._rasterSurfaceWidth = 0;
            this._isRasterizing = !1;
            this._rasterizedResult = null;
            this._hadError = this._forceRaster = !1
        }
        Release() {
            if (0 >= this._refCount) throw Error("already released");
            this._refCount--;
            0 === this._refCount && this._Release()
        }
        ReleaseRasterizedResult() {
            this._rasterizedResult && (this._manager.ReleaseResult(this._rasterizedResult), this._rasterizedResult = null)
        }
        _Release() {
            this.ReleaseRasterizedResult();
            this._manager._RemoveImage(this);
            this._manager = null
        }
        GetDataSource() {
            return this._dataSource
        }
        IncReference() {
            this._refCount++
        }
        HasReferences() {
            return 0 <
                this._refCount
        }
        GetRasterizedResult() {
            return this._rasterizedResult
        }
        ForceRasterAgain() {
            this._forceRaster = !0
        }
        async StartRasterForSize(b, a, d) {
            if (0 !== a && 0 !== d && !this._hadError && !this._isRasterizing) {
                var c = e.nextHighestPowerOfTwo(Math.ceil(a)),
                    f = e.nextHighestPowerOfTwo(Math.ceil(d)),
                    k = Math.max(c, f);
                2048 < k && (k = 2048 / k, a *= k, d *= k, c = Math.min(Math.ceil(c * k), 2048), f = Math.min(Math.ceil(f * k), 2048));
                a < c && d < f && (d = a / d, c / f > d ? (a = f * d, d = f) : (a = c, d = c / d));
                this._manager.IsNpotSurfaceAllowed() && (c = Math.ceil(a), f = Math.ceil(d));
                c <= this._rasterSurfaceWidth && f <= this._rasterSurfaceHeight && !this._forceRaster || (this._isRasterizing = !0, this._rasterSurfaceWidth = c, this._rasterSurfaceHeight = f, b = await this._manager.RasterAtSize(this._dataSource, b, this._rasterSurfaceWidth, this._rasterSurfaceHeight, a, d), this._manager && (this.ReleaseRasterizedResult(), this._rasterizedResult = b, this._rasterImageWidth = a, this._rasterImageHeight = d, this._forceRaster = this._isRasterizing = !1, this._manager.Redraw()))
            }
        }
        WhenBaseSizeReady() {
            return this._getBaseSizePromise
        }
        GetBaseWidth() {
            return this._baseWidth
        }
        GetBaseHeight() {
            return this._baseHeight
        }
        GetRasterWidth() {
            return this._rasterImageWidth
        }
        GetRasterHeight() {
            return this._rasterImageHeight
        }
        HadError() {
            return this._hadError
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.UTF8_BOM = "\ufeff";
    const b = new Set([..."0123456789"]);
    e.IsNumericChar = function(m) {
        return b.has(m)
    };
    const a = new Set([..." \t\n\r\u00a0\u0085\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u202f\u205f\u3000"]);
    e.IsWhitespaceChar = function(m) {
        return a.has(m)
    };
    e.FilterWhitespace = function(m) {
        return [...m].filter(u => !e.IsWhitespaceChar(u)).join("")
    };
    e.IsStringAllWhitespace = function(m) {
        for (const u of m)
            if (!e.IsWhitespaceChar(u)) return !1;
        return !0
    };
    e.IsUnprintableChar = function(m) {
        return 1 === m.length && 32 > m.charCodeAt(0)
    };
    e.FilterUnprintableChars = function(m) {
        return [...m].filter(u => !e.IsUnprintableChar(u)).join("")
    };
    const d = new Set([..."0123456789.+-e"]);
    e.IsStringNumber = function(m) {
        m = m.trim();
        if (!m.length) return !1;
        let u = m.charAt(0);
        if ("-" !== u && !b.has(u)) return !1;
        for (let x of m)
            if (!d.has(x)) return !1;
        return !0
    };
    e.RemoveTrailingDigits = function(m) {
        let u = m.length;
        for (; 0 < u;) {
            let x = m.charAt(u - 1);
            if (!e.IsNumericChar(x)) break;
            --u
        }
        return m.substr(0, u)
    };
    e.IncrementNumberAtEndOf = function(m) {
        let u = e.RemoveTrailingDigits(m);
        m = (m = m.substr(u.length)) ? (parseInt(m, 10) + 1).toString() : "2";
        return u + m
    };
    const c = new Map([
        ["&", "&amp;"],
        ["<", "&lt;"],
        [">", "&gt;"],
        ['"', "&quot;"],
        ["'", "&#39;"]
    ]);

    function f(m) {
        return c.get(m)
    }
    const k = /[&<>"']/g;
    e.EscapeHTML = function(m) {
        return m.replace(k, f)
    };
    e.EscapeJS = function(m) {
        m = e.ReplaceAll(m, "\\", "\\\\");
        m = e.ReplaceAll(m, '"', '\\"');
        m = e.ReplaceAll(m, "\t", "\\t");
        m = e.ReplaceAll(m, "\r", "");
        return e.ReplaceAll(m, "\n", "\\n")
    };
    e.EscapeXML =
        function(m) {
            m = e.ReplaceAll(m, "&", "&amp;");
            m = e.ReplaceAll(m, "<", "&lt;");
            m = e.ReplaceAll(m, ">", "&gt;");
            return e.ReplaceAll(m, '"', "&quot;")
        };
    const g = /[-[\]{}()*+?.,\\^$|#\s]/g;
    e.EscapeRegex = function(m) {
        return m.replace(g, "\\$&")
    };
    e.FindAll = function(m, u, x = !1) {
        if (!u) return [];
        x || (m = m.toLowerCase(), u = u.toLowerCase());
        x = u.length;
        var p = 0;
        let r = [];
        for (; - 1 < (p = m.indexOf(u, p));) r.push(p), p += x;
        return r
    };
    e.ReplaceAll = function(m, u, x) {
        return m.replaceAll(u, () => x)
    };
    e.ReplaceAllCaseInsensitive = function(m, u, x) {
        return m.replace(new RegExp(e.EscapeRegex(u),
            "gi"), () => x)
    };
    e.SetElementContent = function(m, u) {
        "string" === typeof u ? m.textContent = u : u.isPlainText() ? m.textContent = u.toString() : (m.innerHTML = u.toHTML(), u instanceof e.BBString && u.attachLinkHandlers(m))
    };
    e.StringLikeEquals = function(m, u) {
        return m instanceof e.HtmlString || m instanceof e.BBString ? m.equals(u) : u instanceof e.HtmlString || u instanceof e.BBString ? u.equals(m) : m === u
    };
    e.StringSubstitute = function(m, ...u) {
        let x = m;
        for (let p = 0, r = u.length; p < r; ++p) {
            const t = `{${p}}`;
            if (!m.includes(t)) throw Error(`missing placeholder '${t}' in string substitution`);
            x = x.replace(t, u[p].toString())
        }
        return x
    };
    e.StringSubstituteAllowMissing = function(m, ...u) {
        let x = m,
            p = -1,
            r = -1;
        for (let t = 0, q = u.length; t < q; ++t) {
            const w = `{${t}}`;
            m.includes(w) ? (r = t, x = x.replace(w, u[t].toString())) : -1 === p && (p = t)
        }
        if (0 <= p && 0 <= r && p < r) throw Error(`missing placeholder '${p}' in string substitution`);
        return x
    };
    e.StringSubstituteMap = function(m, u) {
        for (let [x, p] of Object.entries(u)) m = m.replaceAll(x, p.toString());
        return m
    };
    e.SortAZCaseInsensitive = function(m, u) {
        m = m.toLowerCase();
        u = u.toLowerCase();
        return m >
            u ? 1 : m < u ? -1 : 0
    };
    e.FormatDataSize = function(m, u) {
        u = "common." + (u ? "dataRates" : "dataSizes") + ".";
        const x = self.langSub;
        if (1024 > m) return x(u + "bytes", m);
        if (1048576 > m) return m /= 1024, m = 10 > m ? Math.round(10 * m) / 10 : Math.round(m), x(u + "kilobytes", m);
        if (1073741824 > m) return m /= 1048576, m = 10 > m ? Math.round(10 * m) / 10 : Math.round(m), x(u + "megabytes", m);
        if (1099511627776 > m) return m /= 1073741824, m = 10 > m ? Math.round(10 * m) / 10 : Math.round(m), x(u + "gigabytes", m);
        m /= 1099511627776;
        m = 10 > m ? Math.round(10 * m) / 10 : Math.round(m);
        return x(u + "terabytes",
            m)
    };
    const l = {
        approximate: !1,
        days: !0,
        hours: !0,
        minutes: !0,
        seconds: !0
    };
    e.FormatTime = function(m, u) {
        u = Object.assign({}, l, u);
        e.Lang.PushContext("common.time");
        const x = [],
            p = self.lang,
            r = self.langPluralSub;
        if (u.days) {
            var t = Math.floor(m / 86400);
            0 < t && (m -= 86400 * t, x.push(r(".days", null, t)))
        }
        u.hours && (t = Math.floor(m / 3600), 0 < t || x.length) && (m -= 3600 * t, x.push(r(".hours", null, t)));
        u.minutes && (t = Math.floor(m / 60), 0 < t || x.length || !u.seconds) && (m -= 60 * t, x.push(r(".minutes", null, t)));
        u.seconds && x.push(r(".seconds", null, Math.floor(m %
            60)));
        m = (u.approximate ? p(".approx-prefix") : "") + x.join(p(".separator"));
        e.Lang.PopContext();
        return m
    };
    e.ZeroPad = function(m, u) {
        let x = 0 > m ? "-" : "";
        m = Math.abs(m);
        m = m.toString();
        u -= m.length;
        for (let p = 0; p < u; ++p) x += "0";
        return x + m
    };
    e.StringToTitleCase = function(m) {
        return m.toLowerCase().replace(/\b\w/g, u => u.toUpperCase())
    };
    e.CompareVersionStrings = function(m, u) {
        m = m.split(".").map(x => x.trim());
        u = u.split(".").map(x => x.trim());
        e.resizeArray(m, 4, "0");
        e.resizeArray(u, 4, "0");
        m = m.map(x => parseInt(x, 10));
        u = u.map(x => parseInt(x,
            10));
        for (let x = 0; 4 > x; ++x) {
            const p = m[x] - u[x];
            if (0 !== p) return 0 > p ? -1 : 1
        }
        return 0
    };
    e.CreateGUID = function() {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, m => {
            const u = Math.floor(16 * Math.random());
            return ("x" === m ? u : u & 3 | 8).toString(16)
        })
    };
    e.StringHammingDistance = function(m, u) {
        if (m.length !== u.length) throw Error("strings must be same length");
        let x = 0;
        for (let p = 0, r = m.length; p < r; ++p) m.charAt(p) !== u.charAt(p) && ++x;
        return x
    };
    e.StringLevenshteinDistance = function(m, u) {
        if (0 === m.length) return u.length;
        if (0 === u.length) return m.length;
        let x, p, r, t;
        if (m.length > u.length) {
            var q = m;
            m = u;
            u = q
        }
        t = Array(m.length + 1);
        for (q = 0; q <= m.length; q++) t[q] = q;
        for (q = 1; q <= u.length; q++) {
            p = q;
            for (x = 1; x <= m.length; x++) r = u[q - 1] === m[x - 1] ? t[x - 1] : Math.min(t[x - 1] + 1, Math.min(p + 1, t[x] + 1)), t[x - 1] = p, p = r;
            t[m.length] = p
        }
        return t[m.length]
    }
} {
    "use strict";
    const e = self.C3,
        b = new Map([
            ["b", "strong"],
            ["i", "em"],
            ["s", "s"],
            ["u", "u"],
            ["sub", "sub"],
            ["sup", "sup"],
            ["small", "small"],
            ["mark", "mark"],
            ["a1", "a"],
            ["a2", "a"],
            ["a3", "a"],
            ["a4", "a"],
            ["a5", "a"],
            ["a6", "a"],
            ["a7", "a"],
            ["a8", "a"],
            ["a9", "a"],
            ["bad", ["span", "bbCodeBad"]],
            ["good", ["span", "bbCodeGood"]],
            ["info", ["span", "bbCodeInfo"]],
            ["h1", ["span", "bbCodeH1"]],
            ["h2", ["span", "bbCodeH2"]],
            ["h3", ["span", "bbCodeH3"]],
            ["h4", ["span", "bbCodeH4"]],
            ["item", ["span", "bbCodeItem"]]
        ]),
        a = /\[(\/?)([a-zA-Z0-9]+)\]/g,
        d = /\[(\/?)([^\[]*?)\]/g;
    let c = null,
        f = 0;

    function k(l, m, u) {
        var x = b.get(u);
        if (x) {
            if ("string" === typeof x) {
                if ("a" !== x || m) return "<" + m + x + ">";
                m = parseInt(u.substring(1), 10) - 1;
                if (0 > m || m >= c.length) throw Error("invalid bbcode link substitution");
                x = c[m];
                if ("string" === typeof x) return `<a href="${c[m]}">`;
                if ("function" === typeof x) return `<a class="bblink${m}">`;
                throw new TypeError("invalid bbcode link action");
            }
            if (Array.isArray(x)) return l = x[0], x = x[1], m ? "</" + l + ">" : `<${l} class="${x}">`
        } else return "class" === u ? m ? "</span>" :
            `<span class="bbclass${f++}">` : l
    }
    const g = /\n/g;
    e.BBString = class {
        constructor(l, m) {
            this._bbstr = m && m.noEscape ? l : e.EscapeHTML(l);
            this._htmlstr = "";
            this._convertLineBreaks = !1;
            this._linkActions = [];
            if (m && (this._convertLineBreaks = !!m.convertLineBreaks, m.links)) {
                if (9 < m.links.length) throw Error("too many links");
                this._linkActions = m.links
            }
            this._hasAnyBBtags = this._bbstr.includes("[");
            this._needsLineBreakConversion = this._convertLineBreaks && this._bbstr.includes("\n");
            this._isPlain = !this._hasAnyBBtags && !this._needsLineBreakConversion &&
                !this._bbstr.includes("&");
            this._hasParsedFragments = !1;
            this._fragments = []
        }
        toString() {
            return this._bbstr
        }
        valueOf() {
            return this._bbstr
        }
        isPlainText() {
            return this._isPlain
        }
        toPlainText() {
            return this._hasAnyBBtags ? this._bbstr.replace(a, "") : this._bbstr
        }
        toHTML() {
            if (this._isPlain) return this._bbstr;
            if (!this._htmlstr && this._bbstr) {
                let l = this._bbstr;
                this._hasAnyBBtags && (f = 0, c = this._linkActions, l = l.replace(a, k), c = null);
                this._needsLineBreakConversion && (l = l.replace(g, "<br>"));
                this._htmlstr = l
            }
            return this._htmlstr
        }
        attachLinkHandlers(l) {
            if (this._linkActions.length)
                for (let m =
                        0, u = this._linkActions.length; m < u; ++m) {
                    const x = this._linkActions[m];
                    if ("function" !== typeof x) continue;
                    const p = l.querySelector(".bblink" + m);
                    if (!p) throw Error("unable to attach BBString link handler");
                    p.onclick = x
                }
        }
        equals(l) {
            return l instanceof e.HtmlString ? this.toHTML() === l.toHTML() : l instanceof e.BBString ? this._bbstr === l._bbstr : this._bbstr === l
        }
        toFragmentList() {
            if (this._hasParsedFragments) return this._fragments;
            const l = this._bbstr,
                m = [];
            let u = d.lastIndex = 0;
            for (var x; null !== (x = d.exec(l));) {
                var p = x.index;
                if (0 < p && "\\" === l.charAt(p - 1)) continue;
                var r = x[0],
                    t = x[1];
                x = x[2];
                const q = l.substring(u, p);
                u = p + r.length;
                q && this._fragments.push({
                    text: q,
                    styles: m.slice(0)
                });
                if (x)
                    if (t)
                        for (x = x.toLowerCase(), p = m.length - 1; 0 <= p; --p) {
                            if (m[p].tag === x) {
                                m.splice(p, 1);
                                break
                            }
                        } else p = x, r = null, t = x.indexOf("="), -1 !== t ? (p = x.substring(0, t).toLowerCase(), r = x.substring(t + 1)) : p = p.toLowerCase(), m.push({
                            tag: p,
                            param: r
                        })
            }
            u < l.length && this._fragments.push({
                text: l.substring(u),
                styles: m.slice(0)
            });
            for (const q of this._fragments) q.text = this._ProcessBBCodeEscapeSequences(q.text);
            this._hasParsedFragments = !0;
            return this._fragments
        }
        _ProcessBBCodeEscapeSequences(l) {
            l = e.ReplaceAll(l, "\\[", "[");
            return e.ReplaceAll(l, "\\\\", "\\")
        }
        static StripTags(l) {
            return e.New(e.BBString, l, {
                noEscape: !0
            }).toPlainText()
        }
        static StripAnyTags(l) {
            return l.replace(d, "")
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.WordWrap = class {
        constructor() {
            this._lines = []
        }
        GetLines() {
            return this._lines
        }
        GetLineCount() {
            return this._lines.length
        }
        _MeasureLine(b, a) {
            let d = 0,
                c = 0,
                f = 0,
                k = 0,
                g = 0;
            for (const l of b) - 1 === l.width && (b = a(l.text, l.styles), l.width = b.width, l.height = b.height, l.fontBoundingBoxAscent = b.fontBoundingBoxAscent || 0, l.fontBoundingBoxDescent = b.fontBoundingBoxDescent || 0, l.topToAlphabeticDistance = b.topToAlphabeticDistance || 0), d += l.width, c = Math.max(c, l.height), f = Math.max(f, l.fontBoundingBoxAscent),
                k = Math.max(k, l.fontBoundingBoxDescent), g = Math.max(g, l.topToAlphabeticDistance);
            return {
                width: d,
                height: c,
                fontBoundingBoxAscent: f,
                fontBoundingBoxDescent: k,
                topToAlphabeticDistance: g
            }
        }
        _AddLine(b, a, d, c, f, k) {
            this._lines.push({
                fragments: b,
                width: a,
                height: d,
                fontBoundingBoxAscent: c,
                fontBoundingBoxDescent: f,
                topToAlphabeticDistance: k
            })
        }
        WordWrap(b, a, d, c, f) {
            "string" === typeof b && (b = [{
                text: b,
                styles: []
            }]);
            e.clearArray(this._lines);
            if (!(!b.length || 1 === b.length && !b[0].text.length || 2 > d)) {
                if (1 === b.length) {
                    var k = b[0];
                    const g =
                        k.text;
                    k = k.styles;
                    if (100 >= g.length && !g.includes("\n")) {
                        let {
                            width: l,
                            height: m,
                            fontBoundingBoxAscent: u,
                            fontBoundingBoxDescent: x,
                            topToAlphabeticDistance: p
                        } = a(g, k);
                        l += f;
                        u = u || 0;
                        x = x || 0;
                        p = p || 0;
                        if (l <= d) {
                            this._AddLine([{
                                text: g,
                                styles: k,
                                width: l,
                                height: m,
                                fontBoundingBoxAscent: u,
                                fontBoundingBoxDescent: x,
                                topToAlphabeticDistance: p
                            }], l, m, u, x, p);
                            return
                        }
                    }
                }
                if ("word" === c) c = this._TokeniseWords(b);
                else {
                    c = [];
                    for (const g of b) e.appendArray(c, [...g.text].map(l => [{
                        text: l,
                        styles: g.styles
                    }]))
                }
                this._WrapText(c, a, d, f)
            }
        }
        _TokeniseWords(b) {
            const a = [];
            let d = [],
                c = !1;
            for (const k of b) {
                var f = k.text;
                b = k.styles;
                for (const g of f) "\n" === g ? (0 < d.length && a.push(d), a.push([{
                    text: "\n",
                    styles: b
                }]), d = []) : 0 === d.length ? (d.push({
                    text: g,
                    styles: b
                }), c = e.IsWhitespaceChar(g)) : (f = e.IsWhitespaceChar(g), f === c ? (f = d.at(-1), f.styles === b ? f.text += g : d.push({
                    text: g,
                    styles: b
                })) : (a.push(d), d = [], d.push({
                    text: g,
                    styles: b
                }), c = f))
            }
            0 < d.length && a.push(d);
            return a
        }
        _CopyLine(b) {
            return b.map(a => ({
                text: a.text,
                styles: a.styles,
                width: a.width,
                height: a.height,
                fontBoundingBoxAscent: a.fontBoundingBoxAscent,
                fontBoundingBoxDescent: a.fontBoundingBoxDescent,
                topToAlphabeticDistance: a.topToAlphabeticDistance
            }))
        }
        _AddWordToLine(b, a) {
            var d = b.length ? b.at(-1) : null;
            let c = 0;
            d && a[0].styles === d.styles && (d.text += a[0].text, d.width = -1, d.height = -1, d.fontBoundingBoxAscent = -1, d.fontBoundingBoxDescent = -1, d.topToAlphabeticDistance = -1, c = 1);
            for (d = a.length; c < d; ++c) {
                const f = a[c];
                b.push({
                    text: f.text,
                    styles: f.styles,
                    width: -1,
                    height: -1,
                    fontBoundingBoxAscent: -1,
                    fontBoundingBoxDescent: -1,
                    topToAlphabeticDistance: -1
                })
            }
        }
        _WrapText(b,
            a, d, c) {
            let f = [],
                k = 0,
                g = 0,
                l = 0,
                m = 0;
            var u = 0;
            for (const x of b) {
                if (1 === x.length && "\n" === x[0].text) {
                    0 === g && (u = a(" ", x[0].styles), g = u.height, l = u.fontBoundingBoxAscent || 0, m = u.fontBoundingBoxDescent || 0, u = u.topToAlphabeticDistance || 0);
                    this._AddLine(f, k, g, l, m, u);
                    f = [];
                    u = m = l = g = k = 0;
                    continue
                }
                b = this._CopyLine(f);
                this._AddWordToLine(b, x);
                const p = this._MeasureLine(b, a),
                    r = p.width;
                r >= d ? (0 < f.length && this._AddLine(f, k, g, l, m, u), f = [], e.IsStringAllWhitespace(x[0].text) ? u = m = l = g = k = 0 : (this._AddWordToLine(f, x), u = this._MeasureLine(f,
                    a), k = u.width, g = u.height, l = u.fontBoundingBoxAscent, m = u.fontBoundingBoxDescent, u = u.topToAlphabeticDistance)) : (f = b, k = r, g = p.height, l = p.fontBoundingBoxAscent, m = p.fontBoundingBoxDescent, u = p.topToAlphabeticDistance)
            }
            0 < f.length && this._AddLine(f, k, g, l, m, u);
            this._TrimLinesTrailingWhitespace(a, c)
        }
        _TrimLinesTrailingWhitespace(b, a) {
            for (const c of this._lines) {
                const f = c.fragments;
                if (!f.length) continue;
                let k = f.at(-1);
                var d = k.text;
                const g = d.trimEnd();
                if (!g) c.width -= k.width, f.pop();
                else if (g.length < d.length) {
                    d = b(g,
                        k.styles).width;
                    const l = k.width - d;
                    k.width = d;
                    k.text = g;
                    c.width -= l
                }
                0 !== a && 0 < f.length && (k = f.at(-1), k.width += a, c.width += a)
            }
        }
        Clear() {
            e.clearArray(this._lines)
        }
        GetMaxLineWidth() {
            return this._lines.reduce((b, a) => Math.max(b, a.width), 0)
        }
        GetTotalLineHeight() {
            return this._lines.reduce((b, a) => b + a.height, 0)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.glMatrix,
        a = b.vec3,
        d = b.vec4,
        c = b.mat4,
        f = a.create(),
        k = a.create(),
        g = a.create(),
        l = d.create(),
        m = c.create(),
        u = a.create(),
        x = a.create(),
        p = a.create(),
        r = a.create(),
        t = a.create(),
        q = a.create(),
        w = a.create(),
        y = a.create(),
        C = d.fromValues(0, 0, 1, 1);
    e.Gfx = {
        Project(B, A, G, J, L, R, U) {
            const V = J[0] * B + J[4] * A + J[8] * G + J[12],
                ba = J[1] * B + J[5] * A + J[9] * G + J[13],
                ia = J[2] * B + J[6] * A + J[10] * G + J[14];
            J = J[3] * B + J[7] * A + J[11] * G + J[15];
            B = L[0] * V + L[4] * ba + L[8] * ia + L[12] * J;
            A = L[1] * V + L[5] * ba + L[9] * ia + L[13] * J;
            G = L[2] * V + L[6] *
                ba + L[10] * ia + L[14] * J;
            L = L[3] * V + L[7] * ba + L[11] * ia + L[15] * J;
            if (0 === L) return !1;
            L = 1 / L;
            U[0] = (B * L * .5 + .5) * R[2] + R[0];
            U[1] = (A * L * .5 + .5) * R[3] + R[1];
            U[2] = .5 * (1 + G * L);
            return !0
        },
        Unproject(B, A, G, J, L, R, U) {
            c.multiply(m, L, J);
            if (null === c.invert(m, m)) return !1;
            l[0] = (B - R[0]) / R[2] * 2 - 1;
            l[1] = (A - R[1]) / R[3] * 2 - 1;
            l[2] = 2 * G - 1;
            l[3] = 1;
            d.transformMat4(l, l, m);
            if (0 === l[3]) return !1;
            l[3] = 1 / l[3];
            U[0] = l[0] * l[3];
            U[1] = l[1] * l[3];
            U[2] = l[2] * l[3];
            return !0
        },
        UnprojectScreenToWorldZ(B, A, G, J, L, R, U) {
            if (!e.Gfx.Unproject(B, A, 0, J, L, R, f) || !e.Gfx.Unproject(B,
                    A, 1, J, L, R, k)) return !1;
            a.subtract(k, k, f);
            a.set(g, 0, 0, 1);
            B = -G;
            A = a.dot(g, k);
            G = 0;
            if (0 === A) {
                if (0 !== a.dot(g, f) + B) return !1
            } else if (G = -(a.dot(f, g) + B) / A, 0 > G) return !1;
            a.scaleAndAdd(U, f, k, G);
            return !0
        }
    };

    function F(B, A, G, J) {
        a.subtract(f, G, A);
        a.subtract(k, B, A);
        a.cross(g, f, k);
        a.normalize(g, g);
        J.set(g[0], g[1], g[2], a.dot(B, g))
    }

    function H(B, A, G, J, L, R, U) {
        const V = U.x,
            ba = U.y,
            ia = U.z,
            ja = U.w,
            qa = U.xF,
            za = U.yF;
        U = U.zF;
        const Ca = 1 - qa,
            Ma = 1 - za,
            Fa = 1 - U;
        return V * B * qa + V * J * Ca + ba * A * za + ba * L * Ma + ia * G * U + ia * R * Fa >= ja ? !0 : V * J * qa + V * B * Ca + ba * L *
            za + ba * A * Ma + ia * R * U + ia * G * Fa > ja
    }
    class M {
        constructor() {
            this.zF = this.yF = this.xF = this.w = this.z = this.y = this.x = NaN
        }
        set(B, A, G, J) {
            this.x = B;
            this.y = A;
            this.z = G;
            this.w = J;
            this.xF = 0 < B ? 1 : 0;
            this.yF = 0 < A ? 1 : 0;
            this.zF = 0 < G ? 1 : 0
        }
    }
    e.Gfx.ViewFrustum = class {
        constructor() {
            this._leftP = new M;
            this._topP = new M;
            this._rightP = new M;
            this._bottomP = new M;
            this._nearP = new M;
            this._farP = new M
        }
        CalculatePlanes(B, A) {
            e.Gfx.Unproject(0, 1, 0, B, A, C, u);
            e.Gfx.Unproject(1, 1, 0, B, A, C, x);
            e.Gfx.Unproject(0, 0, 0, B, A, C, p);
            e.Gfx.Unproject(1, 0, 0, B, A, C, r);
            e.Gfx.Unproject(0,
                1, 1, B, A, C, t);
            e.Gfx.Unproject(1, 1, 1, B, A, C, q);
            e.Gfx.Unproject(0, 0, 1, B, A, C, w);
            e.Gfx.Unproject(1, 0, 1, B, A, C, y);
            F(p, u, t, this._leftP);
            F(u, x, q, this._topP);
            F(x, r, y, this._rightP);
            F(r, p, w, this._bottomP);
            F(w, t, q, this._farP);
            F(r, x, u, this._nearP)
        }
        ContainsAABB(B, A, G, J, L, R) {
            return H(B, A, G, J, L, R, this._leftP) && H(B, A, G, J, L, R, this._topP) && H(B, A, G, J, L, R, this._rightP) && H(B, A, G, J, L, R, this._bottomP) && H(B, A, G, J, L, R, this._nearP) && H(B, A, G, J, L, R, this._farP)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.glMatrix,
        a = b.vec3,
        d = b.vec4,
        c = b.mat4,
        f = c.create(),
        k = a.fromValues(0, 0, 0),
        g = a.fromValues(0, 0, 0),
        l = a.fromValues(0, 0, 0),
        m = a.fromValues(0, 1, 0);
    d.fromValues(0, 0, 0, 0);
    const u = new e.Quad,
        x = new e.Rect,
        p = new e.Quad(0, 0, 1, 0, 1, 1, 0, 1);
    e.Gfx.RendererBase = class {
        constructor() {
            this._height = this._width = 0;
            this._fovY = e.toRadians(45);
            this._tan_fovY_2 = Math.tan(this._fovY / 2);
            this._matP = c.create();
            this._matMV = c.create();
            this._allShaderPrograms = [];
            this._shaderProgramsByName = new Map;
            this._spSmoothLineFill =
                this._spSmoothEllipseOutline = this._spSmoothEllipseFill = this._spHardEllipseOutline = this._spHardEllipseFill = this._spLinearGradientFill = this._spColorFill = this._spTilemapFill = this._spPoints = this._spTextureFill = null;
            this._stateGroups = new Map;
            this._currentStateGroup = null;
            this._blendModeTable = [];
            this._namedBlendModeMap = new Map;
            this._currentZ = this._baseZ = 0;
            this._lineWidth = 1;
            this._lineWidthStack = [this._lineWidth];
            this._lineCap = 1;
            this._lineCapStack = [this._lineCap];
            this._lineOffset = .5;
            this._lineOffsetStack = [this._lineOffset];
            this._frameNumber = 0;
            this._enableMipmaps = !0;
            this._hasMajorPerformanceCaveat = !1
        }
        FillIndexBufferData(r) {
            let t = 0,
                q = r.length,
                w = 0;
            for (; t < q;) r[t++] = w, r[t++] = w + 1, r[t++] = w + 2, r[t++] = w, r[t++] = w + 2, r[t++] = w + 3, w += 4
        }
        _ClearState() {
            this._currentZ = this._baseZ = 0;
            this._spSmoothLineFill = this._spSmoothEllipseOutline = this._spSmoothEllipseFill = this._spHardEllipseOutline = this._spHardEllipseFill = this._spLinearGradientFill = this._spColorFill = this._spTilemapFill = this._spPoints = this._spTextureFill = null;
            this._ClearAllShaderPrograms()
        }
        InitState() {
            this._ClearState();
            this._currentStateGroup = null
        }
        OnDeviceOrContextLost() {
            for (const r of this._allShaderPrograms) r.Release();
            this._ClearState()
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetDefaultCameraZ() {
            return 100
        }
        GetNearZ() {
            return 1
        }
        GetFarZ() {
            return 1E4
        }
        GetFovY() {
            return this._fovY
        }
        _GetTanFovYDiv2() {
            return this._tan_fovY_2
        }
        CalculatePerspectiveMatrix(r, t, q = .5, w = .5) {
            const y = this.GetNearZ(),
                C = this.GetFarZ();
            q = 1 - q;
            const F = 2 * q - 2;
            q *= 2;
            const H = 2 * w - 2;
            w *= 2;
            const M = this._GetTanFovYDiv2() * y;
            t *= M;
            c.frustum(r,
                F * t, q * t, H * M, w * M, y, C)
        }
        CalculateOrthographicMatrix(r, t, q, w = 1) {
            const y = self.devicePixelRatio,
                C = 2 * this.GetDefaultCameraZ() * y * this._GetTanFovYDiv2() / q;
            t = t * C / (2 * y * w);
            q = q * C / (2 * y * w);
            c.ortho(r, -t, t, -q, q, this.GetNearZ(), this.GetFarZ())
        }
        CalculateLookAtModelView(r, t, q, w, y = this.GetScissoredViewportHeight()) {
            y = 2 * this.GetDefaultCameraZ() * self.devicePixelRatio * this._GetTanFovYDiv2() / y;
            a.set(l, y, -y, 1);
            a.multiply(k, t, l);
            a.multiply(g, q, l);
            c.lookAt(r, k, g, w || m);
            c.scale(r, r, l)
        }
        CalculateLookAtModelView2(r, t, q, w, y, C, F) {
            a.set(k,
                r, t, q);
            a.set(g, w, y, C);
            this.CalculateLookAtModelView(f, k, g, m, F);
            return f
        }
        _AddShaderProgram(r) {
            this._allShaderPrograms.push(r);
            this._shaderProgramsByName.set(r.GetName(), r)
        }
        _RemoveShaderProgram(r) {
            const t = this._allShaderPrograms.indexOf(r); - 1 !== t && this._allShaderPrograms.splice(t, 1);
            this._shaderProgramsByName.delete(r.GetName())
        }
        _ClearAllShaderPrograms() {
            e.clearArray(this._allShaderPrograms);
            this._shaderProgramsByName.clear()
        }
        GetShaderProgramByName(r) {
            return this._shaderProgramsByName.get(r) || null
        }
        GetTextureFillShaderProgram() {
            return this._spTextureFill
        }
        SetTextureFillMode() {
            this.SetProgram(this._spTextureFill)
        }
        GetPointsRenderingProgram() {
            return this._spPoints
        }
        SetPointsRenderingProgram() {
            this.SetProgram(this._spPoints)
        }
        SetTilemapFillMode() {
            this.SetProgram(this._spTilemapFill)
        }
        SetColorFillMode() {
            this.SetProgram(this._spColorFill)
        }
        SetLinearGradientFillMode() {
            this.SetProgram(this._spLinearGradientFill)
        }
        SetHardEllipseFillMode() {
            this.SetProgram(this._spHardEllipseFill)
        }
        SetHardEllipseOutlineMode() {
            this.SetProgram(this._spHardEllipseOutline)
        }
        SetSmoothEllipseFillMode() {
            this.SetProgram(this._spSmoothEllipseFill)
        }
        SetSmoothEllipseOutlineMode() {
            this.SetProgram(this._spSmoothEllipseOutline)
        }
        SetSmoothLineFillMode() {
            this.SetProgram(this._spSmoothLineFill)
        }
        _SetCurrentStateGroup(r) {
            this._currentStateGroup =
                r
        }
        GetCurrentStateGroup() {
            return this._currentStateGroup
        }
        AcquireStateGroup(r, t, q, w) {
            const y = e.Gfx.StateGroup.MakeKey(r, t, q, w);
            let C = this._stateGroups.get(y);
            C || (C = e.New(e.Gfx.StateGroup, this, r, t, q, w), this._stateGroups.set(y, C));
            C.AddRef();
            return C
        }
        ReleaseStateGroup(r) {
            r.DecRef();
            0 === r._GetRefCount() && (this._currentStateGroup === r && (this._currentStateGroup = null), this._stateGroups.delete(r.GetKey()), r.Release())
        }
        _InitBlendModeData(r) {
            e.clearArray(this._blendModeTable);
            this._namedBlendModeMap.clear();
            for (const t of r) {
                r = t[0];
                const q = t[1],
                    w = t[2];
                this._blendModeTable.push([q, w]);
                this._namedBlendModeMap.set(r, {
                    srcBlend: q,
                    destBlend: w
                })
            }
        }
        _GetBlendByIndex(r) {
            return this._blendModeTable[r]
        }
        GetSrcBlendByIndex(r) {
            return this._GetBlendByIndex(r)[0]
        }
        GetDestBlendByIndex(r) {
            return this._GetBlendByIndex(r)[1]
        }
        GetNamedBlend(r) {
            r = this._namedBlendModeMap.get(r);
            if ("undefined" === typeof r) throw Error("invalid blend name");
            return r
        }
        SetBaseZ(r) {
            this._baseZ = r
        }
        GetBaseZ() {
            return this._baseZ
        }
        SetCurrentZ(r) {
            this._currentZ =
                r;
            this._currentStateGroup = null
        }
        GetCurrentZ() {
            return this._currentZ
        }
        Line(r, t, q, w) {
            var y = e.angleTo(r, t, q, w),
                C = .5 * this._lineWidth;
            const F = Math.sin(y) * C;
            y = Math.cos(y) * C;
            C = this._lineCap;
            2 === C ? this.LinePreCalc_LineCap2(r, t, 0, q, w, 0, F, y) : 1 === C ? this.LinePreCalc_LineCap1(r, t, 0, q, w, 0, F, y) : this.LinePreCalc_LineCap0(r, t, 0, q, w, 0, F, y)
        }
        Line3D(r, t, q, w, y, C) {
            var F = e.angleTo(r, t, w, y),
                H = .5 * this._lineWidth;
            const M = Math.sin(F) * H;
            F = Math.cos(F) * H;
            H = this._lineCap;
            2 === H ? this.LinePreCalc_LineCap2(r, t, q, w, y, C, M, F) : 1 === H ? this.LinePreCalc_LineCap1(r,
                t, q, w, y, C, M, F) : this.LinePreCalc_LineCap0(r, t, q, w, y, C, M, F)
        }
        LinePreCalc_LineCap2(r, t, q, w, y, C, F, H) {
            var M = this._lineOffset;
            r = r + M - H;
            t = t + M - F;
            w = w + M + H;
            y = y + M + F;
            M = 2 * H;
            const B = 2 * F;
            this.Quad3D2(r + F, t - H, q, w + F, y - H, C, w - F - M, y + H - B, C, r - F + M, t + H + B, q, p)
        }
        LinePreCalc_LineCap1(r, t, q, w, y, C, F, H) {
            const M = this._lineOffset;
            r = r + M - H;
            t = t + M - F;
            w = w + M + H;
            y = y + M + F;
            this.Quad3D2(r + F, t - H, q, w + F, y - H, C, w - F, y + H, C, r - F, t + H, q, p)
        }
        LinePreCalc_LineCap0(r, t, q, w, y, C, F, H) {
            const M = this._lineOffset;
            r += M;
            t += M;
            w += M;
            y += M;
            this.Quad3D2(r + F, t - H, q, w + F, y - H, C, w -
                F, y + H, C, r - F, t + H, q, p)
        }
        TexturedLine(r, t, q, w, y, C) {
            var F = e.angleTo(r, t, q, w),
                H = .5 * this._lineWidth;
            const M = Math.sin(F) * H;
            F = Math.cos(F) * H;
            H = this._lineCap;
            2 === H ? this.TexturedLinePreCalc_LineCap2(r, t, q, w, M, F, y, C) : 1 === H ? this.TexturedLinePreCalc_LineCap1(r, t, q, w, M, F, y, C) : this.TexturedLinePreCalc_LineCap0(r, t, q, w, M, F, y, C)
        }
        TexturedLinePreCalc_LineCap2(r, t, q, w, y, C, F, H) {
            var M = this._lineOffset;
            r = r + M - C;
            t = t + M - y;
            q = q + M + C;
            w = w + M + y;
            M = 2 * C;
            const B = 2 * y;
            u.set(r + y, t - C, q + y, w - C, q - y - M, w + C - B, r - y + M, t + C + B);
            x.set(F, 0, H, 0);
            this.Quad3(u,
                x)
        }
        TexturedLinePreCalc_LineCap1(r, t, q, w, y, C, F, H) {
            const M = this._lineOffset;
            r = r + M - C;
            t = t + M - y;
            q = q + M + C;
            w = w + M + y;
            u.set(r + y, t - C, q + y, w - C, q - y, w + C, r - y, t + C);
            x.set(F, 0, H, 0);
            this.Quad3(u, x)
        }
        TexturedLinePreCalc_LineCap0(r, t, q, w, y, C, F, H) {
            const M = this._lineOffset;
            r += M;
            t += M;
            q += M;
            w += M;
            u.set(r + y, t - C, q + y, w - C, q - y, w + C, r - y, t + C);
            x.set(F, 0, H, 0);
            this.Quad3(u, x)
        }
        LineRect(r, t, q, w) {
            const y = .5 * this._lineWidth,
                C = this._lineCap;
            2 === C ? this._LineRectPreCalc_LineCap2(r, t, q, w, y) : 1 === C ? this._LineRectPreCalc_LineCap1(r, t, q, w, y) : this._LineRectPreCalc_LineCap0(r,
                t, q, w, y)
        }
        _LineRectPreCalc_LineCap2(r, t, q, w, y) {
            this.LinePreCalc_LineCap2(r, t, 0, q, t, 0, 0, y);
            this.LinePreCalc_LineCap2(q, t, 0, q, w, 0, y, 0);
            this.LinePreCalc_LineCap2(q, w, 0, r, w, 0, 0, -y);
            this.LinePreCalc_LineCap2(r, w, 0, r, t, 0, -y, 0)
        }
        _LineRectPreCalc_LineCap1(r, t, q, w, y) {
            this.LinePreCalc_LineCap1(r, t, 0, q, t, 0, 0, y);
            this.LinePreCalc_LineCap1(q, t, 0, q, w, 0, y, 0);
            this.LinePreCalc_LineCap1(q, w, 0, r, w, 0, 0, -y);
            this.LinePreCalc_LineCap1(r, w, 0, r, t, 0, -y, 0)
        }
        _LineRectPreCalc_LineCap0(r, t, q, w, y) {
            this.LinePreCalc_LineCap0(r, t, 0, q,
                t, 0, 0, y);
            this.LinePreCalc_LineCap0(q, t, 0, q, w, 0, y, 0);
            this.LinePreCalc_LineCap0(q, w, 0, r, w, 0, 0, -y);
            this.LinePreCalc_LineCap0(r, w, 0, r, t, 0, -y, 0)
        }
        LineRect2(r) {
            this.LineRect(r.getLeft(), r.getTop(), r.getRight(), r.getBottom())
        }
        LineQuad(r) {
            var t = e.angleTo(r.getTlx(), r.getTly(), r.getTrx(), r.getTry()),
                q = .5 * this._lineWidth;
            const w = Math.sin(t) * q;
            t = Math.cos(t) * q;
            q = this._lineCap;
            2 === q ? this._LineQuadPreCalc_LineCap2(r, w, t) : 1 === q ? this._LineQuadPreCalc_LineCap1(r, w, t) : this._LineQuadPreCalc_LineCap0(r, w, t)
        }
        _LineQuadPreCalc_LineCap2(r,
            t, q) {
            this.LinePreCalc_LineCap2(r.getTlx(), r.getTly(), 0, r.getTrx(), r.getTry(), 0, t, q);
            this.LinePreCalc_LineCap2(r.getTrx(), r.getTry(), 0, r.getBrx(), r.getBry(), 0, q, -t);
            this.LinePreCalc_LineCap2(r.getBrx(), r.getBry(), 0, r.getBlx(), r.getBly(), 0, -t, -q);
            this.LinePreCalc_LineCap2(r.getBlx(), r.getBly(), 0, r.getTlx(), r.getTly(), 0, -q, t)
        }
        _LineQuadPreCalc_LineCap1(r, t, q) {
            this.LinePreCalc_LineCap1(r.getTlx(), r.getTly(), 0, r.getTrx(), r.getTry(), 0, t, q);
            this.LinePreCalc_LineCap1(r.getTrx(), r.getTry(), 0, r.getBrx(), r.getBry(),
                0, q, -t);
            this.LinePreCalc_LineCap1(r.getBrx(), r.getBry(), 0, r.getBlx(), r.getBly(), 0, -t, -q);
            this.LinePreCalc_LineCap1(r.getBlx(), r.getBly(), 0, r.getTlx(), r.getTly(), 0, -q, t)
        }
        _LineQuadPreCalc_LineCap0(r, t, q) {
            this.LinePreCalc_LineCap0(r.getTlx(), r.getTly(), 0, r.getTrx(), r.getTry(), 0, t, q);
            this.LinePreCalc_LineCap0(r.getTrx(), r.getTry(), 0, r.getBrx(), r.getBry(), 0, q, -t);
            this.LinePreCalc_LineCap0(r.getBrx(), r.getBry(), 0, r.getBlx(), r.getBly(), 0, -t, -q);
            this.LinePreCalc_LineCap0(r.getBlx(), r.getBly(), 0, r.getTlx(),
                r.getTly(), 0, -q, t)
        }
        SetLineWidth(r) {
            this._lineWidth = r;
            this._lineWidthStack[this._lineWidthStack.length - 1] = r
        }
        GetLineWidth() {
            return this._lineWidth
        }
        PushLineWidth(r) {
            if (100 <= this._lineWidthStack.length) throw Error("pushed too many line widths - check push/pop pairs");
            this._lineWidthStack.push(r);
            this._lineWidth = r
        }
        PopLineWidth() {
            if (1 >= this._lineWidthStack.length) throw Error("cannot pop last line width - check push/pop pairs");
            this._lineWidthStack.pop();
            this._lineWidth = this._lineWidthStack.at(-1)
        }
        SetLineCapButt() {
            this._lineCap =
                0;
            this._lineCapStack[this._lineCapStack.length - 1] = 0
        }
        SetLineCapSquare() {
            this._lineCap = 1;
            this._lineCapStack[this._lineCapStack.length - 1] = 0
        }
        SetLineCapZag() {
            this._lineCap = 2;
            this._lineCapStack[this._lineCapStack.length - 1] = 0
        }
        PushLineCap(r) {
            if ("butt" === r) this.PushLineCapButt();
            else if ("square" === r) this.PushLineCapSquare();
            else if ("zag" === r) this.PushLineCapZag();
            else throw Error("invalid line cap");
        }
        PushLineCapButt() {
            if (100 <= this._lineCapStack.length) throw Error("pushed too many line caps - check push/pop pairs");
            this._lineCapStack.push(0);
            this._lineCap = 0
        }
        PushLineCapSquare() {
            if (100 <= this._lineCapStack.length) throw Error("pushed too many line caps - check push/pop pairs");
            this._lineCapStack.push(1);
            this._lineCap = 1
        }
        PushLineCapZag() {
            if (100 <= this._lineCapStack.length) throw Error("pushed too many line caps - check push/pop pairs");
            this._lineCapStack.push(2);
            this._lineCap = 2
        }
        PopLineCap() {
            if (1 >= this._lineCapStack.length) throw Error("cannot pop last line cap - check push/pop pairs");
            this._lineCapStack.pop();
            this._lineCap =
                this._lineCapStack.at(-1)
        }
        SetLineOffset(r) {
            this._lineOffset = r;
            this._lineOffsetStack[this._lineOffsetStack.length - 1] = r
        }
        GetLineOffset() {
            return this._lineOffset
        }
        PushLineOffset(r) {
            if (100 <= this._lineOffsetStack.length) throw Error("pushed too many line offsets - check push/pop pairs");
            this._lineOffsetStack.push(r);
            this._lineOffset = r
        }
        PopLineOffset() {
            if (1 >= this._lineOffsetStack.length) throw Error("cannot pop last line offset - check push/pop pairs");
            this._lineOffsetStack.pop();
            this._lineOffset = this._lineOffsetStack.at(-1)
        }
        ConvexPoly(r) {
            var t =
                r.length / 2;
            if (3 > t) throw Error("need at least 3 points");
            t -= 2;
            const q = t - 1,
                w = r[0],
                y = r[1];
            for (let C = 0; C < t; C += 2) {
                const F = 2 * C,
                    H = r[F + 2],
                    M = r[F + 3],
                    B = r[F + 4],
                    A = r[F + 5];
                C === q ? this.Quad2(w, y, H, M, B, A, B, A) : this.Quad2(w, y, H, M, B, A, r[F + 6], r[F + 7])
            }
        }
        GetNumVertexComponents() {
            return 3
        }
        Finish() {
            this.EndBatch(!0);
            this._frameNumber++
        }
        GetFrameNumber() {
            return this._frameNumber
        }
        IncrementFrameNumber() {
            this._frameNumber++
        }
        SetMipmapsEnabled(r) {
            this._enableMipmaps = !!r
        }
        AreMipmapsEnabled() {
            return this._enableMipmaps
        }
        SetHasMajorPerformanceCaveat(r) {
            this._hasMajorPerformanceCaveat = !!r
        }
        HasMajorPerformanceCaveat() {
            return this._hasMajorPerformanceCaveat
        }
        IsWebGL() {
            return !1
        }
        IsWebGPU() {
            return !1
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Gfx.StateGroup = class {
        constructor(b, a, d, c, f) {
            this._renderer = b;
            this._refCount = 0;
            this._shaderProgram = null;
            this._shaderProgramName = "";
            this._blendMode = d;
            this._color = e.New(e.Color);
            this._color.set(c);
            this._zElevation = f;
            "string" === typeof a ? this._shaderProgramName = a : (this._shaderProgram = a, this._shaderProgramName = this._shaderProgram.GetName())
        }
        Release() {
            if (0 < this._refCount) throw Error("releasing state group still in use");
            this._shaderProgram = this._renderer = null;
            this._shaderProgramName =
                ""
        }
        Apply() {
            const b = this._renderer;
            b.SetProgram(this._shaderProgram);
            b.SetBlendMode(this._blendMode);
            b.SetColor(this._color);
            b.SetCurrentZ(this._zElevation);
            b._SetCurrentStateGroup(this)
        }
        GetKey() {
            return e.Gfx.StateGroup.MakeKey(this._shaderProgramName, this._blendMode, this._color, this._zElevation)
        }
        AddRef() {
            ++this._refCount
        }
        DecRef() {
            --this._refCount
        }
        _GetRefCount() {
            return this._refCount
        }
        OnContextLost() {
            this._shaderProgram = null
        }
        OnContextRestored(b) {
            this._shaderProgram = b.GetShaderProgramByName(this._shaderProgramName);
            if (!this._shaderProgram) throw Error("failed to restore shader program");
        }
        static MakeKey(b, a, d, c) {
            return ("string" === typeof b ? b : b.GetName()) + "," + a + "," + d.getR() + "," + d.getG() + "," + d.getB() + "," + d.getA() + "," + c
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = e.New(e.Quad);

    function a(d, c, f) {
        const k = f.getTlx(),
            g = f.getTly(),
            l = f.getTrx() - k,
            m = f.getTry() - g,
            u = f.getBlx() - k;
        f = f.getBly() - g;
        return [k + l * d + u * c, g + m * d + f * c]
    }
    e.Gfx.MeshPoint = class {
        constructor(d, c, f) {
            this._mesh = d;
            this._col = c;
            this._row = f;
            this._v = this._u = this._zElevation = this._y = this._x = 0
        }
        _Init(d, c, f, k) {
            this._x = d;
            this._y = c;
            this._u = f;
            this._v = k
        }
        GetX() {
            return this._x
        }
        SetX(d) {
            this._x !== d && (this._x = d, this._mesh._SetPointsChanged())
        }
        GetY() {
            return this._y
        }
        SetY(d) {
            this._y !== d && (this._y =
                d, this._mesh._SetPointsChanged())
        }
        GetZElevation() {
            return this._zElevation
        }
        SetZElevation(d) {
            this._zElevation !== d && (this._zElevation = Math.max(d, 0), this._mesh._SetPointsChanged())
        }
        GetU() {
            return this._u
        }
        SetU(d) {
            this._u = d
        }
        GetV() {
            return this._v
        }
        SetV(d) {
            this._v = d
        }
        _Interpolate_TexRect(d, c, f) {
            [this._x, this._y] = a(d._x, d._y, c);
            this._zElevation = d._zElevation;
            this._u = e.lerp(f.getLeft(), f.getRight(), d._u);
            this._v = e.lerp(f.getTop(), f.getBottom(), d._v)
        }
        _Interpolate_TexQuad(d, c, f) {
            [this._x, this._y] = a(d._x, d._y, c);
            this._zElevation = d._zElevation;
            [this._u, this._v] = a(d._u, d._v, f)
        }
        SaveToJson() {
            return {
                x: this.GetX(),
                y: this.GetY(),
                z: this.GetZElevation(),
                u: this.GetU(),
                v: this.GetV()
            }
        }
        LoadFromJson(d) {
            this.SetX(d.x);
            this.SetY(d.y);
            d.hasOwnProperty("z") && this.SetZElevation(d.z);
            this.SetU(d.u);
            this.SetV(d.v)
        }
        GetMesh() {
            return this._mesh
        }
        GetColumn() {
            return this._col
        }
        GetRow() {
            return this._row
        }
    };
    e.Gfx.Mesh = class {
        constructor(d, c, f) {
            if (2 > d || 2 > c) throw Error("invalid mesh size");
            this._hsize = d;
            this._vsize = c;
            this._owner = f || null;
            this._pts = [];
            this._minY = this._minX = 0;
            this._maxY = this._maxX = 1;
            this._maxZ = 0;
            this._pointsChanged = !1;
            f = d - 1;
            const k = c - 1;
            for (let g = 0; g < c; ++g) {
                const l = [];
                for (let m = 0; m < d; ++m) {
                    const u = e.New(e.Gfx.MeshPoint, this, m, g),
                        x = m / f,
                        p = g / k;
                    u._Init(x, p, x, p);
                    l.push(u)
                }
                this._pts.push(l)
            }
        }
        Release() {
            e.clearArray(this._pts)
        }
        GetHSize() {
            return this._hsize
        }
        GetVSize() {
            return this._vsize
        }
        GetOwner() {
            return this._owner
        }
        _GetPoints() {
            return this._pts
        }
        _SetPointsChanged() {
            this._pointsChanged = !0
        }
        _MaybeComputeBounds() {
            if (this._pointsChanged) {
                var d =
                    Infinity,
                    c = Infinity,
                    f = -Infinity,
                    k = -Infinity,
                    g = 0;
                for (const l of this._pts)
                    for (const m of l) {
                        const u = m.GetX(),
                            x = m.GetY();
                        d = Math.min(d, u);
                        c = Math.min(c, x);
                        f = Math.max(f, u);
                        k = Math.max(k, x);
                        g = Math.max(g, m.GetZElevation())
                    }
                this._minX = d;
                this._minY = c;
                this._maxX = f;
                this._maxY = k;
                this._maxZ = g;
                this._pointsChanged = !1
            }
        }
        GetMinX() {
            this._MaybeComputeBounds();
            return this._minX
        }
        GetMinY() {
            this._MaybeComputeBounds();
            return this._minY
        }
        GetMaxX() {
            this._MaybeComputeBounds();
            return this._maxX
        }
        GetMaxY() {
            this._MaybeComputeBounds();
            return this._maxY
        }
        GetMaxZ() {
            this._MaybeComputeBounds();
            return this._maxZ
        }
        HasAnyZElevation() {
            return 0 < this.GetMaxZ()
        }
        GetMeshPointAt(d, c) {
            d = Math.floor(d);
            c = Math.floor(c);
            return 0 > d || d >= this._hsize || 0 > c || c >= this._vsize ? null : this._pts[c][d]
        }
        CalculateTransformedMesh(d, c, f) {
            const k = f instanceof e.Rect;
            if (d.GetHSize() !== this.GetHSize() || d.GetVSize() !== this.GetVSize()) throw Error("source mesh wrong size");
            d = d._pts;
            const g = this._pts;
            for (let l = 0, m = g.length; l < m; ++l) {
                const u = d[l],
                    x = g[l];
                for (let p = 0, r = x.length; p <
                    r; ++p) {
                    const t = u[p],
                        q = x[p];
                    k ? q._Interpolate_TexRect(t, c, f) : q._Interpolate_TexQuad(t, c, f)
                }
            }
        }
        Draw(d) {
            const c = this._pts;
            let f = c[0];
            for (let k = 1, g = c.length; k < g; ++k) {
                const l = c[k];
                let m = f[0],
                    u = l[0];
                for (let x = 1, p = l.length; x < p; ++x) {
                    const r = f[x],
                        t = l[x];
                    b.set(m.GetU(), m.GetV(), r.GetU(), r.GetV(), t.GetU(), t.GetV(), u.GetU(), u.GetV());
                    d.Quad3D2(m.GetX(), m.GetY(), m.GetZElevation(), r.GetX(), r.GetY(), r.GetZElevation(), t.GetX(), t.GetY(), t.GetZElevation(), u.GetX(), u.GetY(), u.GetZElevation(), b);
                    m = r;
                    u = t
                }
                f = l
            }
        }
        Outline(d,
            c) {
            c || (c = (g, l, m) => [g, l, m]);
            const f = this._pts;
            let k = f[0];
            for (let g = 1, l = f.length; g < l; ++g) {
                const m = f[g];
                let u = k[0],
                    x = m[0];
                for (let p = 1, r = m.length; p < r; ++p) {
                    const t = k[p],
                        q = m[p],
                        [w, y, C] = c(u.GetX(), u.GetY(), u.GetZElevation()),
                        [F, H, M] = c(t.GetX(), t.GetY(), t.GetZElevation()),
                        [B, A, G] = c(q.GetX(), q.GetY(), q.GetZElevation()),
                        [J, L, R] = c(x.GetX(), x.GetY(), x.GetZElevation());
                    d.Line3D(w, y, C, F, H, M);
                    d.Line3D(w, y, C, B, A, G);
                    d.Line3D(w, y, C, J, L, R);
                    p === r - 1 && d.Line3D(F, H, M, B, A, G);
                    g === l - 1 && d.Line3D(J, L, R, B, A, G);
                    u = t;
                    x = q
                }
                k = m
            }
        }
        InsertPolyMeshVertices(d) {
            d =
                d.pointsArr();
            const c = [],
                f = this.GetHSize() - 1,
                k = this.GetVSize() - 1,
                g = 1 / f,
                l = 1 / k,
                m = f - 1,
                u = k - 1;
            let x = d[0],
                p = d[1],
                r = e.clamp(Math.floor(x * f), 0, m),
                t = e.clamp(Math.floor(p * k), 0, u),
                q = 0,
                w = 0,
                y = 0;
            var C = -1;
            const F = () => {
                x = e.clamp(e.lerp(x, q, y), 0, 1);
                p = e.clamp(e.lerp(p, w, y), 0, 1);
                c.push(x, p)
            };
            for (let H = 0, M = d.length; H < M; H += 2)
                for (x = d[H], p = d[H + 1], c.push(x, p), r = e.clamp(Math.floor(x * f), 0, m), t = e.clamp(Math.floor(p * k), 0, u), C = (H + 2) % M, q = d[C], w = d[C + 1], C = -1;;) {
                    if (1E6 < c.length) throw Error("Too many mesh poly points");
                    const B = r *
                        g,
                        A = t * l,
                        G = (r + 1) * g,
                        J = (t + 1) * l;
                    e.isPointInTriangleInclusive(x, p, B, A, G, A, G, J);
                    if (0 !== C && (y = e.rayIntersectExtended(x, p, q, w, B, A, G, J, -.001), 0 <= y && .99999999 >= y)) {
                        F();
                        C = 0;
                        continue
                    }
                    if (0 < t && 2 !== C && (y = e.rayIntersectExtended(x, p, q, w, B, A, G, A, .001), 0 <= y && .99999999 >= y)) {
                        F();
                        t--;
                        C = 4;
                        continue
                    }
                    if (r < m && 3 !== C && (y = e.rayIntersectExtended(x, p, q, w, G, A, G, J, .001), 0 <= y && .99999999 >= y)) {
                        F();
                        r++;
                        C = 1;
                        continue
                    }
                    if (0 < r && 1 !== C && (y = e.rayIntersectExtended(x, p, q, w, B, A, B, J, .001), 0 <= y && .99999999 >= y)) {
                        F();
                        r--;
                        C = 3;
                        continue
                    }
                    if (t < u && 4 !== C &&
                        (y = e.rayIntersectExtended(x, p, q, w, B, J, G, J, .001), 0 <= y && .99999999 >= y)) {
                        F();
                        t++;
                        C = 2;
                        continue
                    }
                    break
                }
            return e.New(e.CollisionPoly, c)
        }
        TransformCollisionPoly(d, c) {
            d = this._TransformPolyPoints(d);
            this._SimplifyPoly(d);
            c.setPoints(d)
        }
        _TransformPolyPoints(d) {
            const c = [];
            d = d.pointsArr();
            for (let f = 0, k = d.length; f < k; f += 2) {
                const [g, l] = this.TransformPoint(d[f], d[f + 1]);
                c.push(g, l)
            }
            return c
        }
        TransformPoint(d, c) {
            var f = this.GetHSize() - 1,
                k = this.GetVSize() - 1,
                g = 1 / f,
                l = 1 / k;
            f = e.clamp(Math.floor(d * f), 0, f - 1);
            const m = e.clamp(Math.floor(c *
                k), 0, k - 1);
            k = f * g;
            const u = m * l,
                x = (f + 1) * g,
                p = (m + 1) * l,
                r = this.GetMeshPointAt(f, m),
                t = this.GetMeshPointAt(f + 1, m + 1),
                q = e.isPointInTriangleInclusive(d, c, k, u, x, u, x, p);
            g = q ? k + g : k;
            l = q ? u : u + l;
            f = this.GetMeshPointAt(f + (q ? 1 : 0), m + (q ? 0 : 1));
            const [w, y, C] = e.triangleCartesianToBarycentric(d, c, k, u, g, l, x, p);
            return e.triangleBarycentricToCartesian(w, y, C, r.GetX(), r.GetY(), f.GetX(), f.GetY(), t.GetX(), t.GetY())
        }
        _SimplifyPoly(d) {
            const c = [];
            let f = d[0],
                k = d[1],
                g = f - d.at(-2),
                l = k - d.at(-1);
            for (let u = 0, x = d.length; u < x; u += 2) {
                var m = (u + 2) % x;
                const p = d[m];
                m = d[m + 1];
                const r = p - f,
                    t = m - k,
                    q = 1E-7 > Math.abs(t) && 1E-7 > Math.abs(l) && Math.sign(r) === Math.sign(g);
                (!(1E-7 > Math.abs(r) && 1E-7 > Math.abs(g) && Math.sign(t) === Math.sign(l) || q) && 1E-7 < Math.abs(r / g - t / l) || 0 == r && 0 === t) && c.push(f, k);
                f = p;
                k = m;
                g = r;
                l = t
            }
            6 <= c.length && c.length < d.length && e.shallowAssignArray(d, c)
        }
        SaveToJson() {
            return {
                cols: this.GetHSize(),
                rows: this.GetVSize(),
                points: this._pts.map(d => d.map(c => c.SaveToJson()))
            }
        }
        LoadFromJson(d) {
            const c = this.GetHSize(),
                f = this.GetVSize();
            if (d.cols !== c || d.rows !== f) throw Error("mesh data wrong size");
            d = d.points;
            for (let k = 0; k < f; ++k) {
                const g = d[k];
                for (let l = 0; l < c; ++l) this.GetMeshPointAt(l, k).LoadFromJson(g[l])
            }
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = new Set(["rgba8", "rgb8", "rgba4", "rgb5_a1", "rgb565"]),
        a = new Set(["nearest", "bilinear", "trilinear"]),
        d = new Set(["default", "low", "high"]),
        c = new Set(["clamp-to-edge", "repeat", "mirror-repeat"]);

    function f(m, u) {
        let x, p;
        switch (m) {
            case "rgba8":
                m = u.RGBA8;
                p = x = u.RGBA;
                u = u.UNSIGNED_BYTE;
                break;
            case "rgb8":
                m = u.RGB8;
                p = x = u.RGB;
                u = u.UNSIGNED_BYTE;
                break;
            case "rgba4":
                m = u.RGBA4;
                p = x = u.RGBA;
                u = u.UNSIGNED_SHORT_4_4_4_4;
                break;
            case "rgb5_a1":
                m = u.RGB5_A1;
                p = x = u.RGBA;
                u = u.UNSIGNED_SHORT_5_5_5_1;
                break;
            case "rgb565":
                m = u.RGB565;
                p = x = u.RGB;
                u = u.UNSIGNED_SHORT_5_6_5;
                break;
            default:
                throw Error("invalid pixel format");
        }
        return {
            sizedinternalformat: m,
            internalformat: x,
            format: p,
            type: u
        }
    }
    const k = {
            wrapX: "clamp-to-edge",
            wrapY: "clamp-to-edge",
            sampling: "trilinear",
            anisotropy: 0,
            pixelFormat: "rgba8",
            mipMap: !0,
            mipMapQuality: "default",
            premultiplyAlpha: !0,
            isSvg: !1,
            width: -1,
            height: -1
        },
        g = {
            premultiplyAlpha: !0,
            flipY: !1
        },
        l = new Set;
    e.Gfx.WebGLRendererTexture = class {
        constructor(m) {
            this._renderer = m;
            this._texture = null;
            this._height =
                this._width = 0;
            this._isStatic = !0;
            this._wrapY = this._wrapX = "clamp-to-edge";
            this._sampling = "trilinear";
            this._anisotropy = 0;
            this._pixelFormat = "rgba8";
            this._isMipMapped = !1;
            this._mipMapQuality = "default";
            this._refCount = 0
        }
        _CreateStatic(m, u) {
            if (!("undefined" !== typeof HTMLImageElement && m instanceof HTMLImageElement || "undefined" !== typeof HTMLCanvasElement && m instanceof HTMLCanvasElement || "undefined" !== typeof ImageBitmap && m instanceof ImageBitmap || "undefined" !== typeof OffscreenCanvas && m instanceof OffscreenCanvas ||
                    m instanceof ImageData || m instanceof ArrayBuffer) && null !== m) throw Error("invalid texture source");
            u = Object.assign({}, k, u);
            if (this._texture) throw Error("already created texture");
            this._wrapX = u.wrapX;
            this._wrapY = u.wrapY;
            this._sampling = u.sampling;
            this._anisotropy = u.anisotropy;
            this._pixelFormat = u.pixelFormat;
            this._isMipMapped = !!u.mipMap && this._renderer.AreMipmapsEnabled();
            this._mipMapQuality = u.mipMapQuality;
            if (!c.has(this._wrapX) || !c.has(this._wrapY)) throw Error("invalid wrap mode");
            if (!a.has(this._sampling)) throw Error("invalid sampling");
            if (!b.has(this._pixelFormat)) throw Error("invalid pixel format");
            if (!d.has(this._mipMapQuality)) throw Error("invalid mipmap quality");
            this._isStatic = !0;
            if (m instanceof ArrayBuffer || null === m || u.isSvg) {
                if (this._width = u.width, this._height = u.height, m instanceof ArrayBuffer && m.byteLength !== this._width * this._height * 4) throw Error("ArrayBuffer wrong size");
            } else this._width = m.width, this._height = m.height;
            if (0 >= this._width || 0 >= this._height) throw Error("invalid texture data size");
            if (u.isSvg) {
                var x = e.CreateCanvas(this._width,
                    this._height);
                x.getContext("2d").drawImage(m, 0, 0, this._width, this._height);
                m = x
            }
            var p = e.isPOT(this._width) && e.isPOT(this._height);
            x = this._renderer.GetMaxTextureSize();
            if (this._width > x || this._height > x) throw Error("texture data exceeds maximum texture size");
            x = this._renderer.GetContext();
            var r = this._renderer.GetWebGLVersionNumber();
            this._texture = x.createTexture();
            x.bindTexture(x.TEXTURE_2D, this._texture);
            x.pixelStorei(x.UNPACK_PREMULTIPLY_ALPHA_WEBGL, u.premultiplyAlpha);
            x.pixelStorei(x.UNPACK_FLIP_Y_WEBGL, !1);
            u = f(this._pixelFormat, x);
            if (this._renderer.SupportsNPOTTextures() || p || !this._IsTiled()) 2 <= r ? (x.texStorage2D(x.TEXTURE_2D, this._isMipMapped ? Math.floor(Math.log2(Math.max(this._width, this._height)) + 1) : 1, u.sizedinternalformat, this._width, this._height), m instanceof ArrayBuffer ? x.texSubImage2D(x.TEXTURE_2D, 0, 0, 0, this._width, this._height, u.format, u.type, new Uint8Array(m)) : null !== m && x.texSubImage2D(x.TEXTURE_2D, 0, 0, 0, u.format, u.type, m)) : m instanceof ArrayBuffer ? x.texImage2D(x.TEXTURE_2D, 0, u.internalformat,
                this._width, this._height, 0, u.format, u.type, new Uint8Array(m)) : null === m ? x.texImage2D(x.TEXTURE_2D, 0, u.internalformat, this._width, this._height, 0, u.format, u.type, null) : x.texImage2D(x.TEXTURE_2D, 0, u.internalformat, u.format, u.type, m);
            else {
                if (null === m) throw Error("cannot pass null data when creating a NPOT tiled texture without NPOT support");
                m instanceof ArrayBuffer && (m = new ImageData(new Uint8ClampedArray(m), this._width, this._height));
                m instanceof ImageData && (p = e.CreateCanvas(this._width, this._height),
                    p.getContext("2d").putImageData(m, 0, 0), m = p);
                p = e.CreateCanvas(e.nextHighestPowerOfTwo(this._width), e.nextHighestPowerOfTwo(this._height));
                r = p.getContext("2d");
                r.imageSmoothingEnabled = "nearest" !== this._sampling;
                r.drawImage(m, 0, 0, this._width, this._height, 0, 0, p.width, p.height);
                x.texImage2D(x.TEXTURE_2D, 0, u.internalformat, u.format, u.type, p)
            }
            null !== m && this._SetTextureParameters(x);
            x.bindTexture(x.TEXTURE_2D, null);
            this._renderer._ResetLastTexture();
            this._refCount = 1;
            l.add(this)
        }
        _CreateDynamic(m, u, x) {
            x = Object.assign({},
                k, x);
            if (this._texture) throw Error("already created texture");
            this._wrapX = x.wrapX;
            this._wrapY = x.wrapY;
            this._sampling = x.sampling;
            this._pixelFormat = x.pixelFormat;
            this._isMipMapped = !!x.mipMap && this._renderer.AreMipmapsEnabled();
            this._mipMapQuality = x.mipMapQuality;
            if (!c.has(this._wrapX) || !c.has(this._wrapY)) throw Error("invalid wrap mode");
            if (!a.has(this._sampling)) throw Error("invalid sampling");
            if (!b.has(this._pixelFormat)) throw Error("invalid pixel format");
            if (!d.has(this._mipMapQuality)) throw Error("invalid mipmap quality");
            this._isStatic = !1;
            this._width = Math.floor(m);
            this._height = Math.floor(u);
            m = e.isPOT(this._width) && e.isPOT(this._height);
            u = this._renderer.GetMaxTextureSize();
            if (0 >= this._width || 0 >= this._height) throw Error("invalid texture size");
            if (this._width > u || this._height > u) throw Error("texture exceeds maximum texture size");
            if (!this._renderer.SupportsNPOTTextures() && this._IsTiled() && !m) throw Error("non-power-of-two tiled textures not supported");
            m = this._renderer.GetContext();
            u = this._renderer.GetWebGLVersionNumber();
            this._texture = m.createTexture();
            m.bindTexture(m.TEXTURE_2D, this._texture);
            m.pixelStorei(m.UNPACK_PREMULTIPLY_ALPHA_WEBGL, x.premultiplyAlpha);
            m.pixelStorei(m.UNPACK_FLIP_Y_WEBGL, !1);
            x = f(this._pixelFormat, m);
            m.texImage2D(m.TEXTURE_2D, 0, 2 <= u ? x.sizedinternalformat : x.internalformat, this._width, this._height, 0, x.format, x.type, null);
            this._SetTextureParameters(m);
            m.bindTexture(m.TEXTURE_2D, null);
            this._renderer._ResetLastTexture();
            this._refCount = 1;
            l.add(this)
        }
        _GetMipMapHint(m) {
            if ("default" === this._mipMapQuality) return this._isStatic ?
                m.NICEST : m.FASTEST;
            if ("low" === this._mipMapQuality) return m.FASTEST;
            if ("high" === this._mipMapQuality) return m.NICEST;
            throw Error("invalid mipmap quality");
        }
        _IsTiled() {
            return "clamp-to-edge" !== this._wrapX || "clamp-to-edge" !== this._wrapY
        }
        _GetTextureWrapMode(m, u) {
            if ("clamp-to-edge" === u) return m.CLAMP_TO_EDGE;
            if ("repeat" === u) return m.REPEAT;
            if ("mirror-repeat" === u) return m.MIRRORED_REPEAT;
            throw Error("invalid wrap mode");
        }
        _SetTextureParameters(m) {
            var u = e.isPOT(this._width) && e.isPOT(this._height);
            m.texParameteri(m.TEXTURE_2D,
                m.TEXTURE_WRAP_S, this._GetTextureWrapMode(m, this._wrapX));
            m.texParameteri(m.TEXTURE_2D, m.TEXTURE_WRAP_T, this._GetTextureWrapMode(m, this._wrapY));
            "nearest" === this._sampling ? (m.texParameteri(m.TEXTURE_2D, m.TEXTURE_MAG_FILTER, m.NEAREST), m.texParameteri(m.TEXTURE_2D, m.TEXTURE_MIN_FILTER, m.NEAREST), this._isMipMapped = !1) : (m.texParameteri(m.TEXTURE_2D, m.TEXTURE_MAG_FILTER, m.LINEAR), (u || this._renderer.SupportsNPOTTextures()) && this._isMipMapped ? (m.hint(m.GENERATE_MIPMAP_HINT, this._GetMipMapHint(m)), m.generateMipmap(m.TEXTURE_2D),
                u = "trilinear" === this._sampling && !this._renderer.HasMajorPerformanceCaveat(), m.texParameteri(m.TEXTURE_2D, m.TEXTURE_MIN_FILTER, u ? m.LINEAR_MIPMAP_LINEAR : m.LINEAR_MIPMAP_NEAREST)) : (m.texParameteri(m.TEXTURE_2D, m.TEXTURE_MIN_FILTER, m.LINEAR), this._isMipMapped = !1));
            (u = this._renderer._GetAnisotropicExtension()) && 0 < this._anisotropy && "nearest" !== this._sampling && m.texParameterf(m.TEXTURE_2D, u.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(this._anisotropy, this._renderer._GetMaxAnisotropy()))
        }
        _Update(m, u) {
            if (!("undefined" !==
                    typeof HTMLImageElement && m instanceof HTMLImageElement || "undefined" !== typeof HTMLVideoElement && m instanceof HTMLVideoElement || "undefined" !== typeof HTMLCanvasElement && m instanceof HTMLCanvasElement || "undefined" !== typeof ImageBitmap && m instanceof ImageBitmap || "undefined" !== typeof OffscreenCanvas && m instanceof OffscreenCanvas || m instanceof ImageData)) throw Error("invalid texture source");
            if (!this._texture || 0 >= this._refCount) throw Error("texture not created");
            if (this._isStatic) throw Error("cannot update static texture");
            u = Object.assign({}, g, u);
            const x = m.width || m.videoWidth,
                p = m.height || m.videoHeight;
            var r = this._renderer.GetWebGLVersionNumber();
            const t = this._renderer.GetContext();
            t.bindTexture(t.TEXTURE_2D, this._texture);
            t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL, u.premultiplyAlpha);
            t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, !!u.flipY);
            u = f(this._pixelFormat, t);
            r = 2 <= r ? u.sizedinternalformat : u.internalformat;
            try {
                if (this._width === x && this._height === p) {
                    const q = e.isPOT(this._width) && e.isPOT(this._height);
                    t.texSubImage2D(t.TEXTURE_2D,
                        0, 0, 0, u.format, u.type, m);
                    (q || this._renderer.SupportsNPOTTextures()) && this._isMipMapped && (t.hint(t.GENERATE_MIPMAP_HINT, this._GetMipMapHint(t)), t.generateMipmap(t.TEXTURE_2D))
                } else {
                    this._width = x;
                    this._height = p;
                    const q = e.isPOT(this._width) && e.isPOT(this._height);
                    if (!this._renderer.SupportsNPOTTextures() && this._IsTiled() && !q) throw Error("non-power-of-two tiled textures not supported");
                    t.texImage2D(t.TEXTURE_2D, 0, r, u.format, u.type, m);
                    (q || this._renderer.SupportsNPOTTextures()) && this._isMipMapped && (t.hint(t.GENERATE_MIPMAP_HINT,
                        this._GetMipMapHint(t)), t.generateMipmap(t.TEXTURE_2D))
                }
            } catch (q) {
                console.error("Error updating WebGL texture: ", q)
            }
            t.bindTexture(t.TEXTURE_2D, null);
            this._renderer._ResetLastTexture()
        }
        _Delete() {
            if (0 < this._refCount) throw Error("texture still has references");
            if (!this._texture) throw Error("already deleted texture");
            l.delete(this);
            this._renderer.GetContext().deleteTexture(this._texture);
            this._texture = null
        }
        IsValid() {
            return !!this._texture
        }
        _GetTexture() {
            return this._texture
        }
        GetRenderer() {
            return this._renderer
        }
        AddReference() {
            this._refCount++
        }
        SubtractReference() {
            if (0 >=
                this._refCount) throw Error("no more references");
            this._refCount--
        }
        GetReferenceCount() {
            return this._refCount
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        IsStatic() {
            return this._isStatic
        }
        GetEstimatedMemoryUsage() {
            let m = this._width * this._height;
            switch (this._pixelFormat) {
                case "rgba8":
                    m *= 4;
                    break;
                case "rgb8":
                    m *= 3;
                    break;
                case "rgba4":
                case "rgb5_a1":
                case "rgb565":
                    m *= 2
            }
            this._isMipMapped && (m += Math.floor(m / 3));
            return m
        }
        static OnContextLost() {
            l.clear()
        }
        static allTextures() {
            return l.values()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.glMatrix.mat4,
        a = new Set(["nearest", "bilinear", "trilinear"]),
        d = {
            sampling: "trilinear",
            alpha: !0,
            depth: !1,
            isSampled: !0,
            isDefaultSize: !0,
            multisampling: 0
        },
        c = new Set;
    e.Gfx.WebGLRenderTarget = class {
        constructor(f) {
            this._renderer = f;
            this._renderBuffer = this._texture = this._frameBuffer = null;
            this._height = this._width = 0;
            this._isDefaultSize = !0;
            this._sampling = "trilinear";
            this._alpha = !0;
            this._depth = !1;
            this._isSampled = !0;
            this._multisampling = 0;
            this._projectionMatrix = b.create()
        }
        _Create(f,
            k, g) {
            g = Object.assign({}, d, g);
            const l = this._renderer.GetWebGLVersionNumber();
            if (this._texture || this._renderBuffer) throw Error("already created render target");
            this._sampling = g.sampling;
            this._alpha = !!g.alpha;
            this._depth = !!g.depth;
            this._isSampled = !!g.isSampled;
            this._isDefaultSize = !!g.isDefaultSize;
            this._multisampling = g.multisampling;
            if (!a.has(this._sampling)) throw Error("invalid sampling");
            if (0 < this._multisampling && (2 > l || this._isSampled)) throw Error("invalid use of multisampling");
            2 > l && (this._isSampled = !0);
            this._width = f;
            this._height = k;
            if (0 >= this._width || 0 >= this._height) throw Error("invalid render target size");
            this._CalculateProjection();
            f = this._renderer.GetContext();
            this._frameBuffer = f.createFramebuffer();
            f.bindFramebuffer(f.FRAMEBUFFER, this._frameBuffer);
            this._isSampled ? (this._texture = this._renderer.CreateDynamicTexture(this._width, this._height, {
                sampling: this._sampling,
                pixelFormat: this._alpha ? "rgba8" : "rgb8",
                mipMap: !1
            }), k = this._texture._GetTexture(), f.framebufferTexture2D(f.FRAMEBUFFER, f.COLOR_ATTACHMENT0,
                f.TEXTURE_2D, k, 0)) : (this._renderBuffer = f.createRenderbuffer(), f.bindRenderbuffer(f.RENDERBUFFER, this._renderBuffer), k = this._alpha ? f.RGBA8 : f.RGB8, 0 < this._multisampling && ((g = f.getInternalformatParameter(f.RENDERBUFFER, k, f.SAMPLES)) && g[0] ? (g = g[0], this._multisampling > g && (this._multisampling = g)) : this._multisampling = 0), 0 === this._multisampling ? f.renderbufferStorage(f.RENDERBUFFER, k, this._width, this._height) : f.renderbufferStorageMultisample(f.RENDERBUFFER, this._multisampling, k, this._width, this._height), f.framebufferRenderbuffer(f.FRAMEBUFFER,
                f.COLOR_ATTACHMENT0, f.RENDERBUFFER, this._renderBuffer), f.bindRenderbuffer(f.RENDERBUFFER, null));
            k = this._renderer._GetDepthBuffer();
            this._depth && k && f.framebufferRenderbuffer(f.FRAMEBUFFER, f.DEPTH_STENCIL_ATTACHMENT, f.RENDERBUFFER, k);
            f.bindFramebuffer(f.FRAMEBUFFER, null);
            c.add(this)
        }
        _Resize(f, k) {
            if (this._width !== f || this._height !== k) this._width = f, this._height = k, this._CalculateProjection(), f = this._renderer.GetContext(), f.bindFramebuffer(f.FRAMEBUFFER, this._frameBuffer), this._texture ? this._texture._Update(new ImageData(this._width,
                this._height)) : (f.bindRenderbuffer(f.RENDERBUFFER, this._renderBuffer), f.renderbufferStorage(f.RENDERBUFFER, this._alpha ? f.RGBA8 : f.RGB8, this._width, this._height), f.bindRenderbuffer(f.RENDERBUFFER, null)), k = this._renderer._GetDepthBuffer(), this._depth && k && f.framebufferRenderbuffer(f.FRAMEBUFFER, f.DEPTH_STENCIL_ATTACHMENT, f.RENDERBUFFER, k), f.bindFramebuffer(f.FRAMEBUFFER, null)
        }
        _Delete() {
            if (!this._texture && !this._renderBuffer) throw Error("already deleted render target");
            c.delete(this);
            const f = this._renderer.GetContext();
            f.bindFramebuffer(f.FRAMEBUFFER, this._frameBuffer);
            this._texture ? (f.framebufferTexture2D(f.FRAMEBUFFER, f.COLOR_ATTACHMENT0, f.TEXTURE_2D, null, 0), this._renderer.DeleteTexture(this._texture), this._texture = null) : this._renderBuffer && (f.framebufferRenderbuffer(f.FRAMEBUFFER, f.COLOR_ATTACHMENT0, f.RENDERBUFFER, null), f.deleteRenderbuffer(this._renderBuffer), this._renderBuffer = null);
            f.bindFramebuffer(f.FRAMEBUFFER, null);
            2 <= this._renderer.GetWebGLVersionNumber() && (f.bindFramebuffer(f.READ_FRAMEBUFFER, null),
                f.bindFramebuffer(f.DRAW_FRAMEBUFFER, null));
            f.deleteFramebuffer(this._frameBuffer);
            this._frameBuffer = this._renderer.GetBatchState().currentFramebuffer = null
        }
        _CalculateProjection() {
            this._renderer.CalculatePerspectiveMatrix(this._projectionMatrix, this._width / this._height)
        }
        _GetFramebuffer() {
            return this._frameBuffer
        }
        GetRenderer() {
            return this._renderer
        }
        GetTexture() {
            return this._texture
        }
        GetProjectionMatrix() {
            return this._projectionMatrix
        }
        IsLinearSampling() {
            return "nearest" !== this._sampling
        }
        HasAlpha() {
            return this._alpha
        }
        IsSampled() {
            return this._isSampled
        }
        HasDepthBuffer() {
            return this._depth
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        IsDefaultSize() {
            return this._isDefaultSize
        }
        GetMultisampling() {
            return this._multisampling
        }
        GetOptions() {
            const f = {
                sampling: this._sampling,
                alpha: this._alpha,
                isSampled: this._isSampled
            };
            this._isDefaultSize || (f.width = this._width, f.height = this._height);
            return f
        }
        IsCompatibleWithOptions(f) {
            f = Object.assign({}, d, f);
            return "nearest" !== f.sampling !== this.IsLinearSampling() || !!f.alpha !== this.HasAlpha() || !!f.depth !== this.HasDepthBuffer() || 2 <= this._renderer.GetWebGLVersionNumber() && !!f.isSampled !== this.IsSampled() ? !1 : "number" === typeof f.width || "number" === typeof f.height ? !this.IsDefaultSize() && this.GetWidth() === f.width && this.GetHeight() ===
                f.height : this.IsDefaultSize()
        }
        _GetWebGLTexture() {
            return this._texture ? this._texture._GetTexture() : null
        }
        GetEstimatedMemoryUsage() {
            return this._texture ? this._texture.GetEstimatedMemoryUsage() : this._width * this._height * (this._alpha ? 4 : 3)
        }
        static async DebugReadPixelsToBlob(f, k) {
            f = await f.ReadBackRenderTargetToImageData(k, !0);
            return await e.ImageDataToBlob(f)
        }
        static OnContextLost() {
            c.clear()
        }
        static allRenderTargets() {
            return c.values()
        }
        static ResizeAll(f, k) {
            for (const g of c) g.IsDefaultSize() && g._Resize(f,
                k)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = new Set("aPos aTex aPoints matP matMV samplerFront samplerBack destStart destEnd srcStart srcEnd srcOriginStart srcOriginEnd pixelSize seconds layerScale layerAngle layoutStart layoutEnd color color2_ pointTexStart pointTexEnd zElevation tileSize tileSpacing outlineThickness".split(" "));
    e.Gfx.WebGLShaderProgram = class {
        static async Compile(a, d, c, f) {
            const k = a.GetContext(),
                g = k.createShader(k.FRAGMENT_SHADER);
            k.shaderSource(g, d);
            k.compileShader(g);
            d = k.createShader(k.VERTEX_SHADER);
            k.shaderSource(d,
                c);
            k.compileShader(d);
            const l = k.createProgram();
            k.attachShader(l, g);
            k.attachShader(l, d);
            k.bindAttribLocation(l, 0, "aPos");
            k.bindAttribLocation(l, 1, "aTex");
            k.bindAttribLocation(l, 2, "aPoints");
            k.linkProgram(l);
            const m = a._GetParallelShaderCompileExtension();
            m ? await a._WaitForObjectReady(() => k.getProgramParameter(l, m.COMPLETION_STATUS_KHR)) : await e.Wait(5);
            if (!k.getShaderParameter(g, k.COMPILE_STATUS)) throw f = k.getShaderInfoLog(g), k.deleteShader(g), k.deleteShader(d), k.deleteProgram(l), Error("Error compiling fragment shader: " +
                f);
            if (!k.getShaderParameter(d, k.COMPILE_STATUS)) throw f = k.getShaderInfoLog(d), k.deleteShader(g), k.deleteShader(d), k.deleteProgram(l), Error("Error compiling vertex shader: " + f);
            if (!k.getProgramParameter(l, k.LINK_STATUS)) throw f = k.getProgramInfoLog(l), k.deleteShader(g), k.deleteShader(d), k.deleteProgram(l), Error("Error linking shader program: " + f);
            (a = e.FilterUnprintableChars(k.getProgramInfoLog(l) || "").trim()) && !e.IsStringAllWhitespace(a) && console.info(`[WebGL] Shader program '${f}' compilation log: `,
                a);
            k.deleteShader(g);
            k.deleteShader(d);
            return l
        }
        static async Create(a, d, c, f) {
            c = await e.Gfx.WebGLShaderProgram.Compile(a, d.src, c, f);
            return new e.Gfx.WebGLShaderProgram(a, c, d, f)
        }
        constructor(a, d, c, f) {
            const k = a.GetContext();
            var g = a.GetBatchState();
            a.EndBatch();
            k.useProgram(d);
            this._gl = k;
            this._renderer = a;
            this._name = f;
            this._shaderProgram = d;
            this._isDeviceTransform = "<default-device-transform>" === f;
            f = k.getAttribLocation(d, "aPos");
            const l = k.getAttribLocation(d, "aTex");
            this._locAPoints = k.getAttribLocation(d,
                "aPoints"); - 1 !== f && (k.bindBuffer(k.ARRAY_BUFFER, a._vertexBuffer), k.vertexAttribPointer(f, a.GetNumVertexComponents(), k.FLOAT, !1, 0, 0), k.enableVertexAttribArray(f)); - 1 !== l && (k.bindBuffer(k.ARRAY_BUFFER, a._texcoordBuffer), k.vertexAttribPointer(l, 2, k.FLOAT, !1, 0, 0), k.enableVertexAttribArray(l)); - 1 !== this._locAPoints && (k.bindBuffer(k.ARRAY_BUFFER, a._pointBuffer), k.vertexAttribPointer(this._locAPoints, 4, k.FLOAT, !1, 0, 0), k.enableVertexAttribArray(this._locAPoints));
            k.bindBuffer(k.ARRAY_BUFFER, null);
            this._uMatP =
                new e.Gfx.WebGLShaderUniform(this, "matP", "mat4");
            this._uMatMV = new e.Gfx.WebGLShaderUniform(this, "matMV", "mat4");
            this._uColor = new e.Gfx.WebGLShaderUniform(this, "color", "vec4");
            this._uSamplerFront = new e.Gfx.WebGLShaderUniform(this, "samplerFront", "sampler");
            this._uPointTexStart = new e.Gfx.WebGLShaderUniform(this, "pointTexStart", "vec2");
            this._uPointTexEnd = new e.Gfx.WebGLShaderUniform(this, "pointTexEnd", "vec2");
            this._uZElevation = new e.Gfx.WebGLShaderUniform(this, "zElevation", "float");
            this._uTileSize = new e.Gfx.WebGLShaderUniform(this,
                "tileSize", "vec2");
            this._uTileSpacing = new e.Gfx.WebGLShaderUniform(this, "tileSpacing", "vec2");
            this._uColor2 = new e.Gfx.WebGLShaderUniform(this, "color2_", "vec4");
            this._uOutlineThickness = new e.Gfx.WebGLShaderUniform(this, "outlineThickness", "float");
            this._uSamplerBack = new e.Gfx.WebGLShaderUniform(this, "samplerBack", "sampler");
            this._uDestStart = new e.Gfx.WebGLShaderUniform(this, "destStart", "vec2");
            this._uDestEnd = new e.Gfx.WebGLShaderUniform(this, "destEnd", "vec2");
            this._uSrcStart = new e.Gfx.WebGLShaderUniform(this,
                "srcStart", "vec2");
            this._uSrcEnd = new e.Gfx.WebGLShaderUniform(this, "srcEnd", "vec2");
            this._uSrcOriginStart = new e.Gfx.WebGLShaderUniform(this, "srcOriginStart", "vec2");
            this._uSrcOriginEnd = new e.Gfx.WebGLShaderUniform(this, "srcOriginEnd", "vec2");
            this._uPixelSize = new e.Gfx.WebGLShaderUniform(this, "pixelSize", "vec2");
            this._uSeconds = new e.Gfx.WebGLShaderUniform(this, "seconds", "float");
            this._uLayerScale = new e.Gfx.WebGLShaderUniform(this, "layerScale", "float");
            this._uLayerAngle = new e.Gfx.WebGLShaderUniform(this,
                "layerAngle", "float");
            this._uLayoutStart = new e.Gfx.WebGLShaderUniform(this, "layoutStart", "vec2");
            this._uLayoutEnd = new e.Gfx.WebGLShaderUniform(this, "layoutEnd", "vec2");
            this._hasAnyOptionalUniforms = !!(this._uPixelSize.IsUsed() || this._uSeconds.IsUsed() || this._uSamplerBack.IsUsed() || this._uDestStart.IsUsed() || this._uDestEnd.IsUsed() || this._uSrcStart.IsUsed() || this._uSrcEnd.IsUsed() || this._uSrcOriginStart.IsUsed() || this._uSrcOriginEnd.IsUsed() || this._uLayerScale.IsUsed() || this._uLayerAngle.IsUsed() ||
                this._uLayoutStart.IsUsed() || this._uLayoutEnd.IsUsed());
            this._extendBoxHorizontal = c.extendBoxHorizontal || 0;
            this._extendBoxVertical = c.extendBoxVertical || 0;
            this._crossSampling = !!c.crossSampling;
            this._mustPreDraw = !!c.mustPreDraw;
            this._preservesOpaqueness = !!c.preservesOpaqueness;
            this._animated = !!c.animated;
            a = c.parameters || [];
            this._uCustomParameters = [];
            this._usesDest = this._uDestStart.IsUsed() || this._uDestEnd.IsUsed();
            this._usesAnySrcRectOrPixelSize = this._uPixelSize.IsUsed() || this._uSrcStart.IsUsed() ||
                this._uSrcEnd.IsUsed() || this._uSrcOriginStart.IsUsed() || this._uSrcOriginEnd.IsUsed();
            this._needsPostDrawOrExtendBox = this._crossSampling || this._usesDest || 0 !== this._extendBoxHorizontal || 0 !== this._extendBoxVertical;
            this._hasCurrentMatMV = this._hasCurrentMatP = !1;
            this._uColor.Init4f(1, 1, 1, 1);
            this._uColor2.Init4f(1, 1, 1, 1);
            this._uSamplerFront.Init1i(0);
            this._uSamplerBack.Init1i(1);
            this._uPointTexStart.Init2f(0, 0);
            this._uPointTexEnd.Init2f(1, 1);
            this._uZElevation.Init1f(0);
            this._uTileSize.Init2f(0, 0);
            this._uTileSpacing.Init2f(0,
                0);
            this._uDestStart.Init2f(0, 0);
            this._uDestEnd.Init2f(1, 1);
            this._uSrcStart.Init2f(0, 0);
            this._uSrcEnd.Init2f(0, 0);
            this._uSrcOriginStart.Init2f(0, 0);
            this._uSrcOriginEnd.Init2f(0, 0);
            this._uPixelSize.Init2f(0, 0);
            this._uLayerScale.Init1f(1);
            this._uLayerAngle.Init1f(0);
            this._uSeconds.Init1f(0);
            this._uLayoutStart.Init2f(0, 0);
            this._uLayoutEnd.Init2f(0, 0);
            this._uOutlineThickness.Init1f(1);
            for (const m of a) a = m[2], d = new e.Gfx.WebGLShaderUniform(this, m[0], a), "color" === a ? d.Init3f(0, 0, 0) : d.Init1f(0), this._uCustomParameters.push(d);
            this._isDeviceTransform ? this._UpdateDeviceTransformUniforms(g.currentMatP) : (this.UpdateMatP(g.currentMatP, !0), this.UpdateMatMV(g.currentMV, !0));
            g = g.currentShader;
            k.useProgram(g ? g._shaderProgram : null)
        }
        Release() {
            this._gl.deleteProgram(this._shaderProgram);
            this._shaderProgram = null;
            this._renderer._RemoveShaderProgram(this);
            this._renderer = this._gl = null
        }
        GetName() {
            return this._name
        }
        GetWebGLContext() {
            return this._gl
        }
        GetShaderProgram() {
            return this._shaderProgram
        }
        UsesDest() {
            return this._usesDest
        }
        UsesCrossSampling() {
            return this._crossSampling
        }
        MustPreDraw() {
            return this._mustPreDraw
        }
        PreservesOpaqueness() {
            return this._preservesOpaqueness
        }
        ExtendsBox() {
            return 0 !==
                this._extendBoxHorizontal || 0 !== this._extendBoxVertical
        }
        GetBoxExtendHorizontal() {
            return this._extendBoxHorizontal
        }
        GetBoxExtendVertical() {
            return this._extendBoxVertical
        }
        UsesAnySrcRectOrPixelSize() {
            return this._usesAnySrcRectOrPixelSize
        }
        NeedsPostDrawOrExtendsBox() {
            return this._needsPostDrawOrExtendBox
        }
        GetParameterCount() {
            return this._uCustomParameters.length
        }
        GetParameterType(a) {
            return this._uCustomParameters[a].GetType()
        }
        AreCustomParametersAlreadySetInBatch(a) {
            for (let d = 0, c = a.length; d < c; ++d)
                if (!this._uCustomParameters[d].IsSetToCustomInBatch(a[d])) return !1;
            return !0
        }
        SetCustomParametersInBatch(a) {
            for (let d = 0, c = a.length; d < c; ++d) this._uCustomParameters[d].SetBatchValueCustom(a[d])
        }
        AreOptionalUniformsAlreadySetInBatch(a, d, c, f, k, g, l, m, u) {
            return this._uSamplerBack.IsUsed() || this._uPixelSize.IsUsed() && !this._uPixelSize.IsSetTo2InBatch(k, g) || this._uDestStart.IsUsed() && !this._uDestStart.IsSetTo2InBatch(a.getLeft(), a.getTop()) || this._uDestEnd.IsUsed() && !this._uDestEnd.IsSetTo2InBatch(a.getRight(), a.getBottom()) || this._uLayerScale.IsUsed() && !this._uLayerScale.IsSetTo1InBatch(l) ||
                this._uLayerAngle.IsUsed() && !this._uLayerAngle.IsSetTo1InBatch(m) || this._uSrcStart.IsUsed() && !this._uSrcStart.IsSetTo2InBatch(d.getLeft(), d.getTop()) || this._uSrcEnd.IsUsed() && !this._uSrcEnd.IsSetTo2InBatch(d.getRight(), d.getBottom()) || this._uSrcOriginStart.IsUsed() && !this._uSrcOriginStart.IsSetTo2InBatch(c.getLeft(), c.getTop()) || this._uSrcOriginEnd.IsUsed() && !this._uSrcOriginEnd.IsSetTo2InBatch(c.getRight(), c.getBottom()) || this._uLayoutStart.IsUsed() && !this._uLayoutStart.IsSetTo2InBatch(f.getLeft(),
                    f.getTop()) || this._uLayoutEnd.IsUsed() && !this._uLayoutEnd.IsSetTo2InBatch(f.getTop(), f.getBottom()) || this._uSeconds.IsUsed() && !this._uSeconds.IsSetTo1InBatch(u) ? !1 : !0
        }
        SetOptionalUniformsInBatch(a, d, c, f, k, g, l, m, u) {
            this._uSamplerBack.IsUsed() || (this._uPixelSize.IsUsed() && this._uPixelSize.SetBatch2(k, g), this._uDestStart.IsUsed() && this._uDestStart.SetBatch2(a.getLeft(), a.getTop()), this._uDestEnd.IsUsed() && this._uDestEnd.SetBatch2(a.getRight(), a.getBottom()), this._uLayerScale.IsUsed() && this._uLayerScale.SetBatch1(l),
                this._uLayerAngle.IsUsed() && this._uLayerAngle.SetBatch1(m), this._uSrcStart.IsUsed() && this._uSrcStart.SetBatch2(d.getLeft(), d.getTop()), this._uSrcEnd.IsUsed() && this._uSrcEnd.SetBatch2(d.getRight(), d.getBottom()), this._uSrcOriginStart.IsUsed() && this._uSrcOriginStart.SetBatch2(c.getLeft(), c.getTop()), this._uSrcOriginEnd.IsUsed() && this._uSrcOriginEnd.SetBatch2(c.getRight(), c.getBottom()), this._uLayoutStart.IsUsed() && this._uLayoutStart.SetBatch2(f.getLeft(), f.getTop()), this._uLayoutEnd.IsUsed() && this._uLayoutEnd.SetBatch2(f.getTop(),
                    f.getBottom()), this._uSeconds.IsUsed() && this._uSeconds.SetBatch1(u))
        }
        IsAnimated() {
            return this._animated
        }
        UpdateMatP(a, d) {
            this._hasCurrentMatP && !d || this._isDeviceTransform || (this._uMatP.IsUsed() && this._uMatP.UpdateMatrix4fv(a), this._hasCurrentMatP = !0)
        }
        SetMatPStale() {
            this._hasCurrentMatP = !1
        }
        UpdateMatMV(a, d) {
            this._hasCurrentMatMV && !d || this._isDeviceTransform || (this._uMatMV.IsUsed() && this._uMatMV.UpdateMatrix4fv(a), this._hasCurrentMatMV = !0)
        }
        SetMatMVStale() {
            this._hasCurrentMatMV = !1
        }
        _UpdateDeviceTransformUniforms(a) {
            if (!this._isDeviceTransform) throw Error("not device transform shader");
            this._uMatP.UpdateMatrix4fv(a);
            a = this._renderer;
            const d = a.GetWidth() / 2,
                c = a.GetHeight() / 2;
            a = a.CalculateLookAtModelView2(d, c, a.GetDefaultCameraZ() * self.devicePixelRatio, d, c, 0);
            this._uMatMV.UpdateMatrix4fv(a)
        }
        UpdateColor(a) {
            this._uColor.IsUsed() && this._uColor.Update4f(a[0], a[1], a[2], a[3])
        }
        static GetReservedUniformNames() {
            return b
        }
        static GetDefaultVertexShaderSource(a) {
            a = a ? "highmedp" : "mediump";
            return ["#ifdef GL_FRAGMENT_PRECISION_HIGH\n#define highmedp highp\n#else\n#define highmedp mediump\n#endif\nattribute highp vec3 aPos;",
                `attribute ${a} vec2 aTex;`, `varying ${a} vec2 vTex;`, "uniform highp mat4 matP;\nuniform highp mat4 matMV;\nvoid main(void) {\n\tgl_Position = matP * matMV * vec4(aPos, 1.0);\n\tvTex = aTex;\n}"
            ].join("\n")
        }
        static GetTextureFillFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nuniform lowp sampler2D samplerFront;\nvoid main(void) {\n\tgl_FragColor = texture2D(samplerFront, vTex) * color;\n}"
        }
        static GetTilemapFragmentShaderSource() {
            return "#ifdef GL_FRAGMENT_PRECISION_HIGH\n#define highmedp highp\n#else\n#define highmedp mediump\n#endif\nvarying highmedp vec2 vTex;\nuniform lowp vec4 color;\nuniform lowp sampler2D samplerFront;\nuniform highmedp vec2 srcStart;\nuniform highmedp vec2 pixelSize;\nuniform highmedp vec2 tileSize;\nuniform highmedp vec2 tileSpacing;\nvoid main(void) {\n\thighmedp vec2 tile = floor(vTex);\n\thighmedp vec2 tex = fract(vTex);\n\thighmedp vec2 tileOrigin = srcStart + tile * (tileSize + tileSpacing);\n\thighmedp vec2 lowerBound = tileOrigin + pixelSize / 2.0;\n\thighmedp vec2 upperBound = tileOrigin + tileSize - pixelSize / 2.0;\n\tgl_FragColor = texture2D(samplerFront, clamp(tex, lowerBound, upperBound), -16.0) * color;\n}"
        }
        static GetPointVertexShaderSource(a) {
            return e.Gfx.WebGLShaderProgram.GetPointVertexShaderSource_WebGL1()
        }
        static GetPointFragmentShaderSource(a) {
            return e.Gfx.WebGLShaderProgram.GetPointFragmentShaderSource_WebGL1()
        }
        static GetPointVertexShaderSource_WebGL1() {
            return "attribute vec4 aPoints;\nvarying float pointOpacity;\nuniform float zElevation;\nuniform mat4 matP;\nuniform mat4 matMV;\nvoid main(void) {\n\tgl_Position = matP * matMV * vec4(aPoints.xy, zElevation, 1.0);\n\tgl_PointSize = aPoints.z;\n\tpointOpacity = aPoints.w;\n}"
        }
        static GetPointFragmentShaderSource_WebGL1() {
            return "uniform lowp sampler2D samplerFront;\nvarying lowp float pointOpacity;\nuniform mediump vec2 pointTexStart;\nuniform mediump vec2 pointTexEnd;\nuniform lowp vec4 color;\nvoid main(void) {\n\tgl_FragColor = texture2D(samplerFront, mix(pointTexStart, pointTexEnd, gl_PointCoord)) * color * pointOpacity;\n}"
        }
        static GetColorFillFragmentShaderSource() {
            return "uniform lowp vec4 color;\nvoid main(void) {\n\tgl_FragColor = color;\n}"
        }
        static GetLinearGradientFillFragmentShaderSource() {
            return "precision lowp float;\nvarying mediump vec2 vTex;\nuniform vec4 color;\nuniform vec4 color2_;\nvec3 fromLinear(vec3 linearRGB)\n{\n\tbvec3 cutoff = lessThan(linearRGB, vec3(0.0031308));\n\tvec3 higher = vec3(1.055) * pow(abs(linearRGB), vec3(1.0/2.4)) - vec3(0.055);\n\tvec3 lower = linearRGB * vec3(12.92);\n\treturn mix(higher, lower, vec3(cutoff));\n}\nvec3 toLinear(vec3 sRGB)\n{\n\tbvec3 cutoff = lessThan(sRGB, vec3(0.04045));\n\tvec3 higher = pow(abs((sRGB + vec3(0.055))/vec3(1.055)), vec3(2.4));\n\tvec3 lower = sRGB/vec3(12.92);\n\treturn mix(higher, lower, vec3(cutoff));\n}\nvoid main(void) {\n\tvec3 linearGrad = mix(toLinear(color.rgb), toLinear(color2_.rgb), vTex.x);\n\tfloat a = mix(color.a, color2_.a, vTex.x);\n\tgl_FragColor = vec4(fromLinear(linearGrad) * a, a);\n}"
        }
        static GetSmoothLineFillFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nvoid main(void) {\n\tlowp float f = 1.0 - abs(vTex.y - 0.5) * 2.0;\n\tgl_FragColor = color * f;\n}"
        }
        static GetHardEllipseFillFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nvoid main(void) {\n\tmediump vec2 diff = vTex - vec2(0.5, 0.5);\n\tmediump vec2 diffSq = diff * diff;\n\tmediump float f = step(diffSq.x + diffSq.y, 0.25);\n\tgl_FragColor = color * f;\n}"
        }
        static GetHardEllipseOutlineFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nuniform mediump vec2 pixelSize;\nuniform mediump float outlineThickness;\nvoid main(void) {\n\tmediump vec2 diff = vTex - vec2(0.5, 0.5);\n\tmediump vec2 diffSq = diff * diff;\n\tmediump float distSq = diffSq.x + diffSq.y;\n\tmediump vec2 norm = normalize(diff);\n\tmediump vec2 halfNorm = norm * 0.5;\n\tmediump float innerF = step(distSq, 0.25);\n\tmediump vec2 innerEdge = halfNorm - pixelSize * norm * outlineThickness;\n\tmediump vec2 innerEdgeSq = innerEdge * innerEdge;\n\tmediump float outerF = step(innerEdgeSq.x + innerEdgeSq.y, distSq);\n\tgl_FragColor = color * innerF * outerF;\n}"
        }
        static GetSmoothEllipseFillFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nuniform mediump vec2 pixelSize;\nvoid main(void) {\n\tmediump vec2 diff = vTex - vec2(0.5, 0.5);\n\tmediump vec2 diffSq = diff * diff;\n\tmediump vec2 norm = normalize(diff);\n\tmediump vec2 halfNorm = norm * 0.5;\n\tmediump vec2 halfNormSq = halfNorm * halfNorm;\n\tmediump vec2 innerEdge = halfNorm - pixelSize * norm;\n\tmediump vec2 innerEdgeSq = innerEdge * innerEdge;\n\tmediump float f = smoothstep(halfNormSq.x + halfNormSq.y, innerEdgeSq.x + innerEdgeSq.y, diffSq.x + diffSq.y);\n\tgl_FragColor = color * f;\n}"
        }
        static GetSmoothEllipseOutlineFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nuniform mediump vec2 pixelSize;\nuniform mediump float outlineThickness;\nvoid main(void) {\n\tmediump vec2 diff = vTex - vec2(0.5, 0.5);\n\tmediump vec2 diffSq = diff * diff;\n\tmediump float distSq = diffSq.x + diffSq.y;\n\tmediump vec2 norm = normalize(diff);\n\tmediump vec2 halfNorm = norm * 0.5;\n\tmediump vec2 halfNormSq = halfNorm * halfNorm;\n\tmediump vec2 pxNorm = pixelSize * norm;\n\tmediump vec2 innerEdge1 = halfNorm - pxNorm;\n\tmediump vec2 innerEdge1Sq = innerEdge1 * innerEdge1;\n\tmediump float innerF = smoothstep(halfNormSq.x + halfNormSq.y, innerEdge1Sq.x + innerEdge1Sq.y, distSq);\n\tmediump vec2 innerEdge2 = halfNorm - pxNorm * outlineThickness;\n\tmediump vec2 innerEdge2Sq = innerEdge2 * innerEdge2;\n\tmediump vec2 innerEdge3 = halfNorm - pxNorm * (outlineThickness + 1.0);\n\tmediump vec2 innerEdge3Sq = innerEdge3 * innerEdge3;\n\tmediump float outerF = smoothstep(innerEdge3Sq.x + innerEdge3Sq.y, innerEdge2Sq.x + innerEdge2Sq.y, distSq);\n\tgl_FragColor = color * innerF * outerF;\n}"
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.glMatrix.mat4,
        a = new Map([
            ["float", 1],
            ["percent", 1],
            ["sampler", 1],
            ["vec2", 2],
            ["vec3", 3],
            ["color", 3],
            ["vec4", 4],
            ["mat4", 16]
        ]);
    e.Gfx.WebGLShaderUniform = class {
        constructor(d, c, f) {
            if (!a.has(f)) throw Error("invalid uniform type");
            this._owner = d;
            this._gl = this._owner.GetWebGLContext();
            this._name = c;
            this._type = f;
            this._isColorType = "color" === this._type;
            this._location = this._gl.getUniformLocation(this._owner.GetShaderProgram(), c);
            this._isUsed = !!this._location;
            d = a.get(f);
            this._lastValue =
                new Float32Array(d);
            this._lastBatchValue = new Float32Array(d)
        }
        Release() {
            this._location = this._gl = this._owner = null
        }
        IsUsed() {
            return this._isUsed
        }
        GetType() {
            return this._type
        }
        IsColorType() {
            return this._isColorType
        }
        Init1f(d) {
            this.IsUsed() && (this._lastValue[0] = d, this._lastBatchValue.set(this._lastValue), this._gl.uniform1f(this._location, d))
        }
        Init1i(d) {
            this.IsUsed() && (this._lastValue[0] = d, this._lastBatchValue.set(this._lastValue), this._gl.uniform1i(this._location, d))
        }
        Init2f(d, c) {
            this.IsUsed() && (this._lastValue[0] =
                d, this._lastValue[1] = c, this._lastBatchValue.set(this._lastValue), this._gl.uniform2f(this._location, d, c))
        }
        Init3f(d, c, f) {
            this.IsUsed() && (this._lastValue[0] = d, this._lastValue[1] = c, this._lastValue[2] = f, this._lastBatchValue.set(this._lastValue), this._gl.uniform3f(this._location, d, c, f))
        }
        Init4f(d, c, f, k) {
            this.IsUsed() && (this._lastValue[0] = d, this._lastValue[1] = c, this._lastValue[2] = f, this._lastValue[3] = k, this._lastBatchValue.set(this._lastValue), this._gl.uniform4f(this._location, d, c, f, k))
        }
        Update1f(d) {
            d = Math.fround(d);
            const c = this._lastValue;
            c[0] !== d && (c[0] = d, this._gl.uniform1f(this._location, d))
        }
        Update1i(d) {
            const c = this._lastValue;
            c[0] !== d && (c[0] = d, this._gl.uniform1i(this._location, d))
        }
        Update2f(d, c) {
            d = Math.fround(d);
            c = Math.fround(c);
            const f = this._lastValue;
            if (f[0] !== d || f[1] !== c) f[0] = d, f[1] = c, this._gl.uniform2f(this._location, d, c)
        }
        Update3f(d, c, f) {
            d = Math.fround(d);
            c = Math.fround(c);
            f = Math.fround(f);
            const k = this._lastValue;
            if (k[0] !== d || k[1] !== c || k[2] !== f) k[0] = d, k[1] = c, k[2] = f, this._gl.uniform3f(this._location, d, c,
                f)
        }
        Update4f(d, c, f, k) {
            d = Math.fround(d);
            c = Math.fround(c);
            f = Math.fround(f);
            k = Math.fround(k);
            const g = this._lastValue;
            if (g[0] !== d || g[1] !== c || g[2] !== f || g[3] !== k) g[0] = d, g[1] = c, g[2] = f, g[3] = k, this._gl.uniform4f(this._location, d, c, f, k)
        }
        UpdateMatrix4fv(d) {
            const c = this._lastValue;
            b.exactEquals(c, d) || (e.typedArraySet16(c, d, 0), this._gl.uniformMatrix4fv(this._location, !1, d))
        }
        IsSetToCustomInBatch(d) {
            const c = this._lastBatchValue;
            return this.IsColorType() ? c[0] === Math.fround(d.getR()) && c[1] === Math.fround(d.getG()) &&
                c[2] === Math.fround(d.getB()) : c[0] === Math.fround(d)
        }
        SetBatchValueCustom(d) {
            const c = this._lastBatchValue;
            this.IsColorType() ? (c[0] = d.getR(), c[1] = d.getG(), c[2] = d.getB()) : c[0] = d
        }
        IsSetTo1InBatch(d) {
            return this._lastBatchValue[0] === Math.fround(d)
        }
        IsSetTo2InBatch(d, c) {
            const f = this._lastBatchValue;
            return f[0] === Math.fround(d) && f[1] === Math.fround(c)
        }
        SetBatch1(d) {
            this._lastBatchValue[0] = d
        }
        SetBatch2(d, c) {
            const f = this._lastBatchValue;
            f[0] = d;
            f[1] = c
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.glMatrix,
        a = b.vec4,
        d = b.mat4;
    e.Gfx.BatchState = class {
        constructor(c) {
            this.renderer = c;
            this.currentMV = d.create();
            this.currentMatP = d.create();
            this.currentFramebuffer = null;
            this.currentColor = a.fromValues(1, 1, 1, 1);
            this.currentShader = null;
            this.pointTexCoords = new e.Rect;
            this.clearColor = e.New(e.Color, 0, 0, 0, 0)
        }
    };
    e.Gfx.WebGLBatchJob = class {
        constructor(c) {
            const f = new ArrayBuffer(96);
            this._type = 0;
            this._batchState = c;
            this._gl = c.renderer.GetContext();
            this._indexCount = this._startIndex =
                0;
            this._texParam = null;
            this._mat4param = new Float32Array(f, 0, 16);
            this._colorParam = new Float32Array(f, 64, 4);
            this._srcOriginRect = new Float32Array(f, 80, 4);
            this._shaderParams = []
        }
        InitQuad(c, f) {
            this._type = 1;
            this._startIndex = c;
            this._indexCount = f
        }
        DoQuad() {
            const c = this._gl;
            c.drawElements(c.TRIANGLES, this._indexCount, c.UNSIGNED_SHORT, this._startIndex)
        }
        InitSetTexture(c) {
            this._type = 2;
            this._texParam = c
        }
        DoSetTexture() {
            const c = this._gl,
                f = this._texParam;
            c.bindTexture(c.TEXTURE_2D, f ? f._GetTexture() : null)
        }
        InitSetColor(c) {
            this._type =
                3;
            c.writeToTypedArray(this._colorParam, 0)
        }
        DoSetColor() {
            const c = this._colorParam,
                f = this._batchState;
            a.copy(f.currentColor, c);
            f.currentShader.UpdateColor(c)
        }
        InitSetGradientColor(c) {
            this._type = 21;
            c.writeToTypedArray(this._colorParam, 0)
        }
        DoSetGradientColor() {
            const c = this._colorParam,
                f = this._batchState.currentShader;
            f._uColor2.IsUsed() && f._uColor2.Update4f(c[0], c[1], c[2], c[3])
        }
        InitSetBlend(c, f) {
            this._type = 4;
            this._startIndex = c;
            this._indexCount = f
        }
        DoSetBlend() {
            this._gl.blendFunc(this._startIndex, this._indexCount)
        }
        InitSetViewport(c,
            f, k, g) {
            this._type = 5;
            const l = this._colorParam;
            l[0] = c;
            l[1] = f;
            l[2] = k;
            l[3] = g
        }
        DoSetViewport() {
            const c = this._colorParam;
            this._gl.viewport(c[0], c[1], c[2], c[3])
        }
        InitSetProjection(c) {
            this._type = 6;
            d.copy(this._mat4param, c)
        }
        DoSetProjection() {
            const c = this._batchState,
                f = c.renderer._allShaderPrograms,
                k = c.currentShader,
                g = this._mat4param;
            for (let l = 0, m = f.length; l < m; ++l) {
                const u = f[l];
                u === k ? u.UpdateMatP(g, !0) : u.SetMatPStale()
            }
            d.copy(c.currentMatP, g)
        }
        InitSetModelView(c) {
            this._type = 7;
            d.copy(this._mat4param, c)
        }
        DoSetModelView() {
            const c =
                this._batchState,
                f = c.renderer._allShaderPrograms,
                k = c.currentShader,
                g = this._mat4param;
            for (let l = 0, m = f.length; l < m; ++l) {
                const u = f[l];
                u === k ? u.UpdateMatMV(g, !0) : u.SetMatMVStale()
            }
            d.copy(c.currentMV, g)
        }
        InitSetRenderTarget(c) {
            this._type = 8;
            this._texParam = c
        }
        DoSetRenderTarget() {
            const c = this._gl;
            var f = this._texParam;
            const k = this._batchState;
            f ? (f = f._GetFramebuffer(), k.currentFramebuffer = f, c.bindFramebuffer(c.FRAMEBUFFER, f)) : (k.currentFramebuffer = null, c.bindFramebuffer(c.FRAMEBUFFER, null))
        }
        InitClearSurface(c) {
            this._type =
                9;
            c.writeToTypedArray(this._mat4param, 0)
        }
        InitClearSurface2(c, f, k, g) {
            this._type = 9;
            const l = this._mat4param;
            l[0] = c;
            l[1] = f;
            l[2] = k;
            l[3] = g
        }
        DoClearSurface() {
            const c = this._gl;
            var f = this._mat4param,
                k = this._batchState;
            const g = k.clearColor;
            (k = k.renderer._isScissorViewport && e.isDebug) && c.disable(c.SCISSOR_TEST);
            const l = f[0],
                m = f[1],
                u = f[2];
            f = f[3];
            g.equalsRgba(l, m, u, f) || (c.clearColor(l, m, u, f), g.setRgba(l, m, u, f));
            c.clear(c.COLOR_BUFFER_BIT);
            k && c.enable(c.SCISSOR_TEST)
        }
        InitClearRect(c, f, k, g, l, m, u, x) {
            this._type = 10;
            const p = this._mat4param;
            p[0] = c;
            p[1] = f;
            p[2] = k;
            p[3] = g;
            p[4] = l;
            p[5] = m;
            p[6] = u;
            p[7] = x
        }
        DoClearRectangle() {
            const c = this._gl;
            var f = this._mat4param,
                k = this._batchState;
            const g = k.renderer;
            k = k.clearColor;
            g._isScissorViewport || c.enable(c.SCISSOR_TEST);
            c.scissor(f[0], f[1], f[2], f[3]);
            const l = f[4],
                m = f[5],
                u = f[6];
            f = f[7];
            k.equalsRgba(l, m, u, f) || (c.clearColor(l, m, u, f), k.setRgba(l, m, u, f));
            c.clear(c.COLOR_BUFFER_BIT);
            g._isScissorViewport ? c.scissor(0, 0, g._viewportScissorWidth, g._viewportScissorHeight) : c.disable(c.SCISSOR_TEST)
        }
        InitSetPointTexCoords(c) {
            this._type =
                15;
            c.writeToTypedArray(this._mat4param, 0)
        }
        DoSetPointTextureCoords() {
            const c = this._mat4param;
            this._batchState.pointTexCoords.set(c[0], c[1], c[2], c[3])
        }
        InitPoints(c, f) {
            this._type = 11;
            this._startIndex = c;
            this._indexCount = 1;
            this._mat4param[0] = f
        }
        DoPoints() {
            const c = this._gl,
                f = this._batchState,
                k = f.renderer._spPoints;
            c.useProgram(k._shaderProgram);
            k.UpdateMatP(f.currentMatP, !1);
            k.UpdateMatMV(f.currentMV, !1);
            var g = f.pointTexCoords;
            k._uPointTexStart.IsUsed() && k._uPointTexStart.Update2f(g.getLeft(), g.getTop());
            k._uPointTexEnd.IsUsed() && k._uPointTexEnd.Update2f(g.getRight(), g.getBottom());
            g = this._mat4param[0];
            k._uZElevation.IsUsed() && k._uZElevation.Update1f(g);
            k._uColor.IsUsed() && (g = f.currentColor, k._uColor.Update4f(g[0], g[1], g[2], g[3]));
            c.drawArrays(c.POINTS, this._startIndex / 4, this._indexCount);
            c.useProgram(f.currentShader._shaderProgram)
        }
        InitSetProgram(c) {
            this._type = 12;
            this._texParam = c
        }
        DoSetProgram() {
            var c = this._gl;
            const f = this._batchState,
                k = this._texParam;
            f.currentShader = k;
            c.useProgram(k._shaderProgram);
            k.UpdateMatP(f.currentMatP, !1);
            k.UpdateMatMV(f.currentMV, !1);
            k._uColor.IsUsed() && (c = f.currentColor, k._uColor.Update4f(c[0], c[1], c[2], c[3]))
        }
        InitSetProgramParameters() {
            this._type = 13
        }
        DoSetProgramParameters() {
            const c = this._batchState.currentShader;
            c._hasAnyOptionalUniforms && this._DoSetOptionalUniformProgramParameters(c);
            c._uCustomParameters.length && this._DoUpdateCustomProgramParameters(c)
        }
        _DoSetOptionalUniformProgramParameters(c) {
            const f = this._gl,
                k = this._mat4param,
                g = this._colorParam,
                l = this._srcOriginRect;
            if (c._uSamplerBack.IsUsed()) {
                const m = this._batchState.renderer,
                    u = this._texParam;
                m._lastTexture1 !== u && (f.activeTexture(f.TEXTURE1), f.bindTexture(f.TEXTURE_2D, u ? u._GetTexture() : null), m._lastTexture1 = u, f.activeTexture(f.TEXTURE0))
            }
            c._uPixelSize.IsUsed() && c._uPixelSize.Update2f(k[0], k[1]);
            c._uDestStart.IsUsed() && c._uDestStart.Update2f(k[2], k[3]);
            c._uDestEnd.IsUsed() && c._uDestEnd.Update2f(k[4], k[5]);
            c._uLayerScale.IsUsed() && c._uLayerScale.Update1f(k[6]);
            c._uLayerAngle.IsUsed() && c._uLayerAngle.Update1f(k[7]);
            c._uSrcStart.IsUsed() && c._uSrcStart.Update2f(k[12], k[13]);
            c._uSrcEnd.IsUsed() && c._uSrcEnd.Update2f(k[14], k[15]);
            c._uSrcOriginStart.IsUsed() && c._uSrcOriginStart.Update2f(l[0], l[1]);
            c._uSrcOriginEnd.IsUsed() && c._uSrcOriginEnd.Update2f(l[2], l[3]);
            c._uLayoutStart.IsUsed() && c._uLayoutStart.Update2f(g[0], g[1]);
            c._uLayoutEnd.IsUsed() && c._uLayoutEnd.Update2f(g[2], g[3]);
            c._uSeconds.IsUsed() && c._uSeconds.Update1f(this._startIndex)
        }
        _DoUpdateCustomProgramParameters(c) {
            c = c._uCustomParameters;
            const f = this._shaderParams;
            for (let k = 0, g = c.length; k < g; ++k) {
                const l = c[k],
                    m = f[k];
                l.IsColorType() ? l.Update3f(m.getR(), m.getG(), m.getB()) : l.Update1f(m)
            }
        }
        InitInvalidateFramebuffer(c) {
            this._type = 14;
            this._texParam = c
        }
        DoInvalidateFramebuffer() {
            const c = this._gl,
                f = this._texParam,
                k = this._batchState.currentFramebuffer;
            f !== k && c.bindFramebuffer(c.FRAMEBUFFER, f);
            c.invalidateFramebuffer(c.FRAMEBUFFER, [c.COLOR_ATTACHMENT0]);
            f !== k && c.bindFramebuffer(c.FRAMEBUFFER, k)
        }
        InitBlitFramebuffer(c, f, k) {
            this._type = 17;
            const g = this._mat4param,
                l = this._batchState.renderer;
            g[0] = c.GetWidth();
            g[1] = c.GetHeight();
            g[2] = f ? f.GetWidth() : l.GetWidth();
            g[3] = f ? f.GetHeight() : l.GetHeight();
            g[4] = c.IsLinearSampling() ? 1 : 0;
            g[5] = "stretch" === k;
            k = this._shaderParams;
            e.clearArray(k);
            k.push(c._GetFramebuffer());
            k.push(f ? f._GetFramebuffer() : null)
        }
        DoBlitFramebuffer() {
            var c = this._mat4param,
                f = this._shaderParams;
            const k = this._gl;
            var g = c[0],
                l = c[1],
                m = c[2];
            const u = c[3],
                x = 0 !== c[4];
            c = 0 !== c[5];
            const p = f[1];
            k.bindFramebuffer(k.READ_FRAMEBUFFER, f[0]);
            k.bindFramebuffer(k.DRAW_FRAMEBUFFER, p);
            c ? k.blitFramebuffer(0,
                0, g, l, 0, 0, m, u, k.COLOR_BUFFER_BIT, x ? k.LINEAR : k.NEAREST) : (f = Math.min(g, m), g = Math.min(l, u), m = Math.max(l - u, 0), l = Math.max(u - l, 0), k.blitFramebuffer(0, m, f, g + m, 0, l, f, g + l, k.COLOR_BUFFER_BIT, k.NEAREST))
        }
        InitStartQuery(c) {
            this._type = 18;
            this._texParam = c
        }
        DoStartQuery() {
            this._texParam.BeginTimeElapsed();
            this._texParam = null
        }
        InitEndQuery(c) {
            this._type = 19;
            this._texParam = c
        }
        DoEndQuery() {
            this._texParam.EndTimeElapsed();
            this._texParam = null
        }
        InitSetEllipseParams(c, f, k) {
            this._type = 20;
            const g = this._mat4param;
            g[0] = c;
            g[1] =
                f;
            g[2] = k
        }
        DoSetEllipseParams() {
            const c = this._batchState.currentShader,
                f = this._mat4param;
            c._uPixelSize.IsUsed() && c._uPixelSize.Update2f(f[0], f[1]);
            c._uOutlineThickness.IsUsed() && c._uOutlineThickness.Update1f(f[2])
        }
        InitSetTilemapInfo(c, f, k, g, l, m, u) {
            this._type = 16;
            const x = this._mat4param;
            c.writeToTypedArray(x, 0);
            x[4] = 1 / f;
            x[5] = 1 / k;
            x[6] = g / f;
            x[7] = l / k;
            x[8] = m / f;
            x[9] = u / k
        }
        DoSetTilemapInfo() {
            const c = this._batchState.currentShader,
                f = this._mat4param;
            c._uSrcStart.IsUsed() && c._uSrcStart.Update2f(f[0], f[1]);
            c._uPixelSize.IsUsed() &&
                c._uPixelSize.Update2f(f[4], f[5]);
            c._uTileSize.IsUsed() && c._uTileSize.Update2f(f[6], f[7]);
            c._uTileSpacing.IsUsed() && c._uTileSpacing.Update2f(f[8], f[9])
        }
        InitClearDepth() {
            this._type = 22
        }
        DoClearDepth() {
            const c = this._gl;
            c.clear(c.DEPTH_BUFFER_BIT)
        }
        InitSetDepthEnabled(c) {
            this._type = 23;
            this._startIndex = c ? 1 : 0
        }
        DoSetDepthEnabled() {
            const c = this._gl;
            0 === this._startIndex ? (c.disable(c.DEPTH_TEST), c.depthMask(!1)) : (c.enable(c.DEPTH_TEST), c.depthMask(!0))
        }
        InitCoplanarStartStencilPass() {
            this._type = 24
        }
        DoCoplanarStartStencilPass() {
            const c =
                this._gl;
            c.clear(c.STENCIL_BUFFER_BIT);
            c.enable(c.STENCIL_TEST);
            c.stencilFunc(c.ALWAYS, 1, 1);
            c.stencilOp(c.KEEP, c.KEEP, c.REPLACE);
            c.colorMask(!1, !1, !1, !1)
        }
        InitCoplanarStartColorPass() {
            this._type = 25
        }
        DoCoplanarStartColorPass() {
            const c = this._gl;
            c.colorMask(!0, !0, !0, !0);
            c.stencilFunc(c.EQUAL, 1, 1);
            c.stencilOp(c.KEEP, c.KEEP, c.KEEP)
        }
        InitCoplanarRestore() {
            this._type = 26
        }
        DoCoplanarRestore() {
            const c = this._gl;
            c.disable(c.STENCIL_TEST)
        }
        Run() {
            switch (this._type) {
                case 1:
                    this.DoQuad();
                    break;
                case 2:
                    this.DoSetTexture();
                    break;
                case 3:
                    this.DoSetColor();
                    break;
                case 4:
                    this.DoSetBlend();
                    break;
                case 5:
                    this.DoSetViewport();
                    break;
                case 6:
                    this.DoSetProjection();
                    break;
                case 7:
                    this.DoSetModelView();
                    break;
                case 8:
                    this.DoSetRenderTarget();
                    break;
                case 9:
                    this.DoClearSurface();
                    break;
                case 10:
                    this.DoClearRectangle();
                    break;
                case 11:
                    this.DoPoints();
                    break;
                case 12:
                    this.DoSetProgram();
                    break;
                case 13:
                    this.DoSetProgramParameters();
                    break;
                case 14:
                    this.DoInvalidateFramebuffer();
                    break;
                case 15:
                    this.DoSetPointTextureCoords();
                    break;
                case 16:
                    this.DoSetTilemapInfo();
                    break;
                case 17:
                    this.DoBlitFramebuffer();
                    break;
                case 18:
                    this.DoStartQuery();
                    break;
                case 19:
                    this.DoEndQuery();
                    break;
                case 20:
                    this.DoSetEllipseParams();
                    break;
                case 21:
                    this.DoSetGradientColor();
                    break;
                case 22:
                    this.DoClearDepth();
                    break;
                case 23:
                    this.DoSetDepthEnabled();
                    break;
                case 24:
                    this.DoCoplanarStartStencilPass();
                    break;
                case 25:
                    this.DoCoplanarStartColorPass();
                    break;
                case 26:
                    this.DoCoplanarRestore()
            }
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = {
            timeout: 60
        },
        a = new e.Color(0, 0, 0, 1),
        d = new Set(["left", "center", "right"]),
        c = new Set(["top", "center", "bottom"]),
        f = new Set(["word", "character"]),
        k = new Set;
    e.FontManager && e.FontManager.addEventListener("fontload", p => {
        p = p.font.GetName();
        for (const r of k)(r.IsBBCodeEnabled() || e.equalsNoCase(r.GetFontName(), p)) && r._SetTextChanged()
    });

    function g(p, r, t, q, w, y) {
        r ? "Gecko" === e.Platform.BrowserEngine ? p.strokeText(t, q, w, y) : p.strokeText(t, q, w) : "Gecko" === e.Platform.BrowserEngine ? p.fillText(t,
            q, w, y) : p.fillText(t, q, w)
    }

    function l(p, r, t, q, w, y) {
        r ? p.strokeRect(t, q, w, y) : p.fillRect(t, q, w, y)
    }

    function m(p) {
        return 4 / 3 * p
    }
    let u = !1,
        x = !1;
    e.Gfx.RendererText = class {
        constructor(p, r) {
            r = Object.assign({}, b, r);
            this._renderer = p;
            this._fontName = "Arial";
            this._fontSize = 16;
            this._fontSizeScale = 1;
            this._lineHeight = 0;
            this._isItalic = this._isBold = !1;
            this._colorStr = "black";
            this._isBBcodeEnabled = !1;
            this.onloadfont = null;
            this._alreadyLoadedFonts = new Set;
            this._horizontalAlign = "left";
            this._verticalAlign = "top";
            this._text = "";
            this._bbString = null;
            this._wrappedText = e.New(e.WordWrap);
            this._wrapMode = "word";
            this._isUpdating = this._textChanged = !1;
            this._isAsync = !0;
            this._drawMaxCharCount = -1;
            this._height = this._width = this._cssHeight = this._cssWidth = this._drawCharCount = 0;
            this._zoom = 1;
            this._changed = !1;
            this._measureContextTop = this._measureContext = this._textContext = this._textCanvas = null;
            this._lastCanvasHeight = this._lastCanvasWidth = -1;
            this._lastTextCanvasFillStyle = this._lastMeasureCanvasFont = this._lastTextCanvasFont = "";
            this._lastTextCanvasLineWidth =
                this._lastTextCanvasOpacity = 1;
            this._measureTextCallback = (t, q) => this._MeasureText(t, q);
            this._texture = null;
            this._textureHeight = this._textureWidth = 0;
            this._rcTex = new e.Rect;
            this._scaleFactor = 1;
            this._needToRecreateTexture = !1;
            this._textureTimeout = new e.IdleTimeout(() => {
                this.ReleaseTexture();
                this._SetTextCanvasSize(8, 8)
            }, r.timeout);
            this.ontextureupdate = null;
            this._wasReleased = !1;
            k.add(this)
        }
        Release() {
            this.onloadfont = null;
            this._alreadyLoadedFonts.clear();
            this._measureTextCallback = this._measureContextTop = this._measureContext =
                this._textContext = this._textCanvas = this._bbString = null;
            this._textureTimeout.Release();
            this.ontextureupdate = null;
            this.ReleaseTexture();
            this._wrappedText.Clear();
            this._renderer = this._wrappedText = null;
            this._wasReleased = !0;
            k.delete(this)
        }
        _SetChanged() {
            this._changed = !0
        }
        _SetTextChanged() {
            this._SetChanged();
            this._wrappedText.Clear();
            this._textChanged = !0
        }
        SetIsAsync(p) {
            this._isAsync = !!p
        }
        IsAsync() {
            return this._isAsync
        }
        SetBBCodeEnabled(p) {
            p = !!p;
            this._isBBcodeEnabled !== p && (p = (this._isBBcodeEnabled = p) ? "alphabetic" :
                "top", this._textContext && (this._textContext.textBaseline = p), this._measureContext && (this._measureContext.textBaseline = p), this._SetTextChanged())
        }
        IsBBCodeEnabled() {
            return this._isBBcodeEnabled
        }
        SetFontName(p) {
            p || (p = "serif");
            this._fontName !== p && (this._fontName = p, this._SetTextChanged())
        }
        GetFontName() {
            return this._fontName
        }
        SetFontSize(p) {
            .1 > p && (p = .1);
            this._fontSize !== p && (this._fontSize = p, this._SetTextChanged())
        }
        SetFontSizeScale(p) {
            this._fontSizeScale !== p && (this._fontSizeScale = p, this._SetTextChanged())
        }
        SetLineHeight(p) {
            this._lineHeight !==
                p && (this._lineHeight = p, this._SetChanged())
        }
        SetBold(p) {
            p = !!p;
            this._isBold !== p && (this._isBold = p, this._SetTextChanged())
        }
        SetItalic(p) {
            p = !!p;
            this._isItalic !== p && (this._isItalic = p, this._SetTextChanged())
        }
        SetDrawMaxCharacterCount(p) {
            p = Math.floor(p);
            this._drawMaxCharCount !== p && (this._drawMaxCharCount = p, this._SetChanged())
        }
        GetDrawMaxCharacterCount() {
            return this._drawMaxCharCount
        }
        _GetStyleTag(p, r) {
            for (let t = p.length - 1; 0 <= t; --t) {
                const q = p[t];
                if (q.tag === r) return q
            }
            return null
        }
        _HasStyleTag(p, r) {
            return !!this._GetStyleTag(p,
                r)
        }
        _GetFontString(p, r) {
            let t = [];
            (this._isBold || this._HasStyleTag(r, "b")) && t.push("bold");
            (this._isItalic || this._HasStyleTag(r, "i")) && t.push("italic");
            var q = this._GetStyleTag(r, "size");
            q = (q ? parseFloat(q.param) : this._fontSize) * this._fontSizeScale;
            p ? t.push(q + "pt") : t.push(q * this._scaleFactor * this._zoom * self.devicePixelRatio + "pt");
            p = this._fontName;
            (r = this._GetStyleTag(r, "font")) && r.param && (p = r.param, this.onloadfont && !this._alreadyLoadedFonts.has(p) && (this.onloadfont(p), this._alreadyLoadedFonts.add(p)));
            p && t.push('"' + p + '"');
            return t.join(" ")
        }
        SetColor(p) {
            p instanceof e.Color && (p = p.getCssRgb());
            this._colorStr !== p && (this._colorStr = p, this._SetChanged())
        }
        SetColorRgb(p, r, t) {
            a.setRgb(p, r, t);
            this.SetColor(a)
        }
        SetHorizontalAlignment(p) {
            if (!d.has(p)) throw Error("invalid horizontal alignment");
            this._horizontalAlign !== p && (this._horizontalAlign = p, this._SetChanged())
        }
        SetVerticalAlignment(p) {
            if (!c.has(p)) throw Error("invalid vertical alignment");
            this._verticalAlign !== p && (this._verticalAlign = p, this._SetChanged())
        }
        SetWordWrapMode(p) {
            if (!f.has(p)) throw Error("invalid word wrap mode");
            this._wrapMode !== p && (this._wrapMode = p, this._SetTextChanged())
        }
        SetText(p) {
            this._text !== p && (this._text = p, this._SetTextChanged())
        }
        SetSize(p, r, t) {
            "undefined" === typeof t && (t = 1);
            if (!(0 >= p || 0 >= p || this._cssWidth === p && this._cssHeight === r && this._zoom === t)) {
                1 === this._zoom !== (1 === t) && (this._needToRecreateTexture = !0);
                var q = this._cssWidth,
                    w = this._zoom;
                this._cssWidth = p;
                this._cssHeight = r;
                this._zoom = t;
                p = self.devicePixelRatio;
                this._width = this._cssWidth * this._zoom * p;
                this._height = this._cssHeight * this._zoom * p;
                p = Math.max(this._width,
                    this._height);
                r = Math.min(this._renderer.GetMaxTextureSize(), 2048);
                t = 1;
                p > r && (t = r / p, this._width = Math.min(this._width * t, r), this._height = Math.min(this._height * t, r));
                this._scaleFactor = t;
                0 < this._textureWidth && 0 < this._textureHeight && this._zoom === w && this._rcTex.set(0, 0, this._width / this._textureWidth, this._height / this._textureHeight);
                this._cssWidth !== q ? this._SetTextChanged() : this._SetChanged()
            }
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetTextWidth() {
            this._MaybeWrapText();
            return this._wrappedText.GetMaxLineWidth()
        }
        GetTextHeight() {
            this._MaybeWrapText();
            return this._wrappedText.GetTotalLineHeight() + this._wrappedText.GetLineCount() * (this._lineHeight + 4) - this._lineHeight
        }
        GetTexture() {
            this._textureTimeout.Reset();
            this._MaybeUpdate();
            return this._texture
        }
        _MaybeUpdate() {
            this._texture && !this._changed && !this._textChanged || this._isUpdating || 0 >= this._width || 0 >= this._height || (this._changed = !1, this._isUpdating = !0, this._isAsync ? e.Asyncify(() => this._DoUpdate()) : this._DoUpdate())
        }
        _DoUpdate() {
            this._wasReleased || (this._SetTextCanvasSize(Math.ceil(this._width), Math.ceil(this._height)),
                this._MaybeWrapText(), this._DrawTextToCanvas(), this._UpdateTexture(), this._textureTimeout.Reset(), this._isUpdating = !1)
        }
        _SetTextCanvasSize(p, r) {
            this._textCanvas || (this._textCanvas = e.CreateCanvas(16, 16));
            let t = !1;
            if (this._lastCanvasWidth !== p || this._lastCanvasHeight !== r) this._lastCanvasWidth = p, this._lastCanvasHeight = r, this._textCanvas.width = p, this._textCanvas.height = r, t = !0;
            this._textContext || (this._textContext = this._textCanvas.getContext("2d"), t = !0);
            t ? (this._textContext.textBaseline = this._isBBcodeEnabled ?
                "alphabetic" : "top", this._textContext.font = this._lastTextCanvasFont, this._textContext.fillStyle = this._lastTextCanvasFillStyle, this._textContext.strokeStyle = this._lastTextCanvasFillStyle, this._textContext.globalAlpha = this._lastTextCanvasOpacity, this._textContext.lineWidth = this._lastTextCanvasLineWidth) : this._textContext.clearRect(0, 0, p, r)
        }
        _MaybeCreateMeasureContext() {
            this._measureContext || (this._measureContext = e.CreateCanvas(16, 16).getContext("2d"), this._measureContextTop = e.CreateCanvas(16, 16).getContext("2d"),
                this._measureContext.textBaseline = this._isBBcodeEnabled ? "alphabetic" : "top", this._measureContextTop.textBaseline = "top")
        }
        _SetMeasureFontString(p) {
            this._lastMeasureCanvasFont !== p && (this._lastMeasureCanvasFont = p, this._measureContext.font = p, this._measureContextTop.font = p)
        }
        _SupportsFontBoundingBoxMeasurements() {
            if (!u) {
                u = !0;
                this._MaybeCreateMeasureContext();
                const p = this._measureContext.measureText("test");
                x = "number" === typeof p.fontBoundingBoxAscent && "number" === typeof p.fontBoundingBoxDescent
            }
            return x
        }
        _MaybeWrapText() {
            this._textChanged &&
                (this._MaybeCreateMeasureContext(), !this._isBBcodeEnabled || this._bbString && this._bbString.toString() === this._text || (this._bbString = new e.BBString(this._text, {
                    noEscape: !0
                })), this._wrappedText.WordWrap(this._isBBcodeEnabled ? this._bbString.toFragmentList() : this._text, this._measureTextCallback, this._cssWidth, this._wrapMode, 0), this._textChanged = !1)
        }
        _MeasureText(p, r) {
            this._SetMeasureFontString(this._GetFontString(!0, r));
            r = this._GetStyleTag(r, "size");
            r = (r ? parseFloat(r.param) : this._fontSize) * this._fontSizeScale;
            const t = this._measureContext.measureText(p);
            let q = 0;
            this._isBBcodeEnabled && this._SupportsFontBoundingBoxMeasurements() && (p = this._measureContextTop.measureText(p), q = t.fontBoundingBoxAscent - p.fontBoundingBoxAscent);
            return {
                width: t.width,
                height: m(r),
                fontBoundingBoxAscent: t.fontBoundingBoxAscent || 0,
                fontBoundingBoxDescent: t.fontBoundingBoxDescent || 0,
                topToAlphabeticDistance: q
            }
        }
        _SetDrawFontString(p) {
            this._lastTextCanvasFont !== p && (this._lastTextCanvasFont = p, this._textContext.font = p)
        }
        _SetDrawCanvasColor(p) {
            this._lastTextCanvasFillStyle !==
                p && (this._lastTextCanvasFillStyle = p, this._textContext.fillStyle = p, this._textContext.strokeStyle = p)
        }
        _SetDrawCanvasOpacity(p) {
            this._lastTextCanvasOpacity !== p && (this._lastTextCanvasOpacity = p, this._textContext.globalAlpha = p)
        }
        _SetDrawCanvasLineWith(p) {
            this._lastTextCanvasLineWidth !== p && (this._lastTextCanvasLineWidth = p, this._textContext.lineWidth = p)
        }
        _DrawTextToCanvas() {
            this._drawCharCount = 0;
            const p = this._scaleFactor * this._zoom * self.devicePixelRatio,
                r = (4 + this._lineHeight) * p;
            var t = 0;
            const q = this._wrappedText.GetLines();
            if (0 !== q.length) {
                var w = this._isBBcodeEnabled && this._SupportsFontBoundingBoxMeasurements(),
                    y = q[0].height * p;
                "center" === this._verticalAlign ? (t = q.reduce((C, F) => C + F.height * p + r, 0) - r, t = Math.max(this._height / 2 - t / 2, 0), w && (y = q[0].topToAlphabeticDistance * p)) : "bottom" === this._verticalAlign && (t = q.reduce((C, F) => C + F.height * p + r, 0) - this._lineHeight * p, w = w ? q.at(-1).fontBoundingBoxDescent * p : 0, t = this._height - t - w - 2);
                for (let C = 0, F = q.length; C < F; ++C) {
                    w = q[C];
                    const H = w.height * p,
                        M = t;
                    if (this._isBBcodeEnabled) {
                        if (t += 0 === C ? y : H,
                            0 < C && t > this._height - 4 * p) break
                    } else if (0 < C && t >= this._height - H) break;
                    0 <= M && this._DrawTextLine(w, t, p);
                    this._isBBcodeEnabled || (t += H);
                    t += r
                }
            }
        }
        _DrawTextLine(p, r, t) {
            let q = 0;
            "center" === this._horizontalAlign ? q = (this._width - p.width * t) / 2 : "right" === this._horizontalAlign && (q = this._width - p.width * t);
            for (const w of p.fragments) this._DrawTextFragment(w, q, r, t, p.height), q += w.width * t
        }
        _DrawTextFragment(p, r, t, q, w) {
            const y = this._textContext,
                C = w / 16;
            w = p.width * q;
            const F = p.height * q,
                H = p.height / 16;
            var M = (4 + this._lineHeight) * q,
                B = p.styles;
            p = p.text;
            if (-1 !== this._drawMaxCharCount) {
                if (this._drawCharCount >= this._drawMaxCharCount) return;
                this._drawCharCount + p.length > this._drawMaxCharCount && (p = p.substr(0, this._drawMaxCharCount - this._drawCharCount), w = this._MeasureText(p, B).width * q);
                this._drawCharCount += p.length
            }
            var A = this._GetStyleTag(B, "background");
            const G = this._HasStyleTag(B, "u"),
                J = this._HasStyleTag(B, "s");
            if ((!e.IsStringAllWhitespace(p) || A || G || J) && !this._HasStyleTag(B, "hide")) {
                var L = this._GetStyleTag(B, "offsetx");
                r += L ? parseFloat(L.param) *
                    q : 0;
                L = this._GetStyleTag(B, "offsety");
                t += L ? parseFloat(L.param) * q : 0;
                A && (this._SetDrawCanvasColor(A.param), y.fillRect(r, t - F, w, F + M));
                M = this._GetStyleTag(B, "color");
                this._SetDrawCanvasColor(M ? M.param : this._colorStr);
                A = this._GetStyleTag(B, "opacity");
                this._SetDrawCanvasOpacity(A ? parseFloat(A.param) / 100 : 1);
                A = (A = this._GetStyleTag(B, "linethickness")) ? parseFloat(A.param) : 1;
                (L = this._HasStyleTag(B, "stroke")) && this._SetDrawCanvasLineWith(.5 * H * A * this._scaleFactor * this._zoom * self.devicePixelRatio);
                this._SetDrawFontString(this._GetFontString(!1,
                    B));
                g(y, L, p, r, t, w);
                !L && (this._SetDrawCanvasLineWith(.5 * H * A * this._scaleFactor * this._zoom * self.devicePixelRatio), B = this._GetStyleTag(B, "outline")) && (this._SetDrawCanvasColor(B.param), g(y, !0, p, r, t, w));
                this._SetDrawCanvasColor(M ? M.param : this._colorStr);
                G && l(y, L, r, t + q * C, w, q * C * A);
                J && (q *= H, y.fillRect(r, t - F / 4 + q / 2 - q * A / 2, w, q * A))
            }
        }
        _UpdateTexture() {
            if (!this._renderer.IsContextLost() && (this._textureWidth = Math.ceil(this._width), this._textureHeight = Math.ceil(this._height), this._rcTex.set(0, 0, this._width / this._textureWidth,
                    this._height / this._textureHeight), this._needToRecreateTexture && (this.ReleaseTexture(), this._needToRecreateTexture = !1), this._texture || (this._texture = this._renderer.CreateDynamicTexture(this._textureWidth, this._textureHeight, {
                    mipMap: 1 === this._zoom,
                    mipMapQuality: "high"
                })), this._renderer.UpdateTexture(this._textCanvas, this._texture), this.ontextureupdate)) this.ontextureupdate()
        }
        GetTexRect() {
            return this._rcTex
        }
        ReleaseTexture() {
            this._texture && (this._renderer.IsContextLost() || this._renderer.DeleteTexture(this._texture),
                this._texture = null)
        }
        static OnContextLost() {
            for (const p of k) p.ReleaseTexture()
        }
        static GetAll() {
            return k.values()
        }
    }
} {
    "use strict";
    const e = self.C3;
    class b {
        constructor(a) {
            this._gl = a.GetContext();
            this._version = a.GetWebGLVersionNumber();
            this._timerExt = a._GetDisjointTimerQueryExtension();
            this._query = null;
            this._hasResult = this._isActive = !1;
            this._result = 0;
            this._query = 1 === this._version ? this._timerExt.createQueryEXT() : this._gl.createQuery()
        }
        Release() {
            this._DeleteQueryObject();
            this._timerExt = this._gl = null;
            this._hasResult = !1
        }
        _DeleteQueryObject() {
            this._query && (1 === this._version ? this._timerExt.deleteQueryEXT(this._query) : this._gl.deleteQuery(this._query),
                this._query = null)
        }
        BeginTimeElapsed() {
            if (this._isActive) throw Error("query already active");
            1 === this._version ? this._timerExt.beginQueryEXT(this._timerExt.TIME_ELAPSED_EXT, this._query) : this._gl.beginQuery(this._timerExt.TIME_ELAPSED_EXT, this._query);
            this._isActive = !0
        }
        EndTimeElapsed() {
            if (!this._isActive) throw Error("query not active");
            1 === this._version ? this._timerExt.endQueryEXT(this._timerExt.TIME_ELAPSED_EXT) : this._gl.endQuery(this._timerExt.TIME_ELAPSED_EXT);
            this._isActive = !1
        }
        CheckForResult() {
            if (this._query &&
                !this._hasResult && !this._isActive) {
                var a = 1 === this._version ? this._timerExt.getQueryObjectEXT(this._query, this._timerExt.QUERY_RESULT_AVAILABLE_EXT) : this._gl.getQueryParameter(this._query, this._gl.QUERY_RESULT_AVAILABLE);
                var d = this._gl.getParameter(this._timerExt.GPU_DISJOINT_EXT);
                a && !d && (this._result = 1 === this._version ? this._timerExt.getQueryObjectEXT(this._query, this._timerExt.QUERY_RESULT_EXT) : this._gl.getQueryParameter(this._query, this._gl.QUERY_RESULT), this._result /= 1E9, this._hasResult = !0);
                (a ||
                    d) && this._DeleteQueryObject()
            }
        }
        HasResult() {
            return this._hasResult
        }
        GetResult() {
            if (!this._hasResult) throw Error("no result available");
            return this._result
        }
    }
    e.Gfx.WebGLTimeElapsedQuery = class {
        constructor(a) {
            this._renderer = a;
            this._frameNumber = a.GetFrameNumber();
            this._isActive = !1;
            this._parentQuery = null;
            this._isNested = !1;
            this._realQuery = null;
            this._queries = []
        }
        Release() {
            for (const a of this._queries) a instanceof b && a.Release();
            e.clearArray(this._queries);
            this._renderer = this._realQuery = this._parentQuery = null
        }
        BeginTimeElapsed() {
            if (this._isActive) throw Error("query already active");
            const a = this._renderer._GetTimeQueryStack();
            0 < a.length ? (this._isNested = !0, this._parentQuery = a.at(-1), this._parentQuery._EndReal(), this._parentQuery._queries.push(this)) : (this._isNested = !1, this._parentQuery = null);
            this._isActive = !0;
            a.push(this);
            this._StartReal()
        }
        EndTimeElapsed() {
            if (!this._isActive) throw Error("query not active");
            if (this._renderer._GetTimeQueryStack().pop() !== this) throw Error("can only end most nested query");
            this._isActive = !1;
            this._EndReal();
            this._parentQuery && (this._parentQuery._StartReal(),
                this._parentQuery = null)
        }
        _StartReal() {
            this._realQuery = e.New(b, this._renderer);
            this._queries.push(this._realQuery);
            this._realQuery.BeginTimeElapsed()
        }
        _EndReal() {
            this._realQuery.EndTimeElapsed();
            this._realQuery = null
        }
        CheckForResult() {
            for (const a of this._queries) a.CheckForResult()
        }
        IsNested() {
            return this._isNested
        }
        HasResult() {
            return this._queries.every(a => a.HasResult())
        }
        GetResult() {
            return this._queries.reduce((a, d) => a + d.GetResult(), 0)
        }
        GetFrameNumber() {
            return this._frameNumber
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Gfx.WebGLQueryResultBuffer = class {
        constructor(b, a = 1E3) {
            this._renderer = b;
            this._maxQueries = a;
            this._buffer = [];
            this._renderer._AddQueryResultBuffer(this)
        }
        Release() {
            this.Clear();
            this._renderer._RemoveQueryResultBuffer(this);
            this._renderer = null
        }
        Clear() {
            for (const b of this._buffer) b.Release();
            e.clearArray(this._buffer)
        }
        AddTimeElapsedQuery() {
            const b = new e.Gfx.WebGLTimeElapsedQuery(this._renderer);
            this._buffer.push(b);
            this._buffer.length > this._maxQueries && this._buffer.shift().Release();
            return b
        }
        CheckForResults(b) {
            for (const a of this._buffer) {
                if (a.GetFrameNumber() >= b) break;
                if (a.IsNested()) break;
                a.CheckForResult()
            }
        }
        GetFrameRangeResultSum(b, a) {
            if (a <= b) return NaN;
            let d = 0;
            for (const c of this._buffer) {
                if (c.GetFrameNumber() >= a) break;
                if (!(c.GetFrameNumber() < b))
                    if (c.HasResult()) d += c.GetResult();
                    else return NaN
            }
            return d
        }
        DeleteAllBeforeFrameNumber(b) {
            for (let a = 0, d = this._buffer.length; a < d; ++a) {
                const c = this._buffer[a];
                if (c.GetFrameNumber() < b) c.Release();
                else {
                    0 < a && this._buffer.splice(0, a);
                    break
                }
            }
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.glMatrix,
        a = b.vec4,
        d = b.mat4,
        c = {
            powerPreference: "default",
            enableGpuProfiling: !0,
            alpha: !1,
            lowLatency: !1,
            depth: !1,
            maxWebGLVersion: 2,
            failIfMajorPerformanceCaveat: !1
        },
        f = new Set(["default", "low-power", "high-performance"]),
        k = new e.Quad(0, 0, 1, 0, 1, 1, 0, 1),
        g = d.create(),
        l = d.create(),
        m = new e.Quad,
        u = new e.Rect;
    let x = null;
    e.isDebug && (self.debug_lose_context = function() {
        x ? x.loseContext() : console.warn("WEBGL_lose_context not supported")
    }, self.debug_restore_context = function() {
        x ? x.restoreContext() :
            console.warn("WEBGL_lose_context not supported")
    });
    const p = new Set;
    let r = -1;

    function t() {
        r = -1;
        for (const q of p) q.checkFunc() && (q.resolve(), p.delete(q));
        0 < p.size && (r = self.requestAnimationFrame(t))
    }
    e.Gfx.WebGLRenderer = class extends e.Gfx.RendererBase {
        constructor(q, w) {
            super();
            w = Object.assign({}, c, w);
            if (!f.has(w.powerPreference)) throw Error("invalid power preference");
            const y = {
                alpha: !!w.alpha,
                depth: !1,
                antialias: !1,
                powerPreference: w.powerPreference,
                failIfMajorPerformanceCaveat: !!w.failIfMajorPerformanceCaveat
            };
            w.lowLatency && (y.desynchronized = !0, y.preserveDrawingBuffer = !0);
            let C = null,
                F = 0;
            2 <= w.maxWebGLVersion && (C = q.getContext("webgl2", y), F = 2);
            C || (C = q.getContext("webgl", y), F = 1);
            if (!C) throw Error("failed to initialise WebGL context");
            this._gl = C;
            this._attribs = C.getContextAttributes();
            w.lowLatency && !this._attribs.desynchronized && console.info("[WebGLRenderer] Low-latency mode specified but is not supported here");
            this._versionString = C.getParameter(C.VERSION);
            this._version = F;
            this._viewport = a.create();
            this._bbProjectionMatrix =
                d.create();
            this._isDepthEnabled = this._usesDepthBuffer = !!w.depth;
            this._depthBuffer = null;
            this._isAutoSizeDepthBuffer = !0;
            this._depthBufferHeight = this._depthBufferWidth = 0;
            this._pointBuffer = this._indexBuffer = this._texcoordBuffer = this._vertexBuffer = null;
            this._vertexData = new Float32Array(8E3 * this.GetNumVertexComponents());
            this._indexData = new Uint16Array(12E3);
            this._texcoordData = new Float32Array(16E3);
            this._pointData = new Float32Array(32E3);
            this._lastVertexPtr = this._pointPtr = this._texPtr = this._vertexPtr = 0;
            this._spDeviceTransformTextureFill = this._lastProgram = null;
            this._batch = [];
            this._topOfBatch = this._batchPtr = 0;
            this._currentRenderTarget = null;
            this._lastPointZ = 0;
            this._batchState = e.New(e.Gfx.BatchState, this);
            this._lastColor = e.New(e.Color, 1, 1, 1, 1);
            this._lastTexture1 = this._lastTexture0 = null;
            this._lastDestBlend = this._lastSrcBlend = 0;
            this._isScissorViewport = !1;
            this._viewportScissorHeight = this._viewportScissorWidth = -1;
            this._lastPointTexCoords = new e.Rect;
            this._maxTextureSize = -1;
            this._highpPrecision = this._maxPointSize =
                this._minPointSize = 0;
            this._unmaskedRenderer = this._unmaskedVendor = "(unavailable)";
            this._extensions = [];
            this._isInitialisingAfterContextRestored = !1;
            this._anisotropicExt = this._parallelShaderCompileExt = null;
            this._maxAnisotropy = 0;
            this._isGpuProfilingEnabled = !!w.enableGpuProfiling;
            this._timerExt = null;
            this._allQueryResultBuffers = new Set;
            this._timeQueryStack = [];
            this.FillIndexBufferData(this._indexData)
        }
        IsWebGL() {
            return !0
        }
        async InitState() {
            super.InitState();
            var q = this._gl,
                w = this.GetNumVertexComponents();
            this._lastColor.setRgba(1,
                1, 1, 1);
            this._lastTexture1 = this._lastTexture0 = null;
            this._pointPtr = this._vertexPtr = 0;
            this._lastVertexPtr = 8E3 * w - 4 * w;
            e.clearArray(this._batch);
            this._topOfBatch = this._batchPtr = 0;
            this._currentRenderTarget = this._lastProgram = null;
            this._lastPointTexCoords.set(0, 0, 1, 1);
            this._lastPointZ = 0;
            w = this._batchState;
            w.currentShader = null;
            w.currentFramebuffer = null;
            a.set(w.currentColor, 1, 1, 1, 1);
            w.clearColor.setRgba(0, 0, 0, 0);
            w.pointTexCoords.set(0, 0, 1, 1);
            q.clearColor(0, 0, 0, 0);
            q.clear(q.COLOR_BUFFER_BIT);
            q.enable(q.BLEND);
            q.blendFunc(q.ONE, q.ONE_MINUS_SRC_ALPHA);
            this._lastSrcBlend = q.ONE;
            this._lastDestBlend = q.ONE_MINUS_SRC_ALPHA;
            this._InitBlendModes(q);
            q.disable(q.CULL_FACE);
            q.disable(q.STENCIL_TEST);
            q.disable(q.DITHER);
            this._usesDepthBuffer ? (q.enable(q.DEPTH_TEST), q.depthMask(!0), q.depthFunc(q.LEQUAL)) : (q.disable(q.DEPTH_TEST), q.depthMask(!1));
            this._isDepthEnabled = this._usesDepthBuffer;
            this._pointBuffer = q.createBuffer();
            q.bindBuffer(q.ARRAY_BUFFER, this._pointBuffer);
            q.bufferData(q.ARRAY_BUFFER, this._pointData.byteLength,
                q.DYNAMIC_DRAW);
            this._vertexBuffer = q.createBuffer();
            q.bindBuffer(q.ARRAY_BUFFER, this._vertexBuffer);
            q.bufferData(q.ARRAY_BUFFER, this._vertexData.byteLength, q.DYNAMIC_DRAW);
            this._texcoordBuffer = q.createBuffer();
            q.bindBuffer(q.ARRAY_BUFFER, this._texcoordBuffer);
            q.bufferData(q.ARRAY_BUFFER, this._texcoordData.byteLength, q.DYNAMIC_DRAW);
            this._indexBuffer = q.createBuffer();
            q.bindBuffer(q.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
            q.bufferData(q.ELEMENT_ARRAY_BUFFER, this._indexData, q.STATIC_DRAW);
            q.activeTexture(q.TEXTURE0);
            q.bindTexture(q.TEXTURE_2D, null);
            this._maxTextureSize = q.getParameter(q.MAX_TEXTURE_SIZE);
            w = q.getParameter(q.ALIASED_POINT_SIZE_RANGE);
            this._minPointSize = w[0];
            this._maxPointSize = w[1];
            w = q.getShaderPrecisionFormat(q.VERTEX_SHADER, q.HIGH_FLOAT);
            const y = q.getShaderPrecisionFormat(q.FRAGMENT_SHADER, q.HIGH_FLOAT);
            this._highpPrecision = w && y ? Math.min(w.precision, y.precision) : 0;
            2048 < this._maxPointSize && (this._maxPointSize = 2048);
            this._extensions = q.getSupportedExtensions();
            if (w = q.getExtension("WEBGL_debug_renderer_info")) this._unmaskedVendor =
                q.getParameter(w.UNMASKED_VENDOR_WEBGL), this._unmaskedRenderer = q.getParameter(w.UNMASKED_RENDERER_WEBGL);
            this._parallelShaderCompileExt = q.getExtension("KHR_parallel_shader_compile");
            e.isDebug && (x = q.getExtension("WEBGL_lose_context"));
            if (this._isGpuProfilingEnabled)
                if (1 === this.GetWebGLVersionNumber()) {
                    if ("Chromium" !== e.Platform.BrowserEngine || 81 <= e.Platform.BrowserVersionNumber || "undefined" !== typeof document) this._timerExt = q.getExtension("EXT_disjoint_timer_query")
                } else this._timerExt = q.getExtension("EXT_disjoint_timer_query_webgl2") ||
                    q.getExtension("EXT_disjoint_timer_query");
            this._maxAnisotropy = (this._anisotropicExt = q.getExtension("EXT_texture_filter_anisotropic")) ? q.getParameter(this._anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
            q = e.Gfx.WebGLShaderProgram;
            w = q.GetDefaultVertexShaderSource(!1);
            q = [
                [q.GetTextureFillFragmentShaderSource(), w, "<default>"],
                [q.GetTextureFillFragmentShaderSource(), w, "<default-device-transform>"],
                [q.GetPointFragmentShaderSource(this._version), q.GetPointVertexShaderSource(this._version), "<point>"],
                [q.GetColorFillFragmentShaderSource(), w, "<fill>"],
                [q.GetLinearGradientFillFragmentShaderSource(), w, "<lineargradient>"],
                [q.GetHardEllipseFillFragmentShaderSource(), w, "<hardellipse>"],
                [q.GetHardEllipseOutlineFragmentShaderSource(), w, "<hardellipseoutline>"],
                [q.GetSmoothEllipseFillFragmentShaderSource(), w, "<smoothellipse>"],
                [q.GetSmoothEllipseOutlineFragmentShaderSource(), w, "<smoothellipseoutline>"],
                [q.GetSmoothLineFillFragmentShaderSource(), w, "<smoothline>"],
                [q.GetTilemapFragmentShaderSource(), q.GetDefaultVertexShaderSource(!0),
                    "<tilemap>"
                ]
            ];
            q = await Promise.all(q.map(C => this.CreateShaderProgram({
                src: C[0]
            }, C[1], C[2])));
            this._spTextureFill = q[0];
            this._spDeviceTransformTextureFill = q[1];
            this._spPoints = q[2];
            this._spColorFill = q[3];
            this._spLinearGradientFill = q[4];
            this._spHardEllipseFill = q[5];
            this._spHardEllipseOutline = q[6];
            this._spSmoothEllipseFill = q[7];
            this._spSmoothEllipseOutline = q[8];
            this._spSmoothLineFill = q[9];
            this._spTilemapFill = q[10];
            this.SetTextureFillMode()
        }
        async CreateShaderProgram(q, w, y) {
            q = await e.Gfx.WebGLShaderProgram.Create(this,
                q, w, y);
            this._AddShaderProgram(q);
            return q
        }
        ResetLastProgram() {
            this._lastProgram = null
        }
        SetSize(q, w, y) {
            if (this._width !== q || this._height !== w || y) {
                this.EndBatch();
                y = this._gl;
                var C = this._batchState;
                this._width = q;
                this._height = w;
                q = this.GetScissoredViewportWidth();
                w = this.GetScissoredViewportHeight();
                this._SetViewport(0, 0, q, w);
                this.CalculatePerspectiveMatrix(this._bbProjectionMatrix, q / w);
                this.SetProjectionMatrix(this._bbProjectionMatrix);
                this._spDeviceTransformTextureFill && (y.useProgram(this._spDeviceTransformTextureFill.GetShaderProgram()),
                    this._spDeviceTransformTextureFill._UpdateDeviceTransformUniforms(this._matP), this._lastProgram = this._spDeviceTransformTextureFill, this._batchState.currentShader = this._spDeviceTransformTextureFill);
                y.bindTexture(y.TEXTURE_2D, null);
                y.activeTexture(y.TEXTURE1);
                y.bindTexture(y.TEXTURE_2D, null);
                y.activeTexture(y.TEXTURE0);
                this._lastTexture1 = this._lastTexture0 = null;
                this._usesDepthBuffer && this._isAutoSizeDepthBuffer && this._SetDepthBufferSize(this._width, this._height);
                this._currentRenderTarget && this._currentRenderTarget._Resize(this._width,
                    this._height);
                y.bindFramebuffer(y.FRAMEBUFFER, null);
                this._currentRenderTarget = null;
                C.currentFramebuffer = null
            }
        }
        _SetDepthBufferSize(q, w) {
            const y = this._gl;
            if (this._depthBuffer) {
                if (this._depthBufferWidth === q && this._depthBufferHeight === w) return;
                y.deleteRenderbuffer(this._depthBuffer)
            }
            this._depthBuffer = y.createRenderbuffer();
            y.bindRenderbuffer(y.RENDERBUFFER, this._depthBuffer);
            y.renderbufferStorage(y.RENDERBUFFER, 2 <= this._version ? y.DEPTH24_STENCIL8 : y.DEPTH_STENCIL, q, w);
            y.bindRenderbuffer(y.RENDERBUFFER,
                null);
            this._depthBufferWidth = q;
            this._depthBufferHeight = w
        }
        SetFixedSizeDepthBuffer(q, w) {
            this._usesDepthBuffer && (this._isAutoSizeDepthBuffer = !1, this._SetDepthBufferSize(q, w))
        }
        SetAutoSizeDepthBuffer() {
            this._usesDepthBuffer && (this._isAutoSizeDepthBuffer = !0, this._SetDepthBufferSize(this._width, this._height))
        }
        SetViewportScissor(q, w) {
            const y = this._gl;
            if (this._width === q && this._height === w) this._isScissorViewport && (this.EndBatch(), y.disable(y.SCISSOR_TEST), this._isScissorViewport = !1, this._viewportScissorHeight =
                this._viewportScissorWidth = -1, this.SetSize(this._width, this._height, !0));
            else if (this._isScissorViewport || (this.EndBatch(), y.enable(y.SCISSOR_TEST), this._isScissorViewport = !0), this._viewportScissorWidth !== q || this._viewportScissorHeight !== w) this.EndBatch(), y.scissor(0, 0, q, w), this._viewportScissorWidth = q, this._viewportScissorHeight = w, this.SetSize(this._width, this._height, !0)
        }
        RemoveViewportScissor() {
            const q = this._gl;
            this._isScissorViewport && (this.EndBatch(), q.disable(q.SCISSOR_TEST), this._isScissorViewport = !1);
            this._viewportScissorHeight = this._viewportScissorWidth = -1
        }
        GetScissoredViewportWidth() {
            return this._isScissorViewport ? this._viewportScissorWidth : this.GetWidth()
        }
        GetScissoredViewportHeight() {
            return this._isScissorViewport ? this._viewportScissorHeight : this.GetHeight()
        }
        _SetViewport(q, w, y, C) {
            const F = this._viewport;
            if (F[0] !== q || F[1] !== w || F[2] !== y || F[3] !== C) this.PushBatch().InitSetViewport(q, w, y, C), a.set(F, q, w, y, C), this._topOfBatch = 0
        }
        SetProjectionMatrix(q) {
            d.exactEquals(this._matP, q) || (this.PushBatch().InitSetProjection(q),
                d.copy(this._matP, q), this._topOfBatch = 0)
        }
        SetDefaultRenderTargetProjectionState() {
            let q, w;
            var y = this._currentRenderTarget;
            null === y || y.IsDefaultSize() && this._isScissorViewport ? (q = this._bbProjectionMatrix, w = this.GetScissoredViewportWidth(), y = this.GetScissoredViewportHeight()) : (q = y.GetProjectionMatrix(), w = y.GetWidth(), y = y.GetHeight());
            this.SetProjectionMatrix(q);
            this._SetViewport(0, 0, w, y)
        }
        SetModelViewMatrix(q) {
            d.exactEquals(this._matMV, q) || (this.PushBatch().InitSetModelView(q), d.copy(this._matMV, q), this._topOfBatch =
                0)
        }
        GetBatchState() {
            return this._batchState
        }
        PushBatch() {
            const q = this._batch;
            this._batchPtr === q.length && q.push(new e.Gfx.WebGLBatchJob(this._batchState));
            return q[this._batchPtr++]
        }
        EndBatch() {
            0 === this._batchPtr || this.IsContextLost() || (this._WriteBuffers(), this._ExecuteBatch(), this._topOfBatch = this._pointPtr = this._texPtr = this._vertexPtr = this._batchPtr = 0)
        }
        _WriteBuffers() {
            const q = this._gl;
            0 < this._pointPtr && (q.bindBuffer(q.ARRAY_BUFFER, this._pointBuffer), q.bufferSubData(q.ARRAY_BUFFER, 0, this._pointData.subarray(0,
                this._pointPtr)));
            0 < this._vertexPtr && (q.bindBuffer(q.ARRAY_BUFFER, this._vertexBuffer), q.bufferSubData(q.ARRAY_BUFFER, 0, this._vertexData.subarray(0, this._vertexPtr)), q.bindBuffer(q.ARRAY_BUFFER, this._texcoordBuffer), q.bufferSubData(q.ARRAY_BUFFER, 0, this._texcoordData.subarray(0, this._texPtr)))
        }
        _ExecuteBatch() {
            const q = this._batch;
            for (let w = 0, y = this._batchPtr; w < y; ++w) q[w].Run()
        }
        GetOpacity() {
            return this._lastColor.getA()
        }
        SetColorRgba(q, w, y, C) {
            const F = this._lastColor;
            F.equalsRgba(q, w, y, C) || (F.setRgba(q,
                w, y, C), this.PushBatch().InitSetColor(F), this._topOfBatch = 0, this._currentStateGroup = null)
        }
        SetOpacity(q) {
            const w = this._lastColor;
            w.getA() !== q && (w.setA(q), this.PushBatch().InitSetColor(w), this._topOfBatch = 0, this._currentStateGroup = null)
        }
        SetColor(q) {
            const w = this._lastColor;
            w.equals(q) || (w.set(q), this.PushBatch().InitSetColor(w), this._topOfBatch = 0, this._currentStateGroup = null)
        }
        ResetColor() {
            this.SetColorRgba(1, 1, 1, 1)
        }
        GetColor() {
            return this._lastColor
        }
        SetTexture(q) {
            q !== this._lastTexture0 && (this.PushBatch().InitSetTexture(q),
                this._lastTexture0 = q, this._topOfBatch = 0)
        }
        _ResetLastTexture() {
            this._lastTexture0 = null
        }
        SetBlendMode(q) {
            q = this._GetBlendByIndex(q);
            this._SetBlend(q[0], q[1])
        }
        SetNamedBlendMode(q) {
            q = this.GetNamedBlend(q);
            this._SetBlend(q.srcBlend, q.destBlend)
        }
        _SetBlend(q, w) {
            if (q !== this._lastSrcBlend || w !== this._lastDestBlend) this.PushBatch().InitSetBlend(q, w), this._lastSrcBlend = q, this._lastDestBlend = w, this._topOfBatch = 0, this._currentStateGroup = null
        }
        IsPremultipliedAlphaBlend() {
            return this._lastSrcBlend === this._gl.ONE && this._lastDestBlend ===
                this._gl.ONE_MINUS_SRC_ALPHA
        }
        SetAlphaBlend() {
            this._SetBlend(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA)
        }
        SetNoPremultiplyAlphaBlend() {
            this._SetBlend(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA)
        }
        SetCopyBlend() {
            this._SetBlend(this._gl.ONE, this._gl.ZERO)
        }
        Rect(q) {
            this.Rect2(q.getLeft(), q.getTop(), q.getRight(), q.getBottom())
        }
        Rect2(q, w, y, C) {
            this.Quad2(q, w, y, w, y, C, q, C)
        }
        _ExtendQuadBatch() {
            let q = this._vertexPtr;
            q >= this._lastVertexPtr && (this.EndBatch(), q = 0);
            1 === this._topOfBatch ? this._batch[this._batchPtr -
                1]._indexCount += 6 : (this.PushBatch().InitQuad(q, 6), this._topOfBatch = 1)
        }
        _WriteQuadToVertexBuffer(q) {
            q.writeToTypedArray3D(this._vertexData, this._vertexPtr, this._baseZ + this._currentZ);
            this._vertexPtr += 12
        }
        Quad(q) {
            this._ExtendQuadBatch();
            this._WriteQuadToVertexBuffer(q);
            k.writeToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad2(q, w, y, C, F, H, M, B) {
            this._ExtendQuadBatch();
            const A = this._vertexData;
            let G = this._vertexPtr;
            const J = this._baseZ + this._currentZ;
            A[G++] = q;
            A[G++] = w;
            A[G++] = J;
            A[G++] = y;
            A[G++] =
                C;
            A[G++] = J;
            A[G++] = F;
            A[G++] = H;
            A[G++] = J;
            A[G++] = M;
            A[G++] = B;
            A[G++] = J;
            this._vertexPtr = G;
            k.writeToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad3(q, w) {
            this._ExtendQuadBatch();
            this._WriteQuadToVertexBuffer(q);
            w.writeAsQuadToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad4(q, w) {
            this._ExtendQuadBatch();
            this._WriteQuadToVertexBuffer(q);
            w.writeToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad3D(q, w, y, C, F, H, M, B, A, G, J, L, R) {
            this._ExtendQuadBatch();
            const U = this._vertexData;
            let V = this._vertexPtr;
            const ba = this._baseZ + this._currentZ;
            U[V++] = q;
            U[V++] = w;
            U[V++] = ba + y;
            U[V++] = C;
            U[V++] = F;
            U[V++] = ba + H;
            U[V++] = M;
            U[V++] = B;
            U[V++] = ba + A;
            U[V++] = G;
            U[V++] = J;
            U[V++] = ba + L;
            this._vertexPtr = V;
            R.writeAsQuadToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad3D2(q, w, y, C, F, H, M, B, A, G, J, L, R) {
            this._ExtendQuadBatch();
            const U = this._vertexData;
            let V = this._vertexPtr;
            const ba = this._baseZ + this._currentZ;
            U[V++] = q;
            U[V++] = w;
            U[V++] = ba + y;
            U[V++] = C;
            U[V++] = F;
            U[V++] = ba + H;
            U[V++] = M;
            U[V++] = B;
            U[V++] = ba +
                A;
            U[V++] = G;
            U[V++] = J;
            U[V++] = ba + L;
            this._vertexPtr = V;
            R.writeToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        FullscreenQuad(q, w) {
            d.copy(g, this._matP);
            d.copy(l, this._matMV);
            this.SetDefaultRenderTargetProjectionState();
            if (this._isScissorViewport) {
                q = this.CalculateLookAtModelView2(0, 0, this.GetDefaultCameraZ() * self.devicePixelRatio, 0, 0, 0);
                this.SetModelViewMatrix(q);
                q = this._viewportScissorWidth / 2;
                var y = this._viewportScissorHeight / 2;
                u.set(-q, y, -q + this._viewportScissorWidth, y - this._viewportScissorHeight);
                m.setFromRect(u);
                u.set(0, 0, this._viewportScissorWidth / this._width, this._viewportScissorHeight / this._height);
                this.Quad3(m, u)
            } else {
                const [H, M] = this.GetRenderTargetSize(this._currentRenderTarget);
                y = this.CalculateLookAtModelView2(0, 0, this.GetDefaultCameraZ() * self.devicePixelRatio, 0, 0, 0, M);
                this.SetModelViewMatrix(y);
                if ("crop" === q && this._currentRenderTarget && w) {
                    q = this._width / 2;
                    y = this._height / 2;
                    const B = w.GetWidth();
                    w = w.GetHeight();
                    var C = this._currentRenderTarget.GetWidth(),
                        F = this._currentRenderTarget.GetHeight();
                    C = Math.min(C, B);
                    const A = Math.min(F, w),
                        G = Math.max(w - F, 0);
                    F = Math.max(F - w, 0);
                    u.set(-q, y - F, -q + C, y - A - F);
                    m.setFromRect(u);
                    u.set(0, G, C, A + G);
                    u.divide(B, w);
                    this.Quad3(m, u)
                } else q = H / 2, y = M / 2, this.Rect2(-q, y, q, -y)
            }
            this.SetProjectionMatrix(g);
            this.SetModelViewMatrix(l)
        }
        StartRenderingPoints(q) {
            this._lastPointTexCoords.equals(q) || (this._lastPointTexCoords.copy(q), this.PushBatch().InitSetPointTexCoords(q), this._topOfBatch = 0)
        }
        FinishRenderingPoints() {}
        Point(q, w, y, C) {
            7996 <= this._pointPtr && this.EndBatch();
            let F = this._pointPtr;
            var H = this._baseZ + this._currentZ;
            2 === this._topOfBatch && this._lastPointZ === H ? this._batch[this._batchPtr - 1]._indexCount++ : (this.PushBatch().InitPoints(F, H), this._topOfBatch = 2, this._lastPointZ = H);
            H = this._pointData;
            H[F++] = q;
            H[F++] = w;
            H[F++] = y;
            H[F++] = C;
            this._pointPtr = F
        }
        SetProgram(q) {
            this._lastProgram !== q && (this.PushBatch().InitSetProgram(q), this._lastProgram = q, this._topOfBatch = 0, this._currentStateGroup = null)
        }
        SetDeviceTransformTextureFillMode() {
            this.SetProgram(this._spDeviceTransformTextureFill)
        }
        SetGradientColor(q) {
            this.PushBatch().InitSetGradientColor(q);
            this._topOfBatch = 0
        }
        SetEllipseParams(q, w, y = 1) {
            this.PushBatch().InitSetEllipseParams(q, w, y);
            this._topOfBatch = 0
        }
        SetTilemapInfo(q, w, y, C, F, H, M) {
            if (this._lastProgram !== this._spTilemapFill) throw Error("must set tilemap fill mode first");
            this.PushBatch().InitSetTilemapInfo(q, w, y, C, F, H, M);
            this._topOfBatch = 0
        }
        SetProgramParameters(q, w, y, C, F, H, M, B, A, G, J) {
            const L = this._lastProgram;
            var R = L._hasAnyOptionalUniforms;
            const U = !!J.length;
            if (R && !L.AreOptionalUniformsAlreadySetInBatch(w, y, C, F, H, M, B, A, G) || U && !L.AreCustomParametersAlreadySetInBatch(J)) {
                var V =
                    this.PushBatch();
                V.InitSetProgramParameters();
                R && (L.SetOptionalUniformsInBatch(w, y, C, F, H, M, B, A, G), R = V._mat4param, R[0] = H, R[1] = M, w.writeToTypedArray(R, 2), R[6] = B, R[7] = A, y.writeToTypedArray(R, 12), w = V._colorParam, F.writeToTypedArray(w, 0), F = w[1], w[1] = w[3], w[3] = F, C.writeToTypedArray(V._srcOriginRect, 0), V._startIndex = G, L._uSamplerBack.IsUsed() ? V._texParam = q ? q.GetTexture() : null : V._texParam = null);
                U && (L.SetCustomParametersInBatch(J), e.shallowAssignArray(V._shaderParams, J));
                this._topOfBatch = 0
            }
        }
        ClearRgba(q, w,
            y, C) {
            this.PushBatch().InitClearSurface2(q, w, y, C);
            this._topOfBatch = 0
        }
        Clear(q) {
            this.PushBatch().InitClearSurface(q);
            this._topOfBatch = 0
        }
        ClearRect(q, w, y, C) {
            this.ClearRect4(q, w, y, C, 0, 0, 0, 0)
        }
        ClearRect2(q) {
            this.ClearRect4(q.getLeft(), q.getTop(), q.width(), q.height(), 0, 0, 0, 0)
        }
        ClearRect3(q, w) {
            this.ClearRect4(q.getLeft(), q.getTop(), q.width(), q.height(), w.getR(), w.getG(), w.getB(), w.getA())
        }
        ClearRect4(q, w, y, C, F, H, M, B) {
            0 > y || 0 > C || (this.PushBatch().InitClearRect(q, w, y, C, F, H, M, B), this._topOfBatch = 0)
        }
        Start() {}
        Finish() {
            super.Finish();
            this._gl.flush()
        }
        ClearDepth() {
            this._usesDepthBuffer && this._currentRenderTarget && this._currentRenderTarget.HasDepthBuffer() && (this.PushBatch().InitClearDepth(), this._topOfBatch = 0)
        }
        SetDepthEnabled(q) {
            q = !!q;
            this._isDepthEnabled !== q && this._usesDepthBuffer && (this._isDepthEnabled = q, this.PushBatch().InitSetDepthEnabled(q), this._topOfBatch = 0)
        }
        _GetDepthBuffer() {
            return this._depthBuffer
        }
        CheckForQueryResults() {
            for (const q of this._allQueryResultBuffers) q.CheckForResults(this._frameNumber)
        }
        IsContextLost() {
            return !this._gl ||
                this._gl.isContextLost() || this._isInitialisingAfterContextRestored
        }
        OnContextLost() {
            super.OnDeviceOrContextLost();
            e.Gfx.WebGLRendererTexture.OnContextLost();
            e.Gfx.WebGLRenderTarget.OnContextLost();
            e.Gfx.RendererText.OnContextLost();
            for (const q of this._allQueryResultBuffers) q.Clear();
            this._extensions = [];
            this._anisotropicExt = this._parallelShaderCompileExt = this._timerExt = null;
            this._maxAnisotropy = 0;
            this._unmaskedRenderer = this._unmaskedVendor = "(unavailable)";
            this._depthBuffer = this._spDeviceTransformTextureFill =
                this._lastProgram = null;
            for (const q of this._stateGroups.values()) q.OnContextLost()
        }
        async OnContextRestored() {
            this._isInitialisingAfterContextRestored = !0;
            await this.InitState();
            this._isInitialisingAfterContextRestored = !1;
            for (const q of this._stateGroups.values()) q.OnContextRestored(this);
            this.SetSize(this._width, this._height, !0)
        }
        CreateStaticTexture(q, w) {
            if (this.IsContextLost()) throw Error("context lost");
            this.EndBatch();
            const y = e.New(e.Gfx.WebGLRendererTexture, this);
            y._CreateStatic(q, w);
            return y
        }
        CreateStaticTextureAsync(q,
            w) {
            if (this.IsContextLost()) return Promise.reject("context lost");
            w = Object.assign({}, w);
            const y = w.wrapX && "clamp-to-edge" !== w.wrapX || w.wrapY && "clamp-to-edge" !== w.wrapY;
            if (!e.Supports.ImageBitmapOptions || !this.SupportsNPOTTextures() && y) return e.Supports.ImageBitmap ? createImageBitmap(q).then(C => e.Asyncify(() => this.CreateStaticTexture(C, w))) : q instanceof Blob ? e.BlobToImage(q, !0).then(C => this.CreateStaticTextureAsync(C, w)) : "undefined" !== typeof HTMLImageElement && q instanceof HTMLImageElement && "function" ===
                typeof q.decode ? q.decode().then(() => e.Asyncify(() => this.CreateStaticTexture(q, w))) : e.Asyncify(() => this.CreateStaticTexture(q, w));
            w.premultiplyAlpha = !1;
            return createImageBitmap(q, {
                premultiplyAlpha: "premultiply"
            }).then(C => e.Asyncify(() => this.CreateStaticTexture(C, w)))
        }
        CreateDynamicTexture(q, w, y) {
            this.EndBatch();
            const C = e.New(e.Gfx.WebGLRendererTexture, this);
            C._CreateDynamic(q, w, y);
            return C
        }
        UpdateTexture(q, w, y) {
            this.EndBatch();
            w._Update(q, y)
        }
        DeleteTexture(q) {
            q && (q.SubtractReference(), 0 < q.GetReferenceCount() ||
                (this.EndBatch(), q === this._lastTexture0 && (this._gl.bindTexture(this._gl.TEXTURE_2D, null), this._lastTexture0 = null), q === this._lastTexture1 && (this._gl.activeTexture(this._gl.TEXTURE1), this._gl.bindTexture(this._gl.TEXTURE_2D, null), this._gl.activeTexture(this._gl.TEXTURE0), this._lastTexture1 = null), q._Delete()))
        }
        CreateRenderTarget(q) {
            let w = this._width,
                y = this._height,
                C = !0;
            q && ("number" === typeof q.width && (w = q.width, C = !1), "number" === typeof q.height && (y = q.height, C = !1));
            if (0 >= w || 0 >= y) throw Error("invalid size");
            this.EndBatch();
            const F = e.New(e.Gfx.WebGLRenderTarget, this);
            F._Create(w, y, Object.assign({
                isDefaultSize: C
            }, q));
            this._currentRenderTarget = null;
            this._batchState.currentFramebuffer = null;
            return F
        }
        SetRenderTarget(q) {
            q !== this._currentRenderTarget && (q && q.IsDefaultSize() && q._Resize(this._width, this._height), this.PushBatch().InitSetRenderTarget(q), this._currentRenderTarget = q, this._topOfBatch = 0, this.SetDefaultRenderTargetProjectionState())
        }
        GetRenderTarget() {
            return this._currentRenderTarget
        }
        GetRenderTargetSize(q) {
            return q ? [q.GetWidth(), q.GetHeight()] : [this._width, this._height]
        }
        CopyRenderTarget(q, w = "stretch") {
            2 > this._version || this._currentRenderTarget && 0 < this._currentRenderTarget.GetMultisampling() ? (this.SetCopyBlend(), this.ResetColor(), this.DrawRenderTarget(q, w)) : (this.PushBatch().InitBlitFramebuffer(q, this._currentRenderTarget, w), this._topOfBatch = 0)
        }
        DrawRenderTarget(q, w = "stretch") {
            q = q.GetTexture();
            if (!q) throw Error("not a texture-backed render target");
            this.SetTexture(q);
            this.FullscreenQuad(w, q)
        }
        InvalidateRenderTarget(q) {
            2 >
                this._version || (this.PushBatch().InitInvalidateFramebuffer(q._GetFramebuffer()), this._topOfBatch = 0)
        }
        DeleteRenderTarget(q) {
            this.SetRenderTarget(null);
            this.EndBatch();
            const w = q.GetTexture();
            w === this._lastTexture0 && (this._gl.bindTexture(this._gl.TEXTURE_2D, null), this._lastTexture0 = null);
            w === this._lastTexture1 && (this._gl.activeTexture(this._gl.TEXTURE1), this._gl.bindTexture(this._gl.TEXTURE_2D, null), this._gl.activeTexture(this._gl.TEXTURE0), this._lastTexture1 = null);
            q._Delete()
        }
        async ReadBackRenderTargetToImageData(q,
            w, y) {
            this.EndBatch();
            const C = this._currentRenderTarget;
            if (q) {
                var F = q.GetWidth();
                var H = q.GetHeight();
                var M = q._GetFramebuffer()
            } else F = this.GetWidth(), H = this.GetHeight(), M = null;
            let B = q = 0;
            var A = F,
                G = H;
            y && (q = e.clamp(Math.floor(y.getLeft()), 0, F - 1), B = e.clamp(Math.floor(y.getTop()), 0, H - 1), A = y.width(), A = 0 === A ? F - q : e.clamp(Math.floor(A), 0, F - q), G = y.height(), G = 0 === G ? H - B : e.clamp(Math.floor(G), 0, H - B), B = H - (B + G));
            const J = this._gl;
            J.bindFramebuffer(J.FRAMEBUFFER, M);
            H = () => {
                J.bindFramebuffer(J.FRAMEBUFFER, null);
                this._currentRenderTarget =
                    null;
                this._batchState.currentFramebuffer = null;
                this.SetRenderTarget(C)
            };
            if (!w && 2 <= this.GetWebGLVersionNumber()) {
                J.bindFramebuffer(J.READ_FRAMEBUFFER, M);
                M = J.createBuffer();
                y = A * G * 4;
                F = J.PIXEL_PACK_BUFFER;
                J.bindBuffer(F, M);
                J.bufferData(F, y, J.STREAM_READ);
                J.readPixels(q, B, A, G, J.RGBA, J.UNSIGNED_BYTE, 0);
                J.bindFramebuffer(J.READ_FRAMEBUFFER, null);
                J.bindBuffer(F, null);
                H();
                const L = J.fenceSync(J.SYNC_GPU_COMMANDS_COMPLETE, 0);
                await this._WaitForObjectReady(() => J.getSyncParameter(L, J.SYNC_STATUS) === J.SIGNALED);
                J.deleteSync(L);
                w = new ImageData(A, G);
                J.bindBuffer(F, M);
                J.getBufferSubData(F, 0, new Uint8Array(w.data.buffer), 0, y);
                J.bindBuffer(F, null);
                J.deleteBuffer(M)
            } else w = new ImageData(A, G), J.readPixels(q, B, A, G, J.RGBA, J.UNSIGNED_BYTE, new Uint8Array(w.data.buffer)), H();
            return w
        }
        CoplanarStartStencilPass() {
            this.SetDepthEnabled(!0);
            this.PushBatch().InitCoplanarStartStencilPass();
            this._topOfBatch = 0
        }
        CoplanarStartColorPass() {
            this.SetDepthEnabled(!1);
            this.PushBatch().InitCoplanarStartColorPass();
            this._topOfBatch = 0
        }
        CoplanarRestoreStandardRendering() {
            this.SetDepthEnabled(!0);
            this.PushBatch().InitCoplanarRestore();
            this._topOfBatch = 0
        }
        StartQuery(q) {
            this.SupportsGPUProfiling() && (this.PushBatch().InitStartQuery(q), this._topOfBatch = 0)
        }
        EndQuery(q) {
            this.SupportsGPUProfiling() && (this.PushBatch().InitEndQuery(q), this._topOfBatch = 0)
        }
        _WaitForObjectReady(q) {
            const w = new Promise(y => p.add({
                resolve: y,
                checkFunc: q
            })); - 1 === r && (r = self.requestAnimationFrame(t));
            return w
        }
        IsDesynchronized() {
            return !!this._attribs.desynchronized
        }
        GetEstimatedBackBufferMemoryUsage() {
            return this._width * this._height *
                (this._attribs.alpha ? 4 : 3)
        }
        GetEstimatedRenderBufferMemoryUsage() {
            let q = 0;
            for (const w of e.Gfx.WebGLRenderTarget.allRenderTargets()) w.GetTexture() || (q += w.GetEstimatedMemoryUsage());
            return q
        }
        GetEstimatedTextureMemoryUsage() {
            let q = 0;
            for (const w of e.Gfx.WebGLRendererTexture.allTextures()) q += w.GetEstimatedMemoryUsage();
            return q
        }
        GetEstimatedTotalMemoryUsage() {
            return this.GetEstimatedBackBufferMemoryUsage() + this.GetEstimatedRenderBufferMemoryUsage() + this.GetEstimatedTextureMemoryUsage()
        }
        GetWebGLVersionString() {
            return this._versionString
        }
        GetWebGLVersionNumber() {
            return this._version
        }
        GetDisplayName() {
            return "webgl" +
                this.GetWebGLVersionNumber()
        }
        SupportsNPOTTextures() {
            return 2 <= this.GetWebGLVersionNumber()
        }
        GetMaxTextureSize() {
            return this._maxTextureSize
        }
        GetMinPointSize() {
            return this._minPointSize
        }
        GetMaxPointSize() {
            return this._maxPointSize
        }
        SupportsHighP() {
            return 0 !== this._highpPrecision
        }
        GetHighPPrecision() {
            return this._highpPrecision
        }
        GetUnmaskedVendor() {
            return this._unmaskedVendor
        }
        GetUnmaskedRenderer() {
            return this._unmaskedRenderer
        }
        GetExtensions() {
            return this._extensions
        }
        SupportsGPUProfiling() {
            return !!this._timerExt
        }
        _GetDisjointTimerQueryExtension() {
            return this._timerExt
        }
        _GetParallelShaderCompileExtension() {
            return this._parallelShaderCompileExt
        }
        _GetAnisotropicExtension() {
            return this._anisotropicExt
        }
        _GetMaxAnisotropy() {
            return this._maxAnisotropy
        }
        _AddQueryResultBuffer(q) {
            this._allQueryResultBuffers.add(q)
        }
        _RemoveQueryResultBuffer(q) {
            this._allQueryResultBuffers.delete(q)
        }
        _GetTimeQueryStack() {
            return this._timeQueryStack
        }
        GetContext() {
            return this._gl
        }
        _InitBlendModes(q) {
            this._InitBlendModeData([
                ["normal",
                    q.ONE, q.ONE_MINUS_SRC_ALPHA
                ],
                ["additive", q.ONE, q.ONE],
                ["xor", q.ONE, q.ONE_MINUS_SRC_ALPHA],
                ["copy", q.ONE, q.ZERO],
                ["destination-over", q.ONE_MINUS_DST_ALPHA, q.ONE],
                ["source-in", q.DST_ALPHA, q.ZERO],
                ["destination-in", q.ZERO, q.SRC_ALPHA],
                ["source-out", q.ONE_MINUS_DST_ALPHA, q.ZERO],
                ["destination-out", q.ZERO, q.ONE_MINUS_SRC_ALPHA],
                ["source-atop", q.DST_ALPHA, q.ONE_MINUS_SRC_ALPHA],
                ["destination-atop", q.ONE_MINUS_DST_ALPHA, q.SRC_ALPHA]
            ])
        }
        CreateRendererText() {
            return e.New(e.Gfx.RendererText, this)
        }
        CreateWebGLText() {
            return this.CreateRendererText()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X;
    let a = null;
    const d = new Set;

    function c(l, m) {
        const u = l[0] - m[0];
        return 0 !== u ? u : l[1] - m[1]
    }
    const f = [],
        k = [];
    let g = !1;
    self.IRuntime = class {
        constructor(l, m) {
            a = l;
            Object.defineProperties(this, {
                assets: {
                    value: a.GetAssetManager().GetIAssetManager(),
                    writable: !1
                },
                objects: {
                    value: m,
                    writable: !1
                },
                globalVars: {
                    value: {},
                    writable: !1
                },
                projectName: {
                    value: a.GetProjectName(),
                    writable: !1
                },
                projectVersion: {
                    value: a.GetProjectVersion(),
                    writable: !1
                },
                storage: {
                    value: new self.IStorage(a),
                    writable: !1
                },
                isInWorker: {
                    value: a.IsInWorker(),
                    writable: !1
                }
            });
            a.UserScriptDispatcher().addEventListener("keydown", u => {
                d.has(u.key) ? u.stopPropagation() : d.add(u.key)
            });
            a.UserScriptDispatcher().addEventListener("keyup", u => d.delete(u.key));
            a.Dispatcher().addEventListener("window-blur", () => d.clear());
            a.IsInWorker() && (self.alert = u => {
                g || (g = !0, console.warn("[Construct 3] alert() was called from a Web Worker, because the project 'Use worker' setting is enabled. This method is not normally available in a Web Worker. Construct has implemented the alert for you, but note that other features may be missing in worker mode. You may wish to disable 'Use worker', or use a more convenient function like console.log(). For more information please refer to the scripting section of the manual."));
                return this.alert(u)
            })
        }
        _InitGlobalVars(l) {
            Object.defineProperties(this.globalVars, l)
        }
        addEventListener(l, m) {
            a.UserScriptDispatcher().addEventListener(l, m)
        }
        removeEventListener(l, m) {
            a.UserScriptDispatcher().removeEventListener(l, m)
        }
        callFunction(l, ...m) {
            b.RequireString(l);
            const u = a.GetEventSheetManager(),
                x = u.GetFunctionBlockByName(l);
            if (!x) throw Error(`cannot find function name '${l}'`);
            if (!x.IsEnabled()) return x.GetDefaultReturnValue();
            if (m.length < x.GetFunctionParameterCount()) throw Error(`not enough function parameters passed for '${l}' (${m.length} passed, ${x.GetFunctionParameterCount()} expected)`);
            const p = x.GetEventBlock();
            l = null;
            var r = u.GetCurrentEvent();
            r && (r = r.GetSolModifiersIncludingParents(), 0 < r.length && (l = r, u.PushCleanSol(r)));
            m = p.RunAsExpressionFunctionCall(p.GetSolModifiersIncludingParents(), x.GetReturnType(), x.GetDefaultReturnValue(), ...m);
            l && u.PopSol(l);
            return m
        }
        setReturnValue(l) {
            const m = a.GetEventStack().GetCurrentExpFuncStackFrame();
            if (!m) throw Error("not in a function which returns a value");
            switch (m.GetFunctionReturnType()) {
                case 1:
                    "number" === typeof l && m.SetFunctionReturnValue(l);
                    break;
                case 2:
                    "string" === typeof l && m.SetFunctionReturnValue(l);
                    break;
                case 3:
                    "number" !== typeof l && "string" !== typeof l || m.SetFunctionReturnValue(l)
            }
        }
        get dt() {
            return a.GetDt()
        }
        get gameTime() {
            return a.GetGameTime()
        }
        get wallTime() {
            return a.GetWallTime()
        }
        random() {
            return a.Random()
        }
        get layout() {
            return a.GetMainRunningLayout().GetILayout()
        }
        getLayout(l) {
            const m = a.GetLayoutManager();
            if ("number" === typeof l || "string" === typeof l) l = m.GetLayout(l);
            else throw new TypeError("expected string or number");
            if (!l) throw Error("invalid layout");
            return l.GetILayout()
        }
        getAllLayouts() {
            return a.GetLayoutManager().GetAllLayouts().map(l => l.GetILayout())
        }
        goToLayout(l) {
            const m = a.GetLayoutManager();
            if ("number" === typeof l || "string" === typeof l) l = m.GetLayout(l);
            else throw new TypeError("expected string or number");
            if (!l) throw Error("invalid layout");
            m.IsPendingChangeMainLayout() || m.ChangeMainLayout(l)
        }
        get keyboard() {
            const l = a._GetCommonScriptInterfaces().keyboard;
            if (!l) throw Error("runtime.keyboard used but Keyboard object missing - add it to your project first");
            return l
        }
        get mouse() {
            const l = a._GetCommonScriptInterfaces().mouse;
            if (!l) throw Error("runtime.mouse used but Mouse object missing - add it to your project first");
            return l
        }
        get touch() {
            const l = a._GetCommonScriptInterfaces().touch;
            if (!l) throw Error("runtime.touch used but Touch object missing - add it to your project first");
            return l
        }
        invokeDownload(l, m) {
            b.RequireString(l);
            b.RequireString(m);
            a.InvokeDownload(l, m)
        }
        getInstanceByUid(l) {
            b.RequireFiniteNumber(l);
            return (l = a.GetInstanceByUID(l)) ? l.GetInterfaceClass() :
                null
        }
        sortZOrder(l, m) {
            b.RequireFunction(m);
            const u = a.GetCurrentLayout();
            for (var x of l) {
                l = a._UnwrapIWorldInstance(x);
                var p = l.GetWorldInfo();
                f.push([p.GetLayer().GetIndex(), p.GetZIndex()]);
                k.push(l)
            }
            if (0 !== f.length) {
                f.sort(c);
                k.sort((r, t) => m(r.GetInterfaceClass(), t.GetInterfaceClass()));
                x = !1;
                for (let r = 0, t = f.length; r < t; ++r) {
                    l = k[r];
                    p = u.GetLayerByIndex(f[r][0]);
                    const q = f[r][1],
                        w = p._GetInstances();
                    w[q] !== l && (w[q] = l, l.GetWorldInfo()._SetLayer(p), p.SetZIndicesChanged(), x = !0)
                }
                x && a.UpdateRender();
                e.clearArray(f);
                e.clearArray(k)
            }
        }
        alert(l) {
            return a.PostComponentMessageToDOMAsync("runtime", "alert", {
                message: l + (a.IsInWorker() ? " [via Web Worker]" : "")
            })
        }
    }
} {
    "use strict";
    const e = self.C3;
    let b = null;
    self.IAssetManager = class {
        constructor(a) {
            b = a;
            Object.defineProperties(this, {
                isWebMOpusSupported: {
                    value: b.IsAudioFormatSupported("audio/webm; codecs=opus"),
                    writable: !1
                }
            })
        }
        fetchText(a) {
            return b.FetchText(a)
        }
        fetchJson(a) {
            return b.FetchJson(a)
        }
        fetchBlob(a) {
            return b.FetchBlob(a)
        }
        fetchArrayBuffer(a) {
            return b.FetchArrayBuffer(a)
        }
        getProjectFileUrl(a) {
            return b.GetProjectFileUrl(a)
        }
        getMediaFileUrl(a) {
            e.IsRelativeURL(a) && (a = a.toLowerCase());
            return b.GetMediaFileUrl(a, b.GetMediaSubfolder())
        }
        get mediaFolder() {
            return b.GetMediaSubfolder()
        }
        async decodeWebMOpus(a,
            d) {
            if (this.isWebMOpusSupported) throw Error("decodeWebMOpus(): not supported because WebM Opus is supported by the platform");
            d = await b.GetRuntime()._WasmDecodeWebMOpus(d);
            d = new Float32Array(d);
            a = a.createBuffer(1, d.length, 48E3);
            a.getChannelData(0).set(d);
            return a
        }
        loadScripts(...a) {
            return b.LoadScripts(...a)
        }
        compileWebAssembly(a) {
            return b.CompileWebAssembly(a)
        }
        loadStyleSheet(a) {
            return b.LoadStyleSheet(a)
        }
    }
} {
    "use strict";
    const e = self.C3X;
    self.IStorage = class {
        constructor(b) {
            this._storage = b._GetProjectStorage()
        }
        getItem(b) {
            e.RequireString(b);
            return this._storage.getItem(b)
        }
        setItem(b, a) {
            e.RequireString(b);
            return this._storage.setItem(b, a)
        }
        removeItem(b) {
            e.RequireString(b);
            return this._storage.removeItem(b)
        }
        clear() {
            return this._storage.clear()
        }
        keys() {
            return this._storage.keys()
        }
    }
} {
    "use strict";
    const e = self.C3X,
        b = new WeakMap;
    self.IObjectClass = class {
        constructor(a) {
            b.set(this, a);
            Object.defineProperties(this, {
                name: {
                    value: a.GetName(),
                    writable: !1
                }
            });
            a.GetRuntime()._MapScriptInterface(this, a)
        }
        addEventListener(a, d) {
            e.RequireString(a);
            e.RequireFunction(d);
            b.get(this).UserScriptDispatcher().addEventListener(a, d)
        }
        removeEventListener(a, d) {
            e.RequireString(a);
            e.RequireFunction(d);
            b.get(this).UserScriptDispatcher().removeEventListener(a, d)
        }
        getAllInstances() {
            return b.get(this).GetInstances().map(a =>
                a.GetInterfaceClass())
        }
        getFirstInstance() {
            const a = b.get(this).GetInstances();
            return 0 < a.length ? a[0].GetInterfaceClass() : null
        }
        getPickedInstances() {
            return b.get(this).GetCurrentSol().GetInstances().map(a => a.GetInterfaceClass())
        }
        getFirstPickedInstance() {
            const a = b.get(this).GetCurrentSol().GetInstances();
            return 0 < a.length ? a[0].GetInterfaceClass() : null
        }* instances() {
            for (const a of b.get(this).GetInstances()) yield a.GetInterfaceClass()
        }* pickedInstances() {
            for (const a of b.get(this).GetCurrentSol().GetInstances()) yield a.GetInterfaceClass()
        }
        setInstanceClass(a) {
            e.RequireFunction(a);
            if (0 < b.get(this).GetInstanceCount()) throw Error("setInstanceClass() called too late, because instances have already been created - call in runOnStartup");
            b.get(this)._SetUserScriptInstanceClass(a)
        }
        createInstance(a, d, c, f) {
            e.RequireNumber(d);
            e.RequireNumber(c);
            if ("number" !== typeof a && "string" !== typeof a) throw new TypeError("invalid layer parameter");
            const k = b.get(this),
                g = k.GetRuntime();
            a = g.GetMainRunningLayout().GetLayer(a);
            if (!a) throw Error("invalid layer");
            d = g.CreateInstance(k, a, d, c, f);
            f && a.SortAndAddInstancesByZIndex(d);
            f = g.GetEventSheetManager();
            f.BlockFlushingInstances(!0);
            d._TriggerOnCreatedOnSelfAndRelated();
            f.BlockFlushingInstances(!1);
            return d.GetInterfaceClass()
        }
    }
} {
    "use strict";
    const e = self.C3X,
        b = new WeakMap;
    self.ILayout = class {
        constructor(a) {
            b.set(this, a);
            const d = [],
                c = a.GetEffectList(),
                f = c.GetAllEffectTypes().length;
            for (let k = 0; k < f; ++k) d.push(new self.IEffectInstance(c, k));
            Object.defineProperties(this, {
                name: {
                    value: a.GetName(),
                    writable: !1
                },
                index: {
                    value: a.GetIndex(),
                    writable: !1
                },
                effects: {
                    value: d,
                    writable: !1
                }
            })
        }
        addEventListener(a, d) {
            e.RequireString(a);
            e.RequireFunction(d);
            b.get(this).UserScriptDispatcher().addEventListener(a, d)
        }
        removeEventListener(a, d) {
            e.RequireString(a);
            e.RequireFunction(d);
            b.get(this).UserScriptDispatcher().removeEventListener(a, d)
        }
        get width() {
            return b.get(this).GetWidth()
        }
        set width(a) {
            b.get(this).SetWidth(a)
        }
        get height() {
            return b.get(this).GetHeight()
        }
        set height(a) {
            b.get(this).SetHeight(a)
        }
        set scale(a) {
            e.RequireFiniteNumber(a);
            b.get(this).SetScale(a)
        }
        get scale() {
            return b.get(this).GetScale()
        }
        set angle(a) {
            e.RequireFiniteNumber(a);
            b.get(this).SetAngle(a)
        }
        get angle() {
            return b.get(this).GetAngle()
        }
        set scrollX(a) {
            e.RequireNumber(a);
            b.get(this).SetScrollX(a)
        }
        get scrollX() {
            return b.get(this).GetScrollX()
        }
        set scrollY(a) {
            e.RequireNumber(a);
            b.get(this).SetScrollY(a)
        }
        get scrollY() {
            return b.get(this).GetScrollY()
        }
        scrollTo(a, d) {
            e.RequireNumber(a);
            e.RequireNumber(d);
            const c = b.get(this);
            c.SetScrollX(a);
            c.SetScrollY(d)
        }
        getLayer(a) {
            const d = b.get(this);
            if ("number" === typeof a || "string" === typeof a) a = d.GetLayer(a);
            else throw new TypeError("expected string or number");
            return a ? a.GetILayer() : null
        }
        getAllLayers() {
            return b.get(this).GetLayers().map(a => a.GetILayer())
        }
        setVanishingPoint(a, d) {
            e.RequireFiniteNumber(a);
            e.RequireFiniteNumber(d);
            b.get(this).SetVanishingPointXY(a,
                d)
        }
        getVanishingPoint() {
            return b.get(this)._GetVanishingPoint()
        }
        set projection(a) {
            e.RequireString(a);
            const d = b.get(this);
            if ("perspective" === a) d.SetPerspectiveProjection();
            else if ("orthographic" === a) d.SetOrthographicProjection();
            else throw Error("invalid projection");
        }
        get projection() {
            return b.get(this).IsOrthographicProjection() ? "orthographic" : "perspective"
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = new WeakMap,
        d = new Map([
            ["normal", 0],
            ["additive", 1],
            ["copy", 3],
            ["destination-over", 4],
            ["source-in", 5],
            ["destination-in", 6],
            ["source-out", 7],
            ["destination-out", 8],
            ["source-atop", 9],
            ["destination-atop", 10]
        ]),
        c = new Map([...d.entries()].map(k => [k[1], k[0]])),
        f = e.New(e.Color);
    self.ILayer = class {
        constructor(k) {
            a.set(this, k);
            const g = [],
                l = k.GetEffectList(),
                m = l.GetAllEffectTypes().length;
            for (let u = 0; u < m; ++u) g.push(new self.IEffectInstance(l, u));
            Object.defineProperties(this, {
                name: {
                    value: k.GetName(),
                    writable: !1
                },
                index: {
                    value: k.GetIndex(),
                    writable: !1
                },
                layout: {
                    value: k.GetLayout().GetILayout(),
                    writable: !1
                },
                effects: {
                    value: g,
                    writable: !1
                }
            })
        }
        static _Unwrap(k) {
            return a.get(k)
        }
        get isVisible() {
            return a.get(this).IsVisible()
        }
        set isVisible(k) {
            a.get(this).SetVisible(k)
        }
        get opacity() {
            return a.get(this).GetOpacity()
        }
        set opacity(k) {
            k = e.clamp(+k, 0, 1);
            isNaN(k) || a.get(this).SetOpacity(k)
        }
        set scale(k) {
            b.RequireFiniteNumber(k);
            a.get(this).SetOwnScale(k)
        }
        get scale() {
            return a.get(this).GetOwnScale()
        }
        set scaleRate(k) {
            b.RequireFiniteNumber(k);
            a.get(this).SetScaleRate(k)
        }
        get scaleRate() {
            return a.get(this).GetScaleRate()
        }
        set angle(k) {
            b.RequireFiniteNumber(k);
            a.get(this).SetAngle(k)
        }
        get angle() {
            return a.get(this).GetOwnAngle()
        }
        set parallaxX(k) {
            b.RequireFiniteNumber(k);
            a.get(this).SetParallaxX(k)
        }
        get parallaxX() {
            return a.get(this).GetParallaxX()
        }
        set parallaxY(k) {
            b.RequireFiniteNumber(k);
            a.get(this).SetParallaxY(k)
        }
        get parallaxY() {
            return a.get(this).GetParallaxY()
        }
        set zElevation(k) {
            b.RequireFiniteNumber(k);
            a.get(this).SetZElevation(k)
        }
        get zElevation() {
            return a.get(this).GetZElevation()
        }
        set isTransparent(k) {
            a.get(this).SetTransparent(k)
        }
        get isTransparent() {
            return a.get(this).IsTransparent()
        }
        set isForceOwnTexture(k) {
            a.get(this).SetForceOwnTexture(k)
        }
        get isForceOwnTexture() {
            return a.get(this).IsForceOwnTexture()
        }
        set blendMode(k) {
            b.RequireString(k);
            k = d.get(k);
            if ("number" !== typeof k) throw Error("invalid blend mode");
            a.get(this).SetBlendMode(k)
        }
        get blendMode() {
            return c.get(a.get(this).GetBlendMode())
        }
        set backgroundColor(k) {
            b.RequireArray(k);
            if (3 > k.length) throw Error("expected 3 elements");
            f.setRgb(k[0], k[1], k[2]);
            k = a.get(this);
            const g = k.GetBackgroundColor();
            g.equalsIgnoringAlpha(f) || (g.copyRgb(f), k.GetRuntime().UpdateRender())
        }
        get backgroundColor() {
            const k = a.get(this).GetBackgroundColor();
            return [k.getR(), k.getG(), k.getB()]
        }
        set scrollX(k) {
            b.RequireNumber(k);
            const g = a.get(this);
            g.SetOwnScrollPositionEnabled(!0);
            g.SetScrollX(k)
        }
        get scrollX() {
            return a.get(this).GetScrollX()
        }
        set scrollY(k) {
            b.RequireNumber(k);
            const g = a.get(this);
            g.SetOwnScrollPositionEnabled(!0);
            g.SetScrollY(k)
        }
        get scrollY() {
            return a.get(this).GetScrollY()
        }
        scrollTo(k, g) {
            b.RequireNumber(k);
            b.RequireNumber(g);
            const l = a.get(this);
            l.SetOwnScrollPositionEnabled(!0);
            l.SetScrollX(k);
            l.SetScrollY(g)
        }
        restoreScrollPosition() {
            a.get(this).SetOwnScrollPositionEnabled(!1)
        }
        getViewport() {
            return a.get(this).GetViewport().toDOMRect()
        }
        cssPxToLayer(k,
            g, l = 0) {
            b.RequireNumber(k);
            b.RequireNumber(g);
            b.RequireNumber(l);
            const m = a.get(this),
                u = m.GetRuntime();
            return m.CanvasCssToLayer(k - u.GetCanvasClientX(), g - u.GetCanvasClientY(), l)
        }
        layerToCssPx(k, g, l = 0) {
            b.RequireNumber(k);
            b.RequireNumber(g);
            b.RequireNumber(l);
            const m = a.get(this),
                u = m.GetRuntime(),
                [x, p] = m.LayerToCanvasCss(k, g, l);
            return [x + u.GetCanvasClientX(), p + u.GetCanvasClientY()]
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = new WeakMap,
        d = new WeakMap;

    function c(k) {
        let g = d.get(k);
        if (g) return g;
        g = e.New(e.Event.Dispatcher);
        d.set(k, g);
        return g
    }
    let f = null;
    self.IInstance = class {
        constructor() {
            a.set(this, f);
            const k = {
                runtime: {
                    value: f.GetRuntime().GetIRuntime(),
                    writable: !1
                },
                objectType: {
                    value: f.GetObjectClass().GetIObjectClass(),
                    writable: !1
                },
                uid: {
                    value: f.GetUID(),
                    writable: !1
                }
            };
            f._GetInstVarsScriptDescriptor(k);
            f._GetBehaviorsScriptDescriptor(k);
            Object.defineProperties(this, k);
            f.GetRuntime()._MapScriptInterface(this,
                f)
        }
        static _Init(k) {
            f = k
        }
        static _GetInitInst() {
            return f
        }
        _Release() {
            const k = d.get(this);
            k && (k.Release(), d.delete(this));
            a.delete(this)
        }
        addEventListener(k, g, l) {
            b.RequireString(k);
            b.RequireFunction(g);
            c(this).addEventListener(k, g, l)
        }
        removeEventListener(k, g, l) {
            b.RequireString(k);
            b.RequireFunction(g);
            c(this).removeEventListener(k, g, l)
        }
        dispatchEvent(k) {
            c(this).dispatchEvent(k)
        }
        destroy() {
            const k = a.get(this);
            k.GetRuntime().DestroyInstance(k)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = self.IInstance,
        d = self.ILayer,
        c = new WeakMap,
        f = new Map([
            ["normal", 0],
            ["additive", 1],
            ["copy", 3],
            ["destination-over", 4],
            ["source-in", 5],
            ["destination-in", 6],
            ["source-out", 7],
            ["destination-out", 8],
            ["source-atop", 9],
            ["destination-atop", 10]
        ]),
        k = new Map([...f.entries()].map(l => [l[1], l[0]])),
        g = e.New(e.Color);
    self.IWorldInstance = class l extends a {
        constructor() {
            super();
            var m = a._GetInitInst();
            c.set(this, m);
            const u = [];
            var x = m.GetWorldInfo();
            if (m = x.GetInstanceEffectList()) {
                x =
                    x.GetObjectClass().GetEffectList().GetAllEffectTypes().length;
                for (let p = 0; p < x; ++p) u.push(new self.IEffectInstance(m, p))
            }
            Object.defineProperties(this, {
                effects: {
                    value: u,
                    writable: !1
                }
            })
        }
        get layout() {
            return c.get(this).GetWorldInfo().GetLayout().GetILayout()
        }
        get layer() {
            return c.get(this).GetWorldInfo().GetLayer().GetILayer()
        }
        get x() {
            return c.get(this).GetWorldInfo().GetX()
        }
        set x(m) {
            m = +m;
            const u = c.get(this).GetWorldInfo();
            isNaN(m) || u.GetX() === m || (u.SetX(m), u.SetBboxChanged())
        }
        get y() {
            return c.get(this).GetWorldInfo().GetY()
        }
        set y(m) {
            m = +m;
            const u = c.get(this).GetWorldInfo();
            isNaN(m) || u.GetY() === m || (u.SetY(m), u.SetBboxChanged())
        }
        get zElevation() {
            return c.get(this).GetWorldInfo().GetZElevation()
        }
        set zElevation(m) {
            m = +m;
            const u = c.get(this),
                x = u.GetWorldInfo();
            isNaN(m) || x.GetZElevation() === m || (x.SetZElevation(m), u.GetRuntime().UpdateRender())
        }
        get totalZElevation() {
            return c.get(this).GetWorldInfo().GetTotalZElevation()
        }
        get width() {
            return c.get(this).GetWorldInfo().GetWidth()
        }
        set width(m) {
            m = +m;
            const u = c.get(this).GetWorldInfo();
            isNaN(m) ||
                u.GetWidth() === m || (u.SetWidth(m), u.SetBboxChanged())
        }
        get height() {
            return c.get(this).GetWorldInfo().GetHeight()
        }
        set height(m) {
            m = +m;
            const u = c.get(this).GetWorldInfo();
            isNaN(m) || u.GetHeight() === m || (u.SetHeight(m), u.SetBboxChanged())
        }
        get angle() {
            return c.get(this).GetWorldInfo().GetAngle()
        }
        set angle(m) {
            m = e.clampAngle(+m);
            const u = c.get(this).GetWorldInfo();
            isNaN(m) || u.GetAngle() === m || (u.SetAngle(m), u.SetBboxChanged())
        }
        get angleDegrees() {
            return e.toDegrees(this.angle)
        }
        set angleDegrees(m) {
            this.angle = e.toRadians(m)
        }
        getBoundingBox() {
            return c.get(this).GetWorldInfo().GetBoundingBox().toDOMRect()
        }
        getBoundingQuad() {
            return c.get(this).GetWorldInfo().GetBoundingQuad().toDOMQuad()
        }
        get isVisible() {
            return c.get(this).GetWorldInfo().IsVisible()
        }
        set isVisible(m) {
            m = !!m;
            const u = c.get(this),
                x = u.GetWorldInfo();
            x.IsVisible() !== m && (x.SetVisible(m), u.GetRuntime().UpdateRender())
        }
        get opacity() {
            return c.get(this).GetWorldInfo().GetOpacity()
        }
        set opacity(m) {
            m = e.clamp(+m, 0, 1);
            const u = c.get(this),
                x = u.GetWorldInfo();
            isNaN(m) || x.GetOpacity() === m || (x.SetOpacity(m), u.GetRuntime().UpdateRender())
        }
        set colorRgb(m) {
            b.RequireArray(m);
            if (3 > m.length) throw Error("expected 3 elements");
            g.setRgb(m[0], m[1], m[2]);
            m = c.get(this);
            const u = m.GetWorldInfo();
            u.GetUnpremultipliedColor().equalsIgnoringAlpha(g) ||
                (u.SetUnpremultipliedColor(g), m.GetRuntime().UpdateRender())
        }
        get colorRgb() {
            const m = c.get(this).GetWorldInfo().GetUnpremultipliedColor();
            return [m.getR(), m.getG(), m.getB()]
        }
        set blendMode(m) {
            b.RequireString(m);
            m = f.get(m);
            if ("number" !== typeof m) throw Error("invalid blend mode");
            const u = c.get(this);
            u.GetWorldInfo().SetBlendMode(m);
            u.GetRuntime().UpdateRender()
        }
        get blendMode() {
            return k.get(c.get(this).GetWorldInfo().GetBlendMode())
        }
        moveToTop() {
            c.get(this).GetWorldInfo().ZOrderMoveToTop()
        }
        moveToBottom() {
            c.get(this).GetWorldInfo().ZOrderMoveToBottom()
        }
        moveToLayer(m) {
            b.RequireInstanceOf(m,
                d);
            m = d._Unwrap(m);
            if (!m) throw Error("invalid layer");
            c.get(this).GetWorldInfo().ZOrderMoveToLayer(m)
        }
        moveAdjacentToInstance(m, u) {
            b.RequireInstanceOf(m, l);
            c.get(this).GetWorldInfo().ZOrderMoveAdjacentToInstance(c.get(m), u)
        }
        get zIndex() {
            return c.get(this).GetWorldInfo().GetZIndex()
        }
        containsPoint(m, u) {
            b.RequireNumber(m);
            b.RequireNumber(u);
            return c.get(this).GetWorldInfo().ContainsPoint(+m, +u)
        }
        testOverlap(m) {
            b.RequireInstanceOf(m, l);
            const u = c.get(this);
            m = c.get(m);
            return u.GetRuntime().GetCollisionEngine().TestOverlap(u,
                m)
        }
        testOverlapSolid() {
            var m = c.get(this);
            return (m = m.GetRuntime().GetCollisionEngine().TestOverlapSolid(m)) ? m.GetInterfaceClass() : null
        }
        getParent() {
            const m = c.get(this).GetParent();
            return m ? m.GetInterfaceClass() : null
        }
        getTopParent() {
            const m = c.get(this).GetTopParent();
            return m ? m.GetInterfaceClass() : null
        }* parents() {
            for (const m of c.get(this).parents()) yield m.GetInterfaceClass()
        }
        getChildCount() {
            return c.get(this).GetChildCount()
        }
        getChildAt(m) {
            return (m = c.get(this).GetChildAt(m)) ? m.GetInterfaceClass() : null
        }* children() {
            for (const m of c.get(this).children()) yield m.GetInterfaceClass()
        }* allChildren() {
            for (const m of c.get(this).allChildren()) yield m.GetInterfaceClass()
        }
        addChild(m,
            u) {
            b.RequireInstanceOf(m, l);
            b.RequireOptionalObject(u);
            u || (u = {});
            const x = c.get(this);
            m = c.get(m);
            x.AddChild(m, u)
        }
        removeChild(m) {
            b.RequireInstanceOf(m, l);
            const u = c.get(this);
            m = c.get(m);
            u.RemoveChild(m)
        }
        removeFromParent() {
            const m = c.get(this);
            m.HasParent() && m.GetParent().RemoveChild(m)
        }
        createMesh(m, u) {
            b.RequireFiniteNumber(m);
            b.RequireFiniteNumber(u);
            c.get(this).GetWorldInfo().CreateMesh(m, u)
        }
        releaseMesh() {
            const m = c.get(this).GetWorldInfo();
            m.ReleaseMesh();
            m.SetBboxChanged()
        }
        setMeshPoint(m, u, x) {
            b.RequireFiniteNumber(m);
            b.RequireFiniteNumber(u);
            b.RequireObject(x);
            const p = c.get(this).GetWorldInfo();
            p.SetMeshPoint(m, u, x) && p.SetBboxChanged()
        }
        getMeshSize() {
            var m = c.get(this).GetWorldInfo();
            if (!m.HasMesh()) return [0, 0];
            m = m.GetSourceMesh();
            return [m.GetHSize(), m.GetVSize()]
        }
    }
} {
    "use strict";
    const e = self.C3X,
        b = new WeakMap;
    self.IDOMInstance = class extends self.IWorldInstance {
        constructor() {
            super();
            b.set(this, self.IInstance._GetInitInst())
        }
        getElement() {
            return b.get(this).GetSdkInstance()._GetElementInDOMMode()
        }
        focus() {
            b.get(this).GetSdkInstance().FocusElement()
        }
        blur() {
            b.get(this).GetSdkInstance().BlurElement()
        }
        setCssStyle(a, d) {
            e.RequireString(a);
            b.get(this).GetSdkInstance().SetElementCSSStyle(a, d)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = new WeakMap,
        d = new WeakMap;

    function c(k) {
        let g = d.get(k);
        if (g) return g;
        g = e.New(e.Event.Dispatcher);
        d.set(k, g);
        return g
    }
    let f = null;
    self.IBehaviorInstance = class {
        constructor() {
            a.set(this, f);
            const k = {
                runtime: {
                    value: f.GetRuntime().GetIRuntime(),
                    writable: !1
                },
                behavior: {
                    value: f.GetBehavior().GetIBehavior(),
                    writable: !1
                }
            };
            Object.defineProperties(this, k)
        }
        static _Init(k) {
            f = k
        }
        static _GetInitInst() {
            return f
        }
        get instance() {
            return a.get(this).GetObjectInstance().GetInterfaceClass()
        }
        _Release() {
            const k =
                d.get(this);
            k && (k.Release(), d.delete(this));
            a.delete(this)
        }
        addEventListener(k, g, l) {
            b.RequireString(k);
            b.RequireFunction(g);
            c(this).addEventListener(k, g, l)
        }
        removeEventListener(k, g, l) {
            b.RequireString(k);
            b.RequireFunction(g);
            c(this).removeEventListener(k, g, l)
        }
        dispatchEvent(k) {
            c(this).dispatchEvent(k)
        }
    }
} {
    "use strict";
    const e = new WeakMap;
    self.IBehavior = class {
        constructor(b) {
            e.set(this, b);
            b = {
                runtime: {
                    value: b.GetRuntime().GetIRuntime(),
                    writable: !1
                }
            };
            Object.defineProperties(this, b)
        }
        getAllInstances() {
            return e.get(this).GetInstances().map(b => b.GetInterfaceClass())
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = new WeakMap;
    self.IEffectInstance = class {
        constructor(d, c) {
            a.set(this, d);
            Object.defineProperties(this, {
                index: {
                    value: c,
                    writable: !1
                }
            })
        }
        get name() {
            return a.get(this).GetAllEffectTypes()[this.index].GetName()
        }
        get isActive() {
            return a.get(this).IsEffectIndexActive(this.index)
        }
        set isActive(d) {
            d = !!d;
            const c = a.get(this);
            c.IsEffectIndexActive(this.index) !== d && (c.SetEffectIndexActive(this.index, d), c.UpdateActiveEffects(), c.GetRuntime().UpdateRender())
        }
        setParameter(d, c) {
            b.RequireFiniteNumber(d);
            d = Math.floor(+d);
            const f = a.get(this);
            var k = f.GetEffectParametersForIndex(this.index);
            if (0 > d || d >= k.length) throw new RangeError("invalid effect parameter index");
            const g = k[d];
            if (g instanceof e.Color) {
                if (!Array.isArray(c) || 3 > c.length) throw new TypeError("expected array with 3 elements");
                d = c[0];
                k = c[1];
                c = c[2];
                if (g.equalsRgb(d, k, c)) return;
                g.setRgb(d, k, c)
            } else {
                if ("number" !== typeof c) throw new TypeError("expected number");
                if (g === c) return;
                k[d] = c
            }
            f.IsEffectIndexActive(this.index) && f.GetRuntime().UpdateRender()
        }
        getParameter(d) {
            b.RequireFiniteNumber(d);
            d = Math.floor(+d);
            const c = a.get(this).GetEffectParametersForIndex(this.index);
            if (0 > d || d >= c.length) throw new RangeError("invalid effect parameter index");
            d = c[d];
            return d instanceof e.Color ? [d.getR(), d.getG(), d.getB()] : d
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = new Set(["local", "remote"]),
        a = new Map([
            ["mp4", "video/mp4"],
            ["webm", "video/webm"],
            ["m4a", "audio/mp4"],
            ["mp3", "audio/mpeg"],
            ["js", "application/javascript"],
            ["wasm", "application/wasm"],
            ["svg", "image/svg+xml"],
            ["html", "text/html"]
        ]);

    function d(f) {
        if (!f) return "";
        f = f.split(".");
        if (2 > f.length) return "";
        f = f.at(-1).toLowerCase();
        return a.get(f) || ""
    }

    function c(f) {
        return new Promise((k, g) => {
            const l = document.createElement("script");
            l.onload = k;
            l.onerror = g;
            l.async = !1;
            l.type = "module";
            l.src = f;
            document.head.appendChild(l)
        })
    }
    e.AssetManager = class extends e.DefendedBase {
        constructor(f, k) {
            super();
            var g = k.exportType;
            this._runtime = f;
            this._localUrlBlobs = new Map;
            this._localBlobUrlCache = new Map;
            this._localBlobSWUrls = new Map;
            this._isCordova = "cordova" === g;
            this._isiOSCordova = !!k.isiOSCordova;
            this._isFileProtocol = !!k.isFileProtocol;
            this._swClientId = k.swClientId;
            this._supportedAudioFormats = k.supportedAudioFormats || {};
            this._audioFiles = new Map;
            this._preloadSounds = !1;
            this._iconsSubfolder = this._fontsSubfolder =
                this._mediaSubfolder = "";
            this._defaultLoadPolicy = "html5" === g || "scirra-arcade" === g || "instant-games" === g ? "remote" : "local";
            this._allAssets = [];
            this._assetsByUrl = new Map;
            this._webFonts = [];
            this._loadPromises = [];
            this._hasFinishedInitialLoad = !1;
            this._lastLoadProgress = this._assetSizeLoaded = this._totalAssetSizeToLoad = 0;
            this._hasHadErrorLoading = !1;
            this._loadingRateLimiter = e.New(e.RateLimiter, () => this._FireLoadingProgressEvent(), 50);
            this._promiseThrottle = new e.PromiseThrottle(Math.max(e.hardwareConcurrency, 8));
            if (f = k.previewImageBlobs) {
                (g = k.previewProjectFileBlobs) && Object.assign(f, g);
                (g = k.projectData) && (f["data.json"] = g);
                for (const [l, m] of Object.entries(f)) this._localUrlBlobs.set(l.toLowerCase(), m)
            }
            if (k = k.previewProjectFileSWUrls)
                for (const [l, m] of Object.entries(k)) this._localBlobSWUrls.set(l, m);
            this._iAssetManager = new self.IAssetManager(this)
        }
        Release() {
            this._localUrlBlobs.clear();
            for (const f of this._localBlobUrlCache.values()) f.startsWith("blob:") && URL.revokeObjectURL(f);
            this._localBlobUrlCache.clear();
            for (const f of this._allAssets) f.Release();
            e.clearArray(this._allAssets);
            this._assetsByUrl.clear();
            e.clearArray(this._loadPromises);
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        _SetMediaSubfolder(f) {
            this._mediaSubfolder = f
        }
        GetMediaSubfolder() {
            return this._mediaSubfolder
        }
        _SetFontsSubfolder(f) {
            this._fontsSubfolder = f
        }
        GetFontsSubfolder() {
            return this._fontsSubfolder
        }
        _SetIconsSubfolder(f) {
            this._iconsSubfolder = f
        }
        GetIconsSubfolder() {
            return this._iconsSubfolder
        }
        IsFileProtocol() {
            return this._isFileProtocol
        }
        _HasLocalUrlBlob(f) {
            return this._localUrlBlobs.has(f.toLowerCase())
        }
        _GetLocalUrlBlob(f) {
            return this._localUrlBlobs.get(f.toLowerCase()) ||
                null
        }
        GetLocalUrlAsBlobUrl(f) {
            if (!this._HasLocalUrlBlob(f)) return f;
            f = f.toLowerCase();
            var k = this._localBlobUrlCache.get(f);
            k || (k = this._GetLocalUrlBlob(f), k = URL.createObjectURL(k), this._localBlobUrlCache.set(f, k));
            return k
        }
        FetchBlob(f, k) {
            k = k || this._defaultLoadPolicy;
            const g = this._GetLocalUrlBlob(f);
            if (g) return Promise.resolve(g);
            if (e.IsRelativeURL(f)) {
                const l = f.toLowerCase();
                return this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsBlob(l) : "local" === k ? this._promiseThrottle.Add(() => e.FetchBlob(l)) :
                    e.FetchBlob(l)
            }
            return e.FetchBlob(f)
        }
        FetchArrayBuffer(f) {
            const k = this._GetLocalUrlBlob(f);
            if (k) return e.BlobToArrayBuffer(k);
            if (e.IsRelativeURL(f)) {
                const g = f.toLowerCase();
                return this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsArrayBuffer(g) : "local" === this._defaultLoadPolicy ? this._promiseThrottle.Add(() => e.FetchArrayBuffer(g)) : e.FetchArrayBuffer(g)
            }
            return e.FetchArrayBuffer(f)
        }
        FetchText(f) {
            const k = this._GetLocalUrlBlob(f);
            if (k) return e.BlobToString(k);
            if (e.IsRelativeURL(f)) {
                const g =
                    f.toLowerCase();
                return this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsText(g) : "local" === this._defaultLoadPolicy ? this._promiseThrottle.Add(() => e.FetchText(g)) : e.FetchText(g)
            }
            return e.FetchText(f)
        }
        async FetchJson(f) {
            f = await this.FetchText(f);
            return JSON.parse(f)
        }
        _CordovaFetchLocalFileAs(f, k) {
            return this._runtime.PostComponentMessageToDOMAsync("runtime", "cordova-fetch-local-file", {
                filename: f,
                as: k
            })
        }
        CordovaFetchLocalFileAsText(f) {
            return this._CordovaFetchLocalFileAs(f, "text")
        }
        async CordovaFetchLocalFileAsBlob(f) {
            const k =
                await this._CordovaFetchLocalFileAs(f, "buffer");
            f = d(f);
            return new Blob([k], {
                type: f
            })
        }
        async CordovaFetchLocalFileAsBlobURL(f) {
            f = f.toLowerCase();
            var k = this._localBlobUrlCache.get(f);
            if (k) return k;
            k = await this.CordovaFetchLocalFileAsBlob(f);
            k = URL.createObjectURL(k);
            this._localBlobUrlCache.set(f, k);
            return k
        }
        CordovaFetchLocalFileAsArrayBuffer(f) {
            return this._CordovaFetchLocalFileAs(f, "buffer")
        }
        GetMediaFileUrl(f) {
            return this._HasLocalUrlBlob(f) ? this.GetLocalUrlAsBlobUrl(f) : this._mediaSubfolder + f.toLowerCase()
        }
        GetProjectFileUrl(f,
            k = "") {
            if (e.IsAbsoluteURL(f)) {
                if (k) throw Error("cannot specify subfolder with remote URL");
                return Promise.resolve(f)
            }
            return this._HasLocalUrlBlob(f) ? Promise.resolve(this.GetLocalUrlAsBlobUrl(f)) : this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsBlobURL(k + f) : Promise.resolve(k + f.toLowerCase())
        }
        GetProjectFileIframeUrl(f) {
            if (e.IsAbsoluteURL(f)) return Promise.resolve(f);
            var k = f.indexOf("?"),
                g = -1 === k ? "" : f.substr(k);
            k = -1 === k ? f : f.substr(0, k);
            return this._HasLocalUrlBlob(k) ? (f = this._localBlobSWUrls.get(k) ||
                this.GetLocalUrlAsBlobUrl(k), !f.startsWith("blob:") && this._swClientId && (f = new URL(f), g = new URLSearchParams(g), g.set("__c3_client_id", this._swClientId), f.search = g.toString(), f = f.toString()), Promise.resolve(f)) : this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsBlobURL(k) : Promise.resolve(f.toLowerCase())
        }
        LoadProjectFileUrl(f) {
            return this.GetProjectFileUrl(f)
        }
        LoadImage(f) {
            if (f.loadPolicy && !b.has(f.loadPolicy)) throw Error("invalid load policy");
            let k = this._assetsByUrl.get(f.url);
            if (k) return k;
            k = e.New(e.ImageAsset, this, {
                url: f.url,
                size: f.size || 0,
                loadPolicy: f.loadPolicy || this._defaultLoadPolicy
            });
            this._allAssets.push(k);
            this._assetsByUrl.set(k.GetURL(), k);
            this._hasFinishedInitialLoad || (this._totalAssetSizeToLoad += k.GetSize(), this._loadPromises.push(k.Load().then(() => this._AddLoadedSize(k.GetSize()))));
            return k
        }
        async WaitForAllToLoad() {
            try {
                await Promise.all(this._loadPromises), this._lastLoadProgress = 1
            } catch (f) {
                console.error("Error loading: ", f), this._hasHadErrorLoading = !0, this._FireLoadingProgressEvent()
            }
        }
        SetInitialLoadFinished() {
            this._hasFinishedInitialLoad = !0
        }
        HasHadErrorLoading() {
            return this._hasHadErrorLoading
        }
        _AddLoadedSize(f) {
            this._assetSizeLoaded += f;
            this._loadingRateLimiter.Call()
        }
        _FireLoadingProgressEvent() {
            const f = e.New(e.Event, "loadingprogress");
            this._lastLoadProgress = e.clamp(this._assetSizeLoaded / this._totalAssetSizeToLoad, 0, 1);
            f.progress = this._lastLoadProgress;
            this._runtime.Dispatcher().dispatchEvent(f)
        }
        GetLoadProgress() {
            return this._lastLoadProgress
        }
        _SetWebFonts(f) {
            e.shallowAssignArray(this._webFonts, f);
            this._webFonts.length && this._loadPromises.push(this._LoadWebFonts())
        }
        _LoadWebFonts() {
            if ("undefined" ===
                typeof FontFace) return Promise.resolve();
            const f = [];
            for (const [k, g, l] of this._webFonts) this._totalAssetSizeToLoad += l, f.push(this._LoadWebFont(k, g).then(() => this._AddLoadedSize(l)));
            return Promise.all(f)
        }
        async _LoadWebFont(f, k) {
            try {
                const g = await this.GetProjectFileUrl(k, this._fontsSubfolder),
                    l = new FontFace(f, `url('${g}')`);
                this._runtime.IsInWorker() ? self.fonts.add(l) : document.fonts.add(l);
                await l.load()
            } catch (g) {
                console.warn(`[C3 runtime] Failed to load web font '${f}': `, g)
            }
        }
        IsAudioFormatSupported(f) {
            return !!this._supportedAudioFormats[f]
        }
        _SetAudioFiles(f,
            k) {
            this._preloadSounds = !!k;
            for (const [g, l, m] of f) this._audioFiles.set(g, {
                fileName: g,
                formats: l.map(u => ({
                    type: u[0],
                    fileExtension: u[1],
                    fullName: g + u[1],
                    fileSize: u[2]
                })),
                isMusic: m
            })
        }
        GetPreferredAudioFile(f) {
            f = this._audioFiles.get(f.toLowerCase());
            if (!f) return null;
            let k = null;
            for (const g of f.formats)
                if (k || "audio/webm; codecs=opus" !== g.type || (k = g), this.IsAudioFormatSupported(g.type)) return g;
            return k
        }
        GetProjectAudioFileUrl(f) {
            return (f = this.GetPreferredAudioFile(f)) ? {
                url: this.GetMediaFileUrl(f.fullName),
                type: f.type
            } : null
        }
        GetAudioToPreload() {
            if (this._preloadSounds) {
                const f = [];
                for (const k of this._audioFiles.values()) {
                    if (k.isMusic) continue;
                    const g = this.GetPreferredAudioFile(k.fileName);
                    g && f.push({
                        originalUrl: k.fileName,
                        url: this.GetMediaFileUrl(g.fullName),
                        type: g.type,
                        fileSize: g.fileSize
                    })
                }
                return f
            }
            return []
        }
        GetIAssetManager() {
            return this._iAssetManager
        }
        async LoadScripts(...f) {
            const k = await Promise.all(f.map(g => this.GetProjectFileUrl(g)));
            this._runtime.IsInWorker() ? 1 === f.length ? (f = f[0], await self.c3_import((e.IsRelativeURL(f) ?
                "./" : "") + f)) : (f = f.map(g => `import "${e.IsRelativeURL(g)?"./":""}${g}";`).join("\n"), f = URL.createObjectURL(new Blob([f], {
                type: "application/javascript"
            })), await self.c3_import(f)) : await Promise.all(k.map(g => c(g)))
        }
        async CompileWebAssembly(f) {
            if (WebAssembly.compileStreaming) return f = await this.GetProjectFileUrl(f), await WebAssembly.compileStreaming(fetch(f));
            f = await e.FetchArrayBuffer(f);
            return await WebAssembly.compile(f)
        }
        async LoadStyleSheet(f) {
            f = await this.GetProjectFileUrl(f);
            return await this._runtime.PostComponentMessageToDOMAsync("runtime",
                "add-stylesheet", {
                    url: f
                })
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Asset = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._assetManager = b;
            this._runtime = b.GetRuntime();
            this._url = a.url;
            this._size = a.size;
            this._loadPolicy = a.loadPolicy;
            this._blob = null;
            this._isLoaded = !1;
            this._loadPromise = null
        }
        Release() {
            this._blob = this._runtime = this._assetManager = this._loadPromise = null
        }
        GetURL() {
            return this._url
        }
        GetSize() {
            return this._size
        }
        Load() {
            return "local" === this._loadPolicy || this._blob ? (this._isLoaded = !0, Promise.resolve()) : this._loadPromise ?
                this._loadPromise : this._loadPromise = this._assetManager.FetchBlob(this._url, this._loadPolicy).then(b => {
                    this._isLoaded = !0;
                    this._loadPromise = null;
                    return this._blob = b
                }).catch(b => console.error("Error loading resource: ", b))
        }
        IsLoaded() {
            return this._isLoaded
        }
        GetBlob() {
            return this._blob ? Promise.resolve(this._blob) : this._loadPromise ? this._loadPromise : this._assetManager.FetchBlob(this._url, this._loadPolicy)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = new e.PromiseThrottle,
        a = new Set;
    e.ImageAsset = class extends e.Asset {
        constructor(d, c) {
            super(d, c);
            this._webglTexture = this._texturePromise = null;
            this._refCount = 0;
            this._imageHeight = this._imageWidth = -1;
            a.add(this)
        }
        Release() {
            this.ReleaseTexture();
            if (0 !== this._refCount) throw Error("released image asset which still has texture references");
            this._texturePromise = null;
            a.delete(this);
            super.Release()
        }
        static OnWebGLContextLost() {
            for (const d of a) d._texturePromise = null, d._webglTexture =
                null, d._refCount = 0
        }
        LoadStaticTexture(d, c) {
            c = c || {};
            this._refCount++;
            if (this._webglTexture) return Promise.resolve(this._webglTexture);
            if (this._texturePromise) return this._texturePromise;
            c.anisotropy = this._runtime.GetCanvasManager().GetTextureAnisotropy();
            return this._texturePromise = this.GetBlob().then(f => b.Add(() => d.CreateStaticTextureAsync(f, c).then(k => {
                this._texturePromise = null;
                if (0 === this._refCount) return d.DeleteTexture(k), null;
                this._webglTexture = k;
                this._imageWidth = k.GetWidth();
                this._imageHeight =
                    k.GetHeight();
                return this._webglTexture
            }))).catch(f => {
                console.error("Failed to load texture: ", f);
                throw f;
            })
        }
        ReleaseTexture() {
            if (0 >= this._refCount) throw Error("texture released too many times");
            this._refCount--;
            0 === this._refCount && this._webglTexture && (this._webglTexture.GetRenderer().DeleteTexture(this._webglTexture), this._webglTexture = null)
        }
        GetTexture() {
            return this._webglTexture
        }
        GetWidth() {
            return this._imageWidth
        }
        GetHeight() {
            return this._imageHeight
        }
        async LoadToDrawable() {
            const d = await this.GetBlob();
            return e.Supports.ImageBitmapOptions ? await createImageBitmap(d, {
                premultiplyAlpha: "none"
            }) : e.Supports.ImageBitmap ? await createImageBitmap(d) : await e.BlobToImage(d)
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(a, d) {
        return a.GetWorldInfo()._GetLastCachedZIndex() - d.GetWorldInfo()._GetLastCachedZIndex()
    }
    e.RenderCell = class extends e.DefendedBase {
        constructor(a, d, c) {
            super();
            this._grid = a;
            this._x = d;
            this._y = c;
            this._instances = [];
            this._isSorted = !0;
            this._pendingRemoval = new Set;
            this._isAnyPendingRemoval = !1
        }
        Release() {
            e.clearArray(this._instances);
            this._pendingRemoval.clear();
            this._grid = null
        }
        Reset() {
            e.clearArray(this._instances);
            this._isSorted = !0;
            this._pendingRemoval.clear();
            this._isAnyPendingRemoval = !1
        }
        SetChanged() {
            this._isSorted = !1
        }
        IsEmpty() {
            if (!this._instances.length) return !0;
            if (this._instances.length > this._pendingRemoval.size) return !1;
            this._FlushPending();
            return !0
        }
        Insert(a) {
            this._pendingRemoval.has(a) ? (this._pendingRemoval.delete(a), 0 === this._pendingRemoval.size && (this._isAnyPendingRemoval = !1)) : (this._instances.push(a), this._isSorted = 1 === this._instances.length)
        }
        Remove(a) {
            this._pendingRemoval.add(a);
            this._isAnyPendingRemoval = !0;
            50 <= this._pendingRemoval.size && this._FlushPending()
        }
        _FlushPending() {
            this._isAnyPendingRemoval &&
                (this._instances.length === this._pendingRemoval.size ? this.Reset() : (e.arrayRemoveAllInSet(this._instances, this._pendingRemoval), this._pendingRemoval.clear(), this._isAnyPendingRemoval = !1))
        }
        _EnsureSorted() {
            this._isSorted || (this._instances.sort(b), this._isSorted = !0)
        }
        Dump(a) {
            this._FlushPending();
            this._EnsureSorted();
            this._instances.length && a.push(this._instances)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.RenderGrid = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._cellWidth = b;
            this._cellHeight = a;
            this._cells = e.New(e.PairMap)
        }
        Release() {
            this._cells.Release();
            this._cells = null
        }
        GetCell(b, a, d) {
            let c = this._cells.Get(b, a);
            return c ? c : d ? (c = e.New(e.RenderCell, this, b, a), this._cells.Set(b, a, c), c) : null
        }
        XToCell(b) {
            return Math.floor(b / this._cellWidth)
        }
        YToCell(b) {
            return Math.floor(b / this._cellHeight)
        }
        Update(b, a, d) {
            if (a)
                for (let c = a.getLeft(), f = a.getRight(); c <= f; ++c)
                    for (let k =
                            a.getTop(), g = a.getBottom(); k <= g; ++k) {
                        if (d && d.containsPoint(c, k)) continue;
                        const l = this.GetCell(c, k, !1);
                        l && (l.Remove(b), l.IsEmpty() && this._cells.Delete(c, k))
                    }
            if (d)
                for (let c = d.getLeft(), f = d.getRight(); c <= f; ++c)
                    for (let k = d.getTop(), g = d.getBottom(); k <= g; ++k) a && a.containsPoint(c, k) || this.GetCell(c, k, !0).Insert(b)
        }
        QueryRange(b, a) {
            let d = this.XToCell(b.getLeft());
            const c = this.YToCell(b.getTop()),
                f = this.XToCell(b.getRight());
            for (b = this.YToCell(b.getBottom()); d <= f; ++d)
                for (let k = c; k <= b; ++k) {
                    const g = this.GetCell(d,
                        k, !1);
                    g && g.Dump(a)
                }
        }
        MarkRangeChanged(b) {
            let a = b.getLeft();
            const d = b.getTop(),
                c = b.getRight();
            for (b = b.getBottom(); a <= c; ++a)
                for (let f = d; f <= b; ++f) {
                    const k = this.GetCell(a, f, !1);
                    k && k.SetChanged()
                }
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = new e.Rect,
        a = new e.Quad,
        d = [],
        c = new e.Rect,
        f = new e.Rect,
        k = self.glMatrix,
        g = k.vec3,
        l = k.vec4,
        m = k.mat4,
        u = m.create(),
        x = g.create(),
        p = l.create(),
        r = g.create(),
        t = g.create(),
        q = g.create(),
        w = e.New(e.Vector2);

    function y(B, A) {
        return B.GetWorldInfo()._GetLastCachedZIndex() - A.GetWorldInfo()._GetLastCachedZIndex()
    }

    function C(B, A) {
        return B.GetWorldInfo().GetZElevation() - A.GetWorldInfo().GetZElevation()
    }
    const F = [],
        H = [],
        M = [];
    e.Layer = class extends e.DefendedBase {
        constructor(B, A, G) {
            super();
            this._layout = B;
            this._runtime = B.GetRuntime();
            this._name = G[0];
            this._index = A;
            this._sid = G[2];
            this._isVisible = !!G[3];
            this._backgroundColor = e.New(e.Color);
            this._backgroundColor.setFromJSON(G[4].map(J => J / 255));
            this._isTransparent = !!G[5];
            this._parallaxX = G[6];
            this._parallaxY = G[7];
            this._color = e.New(e.Color, 1, 1, 1, G[8]);
            this._premultipliedColor = e.New(e.Color);
            this._isForceOwnTexture = G[9];
            this._renderAs3d = G[17];
            this._useCameraDistanceDrawOrder = G[18];
            this._useRenderCells = G[10];
            this._scaleRate = G[11];
            this._blendMode =
                G[12];
            this._curRenderTarget = null;
            this._scale = 1;
            this._zElevation = G[16];
            this._scrollY = this._scrollX = this._angle = 0;
            this._hasOwnScrollPosition = !1;
            this._viewport = e.New(e.Rect);
            this._viewportZ0 = e.New(e.Rect);
            this._viewport3D = e.New(e.Rect);
            this._projectionMatrix = m.create();
            this._isProjectionMatrixChanged = !0;
            this._modelViewMatrix = m.create();
            this._isMVMatrixChanged = !0;
            this._viewFrustum = e.New(e.Gfx.ViewFrustum);
            this._isViewFrustumChanged = !0;
            this._startupInitialInstances = [];
            this._initialInstances = [];
            this._createdGlobalUids = [];
            this._initialUIDsToInstanceData = new Map;
            this._instances = [];
            this._anyInstanceZElevated = this._zIndicesUpToDate = !1;
            this._effectList = e.New(e.EffectList, this, G[15]);
            this._renderGrid = null;
            this._lastRenderList = [];
            this._isRenderListUpToDate = !1;
            this._lastRenderCells = e.New(e.Rect, 0, 0, -1, -1);
            this._curRenderCells = e.New(e.Rect, 0, 0, -1, -1);
            this._iLayer = new self.ILayer(this);
            this._UpdatePremultipliedColor();
            this.UsesRenderCells() && (this._renderGrid = e.New(e.RenderGrid, this._runtime.GetOriginalViewportWidth(), this._runtime.GetOriginalViewportHeight()));
            for (const J of G[14]) B = this._runtime.GetObjectClassByIndex(J[1]), this._layout._AddInitialObjectClass(B), B.GetDefaultInstanceData() || (B.SetDefaultInstanceData(J), B._SetDefaultLayerIndex(this._index)), this._initialInstances.push(J), this._initialUIDsToInstanceData.set(J[2], J);
            e.shallowAssignArray(this._startupInitialInstances, this._initialInstances)
        }
        static Create(B, A, G) {
            return e.New(e.Layer, B, A, G)
        }
        Release() {
            this._runtime = this._layout = null
        }
        GetInitialInstanceData(B) {
            return this._initialUIDsToInstanceData.get(B)
        }
        CreateInitialInstances(B) {
            const A =
                this._layout.IsFirstVisit();
            let G = 0;
            const J = this._initialInstances;
            for (let R = 0, U = J.length; R < U; ++R) {
                var L = J[R];
                const V = this._runtime.GetObjectClassByIndex(L[1]);
                let ba = !0;
                if (!V.HasPersistBehavior() || A) L = this._runtime.CreateInstanceFromData(L, this, !0), B.push(L), V.IsGlobal() && (ba = !1, this._createdGlobalUids.push(L.GetUID()));
                ba && (J[G] = J[R], ++G)
            }
            e.truncateArray(J, G);
            this._runtime.FlushPendingInstances();
            this.SetZIndicesChanged()
        }
        _AddInstance(B, A) {
            const G = B.GetWorldInfo();
            if (G.GetLayer() !== this) throw Error("instance added to wrong layer");
            this._instances.push(B);
            0 !== G.GetZElevation() && (this._anyInstanceZElevated = !0);
            A && this.UsesRenderCells() && B.GetWorldInfo().SetBboxChanged();
            this.SetZIndicesChanged()
        }
        _MaybeAddInstance(B) {
            this._instances.includes(B) || (this._instances.push(B), 0 !== B.GetWorldInfo().GetZElevation() && (this._anyInstanceZElevated = !0), this.SetZIndicesChanged())
        }
        _PrependInstance(B, A) {
            const G = B.GetWorldInfo();
            if (G.GetLayer() !== this) throw Error("instance added to wrong layer");
            this._instances.unshift(B);
            0 !== G.GetZElevation() &&
                (this._anyInstanceZElevated = !0);
            this.SetZIndicesChanged();
            A && this.UsesRenderCells() && B.GetWorldInfo().SetBboxChanged()
        }
        _RemoveInstance(B, A) {
            const G = this._instances.indexOf(B);
            0 > G || (A && this.UsesRenderCells() && B.GetWorldInfo()._RemoveFromRenderCells(), this._instances.splice(G, 1), this.SetZIndicesChanged(), this._MaybeResetAnyInstanceZElevatedFlag())
        }
        _SetAnyInstanceZElevated() {
            this._anyInstanceZElevated = !0
        }
        _MaybeResetAnyInstanceZElevatedFlag() {
            0 === this._instances.length && (this._anyInstanceZElevated = !1)
        }
        _SortInstancesByLastCachedZIndex(B) {
            if (B) {
                B =
                    new Set;
                for (var A of this._instances) {
                    var G = A.GetWorldInfo()._GetLastCachedZIndex();
                    0 <= G && B.add(G)
                }
                A = -1;
                for (const J of this._instances)
                    if (G = J.GetWorldInfo(), !(0 <= G._GetLastCachedZIndex())) {
                        for (++A; B.has(A);) ++A;
                        G._SetZIndex(A)
                    }
            }
            this._instances.sort(y)
        }
        _Start() {}
        _End() {
            for (const B of this._instances) B.GetObjectClass().IsGlobal() || this._runtime.DestroyInstance(B);
            this._runtime.FlushPendingInstances();
            e.clearArray(this._instances);
            this._anyInstanceZElevated = !1;
            this.SetZIndicesChanged()
        }
        RecreateInitialObjects(B,
            A, G, J, L) {
            const R = this._runtime.GetEventSheetManager(),
                U = this._runtime.GetAllObjectClasses(),
                V = B.IsFamily(),
                ba = [];
            for (const qa of this._initialInstances) {
                var ia = qa[0];
                if (A.containsPoint(ia[0], ia[1])) {
                    ia = U[qa[1]];
                    if (ia !== B)
                        if (V) {
                            if (!B.FamilyHasMember(ia)) continue
                        } else continue;
                    ia = this;
                    var ja = this._runtime.GetCurrentLayout();
                    this.GetLayout() !== ja && ((ia = ja.GetLayerByName(this.GetName())) || (ia = ja.GetLayerByIndex(this.GetIndex())));
                    ja = this._runtime.CreateInstanceFromData(qa, ia, !1, void 0, void 0, !1, L);
                    ia.SortAndAddInstancesByZIndex(ja);
                    ia = ja.GetWorldInfo();
                    ia.OffsetXY(G, J);
                    ia.SetBboxChanged();
                    R.BlockFlushingInstances(!0);
                    ja._TriggerOnCreatedOnSelfAndRelated();
                    R.BlockFlushingInstances(!1);
                    ba.push(ja)
                }
            }
            return ba
        }
        GetInstanceCount() {
            return this._instances.length
        }
        GetLayout() {
            return this._layout
        }
        GetName() {
            return this._name
        }
        GetIndex() {
            return this._index
        }
        GetSID() {
            return this._sid
        }
        GetRuntime() {
            return this._runtime
        }
        GetDevicePixelRatio() {
            return this._runtime.GetDevicePixelRatio()
        }
        GetEffectList() {
            return this._effectList
        }
        UsesRenderCells() {
            return this._useRenderCells &&
                !this._useCameraDistanceDrawOrder
        }
        GetRenderGrid() {
            return this._renderGrid
        }
        SetRenderListStale() {
            this._isRenderListUpToDate = !1
        }
        IsVisible() {
            return this._isVisible
        }
        SetVisible(B) {
            B = !!B;
            this._isVisible !== B && (this._isVisible = B, this._runtime.UpdateRender())
        }
        SetOwnScrollPositionEnabled(B) {
            B = !!B;
            if (this._hasOwnScrollPosition !== B) {
                if (this._hasOwnScrollPosition = B) B = this.GetLayout(), this._scrollX = B.GetScrollX(), this._scrollY = B.GetScrollY();
                this._SetMVMatrixChanged();
                this._runtime.UpdateRender()
            }
        }
        IsOwnScrollPositionEnabled() {
            return this._hasOwnScrollPosition
        }
        SetScrollX(B) {
            var A =
                this.GetLayout();
            const G = A.GetScrollLeftBound();
            A = A.GetScrollRightBound();
            B > A && (B = A);
            B < G && (B = G);
            this._scrollX !== B && (this._scrollX = B, this.IsOwnScrollPositionEnabled() && (this._SetMVMatrixChanged(), this._runtime.UpdateRender()))
        }
        SetScrollY(B) {
            var A = this.GetLayout();
            const G = A.GetScrollTopBound();
            A = A.GetScrollBottomBound();
            B > A && (B = A);
            B < G && (B = G);
            this._scrollY !== B && (this._scrollY = B, this.IsOwnScrollPositionEnabled() && (this._SetMVMatrixChanged(), this._runtime.UpdateRender()))
        }
        GetScrollX() {
            return this.IsOwnScrollPositionEnabled() ?
                this._scrollX : this.GetLayout().GetScrollX()
        }
        GetScrollY() {
            return this.IsOwnScrollPositionEnabled() ? this._scrollY : this.GetLayout().GetScrollY()
        }
        GetViewport() {
            return this._viewport
        }
        GetViewport3D() {
            return this._viewport3D
        }
        _GetVanishingPoint() {
            const B = this.GetLayout();
            return [B.GetVanishingPointX(), B.GetVanishingPointY()]
        }
        GetViewportForZ(B, A) {
            var G = this._viewportZ0;
            if (0 === B) A.copy(G);
            else {
                let U = G.midX(),
                    V = G.midY();
                var J = this.Get2DScaleFactorToZ(B);
                const ba = G.width() / J;
                G = G.height() / J;
                const [ia, ja] = this._GetVanishingPoint();
                if (.5 !== ia || .5 !== ja) {
                    const qa = this.GetCameraZ();
                    var L = this._runtime,
                        R = 100 / qa;
                    J = (ia - .5) * L.GetViewportWidth() / R;
                    L = (ja - .5) * L.GetViewportHeight() / R;
                    R = this.GetAngle();
                    0 !== R && (w.set(J, L), w.rotate(R), J = w.getX(), L = w.getY());
                    B = e.unlerp(qa, 0, B);
                    U += e.lerp(J, 0, B);
                    V += e.lerp(L, 0, B)
                }
                A.set(U - ba / 2, V - G / 2, U + ba / 2, V + G / 2)
            }
        }
        GetOpacity() {
            return this._color.getA()
        }
        SetOpacity(B) {
            B = e.clamp(B, 0, 1);
            this._color.getA() !== B && (this._color.setA(B), this._UpdatePremultipliedColor(), this._runtime.UpdateRender())
        }
        _UpdatePremultipliedColor() {
            this._premultipliedColor.copy(this._color);
            this._premultipliedColor.premultiply()
        }
        GetPremultipliedColor() {
            return this._premultipliedColor
        }
        HasDefaultColor() {
            return this._color.equalsRgba(1, 1, 1, 1)
        }
        GetScaleRate() {
            return this._scaleRate
        }
        SetScaleRate(B) {
            this._scaleRate !== B && (this._scaleRate = B, this._SetMVMatrixChanged(), this._runtime.UpdateRender())
        }
        GetParallaxX() {
            return this._parallaxX
        }
        GetParallaxY() {
            return this._parallaxY
        }
        SetParallax(B, A) {
            if (this._parallaxX !== B || this._parallaxY !== A)
                if (this._parallaxX = B, this._parallaxY = A, this._SetMVMatrixChanged(),
                    this._runtime.UpdateRender(), 1 !== this._parallaxX || 1 !== this._parallaxY)
                    for (const G of this._instances) G.GetObjectClass()._SetAnyInstanceParallaxed(!0)
        }
        SetParallaxX(B) {
            this.SetParallax(B, this.GetParallaxY())
        }
        SetParallaxY(B) {
            this.SetParallax(this.GetParallaxX(), B)
        }
        SetZElevation(B) {
            this._zElevation !== B && (this._zElevation = B, this._runtime.UpdateRender())
        }
        GetZElevation() {
            return this._zElevation
        }
        SetAngle(B) {
            B = e.clampAngle(B);
            this._angle !== B && (this._angle = B, this._SetMVMatrixChanged(), this._runtime.UpdateRender())
        }
        GetAngle() {
            return e.clampAngle(this._layout.GetAngle() +
                this._angle)
        }
        GetOwnAngle() {
            return this._angle
        }
        HasInstances() {
            return 0 < this._instances.length
        }
        _GetInstances() {
            return this._instances
        }
        _GetInstancesInDrawOrder() {
            return this.RendersIn3DMode() && this._useCameraDistanceDrawOrder ? (e.shallowAssignArray(M, this._GetInstances()), M.sort((B, A) => this._SortInstancesByCameraDistance(B, A)), M) : this._GetInstances()
        }
        _SortInstancesByCameraDistance(B, A) {
            var G = this.GetLayout().Get3DCameraPosition(),
                J = G[0],
                L = G[1];
            G = G[2];
            var R = B.GetWorldInfo();
            const U = A.GetWorldInfo();
            A =
                R.GetX() - J;
            B = R.GetY() - L;
            R = R.GetZElevation() - G;
            J = U.GetX() - J;
            L = U.GetY() - L;
            G = U.GetZElevation() - G;
            return J * J + L * L + G * G - (A * A + B * B + R * R)
        }
        GetBackgroundColor() {
            return this._backgroundColor
        }
        IsTransparent() {
            return this._isTransparent
        }
        SetTransparent(B) {
            B = !!B;
            this._isTransparent !== B && (this._isTransparent = B, this._runtime.UpdateRender())
        }
        IsForceOwnTexture() {
            return this._isForceOwnTexture
        }
        SetForceOwnTexture(B) {
            B = !!B;
            this._isForceOwnTexture !== B && (this._isForceOwnTexture = B, this._runtime.UpdateRender())
        }
        RendersIn2DMode() {
            return !this.GetRuntime().Uses3DFeatures() ||
                !this._renderAs3d
        }
        RendersIn3DMode() {
            return !this.RendersIn2DMode()
        }
        Has3DCamera() {
            return this.RendersIn3DMode() && this.GetLayout().Is3DCameraEnabled()
        }
        SetBlendMode(B) {
            this._blendMode !== B && (this._blendMode = B, this._runtime.UpdateRender())
        }
        GetBlendMode() {
            return this._blendMode
        }
        IsTransformCompatibleWith(B) {
            return this === B || this._parallaxX === B._parallaxX && this._parallaxY === B._parallaxY && this._scale === B._scale && this._scaleRate === B._scaleRate && this._angle === B._angle && this.GetScrollX() === B.GetScrollX() && this.GetScrollY() ===
                B.GetScrollY()
        }
        SaveTransform() {
            return {
                parallaxX: this.GetParallaxX(),
                parallaxY: this.GetParallaxY(),
                scale: this.GetOwnScale(),
                scaleRate: this.GetScaleRate(),
                angle: this.GetOwnAngle(),
                hasOwnScroll: this.IsOwnScrollPositionEnabled(),
                scrollX: this.GetScrollX(),
                scrollY: this.GetScrollY()
            }
        }
        RestoreTransform(B) {
            this.SetParallax(B.parallaxX, B.parallaxY);
            this.SetOwnScale(B.scale);
            this.SetScaleRate(B.scaleRate);
            this.SetAngle(B.angle);
            this.SetOwnScrollPositionEnabled(B.hasOwnScroll);
            this.SetScrollX(B.scrollX);
            this.SetScrollY(B.scrollY)
        }
        _RemoveAllInstancesInSet(B) {
            0 !==
                B.size && 0 < e.arrayRemoveAllInSet(this._instances, B) && (this._MaybeResetAnyInstanceZElevatedFlag(), this.SetZIndicesChanged())
        }
        SetZIndicesChanged() {
            this._isRenderListUpToDate = this._zIndicesUpToDate = !1
        }
        _UpdateZIndices() {
            if (!this._zIndicesUpToDate) {
                this._instances.sort(C);
                if (this.UsesRenderCells())
                    for (let B = 0, A = this._instances.length; B < A; ++B) {
                        const G = this._instances[B].GetWorldInfo();
                        G._SetZIndex(B);
                        this._renderGrid.MarkRangeChanged(G.GetRenderCellRange())
                    } else
                        for (let B = 0, A = this._instances.length; B < A; ++B) this._instances[B].GetWorldInfo()._SetZIndex(B);
                this._zIndicesUpToDate = !0
            }
        }
        MoveInstanceAdjacent(B, A, G) {
            var J = B.GetWorldInfo();
            A = A.GetWorldInfo();
            if (J.GetLayer() !== this || A.GetLayer() !== this) throw Error("can't arrange Z order unless both objects on this layer");
            J = J.GetZIndex();
            A = A.GetZIndex();
            if (J === A + (G ? 1 : -1)) return !1;
            e.arrayRemove(this._instances, J);
            J < A && A--;
            G && A++;
            A === this._instances.length ? this._instances.push(B) : this._instances.splice(A, 0, B);
            this.SetZIndicesChanged();
            return !0
        }
        _MergeSortedZArrays(B, A) {
            const G = [];
            let J = 0,
                L = 0,
                R = B.length,
                U = A.length;
            for (; J < R && L < U;) {
                const V = B[J],
                    ba = A[L];
                V.GetWorldInfo()._GetLastCachedZIndex() < ba.GetWorldInfo()._GetLastCachedZIndex() ? (G.push(V), ++J) : (G.push(ba), ++L)
            }
            for (; J < R; ++J) G.push(B[J]);
            for (; L < U; ++L) G.push(A[L]);
            return G
        }
        _MergeAllSortedZArrays_pass(B) {
            const A = [],
                G = B.length;
            for (let J = 0; J < G - 1; J += 2) A.push(this._MergeSortedZArrays(B[J], B[J + 1]));
            1 === G % 2 && A.push(B[G - 1]);
            return A
        }
        _MergeAllSortedZArrays(B) {
            for (; 1 < B.length;) B = this._MergeAllSortedZArrays_pass(B);
            return B[0]
        }
        _GetRenderCellInstancesToDraw() {
            this._UpdateZIndices();
            e.clearArray(d);
            this._renderGrid.QueryRange(this._viewport, d);
            return d.length ? 1 === d.length ? d[0] : this._MergeAllSortedZArrays(d) : []
        }
        _IsOpaque() {
            return !this.UsesOwnTexture() && !this.IsTransparent()
        }
        ShouldDraw() {
            return this.IsVisible() && 0 < this.GetOpacity() && (this.HasInstances() || !this.IsTransparent())
        }
        UsesOwnTexture() {
            return this.IsForceOwnTexture() || !this.HasDefaultColor() || 0 !== this.GetBlendMode() || this._effectList.HasAnyActiveEffect()
        }
        GetRenderTarget() {
            return this._curRenderTarget
        }
        _CanFastPathDrawLayer(B) {
            if (0 ===
                B.length) return !0;
            if (2 <= B.length) return !1;
            B = B[0].GetShaderProgram();
            return !B.MustPreDraw() && !B.UsesDest() && !B.UsesCrossSampling() && this.HasDefaultColor()
        }
        Get2DScaleFactorToZ(B) {
            if (this._layout.IsOrthographicProjection()) return 1; {
                const A = this.GetCameraZ();
                return A / (A - B)
            }
        }
        GetCameraZ() {
            return 100 / this.GetNormalScale()
        }
        _SetMVMatrixChanged() {
            this._isViewFrustumChanged = this._isMVMatrixChanged = !0
        }
        _GetModelViewMatrix(B) {
            this._isMVMatrixChanged && (this._CalculateModelViewMatrix(B, this._modelViewMatrix, 0, 0,
                null), this._isMVMatrixChanged = !1);
            return this._modelViewMatrix
        }
        _CalculateModelViewMatrix(B, A, G, J, L) {
            const R = this._runtime;
            var U = this.GetLayout();
            const V = R.GetRenderScale();
            var ba = R.GetParallaxXOrigin(),
                ia = R.GetParallaxYOrigin();
            let ja = (this.GetScrollX() - ba) * this._parallaxX + ba;
            var qa = (this.GetScrollY() - ia) * this._parallaxY + ia;
            this._runtime.IsPixelRoundingEnabled() && (ja = Math.round(ja), qa = Math.round(qa));
            if (this.Has3DCamera()) g.copy(r, U.Get3DCameraPosition()), g.copy(t, U.Get3DCameraLookAt()), g.copy(q,
                U.Get3DCameraUpVector()), U = t[0] - r[0], J = t[1] - r[1], qa = t[2] - r[2], r[0] = (r[0] - ba) * this._parallaxX + ba, r[1] = (r[1] - ia) * this._parallaxY + ia, r[2] *= Math.max(this._parallaxX, this._parallaxY), t[0] = r[0] + U, t[1] = r[1] + J, t[2] = r[2] + qa, g.set(x, V, V, 1), g.multiply(r, r, x), g.multiply(t, t, x);
            else {
                ba = (ja + G) * V;
                ia = (qa + J) * V;
                U = U.IsOrthographicProjection() ? 100 : this.GetCameraZ();
                J = this.GetAngle();
                const [za, Ca] = this._GetVanishingPoint();
                if (.5 !== za || .5 !== Ca) G = 100 / U, qa = (za - .5) * R.GetViewportWidth() * V / G, G = (Ca - .5) * R.GetViewportHeight() *
                    V / G, 0 !== J && (w.set(qa, G), w.rotate(J), qa = w.getX(), G = w.getY()), ba += qa, ia += G;
                g.set(r, ba, ia, U);
                g.set(t, ba, ia, U - 100);
                0 === J ? g.set(q, 0, 1, 0) : g.set(q, Math.sin(J), Math.cos(J), 0)
            }
            B.CalculateLookAtModelView(A, r, t, q, L || R.GetCanvasManager().GetDrawHeight());
            1 !== V && (g.set(x, V, V, 1), m.scale(A, A, x))
        }
        _SetProjectionMatrixChanged() {
            this._isViewFrustumChanged = this._isProjectionMatrixChanged = !0
        }
        _GetProjectionMatrix(B) {
            this._isProjectionMatrixChanged && (this._CalculateProjectionMatrix(B), this._isProjectionMatrixChanged = !1);
            return this._projectionMatrix
        }
        _CalculateProjectionMatrix(B) {
            var A = this._runtime.GetCanvasManager();
            const [G, J] = this._GetVanishingPoint();
            if (this._layout.IsOrthographicProjection()) B.CalculateOrthographicMatrix(this._projectionMatrix, A.GetDrawWidth(), A.GetDrawHeight());
            else if (.5 === G && .5 === J) m.copy(this._projectionMatrix, A.GetDefaultProjectionMatrix());
            else {
                const L = A.GetDrawWidth();
                A = A.GetDrawHeight();
                B.CalculatePerspectiveMatrix(this._projectionMatrix, L / A, G, J)
            }
        }
        _SetTransform(B, A = !0, G = 0, J = 0, L = 0) {
            A &&
                B.SetProjectionMatrix(this._GetProjectionMatrix(B));
            0 === G && 0 === J && 0 === L ? A = this._GetModelViewMatrix(B) : (this._CalculateModelViewMatrix(B, u, G, J, L), A = u);
            B.SetModelViewMatrix(A)
        }
        PrepareForDraw(B) {
            this._SetTransform(B);
            B.SetBaseZ(this.GetZElevation())
        }
        Draw(B, A, G) {
            var J = this._runtime.GetCanvasManager();
            const L = this.UsesOwnTexture();
            var R = null;
            let U = null;
            if (this._runtime.IsGPUProfiling())
                if (B.IsWebGL()) {
                    const V = J.GetLayerTimingsBuffer(this);
                    V && (U = V.AddTimeElapsedQuery(), B.StartQuery(U))
                } else B.IsWebGPU() &&
                    B.WriteTimestamp(2 * (this.GetIndex() + 1));
            L ? (R = {
                sampling: this._runtime.GetSampling()
            }, "low" === J.GetCurrentFullscreenScalingQuality() && (R.width = J.GetDrawWidth(), R.height = J.GetDrawHeight()), R = this._runtime.GetAdditionalRenderTarget(R), B.SetRenderTarget(R), this.IsTransparent() ? B.ClearRgba(0, 0, 0, 0) : B.Clear(this._backgroundColor)) : (B.SetRenderTarget(A), this.IsTransparent() || G || B.Clear(this._backgroundColor));
            this._curRenderTarget = R || A;
            this._SetTransform(B);
            B.SetBaseZ(this.GetZElevation());
            B.SetDepthEnabled(this.RendersIn3DMode());
            this.GetNormalScale() > Number.EPSILON && (this._UpdateZIndices(), J = this.UsesRenderCells() && 0 === this.GetZElevation() && !this._anyInstanceZElevated, this.Has3DCamera() ? this._DrawInstances_3DCamera(B) : J ? this._DrawInstances_RenderCells(B) : this._DrawInstances(B, this._GetInstancesInDrawOrder()));
            B.SetBaseZ(0);
            B.SetCurrentZ(0);
            L && (B.SetDepthEnabled(!1), this._DrawLayerOwnTextureToRenderTarget(B, R, A, G));
            U && B.EndQuery(U);
            this._runtime.IsGPUProfiling() && B.IsWebGPU() && B.WriteTimestamp(2 * (this.GetIndex() + 1) + 1);
            this._curRenderTarget =
                null
        }
        _DrawInstances(B, A) {
            const G = this._viewport,
                J = this._curRenderTarget,
                L = this.GetLayout().IsOrthographicProjection(),
                R = this.GetLayout().HasVanishingPointOutsideViewport();
            let U = null;
            for (let V = 0, ba = A.length; V < ba; ++V) {
                const ia = A[V];
                if (ia === U) continue;
                U = ia;
                const ja = ia.GetWorldInfo();
                ja.IsVisible() && ja.IsInViewport(G, R, L) && this._DrawInstanceMaybeWithEffects(ia, ja, B, J)
            }
        }
        _DrawInstances_3DCamera(B) {
            const A = this._curRenderTarget,
                G = this._GetViewFrustum(),
                J = this._GetInstancesInDrawOrder();
            for (let V = 0, ba = J.length; V <
                ba;) {
                var L = J[V],
                    R = L.GetWorldInfo();
                if (!R.IsVisible() || !R.IsInViewport3D(G)) {
                    ++V;
                    continue
                }(!L.RendersToOwnZPlane() || 0 < R.GetDepth()) && H.push(L);
                var U = L.GetWorldInfo().GetTotalZElevation();
                F.push(L);
                let ia = V + 1;
                for (; ia < ba; ++ia) {
                    const ja = J[ia],
                        qa = ja.GetWorldInfo();
                    if (qa.IsVisible() && qa.IsInViewport3D(G)) {
                        if (qa.GetTotalZElevation() !== U) break;
                        ja.RendersToOwnZPlane() ? (0 < qa.GetDepth() && H.push(ja), F.push(ja)) : H.push(ja)
                    }
                }
                if (1 !== F.length || F[0].MustMitigateZFighting()) {
                    this._DrawCoplanarInstances_3DCamera(B,
                        F);
                    for (let ja = 0, qa = H.length; ja < qa; ++ja) L = H[ja], R = L.GetWorldInfo(), R._SetDrawNonBackFacesOnly(!0), this._DrawInstanceMaybeWithEffects(L, R, B, A), R._SetDrawNonBackFacesOnly(!1)
                } else {
                    this._DrawInstanceMaybeWithEffects(L, R, B, A);
                    for (let ja = 0, qa = H.length; ja < qa; ++ja) R = H[ja], R !== L && (U = R.GetWorldInfo(), U.GetLayer()._DrawInstanceMaybeWithEffects(R, U, B, A))
                }
                V = ia;
                e.clearArray(F);
                e.clearArray(H)
            }
        }
        _DrawCoplanarInstances_3DCamera(B, A) {
            const G = this._curRenderTarget;
            B.CoplanarStartStencilPass();
            for (let R = 0, U = A.length; R <
                U; ++R) {
                var J = A[R],
                    L = J.GetWorldInfo();
                L._SetDrawBackFaceOnly(!0);
                this._DrawInstance(J, L, B)
            }
            B.CoplanarStartColorPass();
            for (let R = 0, U = A.length; R < U; ++R) J = A[R], L = J.GetWorldInfo(), this._DrawInstanceMaybeWithEffects(J, L, B, G), L._SetDrawBackFaceOnly(!1);
            B.CoplanarRestoreStandardRendering()
        }
        _DrawInstances_RenderCells(B) {
            var A = this._renderGrid;
            const G = this._curRenderCells,
                J = this._lastRenderCells,
                L = this._viewport;
            G.set(A.XToCell(L.getLeft()), A.YToCell(L.getTop()), A.XToCell(L.getRight()), A.YToCell(L.getBottom()));
            this._isRenderListUpToDate && G.equals(J) ? A = this._lastRenderList : (A = this._GetRenderCellInstancesToDraw(), this._isRenderListUpToDate = !0, J.copy(G));
            this._DrawInstances(B, A);
            A !== this._lastRenderList && e.shallowAssignArray(this._lastRenderList, A)
        }
        _DrawInstanceMaybeWithEffects(B, A, G, J) {
            A.HasAnyActiveEffect() ? this._DrawInstanceWithEffectsAndRestore(B, A, G, J) : this._DrawInstance(B, A, G)
        }
        _DrawInstance(B, A, G) {
            A = A.GetRendererStateGroup();
            G.GetCurrentStateGroup() !== A && A.Apply();
            B.Draw(G)
        }
        _DrawInstanceWithEffectsAndRestore(B,
            A, G, J) {
            this._DrawInstanceWithEffects(B, A, G, J, null) && this._SetTransform(G)
        }
        _DrawInstanceWithEffects(B, A, G, J, L) {
            const R = A.GetInstanceEffectList().GetActiveEffectTypes();
            if (1 === R.length) {
                const U = R[0],
                    V = U.GetShaderProgram();
                if (!V.NeedsPostDrawOrExtendsBox() && A.HasDefaultColor() && !B.MustPreDraw()) return this._DrawInstanceWithEffects_FastPath(B, A, U, V, G), !1
            }
            B = e.RenderEffectChain(G, this._runtime, B, J, R, L);
            G.SetBaseZ(this.GetZElevation());
            return B
        }
        _DrawInstanceWithEffects_FastPath(B, A, G, J, L) {
            L.SetProgram(J);
            L.SetBlendMode(A.GetBlendMode());
            J.IsAnimated() && this._runtime.UpdateRender();
            let R = 0,
                U = 0;
            if (J.UsesAnySrcRectOrPixelSize()) {
                const [V, ba] = B.GetCurrentSurfaceSize();
                R = 1 / V;
                U = 1 / ba;
                (J = B.GetCurrentTexRect()) ? f.copy(J): f.set(0, 0, 0, 0)
            }
            G = A.GetInstanceEffectList().GetEffectParametersForIndex(G.GetIndex());
            L.SetCurrentZ(A.GetZElevation());
            L.SetProgramParameters(null, c, f, f, A.GetBoundingBox(), R, U, this.GetOwnScale(), this.GetAngle(), this._runtime.GetGameTime(), G);
            B.Draw(L)
        }
        _DrawLayerOwnTextureToRenderTarget(B, A,
            G, J) {
            const L = this._effectList.GetActiveEffectTypes(),
                R = this._runtime;
            if (this._CanFastPathDrawLayer(L)) {
                B.SetRenderTarget(G);
                if (1 === L.length) {
                    var U = L[0];
                    G = U.GetShaderProgram();
                    B.SetProgram(G);
                    f.set(0, 0, 1, 1);
                    U = this._effectList.GetEffectParametersForIndex(U.GetIndex());
                    B.SetProgramParameters(null, c, f, f, this._viewport, 1 / R.GetDrawWidth(), 1 / R.GetDrawHeight(), this.GetNormalScale(), this.GetAngle(), R.GetGameTime(), U);
                    G.IsAnimated() && R.UpdateRender()
                } else B.SetTextureFillMode();
                J && 0 === this._blendMode && this.HasDefaultColor() &&
                    0 === L.length ? B.CopyRenderTarget(A) : (B.SetBlendMode(this._blendMode), B.SetColor(this._premultipliedColor), B.DrawRenderTarget(A));
                B.InvalidateRenderTarget(A);
                R.ReleaseAdditionalRenderTarget(A)
            } else e.RenderEffectChain(B, R, this, G, L)
        }
        GetOwnScale() {
            return this._scale
        }
        SetOwnScale(B) {
            this._scale !== B && (this._scale = B, this._layout.BoundScrolling(), this._SetMVMatrixChanged(), this._runtime.UpdateRender())
        }
        GetRenderScale() {
            return this.GetNormalScale() * this._runtime.GetRenderScale()
        }
        GetDisplayScale() {
            return this.GetNormalScale() *
                this._runtime.GetDisplayScale()
        }
        GetNormalScale() {
            return (this._scale * this._layout.GetScale() - 1) * this._scaleRate + 1
        }
        UpdateViewport() {
            var B = this._runtime.GetParallaxXOrigin(),
                A = this._runtime.GetParallaxYOrigin(),
                G = (this.GetScrollX() - B) * this._parallaxX + B,
                J = (this.GetScrollY() - A) * this._parallaxY + A;
            B = this.GetNormalScale();
            A = this._runtime.GetViewportWidth() / B;
            B = this._runtime.GetViewportHeight() / B;
            G -= A / 2;
            let L = J - B / 2;
            this._runtime.IsPixelRoundingEnabled() && (G = Math.round(G), L = Math.round(L));
            J = this._viewportZ0;
            J.set(G, L, G + A, L + B);
            A = this.GetAngle();
            0 !== A && (b.copy(J), b.offset(-J.midX(), -J.midY()), a.setFromRotatedRect(b, A), a.getBoundingBox(b), b.offset(J.midX(), J.midY()), J.copy(b));
            A = this._zElevation;
            this.GetViewportForZ(A, this._viewport);
            this.Has3DCamera() ? this.CalculateViewport3D(A, this._viewport3D) : this._viewport3D.copy(this._viewport)
        }
        CalculateViewport3D(B, A) {
            var G = this._runtime.GetCanvasManager(),
                J = G.GetCssWidth();
            G = G.GetCssHeight();
            const [L, R] = this.CanvasCssToLayer(0, 0, B), [U, V] = this.CanvasCssToLayer(J,
                0, B), [ba, ia] = this.CanvasCssToLayer(J, G, B), [ja, qa] = this.CanvasCssToLayer(0, G, B);
            B = Math.min(L, U, ba, ja);
            J = Math.min(R, V, ia, qa);
            G = Math.max(L, U, ba, ja);
            let za = Math.max(R, V, ia, qa);
            isFinite(B) || (B = -Infinity);
            isFinite(J) || (J = -Infinity);
            isFinite(G) || (G = Infinity);
            isFinite(za) || (za = Infinity);
            A.set(B, J, G, za)
        }
        CanvasCssToLayer(B, A, G = 0) {
            return this._CanvasToLayer(B, A, G, this.GetDisplayScale())
        }
        DrawSurfaceToLayer(B, A, G = 0) {
            return this._CanvasToLayer(B, A, G, this.GetRenderScale() * this.GetDevicePixelRatio())
        }
        _CanvasToLayer(B,
            A, G, J) {
            var L = this._runtime,
                R = L.GetRenderer();
            const U = this.GetNormalScale(),
                V = L.GetViewportWidth() / U;
            L = L.GetViewportHeight() / U;
            l.set(p, 0, 0, V, L);
            B /= J;
            A = p[3] - A / J;
            J = this._GetProjectionMatrix(R);
            R = this._GetModelViewMatrix(R);
            return e.Gfx.UnprojectScreenToWorldZ(B, A, G, R, J, p, x) ? [x[0], x[1]] : [NaN, NaN]
        }
        CanvasCssToLayer_DefaultTransform(B, A) {
            const G = this._scale,
                J = this._scaleRate,
                L = this._parallaxX,
                R = this._parallaxY,
                U = this._angle;
            this._parallaxY = this._parallaxX = this._scaleRate = this._scale = 1;
            this._angle = 0;
            this._SetMVMatrixChanged();
            B = this.CanvasCssToLayer(B, A);
            this._scale = G;
            this._scaleRate = J;
            this._parallaxX = L;
            this._parallaxY = R;
            this._angle = U;
            this._SetMVMatrixChanged();
            return B
        }
        LayerToCanvasCss(B, A, G = 0) {
            return this._LayerToCanvas(B, A, G, this.GetDisplayScale())
        }
        LayerToDrawSurface(B, A, G = 0) {
            return this._LayerToCanvas(B, A, G, this.GetRenderScale() * this.GetDevicePixelRatio())
        }
        _LayerToCanvas(B, A, G, J) {
            var L = this._runtime,
                R = L.GetRenderer();
            const U = this.GetNormalScale();
            var V = L.GetViewportWidth() / U;
            L = L.GetViewportHeight() / U;
            l.set(p, 0, 0, V,
                L);
            V = this._GetProjectionMatrix(R);
            R = this._GetModelViewMatrix(R);
            return e.Gfx.Project(B, A, G, R, V, p, x) ? [x[0] * J, (p[3] - x[1]) * J] : [NaN, NaN]
        }
        _GetLayerToDrawSurfaceScale(B, A) {
            B *= this.GetRenderScale() * this.GetDevicePixelRatio();
            0 !== A && (B *= this.Get2DScaleFactorToZ(A));
            return B
        }
        _GetViewFrustum() {
            this._isViewFrustumChanged && (this._UpdateViewFrustum(), this._isViewFrustumChanged = !1);
            return this._viewFrustum
        }
        _UpdateViewFrustum() {
            var B = this._runtime.GetRenderer();
            const A = this._GetProjectionMatrix(B);
            B = this._GetModelViewMatrix(B);
            this._viewFrustum.CalculatePlanes(B, A)
        }
        _SaveToJson() {
            return {
                s: this.GetOwnScale(),
                a: this.GetOwnAngle(),
                vl: this._viewport.getLeft(),
                vt: this._viewport.getTop(),
                vr: this._viewport.getRight(),
                vb: this._viewport.getBottom(),
                v: this.IsVisible(),
                bc: this._backgroundColor.toJSON(),
                t: this.IsTransparent(),
                sx: this._scrollX,
                sy: this._scrollY,
                hosp: this._hasOwnScrollPosition,
                px: this.GetParallaxX(),
                py: this.GetParallaxY(),
                c: this._color.toJSON(),
                sr: this.GetScaleRate(),
                fx: this._effectList.SaveToJson(),
                cg: this._createdGlobalUids
            }
        }
        _LoadFromJson(B) {
            this._scale =
                B.s;
            this._angle = B.a;
            this._viewport.set(B.vl, B.vt, B.vr, B.vb);
            this._isVisible = !!B.v;
            this._backgroundColor.setFromJSON(B.bc);
            this._isTransparent = !!B.t;
            B.hasOwnProperty("sx") && (this._scrollX = B.sx);
            B.hasOwnProperty("sy") && (this._scrollY = B.sy);
            B.hasOwnProperty("hosp") && (this._hasOwnScrollPosition = !!B.hosp);
            this._parallaxX = B.px;
            this._parallaxY = B.py;
            this._color.setFromJSON(B.c);
            this._scaleRate = B.sr;
            e.shallowAssignArray(this._createdGlobalUids, B.cg);
            e.shallowAssignArray(this._initialInstances, this._startupInitialInstances);
            const A = new Set(this._createdGlobalUids);
            let G = 0;
            for (let J = 0, L = this._initialInstances.length; J < L; ++J) A.has(this._initialInstances[J][2]) || (this._initialInstances[G] = this._initialInstances[J], ++G);
            e.truncateArray(this._initialInstances, G);
            this._effectList.LoadFromJson(B.fx);
            this._SortInstancesByLastCachedZIndex(!1);
            this.SetZIndicesChanged()
        }
        GetILayer() {
            return this._iLayer
        }
        SortAndAddInstancesByZIndex(B) {
            B.GetWorldInfo();
            if (!this._instances.includes(B))
                if (B.HasChildren()) {
                    var A = [...B.allChildren()];
                    A.push(B);
                    A.sort((J, L) => {
                        J = J.GetWorldInfo().GetSceneGraphZIndex();
                        L = L.GetWorldInfo().GetSceneGraphZIndex();
                        return J - L
                    });
                    for (var G of A)
                        if (G.IsInContainer())
                            for (const J of G.siblings()) A.includes(J) || (B = [...J.allChildren()], B.push(J), B.sort((L, R) => {
                                L = L.GetWorldInfo().GetSceneGraphZIndex();
                                R = R.GetWorldInfo().GetSceneGraphZIndex();
                                return L - R
                            }), B && B.length && A.splice(A.length, 0, ...B));
                    for (const J of A) this._AddInstance(J, !0)
                } else if (this._AddInstance(B, !0), B.IsInContainer())
                for (A of B.siblings())
                    if (G = [...A.allChildren()], G.push(A), G.sort((J, L) => {
                            J = J.GetWorldInfo().GetSceneGraphZIndex();
                            L = L.GetWorldInfo().GetSceneGraphZIndex();
                            return J - L
                        }), G && G.length)
                        for (const J of G) this._AddInstance(J, !0)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3Debugger,
        a = e.New(e.Rect),
        d = e.New(e.Rect),
        c = e.New(e.Rect),
        f = e.New(e.Color),
        k = self.glMatrix.vec3,
        g = [],
        l = [],
        m = [],
        u = [],
        x = [];

    function p(q, w, y, C) {
        return q[0] === Math.fround(w) && q[1] === Math.fround(y) && q[2] === Math.fround(C)
    }
    let r = null;

    function t(q, w) {
        r !== q && (q.PrepareForDraw(w), r = q)
    }
    e.Layout = class extends e.DefendedBase {
        constructor(q, w, y) {
            super();
            this._layoutManager = q;
            this._runtime = q.GetRuntime();
            this._name = y[0];
            this._originalWidth = y[1];
            this._originalHeight = y[2];
            this._width =
                y[1];
            this._height = y[2];
            this._isUnboundedScrolling = !!y[3];
            this._isOrthographicProjection = !!y[4];
            this._vanishingPointX = y[5];
            this._vanishingPointY = y[6];
            this._eventSheetName = y[7];
            this._eventSheet = null;
            this._sid = y[8];
            this._index = w;
            this._scrollY = this._scrollX = 0;
            this._scale = 1;
            this._angle = 0;
            this._initialObjectClasses = new Set;
            this._textureLoadedTypes = new Set;
            this._textureLoadPendingPromises = new Set;
            this._createdInstances = [];
            this._initialNonWorld = [];
            this._is3dCameraEnabled = !1;
            this._cam3dposition = k.create();
            this._cam3dlook = k.create();
            this._cam3dup = k.create();
            this._layers = [];
            this._layersByName = new Map;
            this._layersBySid = new Map;
            this._effectList = e.New(e.EffectList, this, y[11]);
            this._curRenderTarget = null;
            this._persistData = {};
            this._isFirstVisit = !0;
            this._iLayout = new self.ILayout(this);
            this._userScriptDispatcher = e.New(e.Event.Dispatcher);
            for (const C of y[9]) q = e.Layer.Create(this, this._layers.length, C), this._layers.push(q), this._layersByName.set(q.GetName().toLowerCase(), q), this._layersBySid.set(q.GetSID(), q);
            for (const C of y[10]) {
                y = this._runtime.GetObjectClassByIndex(C[1]);
                if (!y) throw Error("missing nonworld object class");
                y.GetDefaultInstanceData() || y.SetDefaultInstanceData(C);
                this._initialNonWorld.push(C);
                this._AddInitialObjectClass(y)
            }
        }
        Release() {
            for (const q of this._layers) q.Release();
            e.clearArray(this._layers);
            this._textureLoadPendingPromises.clear();
            this._runtime = this._layoutManager = this._eventSheet = null
        }
        GetRuntime() {
            return this._runtime
        }
        GetName() {
            return this._name
        }
        GetSID() {
            return this._sid
        }
        GetIndex() {
            return this._index
        }
        GetEffectList() {
            return this._effectList
        }
        GetMinLayerScale() {
            let q =
                this._layers[0].GetNormalScale();
            for (let w = 1, y = this._layers.length; w < y; ++w) {
                const C = this._layers[w];
                if (0 !== C.GetParallaxX() || 0 !== C.GetParallaxY()) q = Math.min(q, C.GetNormalScale())
            }
            return q
        }
        _GetScrollBoundMarginHorizontal() {
            return .5 * this._runtime.GetViewportWidth() / this.GetMinLayerScale()
        }
        _GetScrollBoundMarginVertical() {
            return .5 * this._runtime.GetViewportHeight() / this.GetMinLayerScale()
        }
        GetScrollLeftBound() {
            return this.IsUnboundedScrolling() ? -Infinity : this._GetScrollBoundMarginHorizontal()
        }
        GetScrollRightBound() {
            return this.IsUnboundedScrolling() ?
                Infinity : this.GetWidth() - this._GetScrollBoundMarginHorizontal()
        }
        GetScrollTopBound() {
            return this.IsUnboundedScrolling() ? -Infinity : this._GetScrollBoundMarginVertical()
        }
        GetScrollBottomBound() {
            return this.IsUnboundedScrolling() ? Infinity : this.GetHeight() - this._GetScrollBoundMarginVertical()
        }
        SetScrollX(q) {
            const w = this.GetScrollLeftBound(),
                y = this.GetScrollRightBound();
            q > y && (q = y);
            q < w && (q = w);
            this._scrollX !== q && (this._scrollX = q, this._SetAllLayersMVChanged(), this._runtime.UpdateRender())
        }
        GetScrollX() {
            return this._scrollX
        }
        SetScrollY(q) {
            const w =
                this.GetScrollTopBound(),
                y = this.GetScrollBottomBound();
            q > y && (q = y);
            q < w && (q = w);
            this._scrollY !== q && (this._scrollY = q, this._SetAllLayersMVChanged(), this._runtime.UpdateRender())
        }
        GetScrollY() {
            return this._scrollY
        }
        IsUnboundedScrolling() {
            return this._isUnboundedScrolling
        }
        BoundScrolling() {
            this.SetScrollX(this.GetScrollX());
            this.SetScrollY(this.GetScrollY());
            for (const q of this._layers) q.IsOwnScrollPositionEnabled() && (q.SetScrollX(q.GetScrollX()), q.SetScrollY(q.GetScrollY()))
        }
        SetVanishingPointXY(q, w) {
            if (this._vanishingPointX !==
                q || this._vanishingPointY !== w) this._vanishingPointX = q, this._vanishingPointY = w, this.IsPerspectiveProjection() && (this._SetAllLayersProjectionChanged(), this._SetAllLayersMVChanged(), this._runtime.UpdateRender())
        }
        GetVanishingPointX() {
            return this.IsOrthographicProjection() ? .5 : this._vanishingPointX
        }
        GetVanishingPointY() {
            return this.IsOrthographicProjection() ? .5 : this._vanishingPointY
        }
        HasVanishingPointOutsideViewport() {
            const q = this.GetVanishingPointX(),
                w = this.GetVanishingPointY();
            return 0 > q || 1 < q || 0 > w || 1 < w
        }
        SetPerspectiveProjection() {
            this._isOrthographicProjection &&
                (this._isOrthographicProjection = !1, this._SetAllLayersProjectionChanged(), this._SetAllLayersMVChanged(), this._runtime.UpdateRender())
        }
        SetOrthographicProjection() {
            this._isOrthographicProjection || (this._isOrthographicProjection = !0, this._SetAllLayersProjectionChanged(), this._SetAllLayersMVChanged(), this._runtime.UpdateRender())
        }
        IsOrthographicProjection() {
            return this._isOrthographicProjection
        }
        IsPerspectiveProjection() {
            return !this.IsOrthographicProjection()
        }
        Set3DCameraEnabled(q) {
            q = !!q;
            this._is3dCameraEnabled !==
                q && (this._is3dCameraEnabled = q, this._SetAllLayersMVChanged(), this._runtime.UpdateRender())
        }
        Is3DCameraEnabled() {
            return this._is3dCameraEnabled
        }
        Set3DCameraOrientation(q, w, y, C, F, H, M, B, A) {
            p(this._cam3dposition, q, w, y) && p(this._cam3dlook, C, F, H) && p(this._cam3dup, M, B, A) || (k.set(this._cam3dposition, q, w, y), k.set(this._cam3dlook, C, F, H), k.set(this._cam3dup, M, B, A), this.Set3DCameraChanged())
        }
        Set3DCameraChanged() {
            this._SetAllLayersMVChanged();
            this._runtime.UpdateRender()
        }
        Get3DCameraPosition() {
            return this._cam3dposition
        }
        Get3DCameraLookAt() {
            return this._cam3dlook
        }
        Get3DCameraUpVector() {
            return this._cam3dup
        }
        GetScale() {
            return this._scale
        }
        SetScale(q) {
            this._scale !==
                q && (this._scale = q, this._SetAllLayersMVChanged(), this.BoundScrolling(), this._runtime.UpdateRender())
        }
        SetAngle(q) {
            q = e.clampAngle(q);
            this._angle !== q && (this._angle = q, this._SetAllLayersMVChanged(), this._runtime.UpdateRender())
        }
        GetAngle() {
            return this._angle
        }
        GetWidth() {
            return this._width
        }
        SetWidth(q) {
            !isFinite(q) || 1 > q || (this._width = q)
        }
        GetHeight() {
            return this._height
        }
        SetHeight(q) {
            !isFinite(q) || 1 > q || (this._height = q)
        }
        GetEventSheet() {
            return this._eventSheet
        }
        GetLayers() {
            return this._layers
        }
        GetLayerCount() {
            return this._layers.length
        }
        GetLayer(q) {
            return "number" ===
                typeof q ? this.GetLayerByIndex(q) : this.GetLayerByName(q.toString())
        }
        GetLayerByIndex(q) {
            q = e.clamp(Math.floor(q), 0, this._layers.length - 1);
            return this._layers[q]
        }
        GetLayerByName(q) {
            return this._layersByName.get(q.toLowerCase()) || null
        }
        GetLayerBySID(q) {
            return this._layersBySid.get(q) || null
        }
        _SetAllLayersProjectionChanged() {
            for (const q of this._layers) q._SetProjectionMatrixChanged()
        }
        _SetAllLayersMVChanged() {
            for (const q of this._layers) q._SetMVMatrixChanged()
        }
        SaveTransform() {
            return {
                scrollX: this.GetScrollX(),
                scrollY: this.GetScrollY(),
                scale: this.GetScale(),
                angle: this.GetAngle(),
                vpX: this.GetVanishingPointX(),
                vpY: this.GetVanishingPointY()
            }
        }
        RestoreTransform(q) {
            this.SetScrollX(q.scrollX);
            this.SetScrollY(q.scrollY);
            this.SetScale(q.scale);
            this.SetAngle(q.angle);
            this.SetVanishingPointXY(q.vpX, q.vpY)
        }
        HasOpaqueBottomLayer() {
            for (const q of this._layers)
                if (q.ShouldDraw()) return q._IsOpaque();
            return !1
        }
        GetLayoutBackgroundColor() {
            for (const q of this._layers)
                if (q.ShouldDraw() && q._IsOpaque()) return f.copyRgb(q.GetBackgroundColor()),
                    f.setA(1), f;
            f.setRgba(0, 0, 0, 0);
            return f
        }
        IsFirstVisit() {
            return this._isFirstVisit
        }
        _GetInitialObjectClasses() {
            return [...this._initialObjectClasses]
        }
        _AddInitialObjectClass(q) {
            if (q.IsInContainer())
                for (const w of q.GetContainer().GetObjectTypes()) this._initialObjectClasses.add(w);
            else this._initialObjectClasses.add(q)
        }
        _GetTextureLoadedObjectTypes() {
            return [...this._textureLoadedTypes]
        }
        _Load(q, w) {
            if (q === this || !w) return Promise.resolve();
            q && (e.CopySet(this._textureLoadedTypes, q._textureLoadedTypes), q._textureLoadedTypes.clear());
            q = [];
            for (const y of this._initialObjectClasses) this._textureLoadedTypes.has(y) || (q.push(y.LoadTextures(w)), this._textureLoadedTypes.add(y));
            return Promise.all(q)
        }
        async MaybeLoadTexturesFor(q) {
            if (q.IsFamily()) throw Error("cannot load textures for family");
            var w = this._runtime.GetRenderer();
            !w || w.IsContextLost() || this._textureLoadedTypes.has(q) || (this._textureLoadedTypes.add(q), w = q.LoadTextures(w), this._AddPendingTextureLoadPromise(w), await w, q.OnDynamicTextureLoadComplete(), this._runtime.UpdateRender())
        }
        _AddPendingTextureLoadPromise(q) {
            this._textureLoadPendingPromises.add(q);
            q.then(() => this._textureLoadPendingPromises.delete(q)).catch(() => this._textureLoadPendingPromises.delete(q))
        }
        WaitForPendingTextureLoadsToComplete() {
            return Promise.all([...this._textureLoadPendingPromises])
        }
        MaybeUnloadTexturesFor(q) {
            if (q.IsFamily() || 0 < q.GetInstanceCount()) throw Error("cannot unload textures");
            const w = this._runtime.GetRenderer();
            w && this._textureLoadedTypes.has(q) && (this._textureLoadedTypes.delete(q), q.ReleaseTextures(w))
        }
        _Unload(q, w) {
            if (q !== this && w)
                for (const y of this._textureLoadedTypes) y.IsGlobal() ||
                    q._initialObjectClasses.has(y) || (y.ReleaseTextures(), this._textureLoadedTypes.delete(y))
        }
        _OnWebGLContextLost() {
            this._textureLoadedTypes.clear()
        }
        async _StartRunning(q) {
            const w = this._runtime,
                y = this._layoutManager,
                C = w.GetEventSheetManager();
            this._eventSheetName && (this._eventSheet = C.GetEventSheetByName(this._eventSheetName), this._eventSheet._UpdateDeepIncludes());
            y._SetMainRunningLayout(this);
            this._width = this._originalWidth;
            this._height = this._originalHeight;
            this._scrollX = w.GetOriginalViewportWidth() /
                2;
            this._scrollY = w.GetOriginalViewportHeight() / 2;
            this.BoundScrolling();
            this._MoveGlobalObjectsToThisLayout(q);
            this._runtime.SetUsingCreatePromises(!0);
            this._CreateInitialInstances();
            this._isFirstVisit || this._CreatePersistedInstances();
            this._CreateAndLinkContainerInstances(this._createdInstances);
            this._CreateInitialNonWorldInstances();
            y.ClearPendingChangeLayout();
            w.FlushPendingInstances();
            this._runtime.SetUsingCreatePromises(!1);
            const F = this._runtime.GetCreatePromises();
            await Promise.all(F);
            e.clearArray(F);
            if (!w.IsLoadingState()) {
                for (const H of this._createdInstances) H.SetupInitialSceneGraphConnections();
                for (const H of this._createdInstances) H._TriggerOnCreated()
            }
            e.clearArray(this._createdInstances);
            await Promise.all([...this._initialObjectClasses].map(H => H.PreloadTexturesWithInstances(this._runtime.GetRenderer())));
            q && (w.Dispatcher().dispatchEvent(new e.Event("beforefirstlayoutstart")), await w.DispatchUserScriptEventAsyncWait(new e.Event("beforeprojectstart")));
            await this.DispatchUserScriptEventAsyncWait(new e.Event("beforelayoutstart"));
            w.IsLoadingState() || await w.TriggerAsync(e.Plugins.System.Cnds.OnLayoutStart, null, null);
            await this.DispatchUserScriptEventAsyncWait(new e.Event("afterlayoutstart"));
            q && (w.Dispatcher().dispatchEvent(new e.Event("afterfirstlayoutstart")), await w.DispatchUserScriptEventAsyncWait(new e.Event("afterprojectstart")));
            C._RunQueuedTriggers(y);
            await this.WaitForPendingTextureLoadsToComplete();
            this._SetAllLayersProjectionChanged();
            this._SetAllLayersMVChanged();
            this._isFirstVisit = !1
        }
        _MoveGlobalObjectsToThisLayout(q) {
            for (const y of this._runtime.GetAllObjectClasses())
                if (!y.IsFamily() &&
                    y.IsWorldType())
                    for (const C of y.GetInstances()) {
                        const F = C.GetWorldInfo();
                        var w = F.GetLayer();
                        w = e.clamp(w.GetIndex(), 0, this._layers.length - 1);
                        w = this._layers[w];
                        F._SetLayer(w);
                        w._MaybeAddInstance(C)
                    }
            if (!q)
                for (const y of this._layers) y._SortInstancesByLastCachedZIndex(!1)
        }
        _CreateInitialInstances() {
            for (const q of this._layers) q.CreateInitialInstances(this._createdInstances), q.UpdateViewport(), q._Start()
        }
        _CreatePersistedInstances() {
            let q = !1;
            for (const [y, C] of Object.entries(this._persistData)) {
                const F =
                    this._runtime.GetObjectClassBySID(parseInt(y, 10));
                if (F && !F.IsFamily() && F.HasPersistBehavior()) {
                    for (const H of C) {
                        var w = null;
                        if (F.IsWorldType() && (w = this.GetLayerBySID(H.w.l), !w)) continue;
                        w = this._runtime.CreateInstanceFromData(F, w, !1, 0, 0, !0);
                        w.LoadFromJson(H);
                        q = !0;
                        this._createdInstances.push(w)
                    }
                    e.clearArray(C)
                }
            }
            for (const y of this._layers) y._SortInstancesByLastCachedZIndex(!0), y.SetZIndicesChanged();
            q && (this._runtime.FlushPendingInstances(), this._runtime._RefreshUidMap())
        }
        _CreateAndLinkContainerInstances(q) {
            for (const y of q) {
                if (!y.IsInContainer()) continue;
                const C = y.GetWorldInfo(),
                    F = y.GetIID();
                for (const H of y.GetObjectClass().GetContainer().objectTypes())
                    if (H !== y.GetObjectClass()) {
                        var w = H.GetInstances();
                        w.length > F ? y._AddSibling(w[F]) : (w = C ? this._runtime.CreateInstanceFromData(H, C.GetLayer(), !0, C.GetX(), C.GetY(), !0) : this._runtime.CreateInstanceFromData(H, null, !0, 0, 0, !0), this._runtime.FlushPendingInstances(), H._UpdateIIDs(), y._AddSibling(w), q.push(w))
                    }
            }
        }
        _CreateInitialNonWorldInstances() {
            for (const q of this._initialNonWorld) this._runtime.GetObjectClassByIndex(q[1]).IsInContainer() ||
                this._runtime.CreateInstanceFromData(q, null, !0)
        }
        _CreateGlobalNonWorlds() {
            const q = [],
                w = this._initialNonWorld;
            let y = 0;
            for (let C = 0, F = w.length; C < F; ++C) {
                const H = w[C],
                    M = this._runtime.GetObjectClassByIndex(H[1]);
                M.IsGlobal() ? M.IsInContainer() && M.GetContainer().HasAnyWorldType() || q.push(this._runtime.CreateInstanceFromData(H, null, !0)) : (w[y] = H, ++y)
            }
            e.truncateArray(w, y);
            this._runtime.FlushPendingInstances();
            this._CreateAndLinkContainerInstances(q)
        }
        RecreateInitialObjects(q, w, y, C, F, H) {
            if (y) return y.RecreateInitialObjects(q,
                w, C, F, H);
            y = [];
            for (const M of this._layers) y.push(M.RecreateInitialObjects(q, w, C, F, H));
            return y.flat()
        }
        async _StopRunning() {
            const q = this._layoutManager;
            this._runtime.IsLoadingState() || await this._runtime.TriggerAsync(e.Plugins.System.Cnds.OnLayoutEnd, null, null);
            q.SetIsEndingLayout(!0);
            this._runtime.GetEventSheetManager().ClearAllScheduledWaits();
            this._isFirstVisit || this._SavePersistData();
            for (const w of this._layers) w._End();
            for (const w of this._runtime.GetAllObjectClasses())
                if (!(w.IsGlobal() || w.IsWorldType() ||
                        w.GetPlugin().IsSingleGlobal() || w.IsFamily())) {
                    for (const y of w.GetInstances()) this._runtime.DestroyInstance(y);
                    this._runtime.FlushPendingInstances()
                }
            q.SetIsEndingLayout(!1);
            q.GetMainRunningLayout() === this && q._SetMainRunningLayout(null)
        }
        _SaveInstanceToPersist(q) {
            const w = q.GetObjectClass().GetSID().toString();
            this._persistData.hasOwnProperty(w) || (this._persistData[w] = []);
            this._persistData[w].push(q.SaveToJson())
        }
        _SavePersistData() {
            for (const q of this._layers) {
                q._UpdateZIndices();
                for (const w of q._GetInstances()) {
                    const y =
                        w.GetObjectClass();
                    !y.IsGlobal() && y.HasPersistBehavior() && this._SaveInstanceToPersist(w)
                }
            }
        }
        ResetPersistData() {
            this._persistData = {};
            this._isFirstVisit = !0
        }
        GetRenderTarget() {
            return this._curRenderTarget
        }
        UsesOwnTexture() {
            return "low" === this._runtime.GetCanvasManager().GetCurrentFullscreenScalingQuality() || this._runtime.UsesAnyBackgroundBlending() || "low-latency" === this._runtime.GetCompositingMode() || this._effectList.HasAnyActiveEffect() || this._runtime.GetRenderer().IsWebGL() && this._runtime.Uses3DFeatures()
        }
        _CanFastPathDrawLayout(q) {
            return 0 ===
                q.length ? !0 : 2 <= q.length ? !1 : !q[0].GetShaderProgram().MustPreDraw()
        }
        Draw(q) {
            var w = this._runtime.GetCanvasManager();
            const y = this.UsesOwnTexture();
            var C = null;
            y ? ("low-latency" !== this._runtime.GetCompositingMode() && (q.SetRenderTarget(null), q.ClearRgba(0, 0, 0, 0)), C = {
                    sampling: this._runtime.GetSampling(),
                    isSampled: q.IsWebGPU() || this._runtime.UsesAnyBackgroundBlending() || this._effectList.HasAnyActiveEffect()
                }, "low" === w.GetCurrentFullscreenScalingQuality() && (C.width = w.GetDrawWidth(), C.height = w.GetDrawHeight()),
                C = this._runtime.GetAdditionalRenderTarget(C), q.SetRenderTarget(C)) : q.SetRenderTarget(null);
            q.Clear(this.GetLayoutBackgroundColor());
            this._runtime.Uses3DFeatures() && q.ClearDepth();
            this._curRenderTarget = C;
            for (var F of this._layers) F.UpdateViewport(), F.ShouldDraw() && g.push(F);
            for (let H = 0, M = g.length; H < M;) {
                w = g[H];
                if (w.Has3DCamera() && !w.UsesOwnTexture()) {
                    l.push(w);
                    for (F = H + 1; F < M; ++F) {
                        const B = g[F];
                        if (B.Has3DCamera() && !B.UsesOwnTexture()) l.push(g[F]);
                        else break
                    }
                    if (2 <= l.length) {
                        this._Draw3DLayers(q, C, l);
                        H +=
                            l.length;
                        e.clearArray(l);
                        continue
                    }
                    e.clearArray(l)
                }
                w.Draw(q, C, 0 === H);
                ++H
            }
            e.clearArray(g);
            y && (q.SetDepthEnabled(!1), this._DrawLayoutOwnTextureToRenderTarget(q, C));
            this._curRenderTarget = null
        }
        _DrawLayoutOwnTextureToRenderTarget(q, w) {
            const y = this._effectList.GetActiveEffectTypes(),
                C = this._runtime;
            if (this._CanFastPathDrawLayout(y)) {
                q.SetRenderTarget(null);
                if (1 === y.length) {
                    var F = y[0];
                    const H = F.GetShaderProgram();
                    q.SetProgram(H);
                    d.set(0, 0, 1, 1);
                    c.set(0, 0, C.GetViewportWidth(), C.GetViewportHeight());
                    F = this._effectList.GetEffectParametersForIndex(F.GetIndex());
                    q.SetProgramParameters(null, a, d, d, c, 1 / C.GetDrawWidth(), 1 / C.GetDrawHeight(), this.GetScale(), this.GetAngle(), C.GetGameTime(), F);
                    H.IsAnimated() && C.UpdateRender()
                } else q.SetTextureFillMode();
                0 === y.length ? q.CopyRenderTarget(w) : (q.SetAlphaBlend(), q.ResetColor(), q.DrawRenderTarget(w));
                q.InvalidateRenderTarget(w);
                C.ReleaseAdditionalRenderTarget(w)
            } else e.RenderEffectChain(q, C, this, null, y)
        }
        _Draw3DLayers(q, w, y) {
            var C = this._runtime.GetCanvasManager();
            q.SetDepthEnabled(!0);
            for (var F of y) F._UpdateZIndices(),
                e.appendArray(m, F._GetInstancesInDrawOrder());
            y = y[0];
            F = null;
            if (this._runtime.IsGPUProfiling())
                if (q.IsWebGL()) {
                    if (C = C.GetLayerTimingsBuffer(y)) F = C.AddTimeElapsedQuery(), q.StartQuery(F)
                } else q.IsWebGPU() && q.WriteTimestamp(2 * (y.GetIndex() + 1));
            for (let G = 0, J = m.length; G < J;) {
                var H = m[G],
                    M = H.GetWorldInfo(),
                    B = M.GetLayer();
                if (M.IsVisible() && M.IsInViewport3D(B._GetViewFrustum())) {
                    (!H.RendersToOwnZPlane() || 0 < M.GetDepth()) && x.push(H);
                    var A = H.GetWorldInfo().GetTotalZElevation();
                    u.push(H);
                    for (C = G + 1; C < J; ++C) {
                        const L =
                            m[C],
                            R = L.GetWorldInfo();
                        if (R.IsVisible() && R.IsInViewport3D(R.GetLayer()._GetViewFrustum())) {
                            if (R.GetTotalZElevation() !== A) break;
                            L.RendersToOwnZPlane() ? (0 < R.GetDepth() && x.push(L), u.push(L)) : x.push(L)
                        }
                    }
                    if (1 !== u.length || u[0].MustMitigateZFighting()) {
                        this._Draw3DLayersCoplanarInstances(q, w, u);
                        for (let L = 0, R = x.length; L < R; ++L) H = x[L], M = H.GetWorldInfo(), B = M.GetLayer(), M._SetDrawNonBackFacesOnly(!0), t(B, q), B._DrawInstanceMaybeWithEffects(H, M, q, w), M._SetDrawNonBackFacesOnly(!1)
                    } else {
                        t(B, q);
                        B._DrawInstanceMaybeWithEffects(H,
                            M, q, w);
                        for (let L = 0, R = x.length; L < R; ++L) M = x[L], M !== H && (B = M.GetWorldInfo(), A = B.GetLayer(), t(A, q), A._DrawInstanceMaybeWithEffects(M, B, q, w))
                    }
                    G = C;
                    e.clearArray(u);
                    e.clearArray(x)
                } else ++G
            }
            F && q.EndQuery(F);
            this._runtime.IsGPUProfiling() && q.IsWebGPU() && q.WriteTimestamp(2 * (y.GetIndex() + 1) + 1);
            e.clearArray(m);
            r = null
        }
        _Draw3DLayersCoplanarInstances(q, w, y) {
            q.CoplanarStartStencilPass();
            for (let M = 0, B = y.length; M < B; ++M) {
                var C = y[M],
                    F = C.GetWorldInfo(),
                    H = F.GetLayer();
                F._SetDrawBackFaceOnly(!0);
                t(H, q);
                H._DrawInstance(C,
                    F, q)
            }
            q.CoplanarStartColorPass();
            for (let M = 0, B = y.length; M < B; ++M) C = y[M], F = C.GetWorldInfo(), H = F.GetLayer(), t(H, q), H._DrawInstanceMaybeWithEffects(C, F, q, w), F._SetDrawBackFaceOnly(!1);
            q.CoplanarRestoreStandardRendering()
        }
        _SaveToJson() {
            const q = {
                sx: this.GetScrollX(),
                sy: this.GetScrollY(),
                s: this.GetScale(),
                a: this.GetAngle(),
                w: this.GetWidth(),
                h: this.GetHeight(),
                ortho: this.IsOrthographicProjection(),
                vpX: this.GetVanishingPointX(),
                vpY: this.GetVanishingPointY(),
                fv: this._isFirstVisit,
                persist: this._persistData,
                fx: this._effectList.SaveToJson(),
                layers: {}
            };
            for (const w of this._layers) q.layers[w.GetSID().toString()] = w._SaveToJson();
            return q
        }
        _LoadFromJson(q) {
            this._scrollX = q.sx;
            this._scrollY = q.sy;
            this._scale = q.s;
            this._angle = q.a;
            this._width = q.w;
            this._height = q.h;
            this._isOrthographicProjection = !!q.ortho;
            q.hasOwnProperty("vpX") && (this._vanishingPointX = q.vpX);
            q.hasOwnProperty("vpY") && (this._vanishingPointY = q.vpY);
            this._isFirstVisit = !!q.fv;
            this._persistData = q.persist;
            this._effectList.LoadFromJson(q.fx);
            for (const [w, y] of Object.entries(q.layers)) q =
                parseInt(w, 10), (q = this.GetLayerBySID(q)) && q._LoadFromJson(y);
            this._SetAllLayersProjectionChanged();
            this._SetAllLayersMVChanged()
        }
        GetILayout() {
            return this._iLayout
        }
        UserScriptDispatcher() {
            return this._userScriptDispatcher
        }
        DispatchUserScriptEvent(q) {
            q.layout = this.GetILayout();
            var w = this._runtime;
            (w = w.IsDebug() && !w.GetEventSheetManager().IsInEventEngine()) && b.StartMeasuringScriptTime();
            this._userScriptDispatcher.dispatchEvent(q);
            w && b.AddScriptTime()
        }
        DispatchUserScriptEventAsyncWait(q) {
            q.layout = this.GetILayout();
            return this._userScriptDispatcher.dispatchEventAndWaitAsync(q)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.LayoutManager = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._runtime = b;
            this._allLayouts = [];
            this._layoutsByName = new Map;
            this._layoutsBySid = new Map;
            this._mainRunningLayout = null;
            this._runningSubLayouts = [];
            this._firstLayout = null;
            this._isEndingLayout = 0;
            this._pendingChangeLayout = null
        }
        Release() {
            this._pendingChangeLayout = this._firstLayout = this._mainRunningLayout = this._runtime = null;
            e.clearArray(this._allLayouts);
            this._layoutsByName.clear();
            this._layoutsBySid.clear();
            e.clearArray(this._runningSubLayouts)
        }
        Create(b) {
            b = e.New(e.Layout, this, this._allLayouts.length, b);
            this._allLayouts.push(b);
            this._layoutsByName.set(b.GetName().toLowerCase(), b);
            this._layoutsBySid.set(b.GetSID(), b)
        }
        GetRuntime() {
            return this._runtime
        }
        SetFirstLayout(b) {
            this._firstLayout = b
        }
        GetFirstLayout() {
            if (this._firstLayout) return this._firstLayout;
            if (this._allLayouts.length) return this._allLayouts[0];
            throw Error("no first layout");
        }
        GetLayoutByName(b) {
            return this._layoutsByName.get(b.toLowerCase()) ||
                null
        }
        GetLayoutBySID(b) {
            return this._layoutsBySid.get(b) || null
        }
        GetLayoutByIndex(b) {
            b = e.clamp(Math.floor(b), 0, this._allLayouts.length - 1);
            return this._allLayouts[b]
        }
        GetLayout(b) {
            return "number" === typeof b ? this.GetLayoutByIndex(b) : this.GetLayoutByName(b.toString())
        }
        GetAllLayouts() {
            return this._allLayouts
        }
        _SetMainRunningLayout(b) {
            this._mainRunningLayout = b
        }
        GetMainRunningLayout() {
            return this._mainRunningLayout
        }
        _AddRunningSubLayout(b) {
            if (this._runningSubLayouts.includes(b)) throw Error("layout already running");
            this._runningSubLayouts.push(b)
        }
        _RemoveRunningSubLayout(b) {
            b = this._runningSubLayouts.indexOf(b);
            if (-1 === b) throw Error("layout not running");
            this._runningSubLayouts.splice(b, 1)
        }* runningLayouts() {
            this._mainRunningLayout && (yield this._mainRunningLayout);
            this._runningSubLayouts.length && (yield* this._runningSubLayouts)
        }
        IsLayoutRunning(b) {
            return this._mainRunningLayout === b || this._runningSubLayouts.includes(b)
        }
        SetIsEndingLayout(b) {
            if (b) this._isEndingLayout++;
            else {
                if (0 >= this._isEndingLayout) throw Error("already unset");
                this._isEndingLayout--
            }
        }
        IsEndingLayout() {
            return 0 < this._isEndingLayout
        }
        ChangeMainLayout(b) {
            this._pendingChangeLayout = b
        }
        ClearPendingChangeLayout() {
            this._pendingChangeLayout = null
        }
        IsPendingChangeMainLayout() {
            return !!this._pendingChangeLayout
        }
        GetPendingChangeMainLayout() {
            return this._pendingChangeLayout
        }
        SetAllLayerProjectionChanged() {
            const b = this.GetMainRunningLayout();
            b && b._SetAllLayersProjectionChanged()
        }
        SetAllLayerMVChanged() {
            const b = this.GetMainRunningLayout();
            b && b._SetAllLayersMVChanged()
        }
    }
} {
    "use strict";
    const e = self.C3;
    class b {
        constructor() {
            this.runtime = this.renderer = null;
            this.surfaceHeight = this.surfaceWidth = this.drawHeight = this.drawWidth = 0;
            this.layoutRect = new e.Rect;
            this.rcTexBounce = new e.Rect;
            this.rcTexDest = new e.Rect;
            this.rcTexOrigin = new e.Rect;
            this.screenRect = new e.Rect;
            this.clearRect = new e.Rect;
            this.srcRect = new e.Rect;
            this.fxTex = [null, null];
            this.fxIndex = 0;
            this.otherFxIndex = 1;
            this.layerAngle = this.layerScale = this.boxExtendVertical = this.boxExtendHorizontal = 0;
            this.renderTarget = this.wi =
                this.inst = this.layer = this.layout = null;
            this.didChangeTransform = this.postDraw = this.preDraw = !1;
            this.opts = null
        }
        Clear() {
            this.opts = this.renderTarget = this.wi = this.inst = this.layer = this.layout = this.runtime = this.renderer = null
        }
        ShouldPreDraw(t) {
            t = t.GetShaderProgram();
            if (t.MustPreDraw()) return !0;
            if (this.inst) return t.UsesDest() && (0 !== this.wi.GetAngle() || 0 > this.wi.GetWidth() || 0 > this.wi.GetHeight()) || 0 !== this.boxExtendHorizontal || 0 !== this.boxExtendVertical || !this.wi.HasDefaultColor() || this.inst.MustPreDraw();
            if (this.layer) return !this.layer.HasDefaultColor()
        }
        ShouldPostDraw(t) {
            t =
                t.GetShaderProgram();
            return t.UsesDest() || t.UsesCrossSampling() || this.layout && "low" === this.runtime.GetCanvasManager().GetCurrentFullscreenScalingQuality()
        }
        GetEffectRenderTarget(t) {
            if (0 !== t && 1 !== t) throw Error("invalid effect target");
            const q = this.fxTex;
            if (!q[t]) {
                var w = this.runtime;
                const y = w.GetCanvasManager();
                w = {
                    sampling: w.GetSampling()
                };
                "low" === y.GetCurrentFullscreenScalingQuality() && (w.width = y.GetDrawWidth(), w.height = y.GetDrawHeight());
                q[t] = y.GetAdditionalRenderTarget(w)
            }
            return q[t]
        }
        ReleaseEffectRenderTargets() {
            const t =
                this.fxTex,
                q = this.runtime.GetCanvasManager();
            t[0] && (q.ReleaseAdditionalRenderTarget(t[0]), t[0] = null);
            t[1] && (q.ReleaseAdditionalRenderTarget(t[1]), t[1] = null)
        }
    }
    const a = [];
    let d = 0;

    function c() {
        d === a.length && a.push(new b);
        return a[d++]
    }

    function f(t) {
        t.ReleaseEffectRenderTargets();
        t.Clear();
        d--
    }
    const k = new e.Quad;
    let g = !1;
    async function l(t, q, w) {
        q = await e.Gfx.WebGLRenderTarget.DebugReadPixelsToBlob(q, w);
        q = URL.createObjectURL(q);
        console.log("[FX] " + t + " " + (w ? "" : " [to display]") + ": ", q)
    }
    e.RenderEffectChain =
        function(t, q, w, y, C, F) {
            const H = c();
            H.renderer = t;
            H.runtime = q;
            if (w instanceof e.Instance) H.inst = w, H.wi = H.inst.GetWorldInfo();
            else if (w instanceof e.Layer) H.layer = w;
            else if (w instanceof e.Layout) H.layout = w;
            else throw Error("invalid effects object");
            w = q.GetCanvasManager();
            H.renderTarget = y;
            H.drawWidth = w.GetDrawWidth();
            H.drawHeight = w.GetDrawHeight();
            H.surfaceWidth = H.drawWidth;
            H.surfaceHeight = H.drawHeight;
            H.fxIndex = 0;
            H.otherFxIndex = 1;
            H.boxExtendHorizontal = 0;
            H.boxExtendVertical = 0;
            H.screenRect.set(0, 0, H.drawWidth,
                H.drawHeight);
            H.clearRect.set(0, 0, H.drawWidth, H.drawHeight);
            H.didChangeTransform = !1;
            H.opts = F;
            H.inst ? (y = H.wi, H.layerScale = y.GetLayer().GetRenderScale(), H.layerAngle = y.GetLayer().GetAngle(), H.layoutRect.copy(y.GetBoundingBox())) : H.layer ? (y = H.layer, H.layerScale = y.GetRenderScale(), H.layerAngle = y.GetAngle(), H.layoutRect.copy(y.GetViewport())) : (y = H.layout, H.layerScale = y.GetScale(), H.layerAngle = y.GetAngle(), H.layoutRect.set(0, 0, H.drawWidth, H.drawHeight));
            H.inst ? m(H, C) : (H.rcTexBounce.set(0, 0, H.drawWidth /
                H.surfaceWidth, H.drawHeight / H.surfaceHeight), H.rcTexDest.copy(H.rcTexBounce), H.rcTexOrigin.copy(H.rcTexBounce), H.rcTexBounce.swapTopBottom(), H.rcTexDest.swapTopBottom(), H.rcTexOrigin.swapTopBottom());
            t.SetAlphaBlend();
            t.ResetColor();
            t.SetBaseZ(0);
            t.SetCurrentZ(0);
            H.preDraw = H.ShouldPreDraw(C[0]);
            H.preDraw && u(H);
            t.ResetColor();
            y = C.length - 1;
            H.postDraw = H.ShouldPostDraw(C[y]);
            for (let M = 0, B = C.length; M < B; ++M) F = C[M], w = F.GetShaderProgram(), t.SetProgram(w), w.IsAnimated() && q.UpdateRender(), 0 !== M || H.preDraw ?
                (t.SetCopyBlend(), p(H, F, M === y && !H.postDraw, M)) : x(H, F), 0 === H.fxIndex ? (H.fxIndex = 1, H.otherFxIndex = 0) : (H.fxIndex = 0, H.otherFxIndex = 1);
            H.postDraw && r(H, C);
            t = H.didChangeTransform;
            f(H);
            g = !1;
            return t
        };

    function m(t, q) {
        for (let G = 0, J = q.length; G < J; ++G) {
            var w = q[G].GetShaderProgram();
            t.boxExtendHorizontal += w.GetBoxExtendHorizontal();
            t.boxExtendVertical += w.GetBoxExtendVertical()
        }
        var y = t.wi;
        q = y.GetLayer();
        var C = q.GetAngle();
        w = y.GetBoundingBox();
        var F = y.GetTotalZElevation();
        y = y.GetDepth();
        let [H, M] = q.LayerToDrawSurface(w.getLeft(),
            w.getTop(), F), [B, A] = q.LayerToDrawSurface(w.getRight(), w.getBottom(), F);
        if (0 !== C || 0 < y) {
            const [G, J] = q.LayerToDrawSurface(w.getRight(), w.getTop(), F), [L, R] = q.LayerToDrawSurface(w.getLeft(), w.getBottom(), F);
            if (0 < y) {
                C = F + y;
                const [U, V] = q.LayerToDrawSurface(w.getLeft(), w.getTop(), C), [ba, ia] = q.LayerToDrawSurface(w.getRight(), w.getTop(), C), [ja, qa] = q.LayerToDrawSurface(w.getRight(), w.getBottom(), C), [za, Ca] = q.LayerToDrawSurface(w.getLeft(), w.getBottom(), C);
                q = Math.min(H, B, G, L, U, ba, ja, za);
                B = Math.max(H, B, G, L, U, ba,
                    ja, za);
                H = q;
                q = Math.min(M, A, J, R, V, ia, qa, Ca);
                A = Math.max(M, A, J, R, V, ia, qa, Ca);
                M = q
            } else q = Math.min(H, B, G, L), B = Math.max(H, B, G, L), H = q, q = Math.min(M, A, J, R), A = Math.max(M, A, J, R), M = q
        }
        q = t.screenRect;
        w = t.rcTexOrigin;
        C = t.rcTexDest;
        F = t.clearRect;
        y = t.rcTexBounce;
        q.set(H, M, B, A);
        q.shuntY(t.drawHeight);
        w.copy(q);
        w.divide(t.surfaceWidth, t.surfaceHeight);
        w.swapTopBottom();
        q.inflate(t.boxExtendHorizontal, t.boxExtendVertical);
        C.copy(q);
        C.divide(t.surfaceWidth, t.surfaceHeight);
        C.swapTopBottom();
        F.copy(q);
        F.roundOuter();
        F.inflate(t.boxExtendHorizontal +
            1, t.boxExtendVertical + 1);
        q.clamp(0, 0, t.drawWidth, t.drawHeight);
        F.clamp(0, 0, t.drawWidth, t.drawHeight);
        y.copy(q);
        y.divide(t.surfaceWidth, t.surfaceHeight);
        y.swapTopBottom()
    }

    function u(t) {
        const q = t.renderer;
        q.SetTextureFillMode();
        const w = t.GetEffectRenderTarget(t.fxIndex);
        q.SetRenderTarget(w);
        var y = t.opts;
        y && y.preTransform && y.preTransform();
        q.ClearRect2(t.clearRect);
        t.inst ? (q.SetColor(t.wi.GetPremultipliedColor()), q.SetCurrentZ(t.wi.GetTotalZElevation()), t.inst.Draw(q), q.SetCurrentZ(0)) : (y = (t.layer ||
            t.layout).GetRenderTarget(), t.layer ? q.SetColor(t.layer.GetPremultipliedColor()) : q.ResetColor(), q.DrawRenderTarget(y), q.InvalidateRenderTarget(y), t.runtime.GetCanvasManager().ReleaseAdditionalRenderTarget(y));
        t.rcTexDest.clampFlipped(0, 1, 1, 0);
        t.fxIndex = 1;
        t.otherFxIndex = 0;
        g && l("Pre-draw", q, w)
    }

    function x(t, q) {
        const w = t.renderer,
            y = t.runtime,
            C = t.GetEffectRenderTarget(t.fxIndex);
        w.SetRenderTarget(C);
        var F = t.opts;
        F && F.preTransform && F.preTransform();
        w.ClearRect2(t.clearRect);
        if (t.inst) {
            const [H, M] = t.inst.GetCurrentSurfaceSize();
            (F = t.inst.GetCurrentTexRect()) ? t.srcRect.copy(F): t.srcRect.set(0, 0, 0, 0);
            q = t.wi.GetInstanceEffectList().GetEffectParametersForIndex(q.GetIndex());
            w.SetProgramParameters(t.renderTarget, t.rcTexDest, t.srcRect, t.srcRect, t.layoutRect, 1 / H, 1 / M, t.layerScale, t.layerAngle, y.GetGameTime(), q);
            w.SetCurrentZ(t.wi.GetTotalZElevation());
            t.inst.Draw(w);
            w.SetCurrentZ(0);
            t.rcTexDest.clampFlipped(0, 1, 1, 0);
            t.screenRect.shuntY(t.drawHeight)
        } else q = (t.layer || t.layout).GetEffectList().GetEffectParametersForIndex(q.GetIndex()),
            w.SetProgramParameters(t.renderTarget, t.rcTexDest, t.rcTexBounce, t.rcTexOrigin, t.layoutRect, 1 / t.drawWidth, 1 / t.drawHeight, t.layerScale, t.layerAngle, y.GetGameTime(), q), t = (t.layer || t.layout).GetRenderTarget(), g && l("Layer target", w, t), w.DrawRenderTarget(t), w.InvalidateRenderTarget(t), y.GetCanvasManager().ReleaseAdditionalRenderTarget(t);
        g && l("First bounce", w, C)
    }

    function p(t, q, w, y) {
        const C = t.renderer,
            F = t.runtime;
        0 === y && t.preDraw && t.inst && t.screenRect.shuntY(t.drawHeight);
        w ? (t.inst ? C.SetBlendMode(t.wi.GetBlendMode()) :
            t.layer && C.SetBlendMode(t.layer.GetBlendMode()), w = t.renderTarget, C.SetRenderTarget(w)) : (w = t.GetEffectRenderTarget(t.fxIndex), C.SetRenderTarget(w), C.ClearRect2(t.clearRect));
        q = t.inst ? t.wi.GetInstanceEffectList().GetEffectParametersForIndex(q.GetIndex()) : (t.layer || t.layout).GetEffectList().GetEffectParametersForIndex(q.GetIndex());
        C.SetProgramParameters(t.renderTarget, t.rcTexDest, t.rcTexBounce, t.rcTexOrigin, t.layoutRect, 1 / t.surfaceWidth, 1 / t.surfaceHeight, t.layerScale, t.layerAngle, F.GetGameTime(), q);
        q = t.GetEffectRenderTarget(t.otherFxIndex);
        C.SetTexture(q.GetTexture());
        F.GetCanvasManager().SetDeviceTransform(C);
        t.didChangeTransform = !0;
        k.setFromRect(t.screenRect);
        C.Quad3(k, t.rcTexBounce);
        t.inst || C.InvalidateRenderTarget(q);
        g && l("Bounce " + y, C, w)
    }

    function r(t, q) {
        q = t.renderer;
        if (t.layout) q.SetTextureFillMode(), q.SetRenderTarget(t.renderTarget), t = t.GetEffectRenderTarget(t.otherFxIndex), q.CopyRenderTarget(t), q.InvalidateRenderTarget(t);
        else {
            var w = t.runtime.GetCanvasManager();
            "low" === w.GetCurrentFullscreenScalingQuality() ?
                (q.SetTextureFillMode(), w.SetDeviceTransform(q, w.GetDrawWidth(), w.GetDrawHeight()), t.didChangeTransform = !0) : q.SetDeviceTransformTextureFillMode();
            t.inst ? q.SetBlendMode(t.wi.GetBlendMode()) : t.layer && q.SetBlendMode(t.layer.GetBlendMode());
            q.SetRenderTarget(t.renderTarget);
            w = t.GetEffectRenderTarget(t.otherFxIndex);
            q.SetTexture(w.GetTexture());
            k.setFromRect(t.screenRect);
            q.Quad3(k, t.rcTexBounce);
            t.inst || q.InvalidateRenderTarget(w);
            g && l("Post-draw", q, t.renderTarget)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = /<(.+?)>/g;
    e.TimelineManager = class extends e.DefendedBase {
        constructor(a) {
            super();
            this._runtime = a;
            this._timelineDataManager = e.New(e.TimelineDataManager);
            this._pluginInstance = null;
            this._timelines = [];
            this._timelinesByName = new Map;
            this._objectClassToTimelineMap = new Map;
            this._timelinesCreatedByTemplate = new Map;
            this._scheduledTimelines = [];
            this._playingTimelines = [];
            this._isTickingTimelines = this._changingLayout = this._hasRuntimeListeners = !1;
            this._tickFunc = () => this._OnTick();
            this._tick2Func = () => this._OnTick2();
            this._beforeLayoutChange = () => this._OnBeforeChangeLayout();
            this._layoutChange = () => this._OnAfterChangeLayout();
            this._instanceDestroy = d => this._OnInstanceDestroy(d.instance);
            this._afterLoad = d => this._OnAfterLoad();
            this._destroyedWhileLoadingState = []
        }
        Release() {
            this.RemoveRuntimeListeners();
            this._afterLoad = this._instanceDestroy = this._layoutChange = this._beforeLayoutChange = this._tick2Func = this._tickFunc = null;
            for (const a of this._timelines) a.Stop(), a.Release();
            e.clearArray(this._timelines);
            this._timelines = null;
            this._timelineDataManager.Release();
            this._timelineDataManager = null;
            e.clearArray(this._scheduledTimelines);
            this._scheduledTimelines = null;
            e.clearArray(this._playingTimelines);
            this._playingTimelines = null;
            this._timelinesByName.clear();
            this._timelinesByName = null;
            this._objectClassToTimelineMap.clear();
            this._objectClassToTimelineMap = null;
            this._timelinesCreatedByTemplate.clear();
            this._timelinesCreatedByTemplate = null;
            e.clearArray(this._destroyedWhileLoadingState);
            this._runtime = this._destroyedWhileLoadingState =
                null
        }
        AddRuntimeListeners() {
            const a = this._runtime.Dispatcher();
            a.addEventListener("pretick", this._tickFunc);
            a.addEventListener("tick2", this._tick2Func);
            a.addEventListener("beforelayoutchange", this._beforeLayoutChange);
            a.addEventListener("layoutchange", this._layoutChange);
            a.addEventListener("instancedestroy", this._instanceDestroy);
            a.addEventListener("afterload", this._afterLoad)
        }
        RemoveRuntimeListeners() {
            const a = this._runtime.Dispatcher();
            a.removeEventListener("pretick", this._tickFunc);
            a.removeEventListener("tick2",
                this._tick2Func);
            a.removeEventListener("beforelayoutchange", this._beforeLayoutChange);
            a.removeEventListener("layoutchange", this._layoutChange);
            a.removeEventListener("instancedestroy", this._instanceDestroy);
            a.removeEventListener("afterload", this._afterLoad)
        }
        Create(a) {
            this._timelineDataManager.Add(a);
            a = e.TimelineState.CreateInitial(a, this);
            this.Add(a);
            this.SetTimelineObjectClassesToMap(a);
            this._timelinesCreatedByTemplate.set(a.GetName(), 0)
        }
        CreateFromTemplate(a) {
            var d = this.GetTimelineDataManager();
            a =
                a.GetTemplateName();
            d = d.Get(a);
            d = e.TimelineState.CreateFromTemplate(`${a}:${this._timelinesCreatedByTemplate.get(a)}`, d, this);
            this._IncreaseTemplateTimelinesCount(a);
            this.Add(d);
            return d
        }
        _IncreaseTemplateTimelinesCount(a) {
            this._timelinesCreatedByTemplate.set(a, this._timelinesCreatedByTemplate.get(a) + 1)
        }
        _SetCreatedTemplateTimelinesCount() {
            for (const a of this._timelines) {
                if (a.IsTemplate()) continue;
                const d = a.GetTemplateName();
                this._IncreaseTemplateTimelinesCount(d)
            }
        }
        _ClearCreatedTemplateTimelinesCount() {
            for (const a of this._timelinesCreatedByTemplate.keys()) this._timelinesCreatedByTemplate.set(a,
                0)
        }
        Add(a) {
            this._timelines.push(a);
            this._timelinesByName.set(a.GetName().toLowerCase(), a)
        }
        Remove(a) {
            a.IsTemplate() || (e.arrayFindRemove(this._timelines, a), e.arrayFindRemove(this._scheduledTimelines, a), e.arrayFindRemove(this._playingTimelines, a), this._timelinesByName.delete(a.GetName().toLowerCase()), this.RemoveTimelineFromObjectClassMap(a), a.IsReleased() || a.Release())
        }
        Trigger(a) {
            this._runtime.Trigger(a, this._pluginInstance, null)
        }
        GetRuntime() {
            return this._runtime
        }
        GetTimelineDataManager() {
            return this._timelineDataManager
        }
        SetPluginInstance(a) {
            this._pluginInstance =
                a
        }
        GetPluginInstance() {
            return this._pluginInstance
        }* GetTimelines() {
            for (const a of this._timelines) yield a
        }
        SetTimelineObjectClassToMap(a, d) {
            this._objectClassToTimelineMap.has(a) || this._objectClassToTimelineMap.set(a, new Set);
            this._objectClassToTimelineMap.get(a).add(d)
        }
        SetTimelineObjectClassesToMap(a) {
            for (const d of a.GetObjectClasses()) this.SetTimelineObjectClassToMap(d, a)
        }
        RemoveTimelineFromObjectClassMap(a) {
            for (const [d, c] of this._objectClassToTimelineMap.entries()) c.has(a) && (c.delete(a), 0 === c.size &&
                this._objectClassToTimelineMap.delete(d))
        }
        GetTimelinesForObjectClass(a) {
            if (this._objectClassToTimelineMap.has(a)) return this._objectClassToTimelineMap.get(a)
        }
        GetTimelineOfTemplateForInstances(a, d) {
            if (d)
                for (const c of this._timelines)
                    if (d.every(f => c.HasTrackInstance(f.instance, f.trackId)) && c.GetName().includes(a.GetName())) return c
        }
        GetTimelineByName(a) {
            return this._timelinesByName.get(a.toLowerCase()) || null
        }
        GetScheduledOrPlayingTimelineByName(a) {
            for (const d of this._scheduledTimelines)
                if (d.GetName() ===
                    a) return d;
            for (const d of this._playingTimelines)
                if (d.GetName() === a) return d;
            return null
        }* GetTimelinesByName(a) {
            if (b.test(a)) {
                b.lastIndex = 0;
                let c;
                var d = new Set;
                do
                    if (c = b.exec(a)) {
                        const f = c[1].split(",");
                        for (const k of f) d.add(k)
                    }
                while (c);
                for (const f of d.values())(a = this.GetTimelineByName(f)) && (yield a);
                d.clear()
            } else(d = this.GetTimelineByName(a)) && (yield d)
        }* GetTimelinesByTags(a) {
            for (const d of this._timelines) d.HasTags(a) && (yield d)
        }
        AddScheduledTimeline(a) {
            this._scheduledTimelines.includes(a) || this._scheduledTimelines.push(a);
            this._MaybeEnableRuntimeListeners()
        }
        RemovePlayingTimeline(a) {
            e.arrayFindRemove(this._playingTimelines, a);
            this._MaybeDisableRuntimeListeners()
        }
        ScheduleTimeline(a) {
            this._playingTimelines.includes(a) ? (a.SetPlaying(!0), a.SetScheduled(!1), a.SetMarkedForRemoval(!1)) : (a.SetPlaying(!1), a.SetScheduled(!0), a.SetMarkedForRemoval(!1), this._scheduledTimelines.includes(a) || this._scheduledTimelines.push(a));
            this._MaybeEnableRuntimeListeners()
        }
        DeScheduleTimeline(a) {
            a.SetPlaying(!1);
            a.SetScheduled(!1);
            a.ResolvePlayPromise();
            e.arrayFindRemove(this._scheduledTimelines, a);
            this._MaybeDisableRuntimeListeners()
        }
        CompleteTimeline(a) {
            a.SetPlaying(!1);
            a.SetScheduled(!1);
            a.SetMarkedForRemoval(!0)
        }
        CompleteTimelineAndResolve(a) {
            this.CompleteTimeline(a);
            a.ResolvePlayPromise()
        }
        _OnTick() {
            if (!this.GetRuntime().IsLoadingState() && this._hasRuntimeListeners && !this._changingLayout) {
                var a = !1;
                for (this._isTickingTimelines = !0; this._scheduledTimelines.length;) {
                    var d = this._scheduledTimelines.pop();
                    d.SetInitialState();
                    this._playingTimelines.push(d)
                }
                d =
                    this._runtime.GetDt();
                var c = this._runtime.GetTimeScale();
                for (const f of this._playingTimelines) {
                    if (f.IsMarkedForRemoval()) continue;
                    const k = f.Tick(d, c);
                    !a && k && (a = !0)
                }
                this._isTickingTimelines = !1;
                a && this.GetRuntime().UpdateRender()
            }
        }
        _OnTick2() {
            if (!this.GetRuntime().IsLoadingState() && this._hasRuntimeListeners && !this._changingLayout) {
                var a;
                for (const d of this._playingTimelines) d.IsMarkedForRemoval() && (a || (a = new Set), this._MaybeExecuteTimelineFinishTriggers(d), a.add(d));
                a && e.arrayRemoveAllInSet(this._playingTimelines,
                    a);
                this._MaybeDisableRuntimeListeners()
            }
        }
        _MaybeExecuteTimelineFinishTriggers(a) {
            a.IsReleased() || a.HasValidTracks() && a.IsComplete() && a.InitialStateSet() && a.FinishTriggers()
        }
        _MaybeEnableRuntimeListeners() {
            this._hasRuntimeListeners || (this._hasRuntimeListeners = !0)
        }
        _MaybeDisableRuntimeListeners() {
            this._playingTimelines.length || this._scheduledTimelines.length || this._isTickingTimelines || (this._hasRuntimeListeners = !1)
        }
        _OnBeforeChangeLayout() {
            for (this._changingLayout = !0; this._scheduledTimelines.length;) this.DeScheduleTimeline(this._scheduledTimelines.pop());
            const a = new Set;
            for (const d of this._playingTimelines) d._OnBeforeChangeLayout() && a.add(d);
            e.arrayRemoveAllInSet(this._playingTimelines, a);
            this._MaybeDisableRuntimeListeners();
            for (const d of this._timelines) d.CleanCaches()
        }
        _OnAfterChangeLayout() {
            this._changingLayout = !1
        }
        _OnInstanceDestroy(a) {
            var d = a.GetObjectClass();
            if (d = this.GetTimelinesForObjectClass(d))
                if (this._runtime.IsLoadingState()) this._destroyedWhileLoadingState.push(a);
                else
                    for (const c of d) c.IsTemplate() || (c.IsReleased() ? this.Remove(c) : c.HasValidTracks() ||
                        (this._MaybeExecuteTimelineFinishTriggers(c), this.Remove(c)))
        }
        _OnAfterLoad() {
            for (const a of this._destroyedWhileLoadingState) this._OnInstanceDestroy(a);
            e.clearArray(this._destroyedWhileLoadingState)
        }
        _SaveToJson() {
            return {
                timelinesJson: this._SaveTimelinesToJson(),
                scheduledTimelinesJson: this._SaveScheduledTimelinesToJson(),
                playingTimelinesJson: this._SavePlayingTimelinesToJson(),
                hasRuntimeListeners: this._hasRuntimeListeners,
                changingLayout: this._changingLayout,
                isTickingTimelines: this._isTickingTimelines
            }
        }
        _LoadFromJson(a) {
            a &&
                (this._ClearCreatedTemplateTimelinesCount(), this._LoadTimelinesFromJson(a.timelinesJson), this._LoadScheduledTimelinesFromJson(a.scheduledTimelinesJson), this._LoadPlayingTimelinesFromJson(a.playingTimelinesJson), this._hasRuntimeListeners = !a.hasRuntimeListeners, this._changingLayout = !!a.changingLayout, this._isTickingTimelines = !!a.isTickingTimelines, this._SetCreatedTemplateTimelinesCount(), this._MaybeEnableRuntimeListeners(), this._MaybeDisableRuntimeListeners())
        }
        _SaveTimelinesToJson() {
            return this._timelines.map(a =>
                a._SaveToJson())
        }
        _LoadTimelinesFromJson(a) {
            for (const d of a) {
                a = this.GetTimelineByName(d.name);
                if (!a) {
                    a = this._GetTemplateNameFromJson(d);
                    if (!a) continue;
                    a = this.GetTimelineByName(a);
                    a = this.CreateFromTemplate(a)
                }
                a._LoadFromJson(d);
                a.HasTracks() || this.Remove(a)
            }
        }
        _GetTemplateNameFromJson(a) {
            return (a = a.name.split(":")) && 2 === a.length ? a[0] : null
        }
        _SaveScheduledTimelinesToJson() {
            return this._SaveTimelines(this._scheduledTimelines)
        }
        _LoadScheduledTimelinesFromJson(a) {
            this._LoadTimelines(a, this._scheduledTimelines)
        }
        _SavePlayingTimelinesToJson() {
            return this._SaveTimelines(this._playingTimelines)
        }
        _LoadPlayingTimelinesFromJson(a) {
            this._LoadTimelines(a,
                this._playingTimelines)
        }
        _IsTimelineInJson(a, d) {
            for (const c of d)
                if (c === a.GetName()) return !0;
            return !1
        }
        _SaveTimelines(a) {
            return a.map(d => d.GetName())
        }
        _LoadTimelines(a, d) {
            var c = new Set;
            for (const f of d) this._IsTimelineInJson(f, a) || c.add(f);
            e.arrayRemoveAllInSet(d, c);
            c = f => k => k.GetName() === f;
            for (const f of a)(a = this.GetTimelineByName(f)) && (d.find(c(f)) || d.push(a))
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.TimelineState = class extends e.DefendedBase {
        constructor(b, a, d) {
            super();
            this._runtime = d.GetRuntime();
            this._timelineManager = d;
            this._timelineDataItem = a;
            this._name = b;
            this._tracks = [];
            for (const c of this._timelineDataItem.GetTrackData().trackDataItems()) this._tracks.push(e.TrackState.Create(this, c));
            this._playResolve = this._playPromise = null;
            this._playheadTime = e.New(e.KahanSum);
            this._playheadTime.Set(0);
            this._playbackRate = 1;
            this._pingPongState = 0;
            this._currentRepeatCount = 1;
            this._initialStateSet =
                this._isScheduled = this._isPlaying = !1;
            this._complete = !0;
            this._markedForRemoval = this._released = !1;
            this._completedTick = -1;
            this._firstTick = this._finishedTriggers = this._isTemplate = this._implicitPause = !1;
            this._lastDelta = NaN;
            this._tags = [""];
            this._stringTags = "";
            this._tagsChanged = !1
        }
        static CreateInitial(b, a) {
            var d = a.GetTimelineDataManager();
            const c = d.GetNameId();
            d = d.Get(b[c]);
            b = e.New(e.TimelineState, b[c], d, a);
            b.SetIsTemplate(!0);
            return b
        }
        static CreateFromTemplate(b, a, d) {
            return e.New(e.TimelineState, b, a, d)
        }
        static get WORLD_INSTANCE_BOX_CHANGE() {
            return 1
        }
        static get LAYOUT_RENDER_CHANGE() {
            return e.nextHighestPowerOfTwo(1)
        }
        Release() {
            if (!this.IsReleased()) {
                this._timelineManager.DeScheduleTimeline(this);
                this._timelineManager.CompleteTimelineAndResolve(this);
                for (const b of this._tracks) b.Release();
                e.clearArray(this._tracks);
                this._tracks = null;
                this._playheadTime.Release();
                this._timelineDataItem = this._timelineManager = this._runtime = this._playheadTime = null;
                this._released = !0;
                this._playResolve = this._playPromise = null
            }
        }
        GetTimelineManager() {
            return this._timelineManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetTracks() {
            return this._tracks
        }
        GetSimilarPropertyTracks(b, a, d) {
            const c = [];
            for (const f of this._tracks) {
                if (b !==
                    f.GetInstance()) continue;
                const k = f.GetPropertyTrack(d);
                k && a.constructor === k.GetSourceAdapter().constructor && c.push(k)
            }
            return c
        }
        HasTracks() {
            return !!this._tracks.length
        }
        GetTrackById(b) {
            for (const a of this._tracks)
                if (e.equalsNoCase(a.GetId(), b)) return a;
            return null
        }
        GetTrackByName(b) {
            for (const a of this._tracks)
                if (!a.IsInstanceTrack() && e.equalsNoCase(a.GetName(), b)) return a;
            return null
        }
        SetName(b) {
            this._name = b
        }
        GetName() {
            return this._name
        }
        GetTimelineDataItem() {
            return this._timelineDataItem
        }
        GetTemplateName() {
            return this._timelineDataItem.GetName()
        }
        GetTotalTime() {
            return this._timelineDataItem.GetTotalTime()
        }
        SetTotalTime(b) {
            this._timelineDataItem.SetTotalTime(b)
        }
        GetStep() {
            return this._timelineDataItem.GetStep()
        }
        SetStep(b) {
            this._timelineDataItem.SetStep(b)
        }
        GetInterpolationMode() {
            return this._timelineDataItem.GetInterpolationMode()
        }
        SetInterpolationMode(b) {
            this._timelineDataItem.SetInterpolationMode(b)
        }
        GetResultMode() {
            return this._timelineDataItem.GetResultMode()
        }
        SetResultMode(b) {
            this._timelineDataItem.GetResultMode(b)
        }
        SetEase(b) {
            for (const a of this.GetTracks()) a.SetEase(b)
        }
        GetLoop() {
            return this._timelineDataItem.GetLoop()
        }
        SetLoop(b) {
            return this._timelineDataItem.SetLoop(b)
        }
        GetPingPong() {
            return this._timelineDataItem.GetPingPong()
        }
        SetPingPong(b) {
            return this._timelineDataItem.SetPingPong(b)
        }
        GetRepeatCount() {
            return this._timelineDataItem.GetRepeatCount()
        }
        SetPlaybackRate(b) {
            return this._playbackRate =
                b
        }
        GetPlaybackRate() {
            return this._playbackRate
        }
        IsForwardPlayBack() {
            return this.IsPlaying() ? 0 < this._playbackRate : !0
        }
        GetPlayPromise() {
            return this._playPromise ? this._playPromise : this._playPromise = new Promise(b => {
                this._playResolve = b
            })
        }
        ResolvePlayPromise() {
            this._playPromise && (this._playResolve(), this._playResolve = this._playPromise = null)
        }
        SetTags(b) {
            this._tags = e.TimelineState._GetTagArray(b);
            this._tagsChanged = !0
        }
        GetTags() {
            return this._tags
        }
        GetStringTags() {
            this._tagsChanged && (this._stringTags = this._tags.join(" "));
            this._tagsChanged = !1;
            return this._stringTags
        }
        HasTags(b) {
            return this._tags && this._tags.length ? (b = e.TimelineState._GetTagArray(b)) && b.length ? b.every(e.TimelineState._HasTag, this) : !1 : !1
        }
        OnStarted() {
            e.Plugins.Timeline.Cnds.SetTriggerTimeline(this);
            this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnTimelineStarted);
            this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnTimelineStartedByName);
            this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnTimelineStartedByTags);
            this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnAnyTimelineStarted);
            e.Plugins.Timeline.Cnds.SetTriggerTimeline(null)
        }
        OnCompleted() {
            this._completedTick = this._runtime.GetTickCount()
        }
        FinishTriggers() {
            this._finishedTriggers || (this._finishedTriggers = !0, e.Plugins.Timeline.Cnds.SetTriggerTimeline(this), this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnTimelineFinished), this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnTimelineFinishedByName), this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnTimelineFinishedByTags), this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnAnyTimelineFinished),
                e.Plugins.Timeline.Cnds.SetTriggerTimeline(null))
        }
        SetPlaying(b) {
            this._isPlaying = b
        }
        IsCompletedTick() {
            return this._completedTick === this._runtime.GetTickCount()
        }
        IsPlaying(b = !1) {
            return this.IsCompletedTick() || this.IsScheduled() && !b ? !0 : this._isPlaying
        }
        _IsPlaying() {
            return this.IsPlaying(!0)
        }
        IsPaused() {
            return this._IsPaused()
        }
        _IsPaused() {
            return this.IsReleased() || this.IsScheduled() || this._IsPlaying() || this.IsComplete() ? !1 : !0
        }
        SetScheduled(b) {
            this._isScheduled = b
        }
        IsScheduled() {
            return this._isScheduled
        }
        SetComplete(b) {
            this._complete =
                b;
            b = this.GetTime();
            if (0 >= b || b >= this.GetTotalTime()) this._complete = !0
        }
        IsComplete() {
            return this._complete
        }
        IsReleased() {
            return this._released
        }
        SetMarkedForRemoval(b) {
            this._markedForRemoval = b
        }
        IsMarkedForRemoval() {
            return this._markedForRemoval
        }
        SetImplicitPause(b) {
            this._implicitPause = b
        }
        IsImplicitPause() {
            return this._implicitPause
        }
        SetIsTemplate(b) {
            this._isTemplate = !!b
        }
        IsTemplate() {
            return this._isTemplate
        }
        InitialStateSet() {
            return this._initialStateSet
        }
        GetTime() {
            return this._playheadTime.Get()
        }
        SetTime(b) {
            const a =
                this.GetTime();
            this._SetTime(b);
            this.SetComplete(!1);
            this.IsComplete() || this.SetImplicitPause(!0);
            if (this._IsPlaying() || this.IsScheduled() || !this._initialStateSet) this._IsPlaying() || this.IsScheduled() || this._initialStateSet ? this._IsPlaying() ? this.Stop() : this.IsScheduled() && (this._timelineManager.DeScheduleTimeline(this), this.SetInitialStateFromSetTime()) : this.SetInitialStateFromSetTime();
            this._Interpolate(b, !1, !0, !0, a) && this.GetRuntime().UpdateRender();
            this._OnSetTime()
        }
        _SetTime(b) {
            0 > b ? this._playheadTime.Set(0) :
                b >= this.GetTotalTime() ? this._playheadTime.Set(this.GetTotalTime()) : this._playheadTime.Set(b)
        }
        _OnSetTime() {
            e.Plugins.Timeline && this.constructor === e.TimelineState && (e.Plugins.Timeline.Cnds.SetTriggerTimeline(this), this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnTimeSet), this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnTimeSetByName), this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnTimeSetByTags), e.Plugins.Timeline.Cnds.SetTriggerTimeline(null))
        }
        _CanResume() {
            if (!this.GetLoop())
                if (this.GetPingPong() &&
                    1 === this._pingPongState)
                    if (this.IsForwardPlayBack()) {
                        if (this.GetTime() >= this.GetTotalTime()) return !1
                    } else {
                        if (0 >= this.GetTime()) return !1
                    }
            else if (!this.GetLoop() && !this.GetPingPong())
                if (this.IsForwardPlayBack()) {
                    if (this.GetTime() >= this.GetTotalTime()) return !1
                } else if (0 >= this.GetTime()) return !1;
            return !0
        }
        Resume() {
            this.IsReleased() || this._CanResume() && this.Play(!0)
        }
        Play(b = !1) {
            return this.IsReleased() || this.IsScheduled() ? !1 : this._IsPlaying() && this.IsCompletedTick() ? this._SchedulePlayingTimeline() : this._IsPlaying() ||
                !this.IsComplete() && !b && !this.IsImplicitPause() ? !1 : this._ScheduleStoppedTimeline()
        }
        _SchedulePlayingTimeline() {
            this.SetImplicitPause(!1);
            this._timelineManager.RemovePlayingTimeline(this);
            this._timelineManager.ScheduleTimeline(this);
            this.GetPlayPromise();
            return !0
        }
        _ScheduleStoppedTimeline() {
            this.SetImplicitPause(!1);
            this._timelineManager.ScheduleTimeline(this);
            this.GetPlayPromise();
            return !0
        }
        Stop(b = !1) {
            this.IsReleased() || (this.SetComplete(b), this._timelineManager.CompleteTimeline(this), this.IsComplete() &&
                this.ResolvePlayPromise())
        }
        Reset(b = !0, a = !1) {
            if (!this.IsReleased()) {
                if (!this._IsPlaying() && this.IsScheduled()) return this._timelineManager.DeScheduleTimeline(this);
                if (!this.IsComplete()) {
                    this.Stop(!0);
                    this.IsForwardPlayBack() ? this._SetTime(0) : this._SetTime(this.GetTotalTime());
                    var d = this.GetTime();
                    a = a ? this._InterpolateBeforeChangeLayout(d) : this._Interpolate(d, !1, !1, !0);
                    b && this._OnSetTime();
                    a && b && this.GetRuntime().UpdateRender()
                }
            }
        }
        ResetBeforeChangeLayout() {
            this.Reset(!1, !0)
        }
        _InterpolateBeforeChangeLayout(b) {
            this._Interpolate(b, !1, !1, !0, NaN, !1, !0)
        }
        _OnBeforeChangeLayout() {
            if (this.IsReleased()) return !0;
            if (this.HasValidGlobalTracks()) return !1;
            this._timelineManager.CompleteTimeline(this);
            this.ResetBeforeChangeLayout();
            return !0
        }
        SetInitialStateFromSetTime() {
            this.SetInitialState(!0)
        }
        SetInitialState(b) {
            if (!this.IsMarkedForRemoval())
                if (b) {
                    this._firstTick = this._initialStateSet = !0;
                    for (const a of this._tracks) a.SetInitialState()
                } else if (this.SetPlaying(!0), this.SetScheduled(!1), this.OnStarted(), this.IsComplete()) {
                this._completedTick = -1;
                this._pingPongState = 0;
                this._currentRepeatCount = 1;
                this._finishedTriggers = this._complete = !1;
                this._firstTick = this._initialStateSet = !0;
                this.IsForwardPlayBack() ? this._SetTime(0) : this._SetTime(this.GetTotalTime());
                for (const a of this._tracks) a.SetInitialState()
            } else {
                this._firstTick = !0;
                for (const a of this._tracks) a.SetResumeState()
            }
        }
        Tick(b, a) {
            if (0 !== b || 0 !== this._lastDelta) {
                this._lastDelta = b;
                var d = this.GetTime();
                this._SetTime(d + b * a * this._playbackRate);
                var c;
                this.GetLoop() || this.GetPingPong() ? this.GetLoop() &&
                    !this.GetPingPong() ? c = this._LoopCompleteCheck() : !this.GetLoop() && this.GetPingPong() ? c = this._PingPongCompleteCheck() : this.GetLoop() && this.GetPingPong() && (c = this._LoopPingPongCompleteCheck()) : c = this._SimpleCompleteCheck();
                if (c) {
                    for (const f of this._tracks) f.SetEndState();
                    this.Stop(!0);
                    this.OnCompleted();
                    return !0
                }
                return this._Interpolate(this.GetTime(), !0, !1, !1, d, !0)
            }
        }
        _Interpolate(b, a = !1, d = !1, c = !1, f = NaN, k = !1, g = !1) {
            let l = !1;
            for (var m of this._tracks) m.BeforeInterpolate();
            for (const u of this._tracks) {
                m =
                    b;
                if ("number" === typeof f) {
                    const x = this.GetTime() - u.GetStartOffset(),
                        p = f - u.GetStartOffset();
                    0 > x && 0 < p && (m = u.GetStartOffset(), this._SetTime(m))
                }
                m = u.Interpolate(m, a, d, c, this._firstTick, g);
                !l && m && (l = !0)
            }
            for (const u of this._tracks) u.AfterInterpolate();
            this._firstTick && k && (this._firstTick = !1);
            return l
        }
        _SimpleCompleteCheck() {
            if (this.IsForwardPlayBack()) {
                if (this.GetTime() >= this.GetTotalTime())
                    if (this._currentRepeatCount < this.GetRepeatCount()) this._currentRepeatCount++, this._SetTime(0);
                    else return this._SetTime(this.GetTotalTime()), !0
            } else if (0 >= this.GetTime())
                if (this._currentRepeatCount < this.GetRepeatCount()) this._currentRepeatCount++, this._SetTime(this.GetTotalTime());
                else return this._SetTime(0), !0;
            return !1
        }
        _LoopCompleteCheck() {
            this.IsForwardPlayBack() ? this.GetTime() >= this.GetTotalTime() && this._SetTime(0) : 0 >= this.GetTime() && this._SetTime(this.GetTotalTime());
            return !1
        }
        _PingPongCompleteCheck() {
            if (this.IsForwardPlayBack()) {
                if (this.GetTime() >= this.GetTotalTime())
                    if (this._SetTime(this.GetTotalTime()), this.SetPlaybackRate(-1 * this.GetPlaybackRate()),
                        1 === this._pingPongState)
                        if (this._currentRepeatCount < this.GetRepeatCount()) this._currentRepeatCount++, this._pingPongState = 0;
                        else return !0;
                else 0 === this._pingPongState && (this._pingPongState = 1)
            } else if (0 >= this.GetTime())
                if (this._SetTime(0), this.SetPlaybackRate(-1 * this.GetPlaybackRate()), 1 === this._pingPongState)
                    if (this._currentRepeatCount < this.GetRepeatCount()) this._currentRepeatCount++, this._pingPongState = 0;
                    else return !0;
            else 0 === this._pingPongState && (this._pingPongState = 1);
            return !1
        }
        _LoopPingPongCompleteCheck() {
            this.IsForwardPlayBack() ?
                this.GetTime() >= this.GetTotalTime() && (this._SetTime(this.GetTotalTime()), this.SetPlaybackRate(-1 * this.GetPlaybackRate())) : 0 >= this.GetTime() && (this._SetTime(0), this.SetPlaybackRate(-1 * this.GetPlaybackRate()));
            return !1
        }
        AddTrack() {
            var b = this._timelineDataItem.GetTrackData().AddEmptyTrackDataItem();
            b = e.TrackState.Create(this, b);
            this._tracks.push(b);
            return b
        }
        CleanCaches() {
            for (const b of this._tracks) b.CleanCaches()
        }
        ClearTrackInstances() {
            for (const b of this._tracks) b.ClearInstance()
        }
        SetTrackInstance(b,
            a) {
            if (a)
                for (const d of this._tracks)
                    if (d.IsInstanceTrack()) {
                        if (b) {
                            if (d.GetId() !== b) continue
                        } else if (d.HasInstance()) continue;
                        d.SetInstance(a);
                        this._timelineManager.SetTimelineObjectClassToMap(a.GetObjectClass(), this);
                        break
                    }
        }
        HasTrackInstance(b, a) {
            for (const d of this._tracks)
                if (d.IsInstanceTrack())
                    if (a) {
                        if (a === d.GetId() && b === d.GetInstance()) return !0
                    } else if (b === d.GetInstance()) return !0;
            return !1
        }
        HasValidTracks() {
            return this._tracks.some(b => b.IsInstanceTrack() ? b.CanInstanceBeValid() : !0)
        }
        HasValidGlobalTracks() {
            return this._tracks.some(b =>
                b.IsInstanceTrack() ? b.CanInstanceBeValid() ? (b = b.GetObjectClass()) ? b.IsGlobal() : !1 : !1 : !1)
        }
        GetPropertyTrack(b) {
            for (const a of this.GetTracks())
                for (const d of a.GetPropertyTracks())
                    if (d.GetPropertyName() === b) return d
        }
        GetTrackFromInstance(b) {
            for (const a of this._tracks)
                if (b === a.GetInstance()) return a;
            return null
        }
        GetKeyframeWithTags(b) {
            b = b ? b.split(" ") : [];
            b = [...(new Set(b.map(a => a.toLowerCase().trim()))).values()];
            for (const a of this.GetTracks())
                for (const d of a.GetKeyframeDataItems())
                    if (b.every(c => d.HasTag(c))) return d
        }
        GetObjectClasses() {
            const b = [];
            for (const a of this.GetTracks()) b.push(a.GetObjectClass());
            return b.filter(a => a)
        }
        _SaveToJson() {
            return {
                tracksJson: this._SaveTracksToJson(),
                name: this._name,
                playheadTime: this.GetTime(),
                playbackRate: this._playbackRate,
                pingPongState: this._pingPongState,
                currentRepeatCount: this._currentRepeatCount,
                isPlaying: this._isPlaying,
                isScheduled: this._isScheduled,
                initialStateSet: this._initialStateSet,
                finishedTriggers: this._finishedTriggers,
                complete: this._complete,
                released: this._released,
                markedForRemoval: this._markedForRemoval,
                completedTick: this._completedTick,
                implicitPause: this._implicitPause,
                isTemplate: this._isTemplate,
                tags: this._tags.join(" "),
                stringTags: this._stringTags,
                tagsChanged: this._tagsChanged,
                firstTick: this._firstTick
            }
        }
        _LoadFromJson(b) {
            b && (this._LoadTracksFromJson(b.tracksJson), this._name = b.name, this._playheadTime.Set(b.playheadTime), this._playbackRate = b.playbackRate, this._pingPongState = b.pingPongState, this._currentRepeatCount = b.currentRepeatCount, this._isPlaying = !!b.isPlaying, this._isScheduled = !!b.isScheduled,
                this._initialStateSet = !!b.initialStateSet, this._finishedTriggers = b.hasOwnProperty("finishedTriggers") ? !!b.finishedTriggers : !1, this._complete = !!b.complete, this._released = !!b.released, this._markedForRemoval = !!b.markedForRemoval, this._completedTick = b.completedTick, this._implicitPause = !!b.implicitPause, this._isTemplate = !!b.isTemplate, this._tags = b.tags.split(" "), this._stringTags = b.stringTags, this._tagsChanged = !!b.tagsChanged, this._firstTick = !!b.firstTick)
        }
        _SaveTracksToJson() {
            return this._tracks.map(b =>
                b._SaveToJson())
        }
        _LoadTracksFromJson(b) {
            b.forEach((a, d) => {
                this._tracks[d]._LoadFromJson(a)
            });
            this._tracks.filter(a => a.CanInstanceBeValid())
        }
        static _HasTag(b) {
            const a = this.GetTags();
            return "" === b ? 1 === a.length && "" === a[0] : a.includes(b)
        }
        static _GetTagArray(b) {
            if (e.IsArray(b)) return b.slice(0);
            if (e.IsString(b)) return b.split(" ")
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.TrackState = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._timeline = b;
            this._trackDataItem = a;
            this._trackData = a.GetTrackData();
            this._objectClassIndex = this._instanceUid = NaN;
            this._worldInfo = this._instance = null;
            this._isNested = 0 < a.GetStartOffset();
            this._endStateOfNestedSet = this._initialStateOfNestedSet = !1;
            this._lastKeyframeDataItem = null;
            this._keyframeDataItems = this._trackDataItem.GetKeyframeData().GetKeyframeDataItemArray();
            this._propertyTracks = [];
            for (const d of this._trackDataItem.GetPropertyTrackData().propertyTrackDataItems()) this._propertyTracks.push(e.PropertyTrackState.Create(this,
                d))
        }
        static Create(b, a) {
            return e.New(e.TrackState, b, a)
        }
        Release() {
            this._keyframeDataItems = null;
            for (const b of this._propertyTracks) b.Release();
            e.clearArray(this._propertyTracks);
            this._lastKeyframeDataItem = this._trackDataItem = this._worldInfo = this._instance = this._timeline = this._propertyTracks = null
        }
        CleanCaches() {
            for (const b of this._propertyTracks) b.CleanCaches();
            this._worldInfo = this._instance = null
        }
        GetTimeline() {
            return this._timeline
        }
        GetRuntime() {
            return this._timeline.GetRuntime()
        }
        GetKeyframeDataItems() {
            return this._keyframeDataItems ?
                this._keyframeDataItems : this._keyframeDataItems = this._trackDataItem.GetKeyframeData().GetKeyframeDataItemArray()
        }
        GetPropertyTracks() {
            return this._propertyTracks
        }
        GetPropertyTrack(b) {
            for (const a of this._propertyTracks)
                if (a.GetPropertyName() === b) return a
        }
        MaybeGetInstance() {
            this._instance || this.GetInstance()
        }
        IsInstanceValid() {
            return this._instance ? !this._instance.IsDestroyed() : !1
        }
        CanInstanceBeValid() {
            if (!this.IsInstanceTrack()) return !1;
            var b = this.GetInstanceUID();
            return (b = this.GetRuntime().GetInstanceByUID(b)) ?
                !b.IsDestroyed() : !1
        }
        GetObjectClass() {
            if (this.IsInstanceTrack()) {
                var b = this.GetObjectClassIndex();
                if (-1 !== b) return this.GetRuntime().GetObjectClassByIndex(b)
            }
        }
        ClearInstance() {
            this._instance = null;
            this._instanceUid = -1;
            this._worldInfo = null;
            this._objectClassIndex = -1
        }
        HasInstance() {
            return !!this._instance
        }
        GetInstance() {
            if (this._instance && this.IsInstanceValid()) return this._instance;
            const b = this.GetInstanceUID();
            return this._instance = this.GetRuntime().GetInstanceByUID(b)
        }
        SetInstance(b) {
            if (this._instance !==
                b) {
                this.CleanCaches();
                this._instance = b;
                this._objectClassIndex = b.GetObjectClass().GetIndex();
                this._instanceUid = b.GetUID();
                this._worldInfo = b.GetWorldInfo();
                for (const k of this.propertyTrackItems()) {
                    const g = k.sourceAdapter;
                    switch (k.propertyTrack.GetSourceAdapterId()) {
                        case "instance-variable":
                            g.GetEditorIndex();
                            var a = b.GetObjectClass(),
                                d = a.GetInstanceVariableIndexByName(k.name),
                                c = a.GetInstanceVariableName(d);
                            a = a.GetInstanceVariableType(d);
                            c === k.name && a === k.type && g.UpdateInstanceVariableIndex(d);
                            break;
                        case "behavior":
                            var f = k.behaviorType;
                            d = this.GetObjectClass();
                            c = b.GetObjectClass();
                            a = g.GetBehaviorType(c);
                            f && a && (f = f.GetName(), d.GetBehaviorIndexByName(f), c.GetBehaviorIndexByName(f), g.GetEditorIndex(), g.UpdateBehaviorTypeSid(a.GetSID()))
                    }
                }
            }
        }* propertyTrackItems() {
            for (const d of this._propertyTracks) {
                var b = d.GetSourceAdapter(),
                    a = this.GetObjectClass();
                const c = {
                    propertyTrack: d,
                    sourceAdapter: b
                };
                switch (d.GetSourceAdapterId()) {
                    case "world-instance":
                        c.property = d.GetPropertyName();
                        break;
                    case "instance-variable":
                        b =
                            b.GetEditorIndex();
                        c.name = a.GetInstanceVariableName(b);
                        c.type = a.GetInstanceVariableType(b);
                        break;
                    case "effect":
                        a = a.GetEffectList();
                        b = b.GetEffectType(a);
                        c.effectType = b;
                        break;
                    case "behavior":
                        b = b.GetBehaviorType(a);
                        c.behaviorType = b;
                        break;
                    case "plugin":
                        c.plugin = a.GetPlugin()
                }
                yield c
            }
        }
        GetWorldInfo() {
            if (this._worldInfo && this.IsInstanceValid()) return this._worldInfo;
            const b = this.GetInstance();
            b && (this._worldInfo = b.GetWorldInfo());
            return this._worldInfo
        }
        GetTrackDataItem() {
            return this._trackDataItem
        }
        GetInstanceUID() {
            return this._instanceUid ?
                this._instanceUid : this._trackDataItem.GetInstanceUID()
        }
        SetInstanceUID(b) {
            this._trackDataItem.SetInstanceUID(b)
        }
        GetInterpolationMode() {
            return this._trackDataItem.GetInterpolationMode()
        }
        SetInterpolationMode(b) {
            this._trackDataItem.SetInterpolationMode(b)
        }
        GetResultMode() {
            return this._trackDataItem.GetResultMode()
        }
        GetId() {
            return this._trackDataItem.GetId()
        }
        GetStartOffset() {
            return this._trackDataItem.GetStartOffset()
        }
        GetLocalTotalTime() {
            return this._trackDataItem.GetLocalTotalTime()
        }
        SetLocalTotalTime(b) {
            this._trackDataItem.SetLocalTotalTime(b)
        }
        SetResultMode(b) {
            this._trackDataItem.SetResultMode(b)
        }
        SetEase(b) {
            for (const a of this.GetKeyframeDataItems()) a.SetEase(b);
            for (const a of this.GetPropertyTracks()) a.SetEase(b)
        }
        GetEnable() {
            return this._trackDataItem.GetEnable()
        }
        SetEnable(b) {
            this._trackDataItem.SetEnable(b)
        }
        GetObjectClassIndex() {
            return isNaN(this._objectClassIndex) ? this._trackDataItem.GetObjectClassIndex() : this._objectClassIndex
        }
        SetObjectClassIndex(b) {
            this._trackDataItem.SetObjectClassIndex(b)
        }
        SetOriginalWidth(b) {
            this._trackDataItem.SetOriginalWidth(b)
        }
        GetOriginalWidth() {
            const b = this.GetInstance();
            return b && b.GetSdkInstance().IsOriginalSizeKnown() ? b.GetSdkInstance().GetOriginalWidth() :
                this._trackDataItem.GetOriginalWidth()
        }
        SetOriginalHeight(b) {
            this._trackDataItem.SetOriginalHeight(b)
        }
        GetOriginalHeight() {
            const b = this.GetInstance();
            return b && b.GetSdkInstance().IsOriginalSizeKnown() ? b.GetSdkInstance().GetOriginalHeight() : this._trackDataItem.GetOriginalHeight()
        }
        GetType() {
            return this._trackDataItem.GetType()
        }
        GetName() {
            return this._trackDataItem.GetName()
        }
        IsInstanceTrack() {
            return 0 === this.GetType()
        }
        IsValueTrack() {
            return 1 === this.GetType()
        }
        SetInitialState() {
            this.MaybeGetInstance();
            if (this.IsInstanceValid() ||
                !this.IsInstanceTrack()) {
                for (var b of this._propertyTracks) b.SetInitialState();
                b = this.GetTimeline().IsForwardPlayBack() ? 0 : this.GetLocalTotalTime();
                this._lastKeyframeDataItem = this.GetLastKeyFrameBeforeTime(b);
                this._endStateOfNestedSet = this._initialStateOfNestedSet = !1;
                this.Interpolate(b)
            }
        }
        SetResumeState() {
            this.MaybeGetInstance();
            if (this.IsInstanceValid() || !this.IsInstanceTrack()) {
                this._timeline.IsForwardPlayBack();
                var b = this._timeline.GetTime() - this.GetStartOffset();
                this._lastKeyframeDataItem = this.GetLastKeyFrameBeforeTime(b);
                for (const a of this._propertyTracks) a.SetResumeState()
            }
        }
        SetEndState() {
            if (!(this.GetTimeline().IsComplete() || (this.MaybeGetInstance(), !this.IsInstanceValid() && this.IsInstanceTrack() || this._isNested))) {
                const b = this._timeline.GetTime(),
                    a = this.GetStartOffset() + this.GetLocalTotalTime();
                b >= a ? this.Interpolate(this.GetLocalTotalTime(), !0, !1, !0) : 0 >= b && this.Interpolate(0, !0, !1, !0)
            }
        }
        BeforeInterpolate() {
            for (const b of this._propertyTracks) b.BeforeInterpolate()
        }
        Interpolate(b, a = !1, d = !1, c = !1, f = !1, k = !1) {
            this.MaybeGetInstance();
            if (!this.IsInstanceValid() && this.IsInstanceTrack() || k && this.IsInstanceTrack() && this.GetObjectClass().IsGlobal()) return !1;
            b -= this.GetStartOffset();
            if (0 > b) return !1;
            this.MaybeSetInitialStateOfNestedTrack(b, a);
            this.MaybeTriggerKeyframeReachedConditions(b, a, f);
            f = k = !1;
            for (const g of this._propertyTracks) {
                const l = g.Interpolate(b, d, !1, c);
                k || 0 === (l & e.TimelineState.WORLD_INSTANCE_BOX_CHANGE) || (k = !0);
                f || 0 === (l & e.TimelineState.LAYOUT_RENDER_CHANGE) || (f = !0)
            }
            this.MaybeSetEndStateOfNestedTrack(b, a);
            k && (b = this.GetWorldInfo()) &&
                b.SetBboxChanged();
            return f
        }
        AfterInterpolate() {
            for (const b of this._propertyTracks) b.AfterInterpolate()
        }
        MaybeSetInitialStateOfNestedTrack(b, a) {
            if (a && this._isNested && !this._initialStateOfNestedSet) {
                if (this.GetTimeline().IsForwardPlayBack()) {
                    if (0 > b) return;
                    for (const d of this._propertyTracks) d.Interpolate(0, !1, !1, !0)
                } else {
                    if (b > this.GetLocalTotalTime()) return;
                    for (const d of this._propertyTracks) d.Interpolate(this.GetLocalTotalTime(), !1, !1, !0)
                }
                for (const d of this._propertyTracks) d.SetInitialState();
                this._initialStateOfNestedSet = !0
            }
        }
        MaybeSetEndStateOfNestedTrack(b, a) {
            if (a && this._isNested && !this._endStateOfNestedSet)
                if (this.GetTimeline().IsForwardPlayBack()) {
                    if (b >= this.GetLocalTotalTime()) {
                        for (const d of this._propertyTracks) d.Interpolate(this.GetLocalTotalTime(), !1, !1, !0);
                        this._endStateOfNestedSet = !0
                    }
                } else if (0 >= b) {
                for (const d of this._propertyTracks) d.Interpolate(0, !1, !1, !0);
                this._endStateOfNestedSet = !0
            }
        }
        MaybeTriggerKeyframeReachedConditions(b, a, d) {
            if (!d && a) return b = this.GetLastKeyFrameBeforeTime(b), b !== this._lastKeyframeDataItem &&
                this.OnKeyframeReached(b), this._lastKeyframeDataItem = b
        }
        GetLastKeyFrameBeforeTime(b) {
            const a = this.GetTimeline();
            let d = this._trackData.GetKeyFrameDataItemAtTime(b, this._trackDataItem);
            return d ? d : a.IsForwardPlayBack() ? this._trackData.GetFirstKeyFrameDataItemLowerOrEqualThan(b, this._trackDataItem) : this._trackData.GetFirstKeyFrameDataItemHigherOrEqualThan(b, this._trackDataItem)
        }
        OnKeyframeReached(b) {
            if (e.Plugins.Timeline && this.GetTimeline().constructor === e.TimelineState) {
                var a = this.GetTimeline();
                e.Plugins.Timeline.Cnds.SetTriggerTimeline(a);
                e.Plugins.Timeline.Cnds.SetTriggerKeyframe(b);
                b = a.GetTimelineManager();
                b.Trigger(e.Plugins.Timeline.Cnds.OnAnyKeyframeReached);
                b.Trigger(e.Plugins.Timeline.Cnds.OnKeyframeReached);
                e.Plugins.Timeline.Cnds.SetTriggerTimeline(null);
                e.Plugins.Timeline.Cnds.SetTriggerKeyframe(null)
            }
        }
        AddKeyframe() {
            return this._trackDataItem.GetKeyframeData().AddEmptyKeyframeDataItem()
        }
        AddPropertyTrack() {
            var b = this._trackDataItem.GetPropertyTrackData().AddEmptyPropertyTrackDataItem();
            b = e.PropertyTrackState.Create(this, b);
            this._propertyTracks.push(b);
            return b
        }
        DeleteKeyframes(b) {
            this._trackDataItem.GetKeyframeData().DeleteKeyframeDataItems(b)
        }
        DeletePropertyKeyframes(b) {
            for (const a of this._propertyTracks) a.DeletePropertyKeyframes(b)
        }
        SaveState() {
            for (const b of this._propertyTracks) b.SaveState()
        }
        CompareInitialStateWithCurrent() {
            this.MaybeGetInstance();
            if (this.IsInstanceValid() || !this.IsInstanceTrack())
                for (const b of this._propertyTracks) b.CompareInitialStateWithCurrent()
        }
        CompareSaveStateWithCurrent() {
            this.MaybeGetInstance();
            if (this.IsInstanceValid() || !this.IsInstanceTrack()) {
                var b = !1;
                for (const a of this._propertyTracks) {
                    const d = a.CompareSaveStateWithCurrent();
                    !b && d && (b = !0)
                }
                b && (b = this.AddKeyframe(), b.SetTime(this.GetTimeline().GetTime()), b.SetEase("noease"), b.SetEnable(!0), b.SetTags(""))
            }
        }
        _SaveToJson() {
            var b = this.GetInstance();
            b = b ? b.GetUID() : this.GetInstanceUID();
            return {
                propertyTracksJson: this._SavePropertyTracksToJson(),
                lastKeyframeDataItemJson: this._SaveLastKeyframeDataItemToJson(),
                initialStateOfNestedSet: this._initialStateOfNestedSet,
                endStateOfNestedSet: this._endStateOfNestedSet,
                instanceUid: b
            }
        }
        _LoadFromJson(b) {
            b && (this._LoadPropertyTracksFromJson(b.propertyTracksJson), this._LoadLastKeyframeDataItemFromJson(b.lastKeyframeDataItemJson), this._LoadInstanceFromJson(b.instanceUid), this._initialStateOfNestedSet = !1, b.hasOwnProperty.initialStateOfNestedSet && (this._initialStateOfNestedSet = b.initialStateOfNestedSet), this._endStateOfNestedSet = !1, b.hasOwnProperty.endStateOfNestedSet && (this._endStateOfNestedSet = b.endStateOfNestedSet))
        }
        _SaveLastKeyframeDataItemToJson() {
            return this._trackDataItem.GetKeyframeData().GetKeyframeDataItemIndex(this._lastKeyframeDataItem)
        }
        _SavePropertyTracksToJson() {
            return this._propertyTracks.map(b =>
                b._SaveToJson())
        }
        _LoadPropertyTracksFromJson(b) {
            b.forEach((a, d) => {
                this._propertyTracks[d]._LoadFromJson(a)
            })
        }
        _LoadInstanceFromJson(b) {
            if (e.IsFiniteNumber(b) && (b = this.GetRuntime().GetInstanceByUID(b))) {
                var a = this.GetTimeline();
                a.ClearTrackInstances();
                a.SetTrackInstance(this._trackDataItem.GetId(), b)
            }
        }
        _LoadLastKeyframeDataItemFromJson(b) {
            this._lastKeyframeDataItem = this._trackDataItem.GetKeyframeData().GetKeyframeDataItemFromIndex(b)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.PropertyTrackState = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._track = b;
            this._propertyTrackDataItem = a;
            this._propertyTrackData = a.GetPropertyTrackData();
            this._sourceAdapter = this.GetSourceAdapter();
            this._propertyKeyframeDataItems = this._propertyTrackDataItem.GetPropertyKeyframeData().GetPropertyKeyframeDataItemArray()
        }
        static Create(b, a) {
            return e.New(e.PropertyTrackState, b, a)
        }
        Release() {
            this._track = null;
            this._sourceAdapter && (this._sourceAdapter.Release(), this._sourceAdapter =
                null);
            this._propertyTrackData = this._propertyTrackDataItem = this._propertyKeyframeDataItems = null
        }
        GetTrack() {
            return this._track
        }
        GetPropertyTrackDataItem() {
            return this._propertyTrackDataItem
        }
        GetPropertyTrackData() {
            return this._propertyTrackData
        }
        GetTimeline() {
            return this._track.GetTimeline()
        }
        GetRuntime() {
            return this._track.GetRuntime()
        }
        GetInstance() {
            return this._track.GetInstance()
        }
        GetSourceAdapter() {
            if (this._sourceAdapter) return this._sourceAdapter;
            let b;
            switch (this._propertyTrackDataItem.GetSourceAdapterId()) {
                case "behavior":
                    b =
                        new e.PropertyTrackState.BehaviorSourceAdapter(this);
                    break;
                case "effect":
                    b = new e.PropertyTrackState.EffectSourceAdapter(this);
                    break;
                case "instance-variable":
                    b = new e.PropertyTrackState.InstanceVariableSourceAdapter(this);
                    break;
                case "plugin":
                    b = new e.PropertyTrackState.PluginSourceAdapter(this);
                    break;
                case "world-instance":
                    b = new e.PropertyTrackState.WorldInstanceSourceAdapter(this);
                    break;
                case "value":
                    b = new e.PropertyTrackState.ValueSourceAdapter(this)
            }
            return this._sourceAdapter = b
        }
        GetSourceAdapterId() {
            return this._propertyTrackDataItem.GetSourceAdapterId()
        }
        SetSourceAdapterId(b) {
            this._propertyTrackDataItem.SetSourceAdapterId(b)
        }
        GetSourceAdapterArgs() {
            return this._propertyTrackDataItem.GetSourceAdapterArguments()
        }
        SetSourceAdapterArgs(b) {
            this._propertyTrackDataItem.SetSourceAdapterArguments(b)
        }
        GetSourceAdapterValue() {
            return this.GetSourceAdapter().GetValue()
        }
        GetPropertyName() {
            return this._propertyTrackDataItem.GetProperty()
        }
        SetPropertyName(b) {
            this._propertyTrackDataItem.SetProperty(b)
        }
        GetPropertyType() {
            return this._propertyTrackDataItem.GetType()
        }
        SetPropertyType(b) {
            this._propertyTrackDataItem.SetType(b)
        }
        GetPropertyKeyframeType() {
            return this.GetPropertyTrackData().GetFirstPropertyKeyframeDataItem(this._propertyTrackDataItem).GetType()
        }
        GetMin() {
            return this._propertyTrackDataItem.GetMin()
        }
        SetMin(b) {
            this._propertyTrackDataItem.SetMin(b)
        }
        GetMax() {
            return this._propertyTrackDataItem.GetMax()
        }
        SetMax(b) {
            this._propertyTrackDataItem.SetMax(b)
        }
        GetEnable() {
            return this._propertyTrackDataItem.GetEnable()
        }
        SetEnable(b) {
            this._propertyTrackDataItem.SetEnable(b)
        }
        GetInterpolationMode() {
            return this._propertyTrackDataItem.GetInterpolationMode()
        }
        SetInterpolationMode(b) {
            this._propertyTrackDataItem.SetInterpolationMode(b)
        }
        GetResultMode() {
            return this._propertyTrackDataItem.GetResultMode()
        }
        SetResultMode(b) {
            this._propertyTrackDataItem.SetResultMode(b)
        }
        SetEase(b) {
            for (const a of this.GetPropertyKeyframeDataItems()) a.SetEase(b)
        }
        GetPropertyKeyframeDataItems() {
            return this._propertyKeyframeDataItems ?
                this._propertyKeyframeDataItems : this._propertyKeyframeDataItems = this._propertyTrackDataItem.GetPropertyKeyframeData().GetPropertyKeyframeDataItemArray()
        }* GetPropertyKeyframeValues() {
            for (const b of this.GetPropertyKeyframeDataItems()) yield b.GetValueWithResultMode()
        }
        CleanCaches() {
            this.GetSourceAdapter().CleanCaches()
        }
        GetCurrentState() {
            return this.GetSourceAdapter().GetCurrentState()
        }
        SetInitialState() {
            this.GetSourceAdapter().SetInitialState()
        }
        SetResumeState() {
            this.GetSourceAdapter().SetResumeState()
        }
        BeforeInterpolate() {
            this.GetSourceAdapter().BeforeInterpolate()
        }
        Interpolate(b,
            a = !1, d = !1, c = !1) {
            var f = this._propertyTrackDataItem;
            let k = this._propertyTrackData.GetPropertyKeyFrameDataItemAtTime(b, f);
            k ? f = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemHigherThan(b, f) : (k = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(b, f), f = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(b, f));
            return this.GetSourceAdapter().Interpolate(b, k, f, a, d, c)
        }
        AfterInterpolate() {
            this.GetSourceAdapter().AfterInterpolate()
        }
        static GetStartPropertyKeyframeForTime(b,
            a) {
            const d = a.GetPropertyTrackDataItem();
            a = a._propertyTrackData;
            let c = a.GetPropertyKeyFrameDataItemAtTime(b, d);
            c || (c = a.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(b, d));
            return c
        }
        static GetEndPropertyKeyframeForTime(b, a) {
            const d = a.GetPropertyTrackDataItem();
            a = a._propertyTrackData;
            return a.GetPropertyKeyFrameDataItemAtTime(b, d) ? a.GetFirstPropertyKeyFrameDataItemHigherThan(b, d) : a.GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(b, d)
        }
        AddPropertyKeyframe() {
            return this._propertyTrackDataItem.GetPropertyKeyframeData().AddEmptyPropertyKeyframeDataItem()
        }
        DeletePropertyKeyframes(b) {
            this._propertyTrackDataItem.GetPropertyKeyframeData().DeletePropertyKeyframeDataItems(b)
        }
        SaveState() {
            this.GetSourceAdapter().SaveState()
        }
        CompareInitialStateWithCurrent() {
            if (this.GetSourceAdapter().CompareInitialStateWithCurrent()) {
                const b =
                    this._propertyTrackData.GetFirstPropertyKeyframeDataItem(this._propertyTrackDataItem),
                    a = this.GetSourceAdapter().GetCurrentState();
                b.SetAbsoluteValue(a)
            }
        }
        CompareSaveStateWithCurrent() {
            const b = this.GetSourceAdapter().CompareSaveStateWithCurrent();
            b && this.AddPropertyKeyframeAtCurrentTime();
            this.GetSourceAdapter().ClearSaveState();
            return b
        }
        AddPropertyKeyframeAtCurrentTime() {
            const b = this.GetTimeline().GetTime(),
                a = this.GetSourceAdapter(),
                d = e.PropertyTrackState.GetStartPropertyKeyframeForTime(b, this),
                c =
                this.AddPropertyKeyframe();
            c.SetType(d.GetType());
            c.SetTime(b);
            c.SetEase(d.GetEase());
            c.SetEnable(!0);
            c.SetValue(a.GetValueAtTime());
            c.SetAbsoluteValue(a.GetCurrentState())
        }
        _SaveToJson() {
            return {
                sourceAdapterJson: this.GetSourceAdapter()._SaveToJson()
            }
        }
        _LoadFromJson(b) {
            b && this.GetSourceAdapter()._LoadFromJson(b.sourceAdapterJson)
        }
    }
} {
    "use strict";
    const e = self.C3.PropertyTrackState;
    e.PropertySourceAdapter = class {
        constructor(b) {
            this._propertyTrack = b;
            this._propertyAdapter = null
        }
        Release() {
            this._propertyAdapter && (this._propertyAdapter.Release(), this._propertyAdapter = null);
            this._propertyTrack = null
        }
        GetPropertyTrack() {
            return this._propertyTrack
        }
        CleanCaches() {
            this._propertyAdapter && this._propertyAdapter.CleanCaches()
        }
        GetPropertyAdapter() {
            return this._propertyAdapter ? this._propertyAdapter : this._propertyAdapter = this._CreatePropertyAdapter()
        }
        GetEditorIndex() {}
        GetIndex() {
            return this.GetEditorIndex()
        }
        GetTarget() {}
        SetInitialState() {
            this.GetPropertyAdapter().SetInitialState()
        }
        SetResumeState() {
            this.GetPropertyAdapter().SetResumeState()
        }
        BeforeInterpolate() {
            this.GetPropertyAdapter().BeforeChangeProperty()
        }
        Interpolate(b,
            a, d, c, f, k) {
            const g = e.PropertySourceAdapter.GetInterpolateFunc(this._propertyTrack)(b, a, d, this._propertyTrack);
            return f ? g : this.GetPropertyAdapter().ChangeProperty(b, g, a, d, c, k)
        }
        AfterInterpolate() {
            this.GetPropertyAdapter().AfterChangeProperty()
        }
        SaveState() {
            this.GetPropertyAdapter().SetSaveState()
        }
        ClearSaveState() {
            this.GetPropertyAdapter().ClearSaveState()
        }
        GetCurrentState() {
            return this.GetPropertyAdapter().GetCurrentState()
        }
        CompareInitialStateWithCurrent() {
            return this.GetPropertyAdapter().CompareInitialStateWithCurrent()
        }
        CompareSaveStateWithCurrent() {
            return this.GetPropertyAdapter().CompareSaveStateWithCurrent()
        }
        GetValueAtTime() {
            return e.PropertySourceAdapter.GetValueAtTime(this._propertyTrack)
        }
        _CreatePropertyAdapter() {
            const b =
                this._propertyTrack.GetPropertyType();
            switch (this._propertyTrack.GetPropertyKeyframeType()) {
                case "combo":
                case "boolean":
                case "text":
                case "string":
                    return new e.PropertyInterpolationAdapter.NoInterpolationAdapter(this);
                case "numeric":
                case "number":
                case "angle":
                    return "combo" === b ? new e.PropertyInterpolationAdapter.NoInterpolationAdapter(this) : new e.PropertyInterpolationAdapter.NumericInterpolationAdapter(this);
                case "color":
                case "offsetColor":
                    return new e.PropertyInterpolationAdapter.ColorInterpolationAdapter(this)
            }
        }
        _SaveToJson() {
            return {
                propertyAdapterJson: this.GetPropertyAdapter()._SaveToJson()
            }
        }
        _LoadFromJson(b) {
            b &&
                this.GetPropertyAdapter()._LoadFromJson(b.propertyAdapterJson)
        }
        static GetValueAtTime(b) {
            const a = b.GetTrack().GetTimeline().GetTime(),
                d = e.GetStartPropertyKeyframeForTime(a, b),
                c = e.GetEndPropertyKeyframeForTime(a, b);
            return e.PropertySourceAdapter.GetInterpolateFunc(b)(a, d, c, b)
        }
        static GetValue(b, a, d) {
            let c = b.GetResultMode();
            "combo" === b.GetPropertyType() && (c = "absolute");
            switch (c) {
                case "relative":
                    return a + d;
                case "absolute":
                    return d
            }
        }
        static GetInterpolateFunc(b) {
            switch (b.GetPropertyKeyframeType()) {
                case "numeric":
                    return e.NumericTypeAdapter.Interpolate;
                case "angle":
                    return e.AngleTypeAdapter.Interpolate;
                case "boolean":
                    return e.BooleanTypeAdapter.Interpolate;
                case "color":
                    return e.ColorTypeAdapter.Interpolate;
                case "text":
                    return e.TextTypeAdapter.Interpolate
            }
        }
        static GetWillChangeFunc(b) {
            switch (b.GetPropertyKeyframeType()) {
                case "numeric":
                    return e.NumericTypeAdapter.WillChange;
                case "angle":
                    return e.AngleTypeAdapter.WillChange;
                case "boolean":
                    return e.BooleanTypeAdapter.WillChange;
                case "color":
                    return e.ColorTypeAdapter.WillChange;
                case "text":
                    return e.TextTypeAdapter.WillChange
            }
        }
    }
} {
    "use strict";
    const e = self.C3;
    class b extends e.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a)
        }
    }
    e.PropertyTrackState.WorldInstanceSourceAdapter = b
} {
    "use strict";
    const e = self.C3;
    class b extends e.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a);
            this._updatedIndex = NaN
        }
        GetEditorIndex() {
            return this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0]
        }
        GetIndex() {
            return this._updatedIndex ? this._updatedIndex : super.GetIndex()
        }
        GetTarget() {
            return this._propertyTrack.GetTrack().GetInstance()
        }
        UpdateInstanceVariableIndex(a) {
            this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0] !== a && (this._updatedIndex =
                a)
        }
        Interpolate(a, d, c, f, k, g) {
            if (this.GetPropertyAdapter().CanChange(d.GetValue())) return super.Interpolate(a, d, c, f, k, g)
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                index: this._updatedIndex
            })
        }
        _LoadFromJson(a) {
            a && (super._LoadFromJson(a), this._updatedIndex = a.index)
        }
    }
    e.PropertyTrackState.InstanceVariableSourceAdapter = b
} {
    "use strict";
    const e = self.C3;
    class b extends e.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a);
            this._sid = NaN
        }
        GetEditorIndex() {
            return this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[1]
        }
        GetTarget() {
            var a = this._propertyTrack.GetPropertyTrackDataItem(),
                d = this._propertyTrack.GetTrack();
            a = this._sid ? this._sid : a.GetSourceAdapterArguments()[0];
            d = d.GetInstance();
            a = d.GetBehaviorIndexBySID(a);
            return d.GetBehaviorInstances()[a].GetSdkInstance()
        }
        GetBehaviorType(a) {
            const d =
                this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[2];
            return a.GetBehaviorTypeByName(d)
        }
        UpdateBehaviorTypeSid(a) {
            this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0] !== a && (this._sid = a)
        }
        Interpolate(a, d, c, f, k, g) {
            const l = this._propertyTrack.GetTrack().GetInstance();
            if (this.GetBehaviorType(l.GetObjectClass())) return super.Interpolate(a, d, c, f, k, g)
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                sid: this._sid
            })
        }
        _LoadFromJson(a) {
            a && (super._LoadFromJson(a),
                this._sid = a.sid)
        }
    }
    e.PropertyTrackState.BehaviorSourceAdapter = b
} {
    "use strict";
    const e = self.C3;
    class b extends e.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a)
        }
        GetEditorIndex() {
            return this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[1]
        }
        GetTarget() {
            const a = this._propertyTrack.GetTrack().GetWorldInfo().GetInstanceEffectList();
            var d = a.GetEffectList();
            d = this.GetEffectType(d).GetIndex();
            return a.IsEffectIndexActive(d) ? a.GetEffectParametersForIndex(d) : null
        }
        GetEffectType(a) {
            const d = this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0];
            return a.GetEffectTypeByName(d)
        }
        Interpolate(a, d, c, f, k, g) {
            if (this._IsEffectActive()) return super.Interpolate(a, d, c, f, k, g)
        }
        _IsEffectActive() {
            const a = this._propertyTrack.GetTrack().GetWorldInfo().GetInstanceEffectList();
            var d = a.GetEffectList();
            if (d = this.GetEffectType(d)) return d = d.GetIndex(), a.IsEffectIndexActive(d)
        }
    }
    e.PropertyTrackState.EffectSourceAdapter = b
} {
    "use strict";
    const e = self.C3;
    class b extends e.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a)
        }
        GetEditorIndex() {
            return this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0]
        }
        GetTarget() {
            return this._propertyTrack.GetTrack().GetInstance().GetSdkInstance()
        }
        Interpolate(a, d, c, f, k, g) {
            var l = this._propertyTrack.GetTrack();
            const m = l.GetObjectClass().GetPlugin();
            l = l.GetInstance().GetObjectClass().GetPlugin();
            if (m === l) return super.Interpolate(a, d, c, f, k, g)
        }
    }
    e.PropertyTrackState.PluginSourceAdapter =
        b
} {
    "use strict";
    const e = self.C3;
    class b extends e.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a);
            this._value = 0;
            this._init = !1
        }
        SetInitialState() {
            const a = this._propertyTrack.GetPropertyTrackData();
            let d = this._propertyTrack.GetPropertyTrackDataItem();
            d = a.GetFirstPropertyKeyframeDataItem(d);
            this._value = d.GetValueWithResultMode()
        }
        SetResumeState() {}
        GetValue() {
            this._init || this._propertyTrack.Interpolate(0);
            return this._value
        }
        Interpolate(a, d, c, f, k, g) {
            f = e.PropertyTrackState.NumericTypeAdapter.Interpolate;
            this._value =
                f(a, d, c, this._propertyTrack);
            this._init = !0
        }
        SaveState() {}
        ClearSaveState() {}
        GetCurrentState() {
            return this._value
        }
        CompareInitialStateWithCurrent() {
            return !1
        }
        CompareSaveStateWithCurrent() {
            return !1
        }
        _SaveToJson() {
            return {
                value: this._value,
                init: this._init
            }
        }
        _LoadFromJson(a) {
            a && (this._value = a.value, this._init = a.hasOwnProperty("init") ? a.init : !0)
        }
    }
    e.PropertyTrackState.ValueSourceAdapter = b
}
"use strict";
self.C3.PropertyTrackState.PropertyInterpolationAdapter = class {
    constructor(e) {
        this._sourceAdapter = e;
        this._propertyTrack = e.GetPropertyTrack();
        this._worldInfo = this._propertyTrack.GetTrack().GetWorldInfo();
        this._property = this._propertyTrack.GetPropertyName();
        this._firstAbsoluteUpdate = !1;
        this._target = this._saveState = null
    }
    Release() {
        this._target = this._saveState = this._worldInfo = this._propertyTrack = this._sourceAdapter = null
    }
    CleanCaches() {
        this._target = this._saveState = this._worldInfo = null
    }
    GetPropertyTrack() {
        return this._propertyTrack
    }
    GetWorldInfo() {
        return this._worldInfo ?
            this._worldInfo : this._worldInfo = this._propertyTrack.GetTrack().GetWorldInfo()
    }
    SetFirstAbsoluteUpdate(e) {
        this._firstAbsoluteUpdate = !!e
    }
    GetFirstAbsoluteUpdate() {
        return this._firstAbsoluteUpdate
    }
    SetInitialState() {}
    SetResumeState() {}
    SetSaveState() {
        this._saveState = this.GetCurrentState()
    }
    ClearSaveState() {
        this._saveState = null
    }
    GetCurrentState() {}
    CompareInitialStateWithCurrent() {}
    CompareSaveStateWithCurrent() {}
    CanChange(e) {
        return typeof this._Getter() === typeof e
    }
    BeforeChangeProperty() {}
    ChangeProperty(e, b,
        a, d, c) {}
    AfterChangeProperty() {}
    _FirstKeyframeGetter() {
        return this._PickTimelinePlaybackMode(() => {
            const e = this._propertyTrack.GetPropertyTrackDataItem();
            return this._propertyTrack.GetPropertyTrackData().GetFirstPropertyKeyframeDataItem(e)
        }, () => {
            const e = this._propertyTrack.GetPropertyTrackDataItem();
            return this._propertyTrack.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(e)
        }).GetAbsoluteValue()
    }
    _CurrentKeyframeGetter() {
        const e = this._propertyTrack.GetTimeline().GetTime() - this._propertyTrack.GetTrack().GetStartOffset();
        return this._PickTimelinePlaybackMode(() => {
            const b = this._propertyTrack.GetPropertyTrackDataItem();
            return this._propertyTrack.GetPropertyTrackData().GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(e, b)
        }, () => {
            const b = this._propertyTrack.GetPropertyTrackDataItem(),
                a = this._propertyTrack.GetPropertyTrackData(),
                d = a.GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(e, b);
            return d ? d : a.GetLastPropertyKeyframeDataItem(b)
        }).GetAbsoluteValue()
    }
    _PickTimelinePlaybackMode(e, b) {
        return this._propertyTrack.GetTimeline().IsForwardPlayBack() ?
            e() : b()
    }
    _PickResultMode(e, b) {
        return "relative" === this._propertyTrack.GetResultMode() ? e() : b()
    }
    _PickFirstAbsoluteUpdate(e, b) {
        return this.GetFirstAbsoluteUpdate() ? (this.SetFirstAbsoluteUpdate(!1), e()) : b()
    }
    _GetAbsoluteInitialValue(e) {}
    _GetIndex() {
        return this._sourceAdapter.GetIndex()
    }
    _GetTarget() {
        return this._target ? this._target : this._target = this._sourceAdapter.GetTarget()
    }
    _PickSource(e, b, a, d, c) {
        switch (this._propertyTrack.GetSourceAdapterId()) {
            case "behavior":
                return e();
            case "effect":
                return b();
            case "instance-variable":
                return a();
            case "plugin":
                return d();
            case "world-instance":
                return c()
        }
    }
    _SaveToJson() {
        return {
            firstAbsoluteUpdate: this._firstAbsoluteUpdate,
            saveState: this._saveState
        }
    }
    _LoadFromJson(e) {
        e && (this._firstAbsoluteUpdate = e.firstAbsoluteUpdate, this._saveState = e.saveState)
    }
    _GetPropertyKeyframeStubs(e, b = !1) {
        const a = [];
        for (const d of e) {
            e = d.GetTrack().GetStartOffset();
            for (const c of d.GetPropertyKeyframeDataItems()) b && 0 === c.GetTime() ? a.push({
                time: e + c.GetTime(),
                value: c.GetAbsoluteValue()
            }) : b || a.push({
                time: e + c.GetTime(),
                value: c.GetAbsoluteValue()
            })
        }
        return a.sort((d,
            c) => d.time - c.time)
    }
    _GetLastPropertyKeyframeStub(e, b, a) {
        return this._GetPropertyKeyframeStubLowerThanPlayhead(b, a)
    }
    _GetPropertyKeyframeStubLowerThanPlayhead(e, b) {
        for (let a = b.length - 1; 0 <= a; a--)
            if (b[a].time <= e) return b[a];
        return null
    }
}; {
    "use strict";
    const e = self.C3,
        b = new Map,
        a = [0, 0, 0];
    class d extends e.PropertyTrackState.PropertyInterpolationAdapter {
        constructor(c) {
            super(c)
        }
        SetInitialState() {}
        SetResumeState() {}
        GetCurrentState() {
            const c = this._propertyTrack.GetSourceAdapterId(),
                f = this._GetTarget(),
                k = this._GetIndex();
            switch (c) {
                case "behavior":
                    return this._ToColorArray(f.GetPropertyValueByIndex(k));
                case "effect":
                    return this._ToColorArray(f[k]);
                case "plugin":
                    return this._ToColorArray(f.GetPropertyValueByIndex(k));
                case "world-instance":
                    return this._ToColorArray(this._Getter())
            }
        }
        CompareInitialStateWithCurrent() {
            const c =
                this._FirstKeyframeGetter();
            return !this._CompareColors(c, this._Getter())
        }
        CompareSaveStateWithCurrent() {
            return e.IsNullOrUndefined(this._saveState) ? !1 : !this._CompareColors(this._saveState, this._Getter())
        }
        _CompareColors(c, f) {
            return c.equalsIgnoringAlpha(f)
        }
        _FirstKeyframeGetter() {
            const c = super._FirstKeyframeGetter();
            return this._GetColorFromArray(c)
        }
        _CurrentKeyframeGetter() {
            const c = super._CurrentKeyframeGetter();
            return this._GetColorFromArray(c)
        }
        _GetAbsoluteInitialValue(c) {}
        _ToColorArray(c) {
            return e.IsInstanceOf(c,
                e.Color) ? c.toArray().slice(0, 3) : c.slice(0, 3)
        }
        _GetColorFromArray(c) {
            return e.IsInstanceOf(c, e.Color) ? c : new e.Color(c[0], c[1], c[2], 1)
        }
        CanChange(c) {
            return !0
        }
        BeforeChangeProperty() {
            var c = this._propertyTrack.GetInstance();
            b.has(c) || b.set(c, new Map);
            c = b.get(c);
            const f = this._propertyTrack.GetSourceAdapterId();
            c.has(f) || c.set(f, new Map);
            c = c.get(f);
            c.has(this._property) || c.set(this._property, {
                used: !1,
                color: new e.Color(0, 0, 0, 1)
            })
        }
        _GetTmpColor(c, f, k) {
            c = b.get(c).get(f).get(k);
            c.used = !0;
            return c.color
        }
        ChangeProperty(c,
            f, k, g, l) {
            l = this._propertyTrack.GetTimeline();
            g = this._propertyTrack.GetTrack();
            c = this._propertyTrack.GetInstance();
            var m = this._propertyTrack.GetSourceAdapter();
            k = this._propertyTrack.GetSourceAdapterId();
            m = l.GetSimilarPropertyTracks(c, m, this._property);
            if (1 < m.length) {
                if (m = this._GetPropertyKeyframeStubs(m, !0), l = this._GetLastPropertyKeyframeStub(l, l.GetTime(), m))
                    if (g = g.GetStartOffset(), m = l.time - g, 0 === m) this._GetTmpColor(c, k, this._property).addRgb(f[0], f[1], f[2]);
                    else {
                        if (0 > m) return;
                        l = f[0];
                        g = f[1];
                        f = f[2];
                        m = this._propertyTrack.Interpolate(m, !1, !0);
                        l = e.Color.DiffChannel(l, m[0]);
                        g = e.Color.DiffChannel(g, m[1]);
                        f = e.Color.DiffChannel(f, m[2]);
                        this._GetTmpColor(c, k, this._property).addRgb(l, g, f)
                    }
            } else this._Setter(f[0], f[1], f[2]);
            return e.TimelineState.LAYOUT_RENDER_CHANGE
        }
        AfterChangeProperty() {
            const c = this._propertyTrack.GetInstance();
            if (b.has(c)) {
                var f = b.get(c),
                    k = this._propertyTrack.GetSourceAdapterId();
                if (f.has(k)) {
                    var g = f.get(k);
                    if (g.has(this._property)) {
                        var l = g.get(this._property),
                            m = l.color;
                        l.used && this._Setter(m.getR(),
                            m.getG(), m.getB());
                        0 === g.size && f.delete(k);
                        0 === f.size && b.delete(c)
                    }
                }
            }
        }
        _Getter() {
            const c = this._propertyTrack.GetSourceAdapterId(),
                f = this._GetTarget(),
                k = this._GetIndex();
            switch (c) {
                case "behavior":
                    return this._GetColorFromArray(f.GetPropertyValueByIndex(k));
                case "effect":
                    return f[k].clone();
                case "plugin":
                    return this._GetColorFromArray(f.GetPropertyValueByIndex(k));
                case "world-instance":
                    return this.GetWorldInfo().GetUnpremultipliedColor().clone()
            }
        }
        _Setter(c, f, k) {
            const g = this._propertyTrack.GetSourceAdapterId(),
                l = this._GetTarget(),
                m = this._GetIndex();
            switch (g) {
                case "behavior":
                    a[0] = c;
                    a[1] = f;
                    a[2] = k;
                    l.SetPropertyValueByIndex(m, a);
                    break;
                case "effect":
                    l[m].setRgb(c, f, k);
                    break;
                case "plugin":
                    a[0] = c;
                    a[1] = f;
                    a[2] = k;
                    l.SetPropertyValueByIndex(m, a);
                    break;
                case "world-instance":
                    this.GetWorldInfo().SetUnpremultipliedColorRGB(c, f, k)
            }
        }
        _SaveToJson() {}
        _LoadFromJson(c) {}
    }
    e.PropertyTrackState.PropertyInterpolationAdapter.ColorInterpolationAdapter = d
} {
    "use strict";
    const e = self.C3;
    class b extends e.PropertyTrackState.PropertyInterpolationAdapter {
        constructor(a) {
            super(a)
        }
        SetInitialState() {}
        SetResumeState() {}
        GetCurrentState() {
            return this._Getter()
        }
        CompareInitialStateWithCurrent() {
            return this._FirstKeyframeGetter() !== this.GetCurrentState()
        }
        CompareSaveStateWithCurrent() {
            return e.IsNullOrUndefined(this._saveState) ? !1 : this._saveState !== this.GetCurrentState()
        }
        ChangeProperty(a, d, c, f, k) {
            c = e.PropertyTrackState.PropertySourceAdapter.GetWillChangeFunc(this._propertyTrack);
            var g = this._propertyTrack;
            const l = g.GetTrack();
            f = g.GetSourceAdapterId();
            k = g.GetTimeline();
            var m = l.GetInstance();
            g = g.GetSourceAdapter();
            m = k.GetSimilarPropertyTracks(m, g, this._property);
            1 < m.length && (m = this._GetPropertyKeyframeStubs(m), a += l.GetStartOffset(), a = this._GetLastPropertyKeyframeStub(k, a, m)) && (d = a.value);
            if (c(this._GetIndex(), this._GetTarget(), d, f)) switch (this._Setter(d), f) {
                case "plugin":
                    return e.TimelineState.LAYOUT_RENDER_CHANGE
            }
        }
        _Getter() {
            const a = this._propertyTrack.GetSourceAdapterId(),
                d = this._GetTarget(),
                c = this._GetIndex();
            switch (a) {
                case "behavior":
                    return d.GetPropertyValueByIndex(c);
                case "effect":
                    return d[c];
                case "instance-variable":
                    return d.GetInstanceVariableValue(c);
                case "plugin":
                    return d.GetPropertyValueByIndex(c)
            }
        }
        _Setter(a) {
            const d = this._propertyTrack.GetSourceAdapterId(),
                c = this._GetTarget(),
                f = this._GetIndex();
            switch (d) {
                case "behavior":
                    c.SetPropertyValueByIndex(f, a);
                    break;
                case "effect":
                    c[f] = a;
                    break;
                case "instance-variable":
                    c.SetInstanceVariableValue(f, a);
                    break;
                case "plugin":
                    c.SetPropertyValueByIndex(f,
                        a)
            }
        }
    }
    e.PropertyTrackState.PropertyInterpolationAdapter.NoInterpolationAdapter = b
} {
    "use strict";
    const e = self.C3,
        b = new Map,
        a = (c, f, k, g, l) => b.set(c, {
            setter: f,
            absolute_setter: k,
            getter: g,
            round: l
        });
    a("offsetX", (c, f) => c.OffsetX(f), (c, f) => c.SetX(f), c => c.GetX(), !0);
    a("offsetY", (c, f) => c.OffsetY(f), (c, f) => c.SetY(f), c => c.GetY(), !0);
    a("offsetWidth", (c, f) => c.OffsetWidth(f), (c, f) => c.SetWidth(f), c => c.GetWidth(), !0);
    a("offsetHeight", (c, f) => c.OffsetHeight(f), (c, f) => c.SetHeight(f), c => c.GetHeight(), !0);
    a("offsetAngle", (c, f) => c.OffsetAngle(f), (c, f) => c.SetAngle(f), c => c.GetAngle(), !1);
    a("offsetOpacity",
        (c, f, k, g) => {
            k = c.GetOpacity() + f;
            0 === g._clampAccumulator ? (1 < k ? g._clampAccumulator += k - 1 : 0 > k && (g._clampAccumulator += k), c.OffsetOpacity(f)) : (c = c.GetOpacity() + f, 0 < f && 0 < g._clampAccumulator ? 1 < c && (g._clampAccumulator += c - 1) : 0 < f && 0 > g._clampAccumulator ? (g._clampAccumulator += f, 0 < g._clampAccumulator && (g._clampAccumulator = 0)) : 0 > f && 0 < g._clampAccumulator ? (g._clampAccumulator += f, 0 > g._clampAccumulator && (g._clampAccumulator = 0)) : 0 > f && 0 > g._clampAccumulator && 0 > c && (g._clampAccumulator += c))
        }, (c, f) => {
            c.SetOpacity(f)
        }, c => c.GetOpacity(), !1);
    a("offsetOriginX", (c, f) => c.OffsetOriginX(f), (c, f) => c.SetOriginX(f), c => c.GetOriginX(), !1);
    a("offsetOriginY", (c, f) => c.OffsetOriginY(f), (c, f) => c.SetOriginY(f), c => c.GetOriginY(), !1);
    a("offsetZElevation", (c, f) => c.OffsetZElevation(f), (c, f) => c.SetZElevation(f), c => c.GetZElevation(), !0);
    a("offsetScaleX", (c, f, k, g) => {
        g = 0 > c.GetWidth() ? -1 : 1;
        c.GetTransformWithParentWidth();
        c.OffsetWidth(k.GetOriginalWidth() * g * f)
    }, (c, f, k) => {
        c.SetWidth(k.GetOriginalWidth() * f)
    }, (c, f) => {
        const k = 0 > c.GetWidth() ? -1 : 1;
        if (c.GetTransformWithParentWidth()) {
            var g =
                c.GetParent(),
                l = f.GetTimeline().GetTrackFromInstance(g.GetInstance());
            l ? g = g.GetWidth() / l.GetOriginalWidth() : (l = g.GetInstance().GetSdkInstance(), g = l.IsOriginalSizeKnown() ? g.GetWidth() / l.GetOriginalWidth() : 1);
            return c.GetWidth() * k / (f.GetOriginalWidth() * g)
        }
        return c.GetWidth() * k / f.GetOriginalWidth()
    }, !1);
    a("offsetScaleY", (c, f, k, g) => {
        g = 0 > c.GetHeight() ? -1 : 1;
        c.GetTransformWithParentHeight();
        c.OffsetHeight(k.GetOriginalHeight() * g * f)
    }, (c, f, k) => {
        c.SetHeight(k.GetOriginalHeight() * f)
    }, (c, f) => {
        const k = 0 > c.GetHeight() ?
            -1 : 1;
        if (c.GetTransformWithParentHeight()) {
            var g = c.GetParent(),
                l = f.GetTimeline().GetTrackFromInstance(g.GetInstance());
            l ? g = g.GetHeight() / l.GetOriginalHeight() : (l = g.GetInstance().GetSdkInstance(), g = l.IsOriginalSizeKnown() ? g.GetHeight() / l.GetOriginalHeight() : 1);
            return c.GetHeight() * k / (f.GetOriginalHeight() * g)
        }
        return c.GetHeight() * k / f.GetOriginalHeight()
    }, !1);
    class d extends e.PropertyTrackState.PropertyInterpolationAdapter {
        constructor(c) {
            super(c);
            this._clampAccumulator = this._lastValue = 0;
            this._instance_absolute_setter =
                this._instance_setter = this._instance_getter = null;
            this._round = !1;
            e.IsInstanceOf(this._propertyTrack.GetTimeline(), e.Tween) ? this._typeAdapter = new e.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTween(this) : this._typeAdapter = new e.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTimeline(this);
            c = this._propertyTrack.GetPropertyName();
            "world-instance" === this._propertyTrack.GetSourceAdapterId() && (c = b.get(c), this._instance_getter = c.getter, this._instance_setter =
                c.setter, this._instance_absolute_setter = c.absolute_setter, this._round = c.round)
        }
        Release() {
            this._instance_absolute_setter = this._instance_setter = this._instance_getter = this._typeAdapter = null;
            super.Release()
        }
        GetLastValue() {
            return this._lastValue
        }
        SetLastValue(c) {
            this._lastValue = c
        }
        SetInitialState() {
            const c = this._typeAdapter.SetInitialState();
            "number" === typeof c && (this._lastValue = c);
            this._clampAccumulator = 0
        }
        SetResumeState() {
            const c = this._typeAdapter.SetResumeState();
            "number" === typeof c && (this._lastValue =
                c)
        }
        GetCurrentState() {
            return this._Getter()
        }
        CompareInitialStateWithCurrent() {
            return this._FirstKeyframeGetter() !== this.GetCurrentState()
        }
        CompareSaveStateWithCurrent() {
            return e.IsNullOrUndefined(this._saveState) ? !1 : this._saveState !== this.GetCurrentState()
        }
        BeforeChangeProperty() {
            this._typeAdapter.BeforeChangeProperty()
        }
        ChangeProperty(c, f, k, g, l, m, u) {
            return this._typeAdapter.ChangeProperty(c, f, k, g, l, m, u)
        }
        AfterChangeProperty() {
            this._typeAdapter.AfterChangeProperty()
        }
        _Getter() {
            const c = this._GetTarget(),
                f = this._GetIndex(),
                k = this._propertyTrack.GetTrack(),
                g = this.GetWorldInfo();
            return this._PickSource(() => c.GetPropertyValueByIndex(f), () => c[f], () => c.GetInstanceVariableValue(f), () => c.GetPropertyValueByIndex(f), () => this._instance_getter(g, k))
        }
        _Setter(c, f, k) {
            const g = this._GetTarget(),
                l = this._GetIndex(),
                m = this._propertyTrack.GetTrack(),
                u = this.GetWorldInfo();
            this._PickSource(() => g.OffsetPropertyValueByIndex(l, c), () => g[l] += c, () => g.SetInstanceVariableOffset(l, c), () => g.OffsetPropertyValueByIndex(l, c), () => this._instance_setter(u,
                c, m, this))
        }
        _SetterAbsolute(c, f, k) {
            const g = this._GetTarget(),
                l = this._GetIndex(),
                m = this._propertyTrack.GetTrack(),
                u = this.GetWorldInfo();
            this._PickSource(() => g.SetPropertyValueByIndex(l, c), () => g[l] = c, () => g.SetInstanceVariableValue(l, c), () => g.SetPropertyValueByIndex(l, c), () => this._instance_absolute_setter(u, c, m))
        }
        _MaybeEnsureValue(c, f, k, g, l, m) {
            this._typeAdapter._MaybeEnsureValue(c, f, k, g, l, m)
        }
        _AddDelta(c, f, k) {
            var g = (c.toString().split(".")[1] || "").length;
            c = this._Getter();
            g = 0 === g ? this._round ? Math.round(c) :
                c : e.toFixed(c, g);
            this._Setter(g - c, f, k)
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                v: this._lastValue,
                a: this._clampAccumulator
            })
        }
        _LoadFromJson(c) {
            c && (super._LoadFromJson(c), this._lastValue = c.v, this._clampAccumulator = c.a)
        }
    }
    e.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapter = d
} {
    "use strict";
    const e = self.C3,
        b = new Map;
    class a {
        constructor(d) {
            this._numericInterpolationAdapter = d
        }
        Release() {
            this._numericInterpolationAdapter = null
        }
        SetInitialState() {
            const d = this._numericInterpolationAdapter,
                c = this._numericInterpolationAdapter.GetPropertyTrack();
            return d._PickResultMode(() => d._PickTimelinePlaybackMode(() => 0, () => e.PropertyTrackState.PropertySourceAdapter.GetValueAtTime(c)), () => {})
        }
        SetResumeState() {}
        BeforeChangeProperty() {
            const d = this._numericInterpolationAdapter,
                c = this._numericInterpolationAdapter.GetPropertyTrack(),
                f = c.GetPropertyName();
            d._PickResultMode(() => {}, () => {
                var k = c.GetInstance();
                b.has(k) || b.set(k, new Map);
                k = b.get(k);
                const g = c.GetSourceAdapterId();
                k.has(g) || k.set(g, new Map);
                k = k.get(g);
                k.has(f) || k.set(f, {
                    used: !1,
                    value: 0
                })
            })
        }
        _GetTmpAbsoluteValueObject(d, c, f) {
            d = b.get(d).get(c).get(f);
            d.used = !0;
            return d
        }
        ChangeProperty(d, c, f, k, g, l) {
            const m = this._numericInterpolationAdapter,
                u = this._numericInterpolationAdapter.GetPropertyTrack(),
                x = u.GetPropertyName();
            m._PickResultMode(() => {
                const p = m.GetLastValue();
                m._Setter(c -
                    p, f, k);
                l && this._MaybeEnsureValue(d, f, k, g, p, c);
                m.SetLastValue(c)
            }, () => {
                var p = u.GetTimeline(),
                    r = u.GetTrack();
                const t = u.GetInstance();
                var q = u.GetSourceAdapter();
                const w = u.GetSourceAdapterId();
                q = p.GetSimilarPropertyTracks(t, q, x);
                if (1 < q.length) {
                    if (q = m._GetPropertyKeyframeStubs(q, !0), p = m._GetLastPropertyKeyframeStub(p, p.GetTime(), q)) r = r.GetStartOffset(), r = p.time - r, 0 === r ? this._GetTmpAbsoluteValueObject(t, w, x).value += c : 0 > r || (r = u.Interpolate(r, !1, !0), this._GetTmpAbsoluteValueObject(t, w, x).value += c - r)
                } else m._SetterAbsolute(c)
            });
            return m._PickSource(() => {}, () => e.TimelineState.LAYOUT_RENDER_CHANGE, () => {}, () => e.TimelineState.LAYOUT_RENDER_CHANGE, () => e.TimelineState.LAYOUT_RENDER_CHANGE)
        }
        AfterChangeProperty() {
            const d = this._numericInterpolationAdapter,
                c = this._numericInterpolationAdapter.GetPropertyTrack(),
                f = c.GetPropertyName();
            d._PickResultMode(() => {}, () => {
                const k = c.GetInstance();
                if (b.has(k)) {
                    var g = b.get(k),
                        l = c.GetSourceAdapterId();
                    if (g.has(l)) {
                        var m = g.get(l);
                        if (m.has(f)) {
                            var u = m.get(f),
                                x = u.value;
                            u.used && d._SetterAbsolute(x);
                            m.delete(f);
                            0 === m.size && g.delete(l);
                            0 === g.size && b.delete(k)
                        }
                    }
                }
            })
        }
        _MaybeEnsureValue(d, c, f, k, g, l) {
            const m = this._numericInterpolationAdapter;
            k || (c && d === c.GetTime() ? m._AddDelta(c.GetValueWithResultMode(), c, f) : f && d === f.GetTime() ? m._AddDelta(f.GetValueWithResultMode(), c, f) : 0 === l - g && m._AddDelta(c.GetValueWithResultMode(), c, f))
        }
    }
    e.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTimeline = a
} {
    "use strict";
    const e = self.C3;
    new Map;
    class b {
        constructor(a) {
            this._numericInterpolationAdapter = a
        }
        Release() {
            this._numericInterpolationAdapter = null
        }
        SetInitialState() {
            const a = this._numericInterpolationAdapter;
            a.SetFirstAbsoluteUpdate(!0);
            return this._GetAbsoluteInitialValue(a._FirstKeyframeGetter())
        }
        SetResumeState() {
            const a = this._numericInterpolationAdapter;
            if (a._FirstKeyframeGetter() !== a._CurrentKeyframeGetter()) return a.SetFirstAbsoluteUpdate(!0), this._GetAbsoluteInitialValue(a._CurrentKeyframeGetter())
        }
        BeforeChangeProperty() {}
        ChangeProperty(a,
            d, c, f, k, g) {
            const l = this._numericInterpolationAdapter,
                m = l.GetLastValue();
            l._PickResultMode(() => {
                l._Setter(d - m, c, f);
                g && this._MaybeEnsureValue(a, c, f, k, m, d)
            }, () => {
                l._PickFirstAbsoluteUpdate(() => {
                    l._Setter(m, c, f)
                }, () => {
                    l._Setter(d - m, c, f);
                    g && this._MaybeEnsureValue(a, c, f, k, m, d)
                })
            });
            l.SetLastValue(d);
            return l._PickSource(() => {}, () => e.TimelineState.LAYOUT_RENDER_CHANGE, () => {}, () => e.TimelineState.LAYOUT_RENDER_CHANGE, () => e.TimelineState.LAYOUT_RENDER_CHANGE)
        }
        AfterChangeProperty() {}
        _GetAbsoluteInitialValue(a) {
            return a -
                this._numericInterpolationAdapter.GetCurrentState()
        }
        _MaybeEnsureValue(a, d, c, f, k, g) {
            const l = this._numericInterpolationAdapter;
            f ? d && a === d.GetTime() ? l._AddDelta(d.GetValueWithResultMode(), d, c) : c && a === c.GetTime() ? l._AddDelta(c.GetValueWithResultMode(), d, c) : c || l._AddDelta(d.GetValueWithResultMode(), d, c) : d && a === d.GetTime() ? l._AddDelta(d.GetValueWithResultMode(), d, c) : c && a === c.GetTime() ? l._AddDelta(c.GetValueWithResultMode(), d, c) : 0 === g - k && l._AddDelta(d.GetValueWithResultMode(), d, c)
        }
    }
    e.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTween =
        b
} {
    "use strict";
    const e = self.C3,
        b = self.Ease;
    e.PropertyTrackState.NumericTypeAdapter = class {
        constructor() {}
        static WillChange(a, d, c, f) {
            let k;
            switch (f) {
                case "behavior":
                    k = d.GetPropertyValueByIndex(a);
                    break;
                case "effect":
                    k = d[a];
                    break;
                case "instance-variable":
                    k = d.GetInstanceVariableValue(a);
                    break;
                case "plugin":
                    k = d.GetPropertyValueByIndex(a)
            }
            return k === c ? !1 : !0
        }
        static Interpolate(a, d, c, f) {
            if (!c) return c = f.GetPropertyTrackDataItem(), c = f.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(c), c.GetValueWithResultMode();
            var k =
                f.GetInterpolationMode();
            "default" === k && (k = "continuous");
            "combo" === f.GetPropertyType() && (k = "discrete");
            if ("discrete" === k) return d.GetValueWithResultMode();
            if ("continuous" === k || "step" === k) {
                "step" === k && (k = f.GetTimeline().GetStep(), 0 !== k && (k = 1 / k, a = Math.floor(a * k) / k));
                var g = d.GetTime();
                const l = c.GetTime();
                k = d.GetValueWithResultMode();
                const m = c.GetValueWithResultMode();
                if (k === m) return k;
                a = e.normalize(a, g, l);
                const u = d.GetEase();
                d = d.GetAddOn("cubic-bezier");
                c = c.GetAddOn("cubic-bezier");
                d && d.GetStartEnable() &&
                    c && c.GetEndEnable() ? (g = l - g, g = b.GetRuntimeEase(u)(g * a, 0, 1, g), g = b.GetRuntimeEase("cubicbezier")(g, k, k + d.GetStartAnchor(), m + c.GetEndAnchor(), m)) : g = b.GetRuntimeEase(u)((l - g) * a, k, m - k, l - g);
                return "integer" === f.GetPropertyType() ? Math.floor(g) : g
            }
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.PropertyTrackState.AngleTypeAdapter = class {
        constructor() {}
        static WillChange(b, a, d, c) {
            let f;
            switch (c) {
                case "behavior":
                    f = a.GetPropertyValueByIndex(b);
                    break;
                case "effect":
                    f = a[b];
                    break;
                case "instance-variable":
                    f = a.GetInstanceVariableValue(b);
                    break;
                case "plugin":
                    f = a.GetPropertyValueByIndex(b)
            }
            return f === d ? !1 : !0
        }
        static Interpolate(b, a, d, c) {
            if (!d) return a = c.GetPropertyTrackDataItem(), a = c.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(a), a.GetValueWithResultMode();
            var f =
                c.GetInterpolationMode();
            "default" === f && (f = "continuous");
            "combo" === c.GetPropertyType() && (f = "discrete");
            if ("discrete" === f) return a.GetValueWithResultMode();
            if ("continuous" === f || "step" === f) {
                "step" === f && (c = c.GetTimeline().GetStep(), 0 !== c && (c = 1 / c, b = Math.floor(b * c) / c));
                const k = a.GetTime(),
                    g = d.GetTime();
                c = a.GetValueWithResultMode();
                d = d.GetValueWithResultMode();
                if (f = a.GetAddOn("angle")) {
                    const l = f.GetRevolutions();
                    if (c === d && 0 === l) return c;
                    b = e.normalize(b, k, g);
                    a = self.Ease.GetRuntimeEase(a.GetEase())(b, 0, 1,
                        1);
                    switch (f.GetDirection()) {
                        case "closest":
                            return e.angleLerp(c, d, a, l);
                        case "clockwise":
                            return e.angleLerpClockwise(c, d, a, l);
                        case "anti-clockwise":
                            return e.angleLerpAntiClockwise(c, d, a, l)
                    }
                } else {
                    if (c === d) return c;
                    b = e.normalize(b, k, g);
                    a = self.Ease.GetRuntimeEase(a.GetEase());
                    return e.angleLerp(c, d, a(b, 0, 1, 1))
                }
            }
        }
    }
}
"use strict";
self.C3.PropertyTrackState.BooleanTypeAdapter = class {
    constructor() {}
    static WillChange(e, b, a, d) {
        let c;
        switch (d) {
            case "behavior":
                c = b.GetPropertyValueByIndex(e);
                break;
            case "effect":
                c = b[e];
                break;
            case "instance-variable":
                c = b.GetInstanceVariableValue(e);
                break;
            case "plugin":
                c = b.GetPropertyValueByIndex(e)
        }
        return !!c === !!a ? !1 : !0
    }
    static Interpolate(e, b, a, d) {
        return a ? b.GetValueWithResultMode() ? 1 : 0 : (e = d.GetPropertyTrackDataItem(), e = d.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(e), e.GetValueWithResultMode() ?
            1 : 0)
    }
}; {
    "use strict";
    const e = self.C3,
        b = [0, 0, 0],
        a = [0, 0, 0],
        d = [0, 0, 0];
    e.PropertyTrackState.ColorTypeAdapter = class {
        constructor() {}
        static WillChange(c, f, k, g) {
            let l;
            switch (g) {
                case "behavior":
                    l = f.GetPropertyValueByIndex(c);
                    break;
                case "effect":
                    l = f[c];
                    break;
                case "instance-variable":
                    l = f.GetInstanceVariableValue(c);
                    break;
                case "plugin":
                    l = f.GetPropertyValueByIndex(c)
            }
            Array.isArray(k) ? (b[0] = k[0], b[1] = k[1], b[2] = k[2]) : (d.parseCommaSeparatedRgb(k), b[0] = Math.floor(255 * d.getR()), b[1] = Math.floor(255 * d.getG()), b[2] = Math.floor(255 * d.getB()));
            Array.isArray(l) ? (a[0] = l[0], a[1] = l[1], a[2] = l[2]) : (d.parseCommaSeparatedRgb(l), a[0] = Math.floor(255 * d.getR()), a[1] = Math.floor(255 * d.getG()), a[2] = Math.floor(255 * d.getB()));
            return b[0] !== a[0] || b[1] !== a[1] || b[2] !== a[2] ? !0 : !1
        }
        static Interpolate(c, f, k, g) {
            if (!k) {
                var l = g.GetPropertyTrackDataItem();
                l = g.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(l);
                g = l.GetValueWithResultMode();
                b[0] = g[0];
                b[1] = g[1];
                b[2] = g[2];
                return b
            }
            l = g.GetInterpolationMode();
            "default" === l && (l = "continuous");
            if ("discrete" === l) return g =
                f.GetValueWithResultMode(), b[0] = g[0], b[1] = g[1], b[2] = g[2], b;
            if ("continuous" === l || "step" === l) {
                "step" === l && (g = g.GetTimeline().GetStep(), 0 !== g && (g = 1 / g, c = Math.floor(c * g) / g));
                g = f.GetTime();
                l = k.GetTime();
                var m = f.GetValueWithResultMode(),
                    u = k.GetValueWithResultMode();
                c = e.normalize(c, g, l);
                var x = f.GetEase();
                f = m[0];
                k = m[1];
                m = m[2];
                const p = u[0],
                    r = u[1];
                u = u[2];
                x = self.Ease.GetRuntimeEase(x);
                g = l - g;
                l = g * c;
                b[0] = f === p ? f : x(l, f, p - f, g);
                b[1] = k === r ? k : x(l, k, r - k, g);
                b[2] = m === u ? m : x(l, m, u - m, g);
                return b
            }
        }
    }
}
"use strict";
self.C3.PropertyTrackState.TextTypeAdapter = class {
    constructor() {}
    static WillChange(e, b, a, d) {
        let c;
        switch (d) {
            case "behavior":
                c = b.GetPropertyValueByIndex(e);
                break;
            case "effect":
                c = b[e];
                break;
            case "instance-variable":
                c = b.GetInstanceVariableValue(e);
                break;
            case "plugin":
                c = b.GetPropertyValueByIndex(e)
        }
        return c === a ? !1 : !0
    }
    static Interpolate(e, b, a, d) {
        return a ? b.GetValueWithResultMode() : (e = d.GetPropertyTrackDataItem(), e = d.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(e), e.GetValueWithResultMode())
    }
}; {
    "use strict";
    const e = self.C3;
    e.TimelineDataManager = class {
        constructor() {
            this._timelineDataItems = new Map
        }
        Release() {
            for (const b of this._timelineDataItems.values()) b.Release();
            this._timelineDataItems.clear();
            this._timelineDataItems = null
        }
        Add(b) {
            b = new e.TimelineDataItem(b);
            const a = b.GetName();
            this._timelineDataItems.set(a, b)
        }
        Get(b) {
            return this._timelineDataItems.get(b)
        }
        GetNameId() {
            return 0
        }
        static _CreateDataItems(b, a, d, c) {
            if (a)
                for (const f of a) e.TimelineDataManager._CreateDataItem("create", f, b, d, c)
        }
        static _LoadDataItemsFromJson(b,
            a, d, c) {
            b.length ? a.forEach((f, k) => {
                b[k]._LoadFromJson(f)
            }) : a.forEach(f => {
                e.TimelineDataManager._CreateDataItem("load", f, b, d, c)
            })
        }
        static _CreateDataItem(b, a, d, c, f) {
            let k;
            if ("function" === typeof c) switch (b) {
                case "load":
                    k = new c(null, f);
                    break;
                case "create":
                    k = new c(a, f)
            } else if ("object" === typeof c) switch (c = c.map.get(a[c.prop]), b) {
                case "load":
                    k = new c(null, f);
                    break;
                case "create":
                    k = new c(a, f)
            }
            switch (b) {
                case "load":
                    k._LoadFromJson(a);
                    d.push(k);
                    break;
                case "create":
                    if ("function" === typeof k.GetEnable && !k.GetEnable()) return k.Release();
                    d.push(k)
            }
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.TimelineDataItem = class {
        constructor(b) {
            this._name = "";
            this._totalTime = NaN;
            this._step = 0;
            this._resultMode = this._interpolationMode = "default";
            this._pingPong = this._loop = !1;
            this._repeatCount = 1;
            this._trackData = null;
            b && (this._name = b[0], this._totalTime = b[1], this._step = b[2], this._interpolationMode = b[3], this._resultMode = b[4], this._loop = !!b[6], this._pingPong = !!b[7], this._repeatCount = b[8], this._trackData = new e.TrackData(b[5], this))
        }
        Release() {
            this._trackData.Release();
            this._trackData =
                null
        }
        GetTrackData() {
            this._trackData || (this._trackData = new e.TrackData(null, this));
            return this._trackData
        }
        GetName() {
            return this._name
        }
        SetName(b) {
            this._name = b
        }
        GetTotalTime() {
            return this._totalTime
        }
        SetTotalTime(b) {
            this._totalTime = b
        }
        GetStep() {
            return this._step
        }
        SetStep(b) {
            this._step = b
        }
        GetInterpolationMode() {
            return this._interpolationMode
        }
        SetInterpolationMode(b) {
            this._interpolationMode = b
        }
        GetResultMode() {
            return this._resultMode
        }
        SetResultMode(b) {
            this._resultMode = b
        }
        GetLoop() {
            return this._loop
        }
        SetLoop(b) {
            this._loop =
                b
        }
        GetPingPong() {
            return this._pingPong
        }
        SetPingPong(b) {
            this._pingPong = b
        }
        GetRepeatCount() {
            return this._repeatCount
        }
        _SaveToJson() {
            return {
                trackDataJson: this._trackData._SaveToJson(),
                name: this._name,
                totalTime: this._totalTime,
                step: this._step,
                interpolationMode: this._interpolationMode,
                resultMode: this._resultMode,
                loop: this._loop,
                pingPong: this._pingPong,
                repeatCount: this._repeatCount
            }
        }
        _LoadFromJson(b) {
            b && (this.GetTrackData()._LoadFromJson(b.trackDataJson), this._name = b.name, this._totalTime = b.totalTime, this._step =
                b.step, this._interpolationMode = b.interpolationMode, this._resultMode = b.resultMode, this._loop = b.loop, this._pingPong = b.pingPong, this._repeatCount = b.repeatCount)
        }
    }
} {
    "use strict";
    const e = self.C3;
    class b {
        constructor(a, d) {
            this._trackData = d;
            this._additionalInstanceData = this._instanceData = null;
            this._objectClassIndex = this._instanceUid = NaN;
            this._resultMode = this._interpolationMode = "default";
            this._enabled = !1;
            this._propertyTrackData = this._keyframeData = null;
            this._id = "";
            this._nestedData = null;
            this._startOffset = 0;
            this._localTotalTime = this._trackData.GetTimelineDataItem().GetTotalTime();
            this._type = 0;
            this._name = "";
            a && (a[0] && (this._instanceData = a[0], this._instanceUid = a[0][2],
                this._objectClassIndex = a[0][1]), this._interpolationMode = a[1], this._resultMode = a[2], this._enabled = !!a[3], a[6] && (this._id = a[6]), a[7] && (this._nestedData = a[7], this._startOffset = a[7][0], this._localTotalTime = a[7][1]), a[8] && (this._additionalInstanceData = a[8]), a[8] && (this._additionalInstanceData = a[8]), a[9] && (this._type = a[9]), a[10] && (this._name = a[10]), this._keyframeData = new e.KeyframeData(a[4], this), this._propertyTrackData = new e.PropertyTrackData(a[5], this))
        }
        Release() {
            this._trackData = this._instanceData = null;
            this._keyframeData && (this._keyframeData.Release(), this._keyframeData = null);
            this._propertyTrackData && (this._propertyTrackData.Release(), this._propertyTrackData = null);
            this._nestedData = null
        }
        GetTrackData() {
            return this._trackData
        }
        GetKeyframeData() {
            this._keyframeData || (this._keyframeData = new e.KeyframeData(null, this));
            return this._keyframeData
        }
        GetPropertyTrackData() {
            this._propertyTrackData || (this._propertyTrackData = new e.PropertyTrackData(null, this));
            return this._propertyTrackData
        }
        GetInstanceData() {
            return this._instanceData
        }
        GetObjectClassIndex() {
            return this._objectClassIndex
        }
        SetObjectClassIndex(a) {
            this._objectClassIndex =
                a
        }
        GetInstanceUID() {
            return this._instanceUid
        }
        SetInstanceUID(a) {
            this._instanceUid = a
        }
        GetInterpolationMode() {
            return this._interpolationMode
        }
        SetInterpolationMode(a) {
            this._interpolationMode = a
        }
        GetResultMode() {
            return this._resultMode
        }
        SetResultMode(a) {
            this._resultMode = a
        }
        GetEnable() {
            return this._enabled
        }
        SetEnable(a) {
            this._enabled = !!a
        }
        GetId() {
            return this._id
        }
        GetStartOffset() {
            return this._startOffset
        }
        GetLocalTotalTime() {
            return this._localTotalTime
        }
        SetLocalTotalTime(a) {
            this._localTotalTime = a
        }
        GetOriginalWidth() {
            return this._additionalInstanceData[0]
        }
        SetOriginalWidth(a) {
            this._additionalInstanceData ||
                (this._additionalInstanceData = []);
            this._additionalInstanceData[0] = a
        }
        GetOriginalHeight() {
            this._additionalInstanceData || (this._additionalInstanceData = []);
            return this._additionalInstanceData[1]
        }
        SetOriginalHeight(a) {
            this._additionalInstanceData || (this._additionalInstanceData = []);
            this._additionalInstanceData[1] = a
        }
        GetType() {
            return this._type
        }
        GetName() {
            return this._name
        }
        _SaveToJson() {
            return {
                keyframeDataJson: this._keyframeData._SaveToJson(),
                propertyTrackDataJson: this._propertyTrackData._SaveToJson(),
                instanceData: this._instanceData,
                additionalInstanceData: this._additionalInstanceData,
                instanceUid: this._instanceUid,
                objectClassIndex: this._objectClassIndex,
                interpolationMode: this._interpolationMode,
                resultMode: this._resultMode,
                enabled: this._enabled,
                id: this._id,
                nestedData: this._nestedData,
                type: this._type,
                name: this._name
            }
        }
        _LoadFromJson(a) {
            a && (this._instanceData = a.instanceData, this._instanceUid = a.instanceUid, this._objectClassIndex = a.objectClassIndex, this._interpolationMode = a.interpolationMode, this._resultMode = a.resultMode, this._enabled =
                a.enabled, this._id = a.id, this._type = a.type ? a.type : 0, this._type = a.name ? a.name : "", this._localTotalTime = this._trackData.GetTimelineDataItem().GetTotalTime(), a.nestedData && (this._nestedData = a.nestedData, this._startOffset = this._nestedData[0], this._localTotalTime = this._nestedData[1]), a.additionalInstanceData && (this._additionalInstanceData = a.additionalInstanceData), this.GetKeyframeData()._LoadFromJson(a.keyframeDataJson), this.GetPropertyTrackData()._LoadFromJson(a.propertyTrackDataJson))
        }
    }
    e.TrackData = class {
        constructor(a,
            d) {
            this._timelineDataItem = d;
            this._trackDataItems = [];
            this._keyframeTimeMap = new Map;
            e.TimelineDataManager._CreateDataItems(this._trackDataItems, a, b, this)
        }
        Release() {
            this._timelineDataItem = null;
            for (const a of this._trackDataItems) a.Release();
            e.clearArray(this._trackDataItems);
            this._trackDataItems = null;
            this._keyframeTimeMap.clear();
            this._keyframeTimeMap = null
        }
        GetTimelineDataItem() {
            return this._timelineDataItem
        }
        AddEmptyTrackDataItem() {
            const a = new b(null, this);
            this._trackDataItems.push(a);
            return a
        }
        GetFirstKeyframeDataItem(a) {
            return a.GetKeyframeData().GetKeyframeDataItemArray()[0]
        }
        GetLastKeyframeDataItem(a) {
            return a.GetKeyframeData().GetKeyframeDataItemArray().at(-1)
        }
        GetKeyFrameDataItemAtTime(a,
            d) {
            const c = this._keyframeTimeMap.get(d);
            if (c && c.has(a)) return c.get(a);
            for (const f of d.GetKeyframeData().keyframeDataItems())
                if (f.GetTime() === a) return c || this._keyframeTimeMap.set(d, new Map), this._keyframeTimeMap.get(d).set(a, f), f
        }
        GetFirstKeyFrameDataItemHigherThan(a, d) {
            for (const c of d.GetKeyframeData().keyframeDataItems())
                if (c.GetTime() > a) return c
        }
        GetFirstKeyFrameDataItemHigherOrEqualThan(a, d) {
            for (const c of d.GetKeyframeData().keyframeDataItems())
                if (c.GetTime() >= a) return c
        }
        GetFirstKeyFrameDataItemLowerOrEqualThan(a,
            d) {
            for (const c of d.GetKeyframeData().keyframeDataItemsReverse())
                if (c.GetTime() <= a) return c
        }* trackDataItems() {
            for (const a of this._trackDataItems) yield a
        }
        _SaveToJson() {
            return {
                trackDataItemsJson: this._trackDataItems.map(a => a._SaveToJson())
            }
        }
        _LoadFromJson(a) {
            a && e.TimelineDataManager._LoadDataItemsFromJson(this._trackDataItems, a.trackDataItemsJson, b, this)
        }
    }
} {
    "use strict";
    const e = self.C3;
    class b {
        constructor(a, d) {
            this._propertyTrackData = d;
            this._sourceAdapterId = "";
            this._type = this._property = this._sourceAdapterArguments = null;
            this._max = this._min = NaN;
            this._resultMode = this._interpolationMode = "default";
            this._enabled = !1;
            this._propertyKeyframeData = null;
            a && (this._sourceAdapterId = a[0][0], this._sourceAdapterArguments = a[0].slice(1), this._property = a[1], this._type = a[2], this._min = a[3], this._max = a[4], this._interpolationMode = a[5], this._resultMode = a[6], this._enabled = !!a[7],
                this._propertyKeyframeData = new e.PropertyKeyframeData(a[8], this))
        }
        Release() {
            this._propertyKeyframeData.Release();
            this._sourceAdapterArguments = this._propertyTrackData = this._propertyKeyframeData = null
        }
        GetPropertyTrackData() {
            return this._propertyTrackData
        }
        GetPropertyKeyframeData() {
            this._propertyKeyframeData || (this._propertyKeyframeData = new e.PropertyKeyframeData(null, this));
            return this._propertyKeyframeData
        }
        GetSourceAdapterId() {
            return this._sourceAdapterId
        }
        SetSourceAdapterId(a) {
            this._sourceAdapterId =
                a
        }
        GetSourceAdapterArguments() {
            return this._sourceAdapterArguments
        }
        SetSourceAdapterArguments(a) {
            this._sourceAdapterArguments = a
        }
        GetProperty() {
            return this._property
        }
        SetProperty(a) {
            this._property = a
        }
        GetType() {
            return this._type
        }
        SetType(a) {
            this._type = a
        }
        GetMin() {
            return this._min
        }
        SetMin(a) {
            this._min = a
        }
        GetMax() {
            return this._max
        }
        SetMax(a) {
            this._max = a
        }
        GetInterpolationMode() {
            return this._interpolationMode
        }
        SetInterpolationMode(a) {
            this._interpolationMode = a
        }
        GetResultMode() {
            return this._resultMode
        }
        SetResultMode(a) {
            this._resultMode =
                a
        }
        GetEnable() {
            return this._enabled
        }
        SetEnable(a) {
            this._enabled = !!a
        }
        _SaveToJson() {
            return {
                propertyKeyframeDataJson: this._propertyKeyframeData._SaveToJson(),
                sourceAdapterId: this._sourceAdapterId,
                sourceAdapterArguments: this._sourceAdapterArguments,
                property: this._property,
                type: this._type,
                min: this._min,
                max: this._max,
                interpolationMode: this._interpolationMode,
                resultMode: this._resultMode,
                enabled: this._enabled
            }
        }
        _LoadFromJson(a) {
            a && (this._sourceAdapterId = a.sourceAdapterId, this._sourceAdapterArguments = a.sourceAdapterArguments,
                this._property = a.property, this._type = a.type, this._min = a.min, this._max = a.max, this._interpolationMode = a.interpolationMode, this._resultMode = a.resultMode, this._enabled = a.enabled, this.GetPropertyKeyframeData()._LoadFromJson(a.propertyKeyframeDataJson))
        }
    }
    e.PropertyTrackData = class {
        constructor(a, d) {
            this._trackDataItem = d;
            this._propertyTrackDataItems = [];
            this._propertyKeyframeTimeMap = new Map;
            e.TimelineDataManager._CreateDataItems(this._propertyTrackDataItems, a, b, this)
        }
        Release() {
            this._trackDataItem = null;
            for (const a of this._propertyTrackDataItems) a.Release();
            e.clearArray(this._propertyTrackDataItems);
            this._propertyTrackDataItems = null;
            this._propertyKeyframeTimeMap.clear();
            this._propertyKeyframeTimeMap = null
        }
        GetTrackDataItem() {
            return this._trackDataItem
        }
        AddEmptyPropertyTrackDataItem() {
            const a = new b(null, this);
            this._propertyTrackDataItems.push(a);
            return a
        }
        GetFirstPropertyKeyframeDataItem(a) {
            return a.GetPropertyKeyframeData().GetPropertyKeyframeDataItemArray()[0]
        }
        GetLastPropertyKeyframeDataItem(a) {
            return a.GetPropertyKeyframeData().GetPropertyKeyframeDataItemArray().at(-1)
        }
        GetPropertyKeyFrameDataItemAtTime(a,
            d) {
            const c = this._propertyKeyframeTimeMap.get(d);
            if (c && c.has(a)) return c.get(a);
            const f = d.GetPropertyKeyframeData();
            for (const k of f.propertyKeyframeDataItems())
                if (k.GetTime() === a) return c || this._propertyKeyframeTimeMap.set(d, new Map), this._propertyKeyframeTimeMap.get(d).set(a, k), k
        }
        GetFirstPropertyKeyFrameDataItemHigherThan(a, d) {
            d = d.GetPropertyKeyframeData();
            for (const c of d.propertyKeyframeDataItems())
                if (c.GetTime() > a) return c
        }
        GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(a, d) {
            d = d.GetPropertyKeyframeData();
            for (const c of d.propertyKeyframeDataItems())
                if (c.GetTime() >= a) return c
        }
        GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(a, d) {
            d = d.GetPropertyKeyframeData();
            for (const c of d.propertyKeyframeDataItemsReverse())
                if (c.GetTime() <= a) return c
        }* propertyTrackDataItems() {
            for (const a of this._propertyTrackDataItems) yield a
        }
        _SaveToJson() {
            return {
                propertyTrackDataItemsJson: this._propertyTrackDataItems.map(a => a._SaveToJson())
            }
        }
        _LoadFromJson(a) {
            a && e.TimelineDataManager._LoadDataItemsFromJson(this._propertyTrackDataItems,
                a.propertyTrackDataItemsJson, b, this)
        }
    }
} {
    "use strict";
    const e = self.C3;
    class b {
        constructor(a, d) {
            this._keyframeData = d;
            this._time = -1;
            this._ease = "noease";
            this._enable = !1;
            this._lowerTags = this._tags = null;
            a && (this._time = a[0], this._ease = a[1], this._enable = !!a[2], this._tags = (a = a[3]) ? a.split(" ") : [], this._lowerTags = new Set(this._tags.map(c => c.toLowerCase())))
        }
        Release() {
            this._keyframeData = null;
            e.clearArray(this._tags);
            this._tags = null;
            this._lowerTags.clear();
            this._lowerTags = null
        }
        GetKeyframeData() {
            return this._keyframeData
        }
        GetTime() {
            return this._time
        }
        SetTime(a) {
            this._time = a
        }
        GetEase() {
            return this._ease
        }
        SetEase(a) {
            this._ease =
                a
        }
        GetEnable() {
            return this._enable
        }
        SetEnable(a) {
            this._enable = !!a
        }
        GetTags() {
            return this._tags
        }
        SetTags(a) {
            this._tags = a ? a.split(" ") : [];
            this._lowerTags = new Set(this._tags.map(d => d.toLowerCase()))
        }
        GetLowerTags() {
            return this._lowerTags
        }
        HasTag(a) {
            return this._lowerTags.has(a.toLowerCase())
        }
        _SaveToJson() {
            return {
                time: this._time,
                ease: this._ease,
                enable: this._enable,
                tags: this._tags
            }
        }
        _LoadFromJson(a) {
            a && (this._time = a.time, this._ease = a.ease, this._enable = a.enable, this._tags = a.tags, this._lowerTags = new Set(this._tags.map(d =>
                d.toLowerCase())))
        }
    }
    e.KeyframeData = class {
        constructor(a, d) {
            this._trackDataItem = d;
            this._keyframeDataItems = [];
            e.TimelineDataManager._CreateDataItems(this._keyframeDataItems, a, b, this)
        }
        Release() {
            this._trackDataItem = null;
            for (const a of this._keyframeDataItems) a.Release();
            e.clearArray(this._keyframeDataItems);
            this._keyframeDataItems = null
        }
        GetTrackDataItem() {
            return this._trackDataItem
        }
        GetKeyframeDataItemCount() {
            return this._keyframeDataItems.length
        }
        GetKeyframeDataItemArray() {
            return this._keyframeDataItems
        }
        AddEmptyKeyframeDataItem() {
            const a =
                new b(null, this);
            this._keyframeDataItems.push(a);
            return a
        }
        DeleteKeyframeDataItems(a) {
            for (const d of this._keyframeDataItems) {
                if (!a(d)) continue;
                const c = this._keyframeDataItems.indexOf(d); - 1 !== c && (d.Release(), this._keyframeDataItems.splice(c, 1))
            }
            this.SortKeyframeDataItems()
        }
        SortKeyframeDataItems() {
            this._keyframeDataItems.sort((a, d) => a.GetTime() - d.GetTime())
        }
        GetKeyframeDataItemIndex(a) {
            return this._keyframeDataItems.indexOf(a)
        }
        GetKeyframeDataItemFromIndex(a) {
            return this._keyframeDataItems[a]
        }* keyframeDataItems() {
            for (const a of this._keyframeDataItems) yield a
        }* keyframeDataItemsReverse() {
            for (let a =
                    this._keyframeDataItems.length - 1; 0 <= a; a--) yield this._keyframeDataItems[a]
        }
        _SaveToJson() {
            return {
                keyframeDataItemsJson: this._keyframeDataItems.map(a => a._SaveToJson())
            }
        }
        _LoadFromJson(a) {
            a && e.TimelineDataManager._LoadDataItemsFromJson(this._keyframeDataItems, a.keyframeDataItemsJson, b, this)
        }
    }
} {
    "use strict";
    const e = self.C3;
    class b {
        constructor(a, d) {
            this._propertyKeyframeData = d;
            this._aValue = this._value = null;
            this._type = "";
            this._time = NaN;
            this._ease = "noease";
            this._enable = !1;
            this._addonData = null;
            a && (this._value = a[0][0], this._aValue = a[0][1], this._type = a[0][2], this._time = a[1], this._ease = a[2], this._enable = !!a[3], this._addonData = null, a[4] && (this._addonData = new e.AddonData(a[4], this)))
        }
        Release() {
            this._propertyKeyframeData = null;
            this._addonData && (this._addonData.Release(), this._addonData = null)
        }
        GetAddonData() {
            return this._addonData
        }
        GetValue() {
            return this._value
        }
        SetValue(a) {
            "color" ===
            this._type && e.IsFiniteNumber(a) ? (this._value[0] = e.GetRValue(a), this._value[1] = e.GetGValue(a), this._value[2] = e.GetBValue(a)) : this._value = a
        }
        GetAbsoluteValue() {
            return this._aValue
        }
        SetAbsoluteValue(a) {
            "color" === this._type && e.IsFiniteNumber(a) ? (this._aValue[0] = e.GetRValue(a), this._aValue[1] = e.GetGValue(a), this._aValue[2] = e.GetBValue(a)) : this._aValue = a
        }
        GetValueWithResultMode() {
            const a = this._propertyKeyframeData.GetPropertyTrackDataItem().GetResultMode();
            if ("relative" === a) return this.GetValue();
            if ("absolute" ===
                a) return this.GetAbsoluteValue()
        }
        GetType() {
            return this._type
        }
        SetType(a) {
            this._type = a
        }
        GetTime() {
            return this._time
        }
        SetTime(a) {
            this._time = a
        }
        GetEase() {
            return this._ease
        }
        SetEase(a) {
            this._ease = a
        }
        GetEnable() {
            return this._enable
        }
        SetEnable(a) {
            this._enable = !!a
        }
        GetAddOn(a) {
            if (this.GetAddonData())
                for (const d of this.GetAddonData().addonDataItems())
                    if (d.GetId() === a) return d
        }
        _SaveToJson() {
            const a = this._addonData;
            return {
                addonDataJson: a ? a._SaveToJson() : a,
                value: this._value,
                aValue: this._aValue,
                type: this._type,
                time: this._time,
                ease: this._ease,
                enable: this._enable
            }
        }
        _LoadFromJson(a) {
            a && (a.addonDataJson && this._addonData._SetFromJson(a.addonDataJson), this._value = a.value, this._aValue = a.aValue, this._type = a.type, this._time = a.time, this._ease = a.ease, this._enable = a.enable)
        }
    }
    e.PropertyKeyframeData = class {
        constructor(a, d) {
            this._propertyTrackDataItem = d;
            this._propertyKeyframeDataItems = [];
            e.TimelineDataManager._CreateDataItems(this._propertyKeyframeDataItems, a, b, this)
        }
        Release() {
            this._propertyTrackDataItem = null;
            for (const a of this._propertyKeyframeDataItems) a.Release();
            e.clearArray(this._propertyKeyframeDataItems);
            this._propertyKeyframeDataItems = null
        }
        AddEmptyPropertyKeyframeDataItem() {
            const a = new b(null, this);
            this._propertyKeyframeDataItems.push(a);
            return a
        }
        DeletePropertyKeyframeDataItems(a) {
            for (const d of this._propertyKeyframeDataItems) {
                if (!a(d)) continue;
                const c = this._propertyKeyframeDataItems.indexOf(d); - 1 !== c && (d.Release(), this._propertyKeyframeDataItems.splice(c, 1))
            }
            this.SortPropertyKeyFrameDataItems()
        }
        SortPropertyKeyFrameDataItems() {
            this._propertyKeyframeDataItems.sort((a,
                d) => a.GetTime() - d.GetTime())
        }
        GetPropertyTrackDataItem() {
            return this._propertyTrackDataItem
        }
        GetPropertyKeyframeDataItemCount() {
            return this._propertyKeyframeDataItems.length
        }
        GetPropertyKeyframeDataItemArray() {
            return this._propertyKeyframeDataItems
        }* propertyKeyframeDataItems() {
            for (const a of this._propertyKeyframeDataItems) yield a
        }* propertyKeyframeDataItemsReverse() {
            for (let a = this._propertyKeyframeDataItems.length - 1; 0 <= a; a--) yield this._propertyKeyframeDataItems[a]
        }
        _SaveToJson() {
            return {
                propertyKeyframeDataItemsJson: this._propertyKeyframeDataItems.map(a =>
                    a._SaveToJson())
            }
        }
        _LoadFromJson(a) {
            a && e.TimelineDataManager._LoadDataItemsFromJson(this._propertyKeyframeDataItems, a.propertyKeyframeDataItemsJson, b, this)
        }
    }
} {
    "use strict";
    const e = self.C3;
    class b {
        constructor(c, f) {
            this._addonData = f;
            this._id = c[0];
            this._data = c[1]
        }
        Release() {
            this._data = this._addonData = null
        }
        GetAddonData() {
            return this._addonData
        }
        GetId() {
            return this._id
        }
        _SaveToJson() {
            return {
                id: this._id,
                data: this._data
            }
        }
        _LoadFromJson(c) {
            c && (this._id = c.id, this._data = c.data)
        }
    }
    class a extends b {
        constructor(c, f) {
            super(c, f);
            this._startAnchor = this._data[0];
            this._startEnable = !!this._data[1];
            this._endAnchor = this._data[2];
            this._endEnable = !!this._data[3]
        }
        Release() {
            super.Release()
        }
        GetStartAnchor() {
            return this._startAnchor
        }
        GetStartEnable() {
            return this._startEnable
        }
        GetEndAnchor() {
            return this._endAnchor
        }
        GetEndEnable() {
            return this._endEnable
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                startAnchor: this._startAnchor,
                startEnable: !!this._startEnable,
                endAnchor: this._endAnchor,
                endEnable: !!this._endEnable
            })
        }
        _LoadFromJson(c) {
            c && (super._LoadFromJson(c), this._startAnchor = c.startAnchor, this._startEnable = !!c.startEnable, this._endAnchor = c.endAnchor, this._endEnable = !!c.endEnable)
        }
    }
    class d extends b {
        constructor(c, f) {
            super(c, f);
            this._direction = this._data[0];
            this._revolutions = this._data[1]
        }
        Release() {
            super.Release()
        }
        GetDirection() {
            return this._direction
        }
        GetRevolutions() {
            return this._revolutions
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                direction: this._direction,
                revolutions: this._revolutions
            })
        }
        _LoadFromJson(c) {
            c && (super._LoadFromJson(c), this._direction = c.direction, this._revolutions = c.revolutions)
        }
    }
    e.AddonData = class {
        constructor(c, f) {
            this._propertyKeyframeDataItem = f;
            this._addonDataItems = [];
            e.TimelineDataManager._CreateDataItems(this._addonDataItems, c, {
                prop: 0,
                map: new Map([
                    ["cubic-bezier", a],
                    ["angle", d]
                ])
            }, this)
        }
        Release() {
            this._propertyKeyframeDataItem = null;
            for (const c of this._addonDataItems) c.Release();
            e.clearArray(this._addonDataItems);
            this._addonDataItems = null
        }
        GetPropertyKeyframeDataItem() {
            return this._propertyKeyframeDataItem
        }* addonDataItems() {
            for (const c of this._addonDataItems) yield c
        }
        _SaveToJson() {
            return {
                addonDataItemsJson: this._addonDataItems.map(c => c._SaveToJson())
            }
        }
        _LoadFromJson(c) {
            c && e.TimelineDataManager._LoadDataItemsFromJson(this._addonDataItems, c.addonDataItemsJson, {
                prop: "id",
                map: new Map([
                    ["cubic-bezier", a],
                    ["angle", d]
                ])
            }, this)
        }
    }
} {
    "use strict";
    const e = self.C3;
    let b = 0;
    e.Tween = class extends e.TimelineState {
        constructor(a, d) {
            super(`tween-${b++}`, a, d);
            this._id = "";
            this._destroyInstanceOnComplete = !1;
            this._initialValueMode = "start-value";
            this._on_started_callbacks = this._on_completed_callbacks = null
        }
        GetInstance() {
            var a = this.GetTracks();
            if (a && a.length && (a = a[0])) {
                var d = a.GetInstance();
                return a.IsInstanceValid() ? d : null
            }
        }
        AddStartedCallback(a) {
            this._on_started_callbacks || (this._on_started_callbacks = []);
            this._on_started_callbacks.push(a)
        }
        AddCompletedCallback(a) {
            this._on_completed_callbacks ||
                (this._on_completed_callbacks = []);
            this._on_completed_callbacks.push(a)
        }
        RemoveStartedCallback(a) {
            this._on_started_callbacks && (a = this._on_started_callbacks.indexOf(a), -1 !== a && this._on_started_callbacks.splice(a, 1))
        }
        RemoveCompletedCallback(a) {
            this._on_completed_callbacks && (a = this._on_completed_callbacks.indexOf(a), -1 !== a && this._on_completed_callbacks.splice(a, 1))
        }
        SetStartValue(a, d) {
            for (const f of this._tracks)
                for (const k of f._propertyTracks) {
                    if (k.GetPropertyName() !== d) continue;
                    var c = k.GetPropertyTrackData();
                    const g = k.GetPropertyTrackDataItem();
                    c = c.GetFirstPropertyKeyframeDataItem(g);
                    c.SetValue(a);
                    c.SetAbsoluteValue(a)
                }
        }
        _GetPropertyTrackState(a) {
            for (const d of this._tracks)
                for (const c of d._propertyTracks)
                    if (c.GetPropertyName() === a) return c
        }
        BeforeSetEndValues(a) {
            for (const f of a) a = this._GetPropertyTrackState(f), this.SetStartValue(a.GetCurrentState(), f);
            if (this.IsForwardPlayBack()) {
                var d = this.GetTotalTime() - this.GetTime();
                this.SetTotalTime(d);
                for (var c of this._tracks) c.SetLocalTotalTime(d);
                this._SetTime(0)
            } else {
                c =
                    this.GetTime();
                this.SetTotalTime(c);
                for (d of this._tracks) d.SetLocalTotalTime(c);
                this._SetTime(c)
            }
            this.SetInitialStateFromSetTime()
        }
        SetEndValue(a, d) {
            var c = this._GetPropertyTrackState(d);
            d = c.GetPropertyTrackData();
            c = c.GetPropertyTrackDataItem();
            d = d.GetLastPropertyKeyframeDataItem(c);
            d.SetTime(this.GetTotalTime());
            d.SetValue(a);
            d.SetAbsoluteValue(a)
        }
        SetId(a) {
            this._id = a
        }
        GetId() {
            return this._id
        }
        SetInitialValueMode(a) {
            this._initialValueMode = a
        }
        GetInitialValueMode() {
            return this._initialValueMode
        }
        SetDestroyInstanceOnComplete(a) {
            this._destroyInstanceOnComplete =
                a
        }
        GetDestroyInstanceOnComplete() {
            return this._destroyInstanceOnComplete
        }
        OnStarted() {
            if (this._on_started_callbacks)
                for (const a of this._on_started_callbacks) a(this);
            if (!this.IsComplete())
                for (const a of this._tracks) a.CompareSaveStateWithCurrent()
        }
        OnCompleted() {
            this._completedTick = this._runtime.GetTickCount()
        }
        FinishTriggers() {
            if (!this._finishedTriggers && (this._finishedTriggers = !0, this._on_completed_callbacks))
                for (const a of this._on_completed_callbacks) a(this)
        }
        SetTime(a) {
            this._DeleteIntermediateKeyframes();
            super.SetTime(a)
        }
        SetInitialState(a) {
            if (!this.InitialStateSet() && "current-state" === this.GetInitialValueMode())
                for (const d of this._tracks) d.CompareInitialStateWithCurrent();
            super.SetInitialState(a)
        }
        Stop(a = !1) {
            super.Stop(a);
            if (!this.IsComplete())
                for (const d of this._tracks) d.SaveState()
        }
        Reset(a = !0, d = !1) {
            this._DeleteIntermediateKeyframes();
            super.Reset(a, d)
        }
        _DeleteIntermediateKeyframes() {
            for (const a of this._tracks) {
                const d = c => {
                    c = c.GetTime();
                    const f = this.GetTotalTime();
                    return 0 !== c && c !== f
                };
                a.DeleteKeyframes(d);
                a.DeletePropertyKeyframes(d)
            }
        }
        _OnBeforeChangeLayout() {
            if (this.IsReleased()) return !0;
            const a = this.GetInstance();
            if (a && a.GetObjectClass().IsGlobal()) return !1;
            this._timelineManager.CompleteTimeline(this);
            this.ResetBeforeChangeLayout();
            return !0
        }
        MaybeTriggerKeyframeReachedConditions() {}
        Tick(a, d) {
            a = this.GetInstance();
            a = this.GetRuntime().GetDt(a);
            super.Tick(a, 1)
        }
        _SaveToJson() {
            const a = super._SaveToJson(),
                d = this.GetTimelineDataItem();
            return Object.assign(a, {
                tweenDataItemJson: d._SaveToJson(),
                id: this._id,
                destroyInstanceOnComplete: this._destroyInstanceOnComplete,
                initialValueMode: this._initialValueMode
            })
        }
        _LoadFromJson(a) {
            a && (this.GetTimelineDataItem()._LoadFromJson(a.tweenDataItemJson), super._LoadFromJson(a), this._id = a.id, this._destroyInstanceOnComplete = a.destroyInstanceOnComplete, this._initialValueMode = a.initialValueMode)
        }
        static IsPlaying(a) {
            return a.IsPlaying()
        }
        static IsPaused(a) {
            return a.IsPaused()
        }
        static Build(a) {
            var d = a.runtime.GetTimelineManager(),
                c = new e.TimelineDataItem;
            if (a.json) {
                c._LoadFromJson(a.json.tweenDataItemJson);
                var f = new e.Tween(c, d);
                f._LoadFromJson(a.json);
                return f
            }
            d = new e.Tween(c, d);
            e.IsArray(a.propertyTracksConfig) || (a.propertyTracksConfig = [a.propertyTracksConfig]);
            d.SetId(a.id);
            d.SetTags(a.tags);
            d.SetInitialValueMode(a.initialValueMode);
            d.SetDestroyInstanceOnComplete(a.releaseOnComplete);
            d.SetLoop(a.loop);
            d.SetPingPong(a.pingPong);
            d.SetTotalTime(a.time);
            d.SetStep(0);
            d.SetInterpolationMode("default");
            d.SetResultMode(a.propertyTracksConfig[0].resultMode);
            c = d.AddTrack();
            c.SetInstanceUID(a.instance.GetUID());
            c.SetInterpolationMode("default");
            c.SetResultMode(a.propertyTracksConfig[0].resultMode);
            c.SetEnable(!0);
            c.SetObjectClassIndex(a.instance.GetObjectClass().GetIndex());
            var k = a.instance.GetSdkInstance(),
                g = k.IsOriginalSizeKnown() ? k.GetOriginalWidth() : a.instance.GetWorldInfo().GetWidth();
            k = k.IsOriginalSizeKnown() ? k.GetOriginalHeight() : a.instance.GetWorldInfo().GetHeight();
            c.SetOriginalWidth(g);
            c.SetOriginalHeight(k);
            g = c.AddKeyframe();
            g.SetTime(0);
            g.SetEase("noease");
            g.SetEnable(!0);
            g.SetTags("");
            g = c.AddKeyframe();
            g.SetTime(a.time);
            g.SetEase("noease");
            g.SetEnable(!0);
            g.SetTags("");
            for (f of a.propertyTracksConfig) g =
                c.AddPropertyTrack(), g.SetSourceAdapterId(f.sourceId), g.SetSourceAdapterArgs(f.sourceArgs), g.SetPropertyName(f.property), g.SetPropertyType(f.type), g.SetMin(NaN), g.SetMax(NaN), g.SetInterpolationMode("default"), g.SetResultMode(f.resultMode), g.SetEnable(!0), k = g.AddPropertyKeyframe(), k.SetType(f.valueType), k.SetTime(0), k.SetEase(f.ease), k.SetEnable(!0), k.SetValue(f.startValue), k.SetAbsoluteValue(f.startValue), g = g.AddPropertyKeyframe(), g.SetType(f.valueType), g.SetTime(a.time), g.SetEase(f.ease), g.SetEnable(!0),
                g.SetValue(f.endValue), g.SetAbsoluteValue(f.endValue);
            return d
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.Ease;
    e.Transition = class extends e.DefendedBase {
        constructor(a) {
            super();
            this._name = a[0];
            this._transitionKeyframes = [];
            for (const d of a[1]) a = e.TransitionKeyframe.Create(this, d), this._transitionKeyframes.push(a);
            this._precalculatedSamples = new Map;
            this._transitionKeyframeCache = new Map;
            this._PreCalcSamples();
            b.AddCustomEase(this._name, (d, c, f, k) => this.Interpolate(d, c, f, k))
        }
        static Create(a) {
            return e.New(e.Transition, a)
        }
        Release() {
            for (const a of this._transitionKeyframes) a.Release();
            e.clearArray(this._transitionKeyframes);
            this._transitionKeyframes = null;
            this._precalculatedSamples.clear();
            this._precalculatedSamples = null;
            this._transitionKeyframeCache.clear();
            this._transitionKeyframeCache = null
        }
        GetTransitionKeyFrameAt(a) {
            const d = this._transitionKeyframeCache.get(a);
            if (d) return d;
            for (const c of this._transitionKeyframes)
                if (c.GetValueX() === a) return this._transitionKeyframeCache.set(a, c), c
        }
        GetFirstTransitionKeyFrameHigherThan(a) {
            for (const d of this._transitionKeyframes)
                if (d.GetValueX() >
                    a) return d
        }
        GetFirstTransitionKeyFrameHigherOrEqualThan(a) {
            for (const d of this._transitionKeyframes)
                if (d.GetValueX() >= a) return d
        }
        GetFirstTransitionKeyFrameLowerOrEqualThan(a) {
            for (let d = this._transitionKeyframes.length - 1; 0 <= d; d--) {
                const c = this._transitionKeyframes[d];
                if (c.GetValueX() <= a) return c
            }
        }
        Interpolate(a, d, c, f) {
            var k = a / f;
            (a = this.GetTransitionKeyFrameAt(k)) ? f = this.GetFirstTransitionKeyFrameHigherThan(k): (a = this.GetFirstTransitionKeyFrameLowerOrEqualThan(k), f = this.GetFirstTransitionKeyFrameHigherOrEqualThan(k));
            var g = f.GetValueX() - a.GetValueX();
            k = e.mapToRange(k, a.GetValueX(), f.GetValueX(), 0, g);
            g = a.GetValueX();
            const l = a.GetValueY(),
                m = a.GetValueX() + a.GetStartAnchorX(),
                u = a.GetValueY() + a.GetStartAnchorY(),
                x = f.GetValueX() + f.GetEndAnchorX(),
                p = f.GetValueY() + f.GetEndAnchorY(),
                r = f.GetValueX();
            f = f.GetValueY();
            f = b.GetRuntimeEase("spline")(k, g, l, m, u, x, p, r, f, this._precalculatedSamples.get(a));
            f += a.GetValueY();
            return (1 - f) * d + f * (d + c)
        }
        _PreCalcSamples() {
            this._precalculatedSamples.clear();
            for (let c = 0; c < this._transitionKeyframes.length -
                1; c++) {
                var a = this._transitionKeyframes[c];
                if (!a.GetStartEnable()) continue;
                var d = this._transitionKeyframes[c + 1];
                const f = a.GetValueX(),
                    k = a.GetValueX() + a.GetStartAnchorX(),
                    g = d.GetValueX() + d.GetEndAnchorX();
                d = d.GetValueX();
                this._precalculatedSamples.set(a, b.GetBezierSamples(f, k, g, d))
            }
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.TransitionKeyframe = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._transition = b;
            this._valueX = a[0];
            this._valueY = a[1];
            this._startAnchorX = a[2];
            this._startAnchorY = a[3];
            this._endAnchorX = a[4];
            this._endAnchorY = a[5];
            this._startEnable = a[6];
            this._endEnable = a[7]
        }
        Release() {
            this._transition = null
        }
        static Create(b, a) {
            return e.New(e.TransitionKeyframe, b, a)
        }
        GetValueX() {
            return this._valueX
        }
        GetValueY() {
            return this._valueY
        }
        GetStartAnchorX() {
            return this._startAnchorX
        }
        GetStartAnchorY() {
            return this._startAnchorY
        }
        GetEndAnchorX() {
            return this._endAnchorX
        }
        GetEndAnchorY() {
            return this._endAnchorY
        }
        GetStartEnable() {
            return this._startEnable
        }
        GetEndEnable() {
            return this._endEnable
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.TransitionManager = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._runtime = b;
            this._transitions = []
        }
        Release() {
            for (const b of this._transitions) b.Release();
            e.clearArray(this._transitions);
            this._transitions = null
        }
        Create(b) {
            this._transitions.push(e.Transition.Create(b))
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SolStack = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._objectClass = b;
            this._stack = [];
            this._stack.push(e.New(e.Sol, this));
            this._index = 0;
            this._current = this._stack[0]
        }
        Release() {
            for (const b of this._stack) b.Release();
            e.clearArray(this._stack);
            this._objectClass = this._current = null
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetCurrentSol() {
            return this._current
        }
        Clear() {
            this.GetCurrentSol().Clear()
        }
        PushClean() {
            var b = this._stack,
                a = ++this._index;
            a === b.length ? (a = e.New(e.Sol,
                this), b.push(a), this._current = a) : (b = b[a], b.Reset(), this._current = b)
        }
        PushCopy() {
            const b = this._stack,
                a = ++this._index;
            a === b.length && b.push(e.New(e.Sol, this));
            const d = b[a];
            d.Copy(b[a - 1]);
            this._current = d
        }
        Pop() {
            this._current = this._stack[--this._index]
        }
        RemoveInstances(b) {
            const a = this._stack;
            for (let d = 0, c = a.length; d < c; ++d) a[d].RemoveInstances(b)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Sol = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._stack = b;
            this._objectClass = this._stack.GetObjectClass();
            this._eventStack = this._objectClass.GetRuntime().GetEventStack();
            this._selectAll = !0;
            this._instances = [];
            this._elseInstances = []
        }
        Release() {
            this.ClearArrays();
            this._eventStack = this._objectClass = this._stack = null
        }
        ClearArrays() {
            e.clearArray(this._instances);
            e.clearArray(this._elseInstances)
        }
        GetObjectClass() {
            return this._objectClass
        }
        IsSelectAll() {
            return this._selectAll
        }
        HasAnyInstances() {
            return this._selectAll ?
                !!this._objectClass.GetInstanceCount() : !!this._instances.length
        }
        GetInstances() {
            return this._selectAll ? this._objectClass.GetInstances() : this._instances
        }
        HasAnyElseInstances() {
            return !!this._elseInstances.length
        }
        GetElseInstances() {
            return this._elseInstances
        }
        GetExpressionInstances() {
            const b = this.GetInstances();
            return b.length ? b : this._elseInstances
        }
        Reset() {
            this._selectAll = !0;
            e.clearArray(this._elseInstances)
        }
        Clear() {
            this._selectAll = !0
        }
        Copy(b) {
            b.IsSelectAll() ? this.Reset() : (this._selectAll = !1, e.shallowAssignArray(this._instances,
                b._instances), e.clearArray(this._elseInstances))
        }
        _PushInstance(b) {
            this._instances.push(b)
        }
        _PushElseInstance(b) {
            this._elseInstances.push(b)
        }
        _SetSelectAll(b) {
            this._selectAll = !!b
        }
        _GetOwnInstances() {
            return this._instances
        }
        _GetOwnElseInstances() {
            return this._elseInstances
        }
        SetSinglePicked(b) {
            this._selectAll = !1;
            e.clearArray(this._instances);
            this._instances.push(b)
        }
        SetArrayPicked(b) {
            this._selectAll = !1;
            e.shallowAssignArray(this._instances, b)
        }
        SetSetPicked(b) {
            this._selectAll = !1;
            e.clearArray(this._instances);
            for (const a of b) this._instances.push(a)
        }
        AddElseInstances(b, a) {
            for (const d of a) b.has(d) || this._elseInstances.push(d)
        }
        TransferElseInstancesToOwn(b) {
            for (const a of b) this._instances.push(a);
            e.arrayRemoveAllInSet(this._elseInstances, b)
        }
        PickOne(b) {
            b && (this._eventStack.GetCurrentStackFrame().GetCurrentEvent().IsOrBlock() ? (this.IsSelectAll() && (e.clearArray(this._instances), e.shallowAssignArray(this._elseInstances, b.GetObjectClass().GetInstances()), this._selectAll = !1), b = this._elseInstances.indexOf(b), -1 !==
                b && (this._instances.push(this._elseInstances[b]), this._elseInstances.splice(b, 1))) : this.SetSinglePicked(b))
        }
        RemoveInstances(b) {
            e.arrayRemoveAllInSet(this._instances, b);
            e.arrayRemoveAllInSet(this._elseInstances, b)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.EventStack = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._eventSheetManager = b;
            this._runtime = this._eventSheetManager.GetRuntime();
            this._stack = [];
            this._stack.push(e.New(e.EventStackFrame, this, null));
            this._index = 0;
            this._expFuncStack = []
        }
        Release() {
            for (const b of this._stack) b.Release();
            e.clearArray(this._stack);
            e.clearArray(this._expFuncStack);
            this._runtime = this._eventSheetManager = null
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetCurrentStackFrame() {
            return this._stack[this._index]
        }
        Push(b) {
            var a =
                this._stack;
            const d = ++this._index;
            if (d === a.length) return b = e.New(e.EventStackFrame, this, b), a.push(b), b;
            a = a[d];
            a.Reset(b);
            return a
        }
        Pop() {
            --this._index
        }
        PushExpFunc(b) {
            this._expFuncStack.push(b)
        }
        PopExpFunc() {
            this._expFuncStack.pop()
        }
        GetCurrentExpFuncStackFrame() {
            const b = this._expFuncStack;
            return 0 === b.length ? null : b.at(-1)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.EventStackFrame = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._stack = b;
            this._runtime = this._stack.GetRuntime();
            this._currentEvent = a;
            this._actIndex = this._cndIndex = 0;
            this._elseBranchRan = this._lastEventTrue = !1;
            this._expressionObjectClass = null;
            this._functionReturnValue = this._functionReturnType = 0
        }
        Release() {
            this.Reset(null);
            this._runtime = this._stack = null
        }
        Reset(b) {
            this._currentEvent = b;
            this._actIndex = this._cndIndex = 0;
            this._elseBranchRan = this._lastEventTrue = !1
        }
        _Restore(b,
            a) {
            this._currentEvent = b;
            this._cndIndex = 0;
            this._actIndex = a
        }
        ResetQuick() {
            this._actIndex = this._cndIndex = 0
        }
        GetCurrentEvent() {
            return this._currentEvent
        }
        SetCurrentEvent(b) {
            this._currentEvent = b
        }
        GetConditionIndex() {
            return this._cndIndex
        }
        SetConditionIndex(b) {
            this._cndIndex = b
        }
        GetActionIndex() {
            return this._actIndex
        }
        SetActionIndex(b) {
            this._actIndex = b
        }
        SetLastEventTrue(b) {
            this._lastEventTrue = !!b
        }
        GetLastEventTrue() {
            return this._lastEventTrue
        }
        SetElseBranchRan(b) {
            this._elseBranchRan = !!b
        }
        GetElseBranchRan() {
            return this._elseBranchRan
        }
        SetExpressionObjectClass(b) {
            this._expressionObjectClass =
                b
        }
        GetExpressionObjectClass() {
            return this._expressionObjectClass
        }
        InitCallFunctionExpression(b, a) {
            this._functionReturnType = b;
            this._functionReturnValue = a
        }
        GetFunctionReturnType() {
            return this._functionReturnType
        }
        SetFunctionReturnValue(b) {
            this._functionReturnValue = b
        }
        GetFunctionReturnValue() {
            return this._functionReturnValue
        }
        IsSolModifierAfterCnds() {
            const b = this._currentEvent;
            return b.IsSolWriterAfterCnds() ? !0 : this._cndIndex < b.GetConditionCount() - 1 ? !!b.GetSolModifiers().length : !1
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.LocalVarStack = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._eventSheetManager = b;
            this._runtime = this._eventSheetManager.GetRuntime();
            this._stack = [];
            this._index = -1;
            this._current = null;
            this._initialValues = []
        }
        Release() {
            e.clearArray(this._stack);
            this._runtime = this._eventSheetManager = null
        }
        _SetInitialValues(b) {
            this._initialValues = b;
            b = this._initialValues.slice(0);
            this._stack.push(b);
            this._index = 0;
            this._current = b
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetCurrent() {
            return this._current
        }
        Push() {
            const b =
                ++this._index,
                a = this._stack;
            b === a.length ? a.push(this._initialValues.slice(0)) : e.shallowAssignArray(a[b], this._initialValues);
            this._current = a[b]
        }
        Pop() {
            this._current = this._stack[--this._index]
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.LoopStack = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._eventSheetManager = b;
            this._runtime = this._eventSheetManager.GetRuntime();
            this._stack = [];
            this._index = -1
        }
        Release() {
            e.clearArray(this._stack);
            this._runtime = this._eventSheetManager = null
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        IsInLoop() {
            return 0 <= this._index
        }
        GetCurrent() {
            return this._stack[this._index]
        }
        Push() {
            ++this._index;
            if (this._index === this._stack.length) {
                var b =
                    e.New(e.Loop, this);
                this._stack.push(b);
                return b
            }
            b = this._stack[this._index];
            b.Reset();
            return b
        }
        Pop() {
            --this._index
        }
        FindByName(b) {
            const a = this._stack;
            for (let d = this._index; 0 <= d; --d) {
                const c = a[d];
                if (c.GetName() === b) return c
            }
            return null
        }
        _GetStack() {
            return this._stack.slice(0, this._index + 1)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Loop = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._loopStack = b;
            this._name = "";
            this._index = 0;
            this._isStopped = !1;
            this._end = NaN
        }
        Reset() {
            this._name = "";
            this._index = 0;
            this._isStopped = !1;
            this._end = NaN
        }
        SetName(b) {
            this._name = b
        }
        GetName() {
            return this._name
        }
        SetIndex(b) {
            this._index = b
        }
        GetIndex() {
            return this._index
        }
        Stop() {
            this._isStopped = !0
        }
        IsStopped() {
            return this._isStopped
        }
        SetEnd(b) {
            this._end = b
        }
        GetEnd() {
            return this._end
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.ArrayStack = class extends e.DefendedBase {
        constructor() {
            super();
            this._stack = [];
            this._index = -1
        }
        Release() {
            e.clearArray(this._stack)
        }
        GetCurrent() {
            return this._stack[this._index]
        }
        Push() {
            ++this._index;
            if (this._index === this._stack.length) {
                const b = [];
                this._stack.push(b);
                return b
            }
            return this._stack[this._index]
        }
        Pop() {
            --this._index
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(d, c) {
        return d.GetIndex() - c.GetIndex()
    }

    function a(d, c) {
        for (let f = 0, k = d.length; f < k; ++f)
            if (d[f] !== c[f]) return !1;
        return !0
    }
    e.EventSheetManager = class extends e.DefendedBase {
        constructor(d) {
            super();
            this._runtime = d;
            this._allSheets = [];
            this._sheetsByName = new Map;
            this._allGroups = [];
            this._groupsByName = new Map;
            this._blocksBySid = new Map;
            this._cndsBySid = new Map;
            this._actsBySid = new Map;
            this._allUniqueSolModifiers = new Map;
            this._eventVarsBySid = new Map;
            this._nextLocalVarIndex =
                0;
            this._allGlobalVars = [];
            this._allLocalVars = [];
            this._localVarInitialValues = [];
            this._functionBlocksByName = new Map;
            this._eventStack = e.New(e.EventStack, this);
            this._localVarStack = e.New(e.LocalVarStack, this);
            this._loopStack = e.New(e.LoopStack, this);
            this._triggersToPostInit = [];
            this._queuedTriggers = [];
            this._queuedDebugTriggers = [];
            this._blockFlushingDepth = this._executingTriggerDepth = this._runningEventsDepth = 0;
            this._scheduledWaits = [];
            this._asyncActionPromises = [];
            self.c3_callFunction = (c, f) => this._InvokeFunctionFromJS(c,
                f)
        }
        Release() {
            this.ClearAllScheduledWaits();
            this._eventStack.Release();
            this._eventStack = null;
            this._localVarStack.Release();
            this._localVarStack = null;
            e.clearArray(this._queuedTriggers);
            e.clearArray(this._queuedDebugTriggers);
            this._runtime = null;
            e.clearArray(this._allSheets);
            this._sheetsByName.clear()
        }
        Create(d) {
            d = e.New(e.EventSheet, this, d);
            this._allSheets.push(d);
            this._sheetsByName.set(d.GetName().toLowerCase(), d)
        }
        _AddTriggerToPostInit(d) {
            this._triggersToPostInit.push(d)
        }
        _PostInit() {
            for (const d of this._functionBlocksByName.values()) d._PostInit(!1);
            for (const d of this._allSheets) d._PostInit();
            for (const d of this._allSheets) d._UpdateDeepIncludes();
            for (const d of this._triggersToPostInit) d._PostInit(!1);
            e.clearArray(this._triggersToPostInit);
            this._localVarStack._SetInitialValues(this._localVarInitialValues)
        }
        GetRuntime() {
            return this._runtime
        }
        GetEventSheetByName(d) {
            return this._sheetsByName.get(d.toLowerCase()) || null
        }
        _RegisterGroup(d) {
            this._allGroups.push(d);
            this._groupsByName.set(d.GetGroupName(), d)
        }
        _RegisterEventBlock(d) {
            this._blocksBySid.set(d.GetSID(),
                d)
        }
        _RegisterCondition(d) {
            this._cndsBySid.set(d.GetSID(), d)
        }
        _RegisterAction(d) {
            this._actsBySid.set(d.GetSID(), d)
        }
        _RegisterFunctionBlock(d) {
            this._functionBlocksByName.set(d.GetFunctionName().toLowerCase(), d)
        }
        _RegisterEventVariable(d) {
            this._eventVarsBySid.set(d.GetSID(), d);
            d.IsGlobal() ? this._allGlobalVars.push(d) : this._allLocalVars.push(d)
        }
        _DeduplicateSolModifierList(d) {
            2 <= d.length && d.sort(b);
            let c = this._allUniqueSolModifiers.get(d.length);
            c || (c = [], this._allUniqueSolModifiers.set(d.length, c));
            for (let f =
                    0, k = c.length; f < k; ++f) {
                const g = c[f];
                if (a(d, g)) return g
            }
            c.push(d);
            return d
        }
        _GetNextLocalVarIndex(d) {
            this._localVarInitialValues.push(d.GetInitialValue());
            return this._nextLocalVarIndex++
        }
        GetEventStack() {
            return this._eventStack
        }
        GetCurrentEventStackFrame() {
            return this.GetEventStack().GetCurrentStackFrame()
        }
        GetCurrentEvent() {
            return this.GetCurrentEventStackFrame().GetCurrentEvent()
        }
        GetCurrentCondition() {
            const d = this.GetCurrentEventStackFrame();
            return d.GetCurrentEvent().GetConditionAt(d.GetConditionIndex())
        }
        GetCurrentAction() {
            const d =
                this.GetCurrentEventStackFrame();
            return d.GetCurrentEvent().GetActionAt(d.GetActionIndex())
        }
        GetLocalVarStack() {
            return this._localVarStack
        }
        GetLoopStack() {
            return this._loopStack
        }
        GetAllLocalVariablesInScope(d) {
            const c = [];
            for (d = d.GetScopeParent(); d;) e.appendArray(c, d._GetAllLocalVariablesInScope()), d = d.GetScopeParent();
            return c
        }
        _GetLocalVariablesScriptInterface(d) {
            const c = {};
            for (const f of this.GetAllLocalVariablesInScope(d)) c[f.GetJsPropName()] = f._GetScriptInterfaceDescriptor();
            return Object.create(Object.prototype,
                c)
        }
        GetEventVariableBySID(d) {
            return this._eventVarsBySid.get(d) || null
        }
        GetEventBlockBySID(d) {
            return this._blocksBySid.get(d) || null
        }
        GetConditionBySID(d) {
            return this._cndsBySid.get(d) || null
        }
        GetActionBySID(d) {
            return this._actsBySid.get(d) || null
        }
        GetFunctionBlockByName(d) {
            return this._functionBlocksByName.get(d.toLowerCase()) || null
        }
        GetAllGlobalVariables() {
            return this._allGlobalVars
        }
        GetAllLocalVariables() {
            return this._allLocalVars
        }
        ResetAllGlobalsToInitialValue() {
            for (const d of this._allGlobalVars) d.ResetToInitialValue()
        }
        GetEventGroupByName(d) {
            return this._groupsByName.get(d.toLowerCase()) ||
                null
        }
        GetEventGroupBySID(d) {
            return (d = this._blocksBySid.get(d)) && d.IsGroup() ? d : null
        }
        GetAllGroups() {
            return this._allGroups
        }
        ResetAllGroupsInitialActivation() {
            for (const d of this._allGroups) d.ResetInitialActivation()
        }
        _ResetAllHasRunFlags() {
            for (const d of this._allSheets) d._ResetHasRunFlag()
        }
        RunEvents(d) {
            this._ResetAllHasRunFlags();
            this._runningEventsDepth++;
            for (const c of d.runningLayouts())
                if (d = c.GetEventSheet()) this._runtime.PushCurrentLayout(c), d.Run(), this._runtime.PopCurrentLayout();
            this._runningEventsDepth--
        }
        async DebugRunEvents(d) {
            this._ResetAllHasRunFlags();
            this._runningEventsDepth++;
            for (const c of this._DebugRunEventsGen(d)) await this._runtime.DebugBreak(c);
            this._runningEventsDepth--
        }* _DebugRunEventsGen(d) {
            for (const c of d.runningLayouts())
                if (d = c.GetEventSheet()) this._runtime.PushCurrentLayout(c), yield* d.DebugRun(), this._runtime.PopCurrentLayout()
        }
        _Trigger(d, c, f, k) {
            let g = !1;
            if (!d.GetMainRunningLayout()) return this.QueueTrigger(c, f, k);
            this._executingTriggerDepth++;
            for (const l of d.runningLayouts())
                if (d = l.GetEventSheet()) {
                    this._runtime.PushCurrentLayout(l);
                    for (const m of d.deepIncludes()) {
                        const u = m._Trigger(c, f, k);
                        g = g || u
                    }
                    d = d._Trigger(c, f, k);
                    g = g || d;
                    this._runtime.PopCurrentLayout()
                }
            this._executingTriggerDepth--;
            return g
        }* _DebugTrigger(d, c, f, k) {
            let g = !1;
            if (!d.GetMainRunningLayout()) return this.QueueTrigger(c, f, k);
            this._executingTriggerDepth++;
            for (const l of d.runningLayouts())
                if (d = l.GetEventSheet()) {
                    this._runtime.PushCurrentLayout(l);
                    for (const m of d.deepIncludes()) {
                        const u = yield* m._DebugTrigger(c, f, k);
                        g = g || u
                    }
                    d = yield* d._DebugTrigger(c, f, k);
                    g = g || d;
                    this._runtime.PopCurrentLayout()
                }
            this._executingTriggerDepth--;
            return g
        }
        QueueTrigger(d, c, f) {
            this._queuedTriggers.push([d, c, f]);
            return !1
        }
        QueueDebugTrigger(d, c, f) {
            let k = null;
            const g = new Promise(l => k = l);
            this._queuedDebugTriggers.push([d, c, f, k]);
            return g
        }* _RunQueuedDebugTriggersGen() {
            if (this._runtime.HitBreakpoint()) throw Error("should not be in breakpoint");
            const d = this._runtime.GetLayoutManager();
            for (; this._queuedDebugTriggers.length;) {
                const [c, f, k, g] = this._queuedDebugTriggers.shift(), l = yield* this._DebugTrigger(d, c, f, k);
                g(l)
            }
        }
        async RunQueuedDebugTriggersAsync() {
            for (const d of this._RunQueuedDebugTriggersGen()) await this._runtime.DebugBreak(d)
        }
        _FastTrigger(d,
            c, f, k) {
            let g = !1;
            var l = d.GetMainRunningLayout();
            if (d = l.GetEventSheet()) {
                this._executingTriggerDepth++;
                this._runtime.PushCurrentLayout(l);
                l = d.deepIncludes();
                for (let m = 0, u = l.length; m < u; ++m) {
                    const x = l[m]._FastTrigger(c, f, k);
                    g = g || x
                }
                c = d._FastTrigger(c, f, k);
                g = g || c;
                this._runtime.PopCurrentLayout();
                this._executingTriggerDepth--;
                return g
            }
        }* _DebugFastTrigger(d, c, f, k) {
            let g = !1;
            var l = d.GetMainRunningLayout();
            if (d = l.GetEventSheet()) {
                this._executingTriggerDepth++;
                this._runtime.PushCurrentLayout(l);
                l = d.deepIncludes();
                for (let m = 0, u = l.length; m < u; ++m) {
                    const x = yield* l[m]._DebugFastTrigger(c, f, k);
                    g = g || x
                }
                c = yield* d._DebugFastTrigger(c, f, k);
                g = g || c;
                this._runtime.PopCurrentLayout();
                this._executingTriggerDepth--;
                return g
            }
        }
        GetTriggerDepth() {
            return this._executingTriggerDepth
        }
        IsInTrigger() {
            return 0 < this.GetTriggerDepth()
        }
        _IncTriggerDepth() {
            return ++this._executingTriggerDepth
        }
        _DecTriggerDepth() {
            --this._executingTriggerDepth
        }
        IsRunningEvents() {
            return 0 < this._runningEventsDepth
        }
        IsInEventEngine() {
            return this.IsRunningEvents() ||
                this.IsInTrigger()
        }
        _RunQueuedTriggers(d) {
            for (const [c, f, k] of this._queuedTriggers) this._Trigger(d, c, f, k);
            e.clearArray(this._queuedTriggers)
        }
        BlockFlushingInstances(d) {
            d ? this._blockFlushingDepth++ : this._blockFlushingDepth--
        }
        IsFlushingBlocked() {
            return 0 < this._blockFlushingDepth
        }
        ClearSol(d) {
            for (let c = 0, f = d.length; c < f; ++c) d[c].GetSolStack().Clear()
        }
        PushCleanSol(d) {
            for (let c = 0, f = d.length; c < f; ++c) d[c].GetSolStack().PushClean()
        }
        PushCopySol(d) {
            for (let c = 0, f = d.length; c < f; ++c) d[c].GetSolStack().PushCopy()
        }
        PopSol(d) {
            for (let c =
                    0, f = d.length; c < f; ++c) d[c].GetSolStack().Pop()
        }
        AddScheduledWait() {
            const d = e.New(e.ScheduledWait, this);
            this._scheduledWaits.push(d);
            return d
        }
        scheduledWaits() {
            return this._scheduledWaits
        }
        RunScheduledWaits() {
            if (this._scheduledWaits.length) {
                var d = this.GetCurrentEventStackFrame(),
                    c = !1;
                this._runningEventsDepth++;
                for (let f = 0, k = this._scheduledWaits.length; f < k; ++f) {
                    const g = this._scheduledWaits[f];
                    g._ShouldRun() && g._Run(d);
                    g.ShouldRelease() && (c = !0)
                }
                c && this._FilterScheduledWaitsToRelease();
                this._runningEventsDepth--
            }
        }
        async DebugRunScheduledWaits() {
            if (this._scheduledWaits.length) {
                var d =
                    this.GetCurrentEventStackFrame(),
                    c = !1;
                this._runningEventsDepth++;
                for (let f = 0, k = this._scheduledWaits.length; f < k; ++f) {
                    const g = this._scheduledWaits[f];
                    g._ShouldRun() && await g._DebugRun(d);
                    g.ShouldRelease() && (c = !0)
                }
                c && this._FilterScheduledWaitsToRelease();
                this._runningEventsDepth--
            }
        }
        _FilterScheduledWaitsToRelease() {
            const d = e.arrayFilterOut(this._scheduledWaits, c => c.ShouldRelease());
            for (const c of d) c.Release()
        }
        ClearAllScheduledWaits() {
            for (const d of this._scheduledWaits) d.Release();
            e.clearArray(this._scheduledWaits)
        }
        RemoveInstancesFromScheduledWaits(d) {
            for (const c of this._scheduledWaits) c.RemoveInstances(d)
        }
        AddAsyncActionPromise(d) {
            this._asyncActionPromises.push(d)
        }
        ClearAsyncActionPromises() {
            e.clearArray(this._asyncActionPromises)
        }
        GetPromiseForAllAsyncActions() {
            const d =
                Promise.all(this._asyncActionPromises);
            this._asyncActionPromises = [];
            return d
        }
        _SaveToJson() {
            return {
                groups: this._SaveGroupsToJson(),
                cnds: this._SaveCndsToJson(),
                acts: this._SaveActsToJson(),
                vars: this._SaveVarsToJson(),
                waits: this._SaveScheduledWaitsToJson()
            }
        }
        _LoadFromJson(d) {
            this._LoadGroupsFromJson(d.groups);
            this._LoadCndsFromJson(d.cnds);
            this._LoadActsFromJson(d.acts);
            this._LoadVarsFromJson(d.vars);
            this._LoadScheduledWaitsFromJson(d.waits)
        }
        _SaveGroupsToJson() {
            const d = {};
            for (const c of this.GetAllGroups()) d[c.GetSID().toString()] =
                c.IsGroupActive();
            return d
        }
        _LoadGroupsFromJson(d) {
            for (const [c, f] of Object.entries(d)) d = parseInt(c, 10), (d = this.GetEventGroupBySID(d)) && d.SetGroupActive(f)
        }
        _SaveCndsToJson() {
            const d = {};
            for (const [c, f] of this._cndsBySid) {
                const k = f._SaveToJson();
                k && (d[c.toString()] = k)
            }
            return d
        }
        _LoadCndsFromJson(d) {
            const c = new Map;
            for (const [f, k] of Object.entries(d)) c.set(parseInt(f, 10), k);
            for (const [f, k] of this._cndsBySid) k._LoadFromJson(c.get(f) || null)
        }
        _SaveActsToJson() {
            const d = {};
            for (const [c, f] of this._actsBySid) {
                const k =
                    f._SaveToJson();
                k && (d[c.toString()] = k)
            }
            return d
        }
        _LoadActsFromJson(d) {
            const c = new Map;
            for (const [f, k] of Object.entries(d)) c.set(parseInt(f, 10), k);
            for (const [f, k] of this._actsBySid) k._LoadFromJson(c.get(f) || null)
        }
        _SaveVarsToJson() {
            const d = {};
            for (const [c, f] of this._eventVarsBySid) f.IsConstant() || !f.IsGlobal() && !f.IsStatic() || (d[c.toString()] = f.GetValue());
            return d
        }
        _LoadVarsFromJson(d) {
            for (const [c, f] of Object.entries(d)) d = parseInt(c, 10), (d = this.GetEventVariableBySID(d)) && d.SetValue(f)
        }
        _SaveScheduledWaitsToJson() {
            return this._scheduledWaits.filter(d =>
                !d.IsPromise()).map(d => d._SaveToJson())
        }
        _LoadScheduledWaitsFromJson(d) {
            this.ClearAllScheduledWaits();
            for (const c of d)(d = e.ScheduledWait._CreateFromJson(this, c)) && this._scheduledWaits.push(d)
        }
        _GetPerfRecords() {
            return [...this._runtime.GetLayoutManager().runningLayouts()].map(d => d.GetEventSheet()).filter(d => d).map(d => d._GetPerfRecord())
        }
        FindFirstFunctionBlockParent(d) {
            for (; d;)
                if (d = d.GetScopeParent(), d instanceof e.FunctionBlock) return d;
            return null
        }
        _InvokeFunctionFromJS(d, c) {
            Array.isArray(c) || (c = []);
            d = this.GetFunctionBlockByName(d.toLowerCase());
            if (!d) return null;
            if (!d.IsEnabled()) return d.GetDefaultReturnValue();
            var f = d.GetFunctionParameters();
            if (c.length < f.length) {
                c = c.slice(0);
                do c.push(f[c.length].GetInitialValue()); while (c.length < f.length)
            }
            f = d.GetEventBlock();
            return f.RunAsExpressionFunctionCall(f.GetSolModifiersIncludingParents(), d.GetReturnType(), d.GetDefaultReturnValue(), ...c)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.EventSheet = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._eventSheetManager = b;
            this._runtime = b.GetRuntime();
            this._name = a[0];
            this._events = [];
            this._triggers = new Map;
            this._fastTriggers = new Map;
            this._eventsByDisplayNumber = new Map;
            this._hasRun = !1;
            this._shallowIncludes = [];
            this._deepIncludes = [];
            this._alreadyIncludedSheets = new Set;
            for (const d of a[1]) this._CreateEvent(d, null, this._events);
            this._perfRecord = this._runtime.IsDebug() ? {
                type: "sheet",
                name: this._name,
                totalTimeCounter: 0,
                children: []
            } : null
        }
        Release() {
            this._runtime = this._eventSheetManager = null
        }
        _CreateEvent(b, a, d) {
            switch (b[0]) {
                case 0:
                case 3:
                    this._CreateEventBlock(b, a, d);
                    break;
                case 1:
                    this._CreateEventVariable(b, a, d);
                    break;
                case 2:
                    this._CreateInclude(b, a, d);
                    break;
                case 4:
                    this._CreateFunctionBlock(b, a);
                    break;
                case 5:
                    this._CreateScriptBlock(b, a, d);
                    break;
                default:
                    throw Error("invalid event type");
            }
        }
        _CreateEventBlock(b, a, d) {
            b = e.EventBlock.Create(this, a, b);
            if (b.IsOrBlock()) {
                d.push(b);
                d = b.GetConditions();
                for (let c = 0, f = d.length; c <
                    f; ++c) d[c].IsTrigger() && this._InitTrigger(b, c)
            } else b.IsTrigger() ? this._InitTrigger(b, 0) : d.push(b)
        }
        _CreateFunctionBlock(b, a) {
            b = e.FunctionBlock.Create(this, a, b);
            this._eventSheetManager._RegisterFunctionBlock(b)
        }
        _CreateEventVariable(b, a, d) {
            b = e.EventVariable.Create(this, a, b);
            d.push(b)
        }
        _CreateInclude(b, a, d) {
            b = e.EventInclude.Create(this, a, b);
            d.push(b)
        }
        _CreateScriptBlock(b, a, d) {
            b = e.EventScript.Create(this, a, b);
            d.push(b)
        }
        _InitTrigger(b, a) {
            b.IsOrBlock() || this._eventSheetManager._AddTriggerToPostInit(b);
            var d =
                b.GetConditionAt(a),
                c = d._GetFunc(),
                f = d.GetObjectClass();
            if (d.IsFastTrigger()) {
                var k = this._fastTriggers.get(f);
                k || (k = new Map, this._fastTriggers.set(f, k));
                d = d.GetFastTriggerValue().toLowerCase();
                f = k.get(c);
                f || (f = new Map, k.set(c, f));
                c = f.get(d);
                c || (c = [], f.set(d, c));
                c.push([b, a])
            } else k = this._triggers.get(f), k || (k = {
                    methodMap: new Map,
                    behaviors: new Map
                }, this._triggers.set(f, k)), (f = d.GetBehaviorType()) ? (d = k.behaviors.get(f), d || (d = new Map, k.behaviors.set(f, d))) : d = k.methodMap, k = d.get(c), k || (k = [], d.set(c, k)),
                k.push([b, a])
        }
        _PostInit() {
            const b = this._events;
            for (let a = 0, d = b.length; a < d; ++a) {
                const c = a < d - 1 && b[a + 1] instanceof e.EventBlock && b[a + 1].IsElseBlock();
                b[a]._PostInit(c)
            }
        }
        _AddShallowInclude(b) {
            this._shallowIncludes.push(b)
        }
        _UpdateDeepIncludes() {
            e.clearArray(this._deepIncludes);
            this._AddDeepIncludes(this);
            this._alreadyIncludedSheets.clear()
        }
        _AddDeepIncludes(b) {
            const a = b._deepIncludes,
                d = b._alreadyIncludedSheets;
            for (const c of this._shallowIncludes) {
                const f = c.GetIncludeSheet();
                c.IsActive() && b !== f && !d.has(f) &&
                    (d.add(f), f._AddDeepIncludes(b), a.push(f))
            }
        }
        deepIncludes() {
            return this._deepIncludes
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetName() {
            return this._name
        }
        _RegisterEventByDisplayNumber(b, a) {
            this._eventsByDisplayNumber.set(a, b)
        }
        _GetEventByDisplayNumber(b) {
            return this._eventsByDisplayNumber.get(b) || null
        }
        _ResetHasRunFlag() {
            this._hasRun = !1
        }
        Run() {
            if (!this._hasRun) {
                var b = this._runtime,
                    a = b.IsCPUProfiling(),
                    d = a ? performance.now() : 0;
                this._hasRun = !0;
                var c = this.GetEventSheetManager(),
                    f = c.GetCurrentEventStackFrame();
                for (const k of this._events) k.Run(f), c.ClearSol(k.GetSolModifiers()), c.ClearAsyncActionPromises(), b.FlushPendingInstances();
                f.Reset(null);
                a && (this._perfRecord.totalTimeCounter += performance.now() - d)
            }
        }* DebugRun() {
            if (!this._hasRun) {
                this._hasRun = !0;
                var b = this._runtime,
                    a = this.GetEventSheetManager(),
                    d = a.GetCurrentEventStackFrame();
                for (const c of this._events) yield* c.DebugRun(d), a.ClearSol(c.GetSolModifiers()), a.ClearAsyncActionPromises(), b.FlushPendingInstances();
                d.Reset(null)
            }
        }
        _Trigger(b,
            a, d) {
            if (a) {
                const c = a.GetObjectClass();
                this._TriggerForClass(b, a, c, d);
                for (const f of c.GetFamilies()) this._TriggerForClass(b, a, f, d)
            } else return this._TriggerForClass(b, a, null, null)
        }
        _TriggerForClass(b, a, d, c) {
            d = this._triggers.get(d);
            if (!d) return !1;
            c = c ? d.behaviors.get(c) : d.methodMap;
            if (!c) return !1;
            c = c.get(b);
            if (!c) return !1;
            b = !1;
            for (const [f, k] of c) c = this._ExecuteTrigger(a, f, k), b = b || c;
            return b
        }* _DebugTrigger(b, a, d) {
            if (a) {
                const c = a.GetObjectClass();
                yield* this._DebugTriggerForClass(b, a, c, d);
                for (const f of c.GetFamilies()) yield* this._DebugTriggerForClass(b,
                    a, f, d)
            } else return yield* this._DebugTriggerForClass(b, a, null, null)
        }* _DebugTriggerForClass(b, a, d, c) {
            d = this._triggers.get(d);
            if (!d) return !1;
            c = c ? d.behaviors.get(c) : d.methodMap;
            if (!c) return !1;
            c = c.get(b);
            if (!c) return !1;
            b = !1;
            for (const [f, k] of c) c = f.DebugCanRunFast() ? this._ExecuteTrigger(a, f, k) : yield* this._DebugExecuteTrigger(a, f, k), b = b || c;
            return b
        }
        _FastTrigger(b, a, d) {
            a = a.GetObjectClass();
            a = this._fastTriggers.get(a);
            if (!a) return !1;
            b = a.get(b);
            if (!b) return !1;
            d = b.get(d);
            if (!d) return !1;
            b = !1;
            for (let c = 0, f = d.length; c <
                f; ++c) a = d[c], a = this._ExecuteTrigger(null, a[0], a[1]), b = b || a;
            return b
        }* _DebugFastTrigger(b, a, d) {
            a = a.GetObjectClass();
            a = this._fastTriggers.get(a);
            if (!a) return !1;
            b = a.get(b);
            if (!b) return !1;
            d = b.get(d);
            if (!d) return !1;
            b = !1;
            for (let f = 0, k = d.length; f < k; ++f) {
                var c = d[f];
                a = c[0];
                c = c[1];
                a = a.DebugCanRunFast() ? this._ExecuteTrigger(null, a, c) : yield* this._DebugExecuteTrigger(null, a, c);
                b = b || a
            }
            return b
        }
        _ExecuteTrigger(b, a, d) {
            const c = this._runtime,
                f = this._eventSheetManager,
                k = f.GetCurrentEvent(),
                g = f.GetEventStack(),
                l = f.GetTriggerDepth();
            let m = !1;
            k && f.PushCleanSol(k.GetSolModifiersIncludingParents());
            f.PushCleanSol(a.GetSolModifiersIncludingParents());
            const u = 1 < l;
            u && f.GetLocalVarStack().Push();
            const x = g.Push(a);
            b && (a.GetConditions()[d].GetObjectClass().GetCurrentSol().SetSinglePicked(b), b.IsInContainer() && b.SetSiblingsSinglePicked());
            b = !0;
            if (a.GetParent()) {
                const p = a.GetTriggerParents();
                for (let r = 0, t = p.length; r < t; ++r)
                    if (!p[r].RunPreTrigger(x)) {
                        b = !1;
                        break
                    }
            }
            b && (c.IncrementExecCount(), a.IsOrBlock() ? a.RunOrBlockTrigger(x, d) : a.Run(x), m =
                x.GetLastEventTrue());
            g.Pop();
            u && f.GetLocalVarStack().Pop();
            f.PopSol(a.GetSolModifiersIncludingParents());
            k && f.PopSol(k.GetSolModifiersIncludingParents());
            k || 1 !== l || (f.ClearAsyncActionPromises(), f.IsFlushingBlocked() || c.FlushPendingInstances());
            return m
        }* _DebugExecuteTrigger(b, a, d) {
            const c = this._runtime,
                f = this._eventSheetManager,
                k = f.GetCurrentEvent(),
                g = f.GetEventStack(),
                l = f.GetTriggerDepth();
            let m = !1;
            k && f.PushCleanSol(k.GetSolModifiersIncludingParents());
            f.PushCleanSol(a.GetSolModifiersIncludingParents());
            const u = 1 < l;
            u && f.GetLocalVarStack().Push();
            const x = g.Push(a);
            b && (a.GetConditions()[d].GetObjectClass().GetCurrentSol().SetSinglePicked(b), b.IsInContainer() && b.SetSiblingsSinglePicked());
            b = !0;
            if (a.GetParent()) {
                const p = a.GetTriggerParents();
                for (let r = 0, t = p.length; r < t; ++r)
                    if (!(yield* p[r].DebugRunPreTrigger(x))) {
                        b = !1;
                        break
                    }
            }
            b && (c.IncrementExecCount(), a.IsOrBlock() ? yield* a.DebugRunOrBlockTrigger(x, d): yield* a.DebugRun(x), m = x.GetLastEventTrue());
            g.Pop();
            u && f.GetLocalVarStack().Pop();
            f.PopSol(a.GetSolModifiersIncludingParents());
            k && f.PopSol(k.GetSolModifiersIncludingParents());
            k || 1 !== l || (f.ClearAsyncActionPromises(), f.IsFlushingBlocked() || c.FlushPendingInstances());
            return m
        }
        _GetPerfRecord() {
            return this._perfRecord
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = [];

    function a(c, f) {
        return !0
    }

    function* d(c, f) {
        return !0
    }
    e.EventBlock = class extends e.DefendedBase {
        constructor(c, f, k) {
            super();
            this._eventSheet = c;
            this._runtime = c.GetRuntime();
            this._parent = f;
            this._scopeParent = null;
            this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
            this._solModifiers = [];
            this._solModifiersIncludingParents = [];
            this._hasElseBlock = this._isTopLevelGroup = this._isSolWriterAfterCnds = this._hasGotSolModifiersIncludingParents = !1;
            this._isOrBlock = !!k[2];
            this._isElseBlock = !1;
            this._triggerParents = null;
            this._conditions = [];
            this._actions = [];
            this._subEvents = [];
            this._RunActions = a;
            this._DebugRunActions = d;
            this._isInitiallyActive = this._isGroup = !1;
            this._groupName = "";
            this._isGroupActive = !1;
            this._perfRecord = this._containedIncludes = null;
            this._sid = k[4];
            this._displayNumber = k[5];
            this._eventSheet._RegisterEventByDisplayNumber(this, this._displayNumber);
            this._debugData = this._runtime.IsDebug() ? {
                isBreakpoint: k[3][0],
                isBreakable: k[3][1],
                canRunAllConditionsFast: !1,
                canRunAllActionsFast: !1,
                canRunAllSubEventsFast: !1,
                canRunSelfFast: !1
            } : null;
            this.GetEventSheetManager()._RegisterEventBlock(this);
            3 === k[0] && this._InitGroup(k[1]);
            c = 0;
            for (var g of k[6]) f = e.Condition.Create(this, g, c++), this._conditions.push(f), this._AddSolModifier(f.GetObjectClass());
            c = 0;
            for (const l of k[7]) g = e.Action.Create(this, l, c++), this._actions.push(g);
            if (9 === k.length) {
                k = k[8];
                for (const l of k) this._eventSheet._CreateEvent(l, this, this._subEvents)
            }
            this._conditions.length && (this._isElseBlock = null === this._conditions[0].GetObjectClass() &&
                this._conditions[0]._GetFunc() === e.Plugins.System.Cnds.Else);
            0 === this._conditions.length && (this._conditions = b);
            0 === this._actions.length && (this._actions = b);
            0 === this._subEvents.length && (this._subEvents = b)
        }
        static Create(c, f, k) {
            return e.New(e.EventBlock, c, f, k)
        }
        _InitGroup(c) {
            this._isGroup = !0;
            this._isGroupActive = this._isInitiallyActive = !!c[0];
            this._groupName = c[1].toLowerCase();
            this._containedIncludes = [];
            this.GetEventSheetManager()._RegisterGroup(this);
            this._runtime.IsDebug() && (this._perfRecord = {
                type: "group",
                name: c[1],
                totalTimeCounter: 0,
                children: []
            })
        }
        _AddContainedInclude(c) {
            this._containedIncludes.push(c)
        }
        _AddContainerSolModifierToList(c, f) {
            for (const k of c.GetContainer().objectTypes()) f.includes(k) || f.push(k)
        }
        _AddSolModifierToList(c, f) {
            if (c)
                if (f.includes(c) || f.push(c), c.IsFamily())
                    for (const k of c.GetFamilyMembers()) k.IsInContainer() && this._AddContainerSolModifierToList(k, f);
                else c.IsInContainer() && this._AddContainerSolModifierToList(c, f)
        }
        _AddSolModifier(c) {
            this._AddSolModifierToList(c, this._solModifiers)
        }
        _AddParentSolModifier(c) {
            this._AddSolModifierToList(c,
                this._solModifiersIncludingParents)
        }
        SetAllSolModifiers() {
            this._solModifiers = this._runtime.GetAllObjectClasses()
        }
        _PostInit(c) {
            this._hasElseBlock = !!c;
            this._IdentifyTopLevelGroup();
            this._IdentifyTriggerParents();
            for (const k of this._conditions) k._PostInit();
            if (0 < this._actions.length) {
                c = !1;
                for (var f of this._actions) f._PostInit(), f.HasReturnType() && (c = !0);
                c ? (this._RunActions = this._RunActions_ReturnValue, this._DebugRunActions = this._DebugRunActions_ReturnValue) : (this._RunActions = this._RunActions_Fast, this._DebugRunActions =
                    this._DebugRunActions_Fast)
            }
            f = this._subEvents;
            for (let k = 0, g = f.length; k < g; ++k) c = k < g - 1 && f[k + 1] instanceof e.EventBlock && f[k + 1].IsElseBlock(), f[k]._PostInit(c);
            this._debugData && this._UpdateCanRunFast();
            this._perfRecord && this._GetPerfRecordParent()._GetPerfRecord().children.push(this._perfRecord)
        }
        _GetPerfRecord() {
            return this._perfRecord
        }
        _GetPerfRecordParent() {
            let c = this.GetParent();
            for (; c;) {
                if (c.IsGroup()) return c;
                c = c.GetParent()
            }
            return this._eventSheet
        }
        _UpdateCanRunFast() {
            const c = this._debugData;
            c.canRunAllConditionsFast =
                this._conditions.every(f => f.DebugCanRunFast());
            c.canRunAllActionsFast = this._actions.every(f => f.DebugCanRunFast());
            c.canRunAllSubEventsFast = this._subEvents.every(f => f.DebugCanRunFast());
            c.canRunSelfFast = c.canRunAllConditionsFast && c.canRunAllActionsFast && c.canRunAllSubEventsFast
        }
        _UpdateCanRunFastRecursive() {
            let c = this;
            do c._UpdateCanRunFast(), c = c.GetParent(); while (c)
        }
        _IdentifyTopLevelGroup() {
            if (this.IsGroup()) {
                var c = this.GetParent();
                for (this._isTopLevelGroup = !0; c;) {
                    if (!c.IsGroup()) {
                        this._isTopLevelGroup = !1;
                        break
                    }
                    c = c.GetParent()
                }
            }
        }
        _IdentifySolModifiersIncludingParents() {
            var c = this._runtime.GetAllObjectClasses();
            if (this._solModifiers === c) this._solModifiersIncludingParents = c;
            else {
                this._solModifiersIncludingParents = e.cloneArray(this._solModifiers);
                for (c = this.GetParent(); c;) {
                    for (var f of c._solModifiers) this._AddParentSolModifier(f);
                    c = c.GetParent()
                }
                f = this.GetEventSheetManager();
                this._solModifiers = f._DeduplicateSolModifierList(this._solModifiers);
                this._solModifiersIncludingParents = f._DeduplicateSolModifierList(this._solModifiersIncludingParents)
            }
        }
        _IdentifyTriggerParents() {
            if (this.HasAnyTriggeredCondition()) {
                this._triggerParents = [];
                for (var c = this.GetParent(); c;) this._triggerParents.push(c), c = c.GetParent();
                this._triggerParents.reverse()
            }
        }
        SetSolWriterAfterCnds() {
            this._isSolWriterAfterCnds = !0;
            this._parent && this._parent.SetSolWriterAfterCnds()
        }
        IsSolWriterAfterCnds() {
            return this._isSolWriterAfterCnds
        }
        GetSolModifiers() {
            return this._solModifiers
        }
        GetSolModifiersIncludingParents() {
            this._hasGotSolModifiersIncludingParents || (this._hasGotSolModifiersIncludingParents = !0, this._IdentifySolModifiersIncludingParents());
            return this._solModifiersIncludingParents
        }
        HasSolModifier(c) {
            return this._solModifiers.includes(c)
        }
        GetTriggerParents() {
            return this._triggerParents
        }
        GetEventSheet() {
            return this._eventSheet
        }
        GetEventSheetManager() {
            return this._eventSheet.GetEventSheetManager()
        }
        GetRuntime() {
            return this._runtime
        }
        GetParent() {
            return this._parent
        }
        _SetScopeParent(c) {
            this._scopeParent =
                c
        }
        GetScopeParent() {
            return this._scopeParent || this._parent
        }
        GetDisplayNumber() {
            return this._displayNumber
        }
        IsDebugBreakable() {
            return this._debugData && this._debugData.isBreakable
        }
        IsDebugBreakpoint() {
            return this.IsDebugBreakable() && this._debugData.isBreakpoint
        }
        _SetDebugBreakpoint(c) {
            this._debugData.isBreakpoint = !!c;
            this._UpdateCanRunFastRecursive()
        }
        IsGroup() {
            return this._isGroup
        }
        IsTopLevelGroup() {
            return this._isTopLevelGroup
        }
        IsElseBlock() {
            return this._isElseBlock
        }
        HasElseBlock() {
            return this._hasElseBlock
        }
        GetGroupName() {
            return this._groupName
        }
        IsGroupActive() {
            return this._isGroupActive
        }
        ResetInitialActivation() {
            this.SetGroupActive(this._isInitiallyActive)
        }
        SetGroupActive(c) {
            c = !!c;
            if (!this._isGroup) throw Error("not a group");
            if (this._isGroupActive !== c) {
                this._isGroupActive = c;
                for (const f of this._containedIncludes) f.UpdateActive();
                this._containedIncludes.length && (c = this._runtime.GetCurrentLayout().GetEventSheet()) && c._UpdateDeepIncludes()
            }
        }
        GetSID() {
            return this._sid
        }
        IsOrBlock() {
            return this._isOrBlock
        }
        IsTrigger() {
            return this._conditions.length && this._conditions[0].IsTrigger()
        }
        IsForFunctionBlock() {
            return this._scopeParent && this._scopeParent instanceof e.FunctionBlock
        }
        HasAnyTriggeredCondition() {
            return this.IsForFunctionBlock() ||
                this._conditions.some(c => c.IsTrigger())
        }
        GetConditions() {
            return this._conditions
        }
        GetConditionCount() {
            return this._conditions.length
        }
        GetConditionAt(c) {
            c = Math.floor(c);
            if (0 > c || c >= this._conditions.length) throw new RangeError("invalid condition index");
            return this._conditions[c]
        }
        GetConditionByDebugIndex(c) {
            return this.GetConditionAt(c)
        }
        IsFirstConditionOfType(c) {
            let f = c.GetIndex();
            if (0 === f) return !0;
            for (--f; 0 <= f; --f)
                if (this._conditions[f].GetObjectClass() === c.GetObjectClass()) return !1;
            return !0
        }
        GetActions() {
            return this._actions
        }
        GetActionCount() {
            return this._actions.length
        }
        GetActionAt(c) {
            c =
                Math.floor(c);
            if (0 > c || c >= this._actions.length) throw new RangeError("invalid action index");
            return this._actions[c]
        }
        GetActionByDebugIndex(c) {
            c = Math.floor(c);
            const f = this._actions.find(k => k.GetDebugIndex() === c);
            if (!f) throw new RangeError("invalid action debug index");
            return f
        }
        _HasActionIndex(c) {
            c = Math.floor(c);
            return 0 <= c && c < this._actions.length
        }
        GetSubEvents() {
            return this._subEvents
        }
        _GetAllLocalVariablesInScope() {
            return this._subEvents.filter(c => c instanceof e.EventVariable)
        }
        RunPreTrigger(c) {
            c.SetCurrentEvent(this);
            let f = !1;
            const k = this._conditions;
            for (let g = 0, l = k.length; g < l; ++g) {
                const m = k[g];
                c.SetConditionIndex(g);
                if (m.IsLooping()) throw Error("trigger cannot be used as sub-event to a loop");
                if (m.Run()) f = !0;
                else if (!this._isOrBlock) return !1
            }
            return this._isOrBlock ? f : !0
        }
        RunOrBlockTrigger(c, f) {
            c.SetCurrentEvent(this);
            this._conditions[f].Run() && (this._RunActions(c, 0) && this._RunSubEvents(c), c.SetLastEventTrue(!0))
        }* DebugRunPreTrigger(c) {
            c.SetCurrentEvent(this);
            let f = !1;
            const k = this._conditions;
            for (let g = 0, l = k.length; g <
                l; ++g) {
                const m = k[g];
                c.SetConditionIndex(g);
                if (m.IsLooping()) throw Error("trigger cannot be used as sub-event to a loop");
                if (m.DebugCanRunFast() ? m.Run() : yield* m.DebugRun()) f = !0;
                else if (!this._isOrBlock) return !1
            }
            return this._isOrBlock ? f : !0
        }* DebugRunOrBlockTrigger(c, f) {
            c.SetCurrentEvent(this);
            f = this._conditions[f];
            if (f.DebugCanRunFast() ? f.Run() : yield* f.DebugRun())(this.DebugCanRunActionsFast() ? this._RunActions(c, 0) : yield* this._DebugRunActions(c, 0)) && (this.DebugCanRunSubEventsFast() ? this._RunSubEvents() :
                yield* this._DebugRunSubEvents()), c.SetLastEventTrue(!0)
        }
        Run(c) {
            c.SetCurrentEvent(this);
            this._isElseBlock || c.SetElseBranchRan(!1);
            this._isOrBlock ? this._RunOrBlock(c) : this._RunAndBlock(c)
        }* DebugRun(c) {
            if (this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            c.SetCurrentEvent(this);
            this._isElseBlock || c.SetElseBranchRan(!1);
            this._isOrBlock ? yield* this._DebugRunOrBlock(c): yield* this._DebugRunAndBlock(c)
        }
        _RunOrBlock(c) {
            const f = this._conditions;
            let k = 0 === f.length;
            for (let l = 0, m = f.length; l < m; ++l) {
                var g =
                    f[l];
                g.IsTrigger() || (c.SetConditionIndex(l), g = g.Run(), k = k || g)
            }
            c.SetLastEventTrue(k);
            k && (this._RunActions(c, 0) && this._RunSubEvents(c), this._hasElseBlock && c.SetElseBranchRan(!0))
        }* _DebugRunOrBlock(c) {
            const f = this._conditions;
            let k = 0 === f.length;
            for (let l = 0, m = f.length; l < m; ++l) {
                var g = f[l];
                g.IsTrigger() || (c.SetConditionIndex(l), g = g.DebugCanRunFast() ? g.Run() : yield* g.DebugRun(), k = k || g)
            }
            c.SetLastEventTrue(k);
            k && ((this.DebugCanRunActionsFast() ? this._RunActions(c, 0) : yield* this._DebugRunActions(c, 0)) && (this.DebugCanRunSubEventsFast() ?
                this._RunSubEvents() : yield* this._DebugRunSubEvents()), this._hasElseBlock && c.SetElseBranchRan(!0))
        }
        _RunAndBlock(c) {
            const f = this._conditions;
            for (let k = 0, g = f.length; k < g; ++k) {
                const l = f[k];
                c.SetConditionIndex(k);
                if (!l.Run()) {
                    c.SetLastEventTrue(!1);
                    return
                }
            }
            c.SetLastEventTrue(!0);
            this._RunActions(c, 0) && this._RunSubEvents(c);
            c.GetLastEventTrue() && this._hasElseBlock && c.SetElseBranchRan(!0)
        }* _DebugRunAndBlock(c) {
            const f = this._conditions;
            for (let k = 0, g = f.length; k < g; ++k) {
                const l = f[k];
                c.SetConditionIndex(k);
                if (l.DebugCanRunFast() ?
                    !l.Run() : !(yield* l.DebugRun())) {
                    c.SetLastEventTrue(!1);
                    return
                }
            }
            c.SetLastEventTrue(!0);
            (this.DebugCanRunActionsFast() ? this._RunActions(c, 0) : yield* this._DebugRunActions(c, 0)) && (this.DebugCanRunSubEventsFast() ? this._RunSubEvents() : yield* this._DebugRunSubEvents());
            c.GetLastEventTrue() && this._hasElseBlock && c.SetElseBranchRan(!0)
        }
        _RunActions_Fast(c, f) {
            const k = this._actions;
            for (let g = f, l = k.length; g < l; ++g) f = k[g], c.SetActionIndex(g), f.Run();
            return !0
        }* _DebugRunActions_Fast(c, f) {
            const k = this._actions;
            for (let g =
                    f, l = k.length; g < l; ++g) f = k[g], c.SetActionIndex(g), f.DebugCanRunFast() ? f.Run() : yield* f.DebugRun();
            return !0
        }
        _RunActions_ReturnValue(c, f) {
            const k = this.GetEventSheetManager(),
                g = this._actions;
            for (let l = f, m = g.length; l < m; ++l) {
                f = g[l];
                c.SetActionIndex(l);
                const u = f.Run();
                if (f.CanBailOut() && !0 === u) return !1;
                f.IsAsync() && u instanceof Promise && k.AddAsyncActionPromise(u)
            }
            return !0
        }* _DebugRunActions_ReturnValue(c, f) {
            const k = this.GetEventSheetManager(),
                g = this._actions;
            for (let l = f, m = g.length; l < m; ++l) {
                f = g[l];
                c.SetActionIndex(l);
                let u;
                u = f.DebugCanRunFast() ? f.Run() : yield* f.DebugRun();
                if (f.CanBailOut() && !0 === u) return !1;
                f.IsAsync() && u instanceof Promise && k.AddAsyncActionPromise(u)
            }
            return !0
        }
        _ResumeActionsAndSubEvents(c) {
            this._RunActions(c, c.GetActionIndex()) && this._RunSubEvents()
        }* _DebugResumeActionsAndSubEvents(c) {
            if (yield* this._DebugRunActions(c, c.GetActionIndex())) yield* this._DebugRunSubEvents()
        }
        _RunSubEvents() {
            if (this._subEvents.length) {
                var c = this.IsGroup() && this._runtime.IsCPUProfiling(),
                    f = c ? performance.now() : 0,
                    k = this._eventStack,
                    g = k.Push(this);
                this._isSolWriterAfterCnds ? this._RunSubEvents_SolWriterAfterCnds(g) : this._RunSubEvents_Fast(g);
                k.Pop();
                c && (this._perfRecord.totalTimeCounter += performance.now() - f)
            }
        }
        _RunSubEvents_SolWriterAfterCnds(c) {
            const f = this._isGroup,
                k = this._isTopLevelGroup,
                g = this.GetEventSheetManager(),
                l = this._subEvents;
            for (let m = 0, u = l.length, x = u - 1; m < u; ++m) {
                const p = l[m],
                    r = p.GetSolModifiers(),
                    t = !k || !f && m < x;
                t && g.PushCopySol(r);
                p.Run(c);
                t ? g.PopSol(r) : g.ClearSol(r)
            }
        }
        _RunSubEvents_Fast(c) {
            const f = this._subEvents;
            for (let k =
                    0, g = f.length; k < g; ++k) f[k].Run(c)
        }* _DebugRunSubEvents() {
            if (this._subEvents.length) {
                var c = this._eventStack,
                    f = c.Push(this);
                this._isSolWriterAfterCnds ? yield* this._DebugRunSubEvents_SolWriterAfterCnds(f): yield* this._DebugRunSubEvents_Fast(f);
                c.Pop()
            }
        }* _DebugRunSubEvents_SolWriterAfterCnds(c) {
            const f = this._isGroup,
                k = this._isTopLevelGroup,
                g = this.GetEventSheetManager(),
                l = this._subEvents;
            for (let m = 0, u = l.length, x = u - 1; m < u; ++m) {
                const p = l[m],
                    r = p.GetSolModifiers(),
                    t = !k || !f && m < x;
                t && g.PushCopySol(r);
                yield* p.DebugRun(c);
                t ? g.PopSol(r) : g.ClearSol(r)
            }
        }* _DebugRunSubEvents_Fast(c) {
            const f = this._subEvents;
            for (let k = 0, g = f.length; k < g; ++k) yield* f[k].DebugRun(c)
        }
        Retrigger(c, f) {
            this._runtime.IncrementExecCount();
            f.ResetQuick();
            const k = this._conditions;
            if (!this.IsOrBlock())
                for (let g = c.GetConditionIndex() + 1, l = k.length; g < l; ++g)
                    if (c = k[g], f.SetConditionIndex(g), !c.Run()) return !1;
            this._RunActions(f, 0) && this._RunSubEvents(f);
            return !0
        }* DebugRetrigger(c, f) {
            this._runtime.IncrementExecCount();
            f.ResetQuick();
            const k = this._conditions;
            if (!this.IsOrBlock())
                for (let g =
                        c.GetConditionIndex() + 1, l = k.length; g < l; ++g)
                    if (c = k[g], f.SetConditionIndex(g), c.DebugCanRunFast() ? !c.Run() : !(yield* c.DebugRun())) return !1;
            (this.DebugCanRunActionsFast() ? this._RunActions(f, 0) : yield* this._DebugRunActions(f, 0)) && (this.DebugCanRunSubEventsFast() ? this._RunSubEvents() : yield* this._DebugRunSubEvents());
            return !0
        }
        DebugCanRunFast() {
            return !this.IsDebugBreakpoint() && !this._runtime.DebugBreakNext() && this._debugData.canRunSelfFast
        }
        DebugCanRunActionsFast() {
            return !this._runtime.DebugBreakNext() && this._debugData.canRunAllActionsFast
        }
        DebugCanRunSubEventsFast() {
            return !this._runtime.DebugBreakNext() &&
                this._debugData.canRunAllSubEventsFast
        }
        _CheckParentsOKToRun(c) {
            if (this.GetParent()) {
                const f = this.GetTriggerParents();
                for (let k = 0, g = f.length; k < g; ++k)
                    if (!f[k].RunPreTrigger(c)) return !1
            }
            return !0
        }* _DebugCheckParentsOKToRun(c) {
            if (this.GetParent()) {
                const f = this.GetTriggerParents();
                for (let k = 0, g = f.length; k < g; ++k)
                    if (!(yield* f[k].DebugRunPreTrigger(c))) return !1
            }
            return !0
        }
        _EvaluateFunctionCallParameters(c, f, k) {
            0 < f.length ? k ? (f = f.map(g => g.Get(0)), c.GetLocalVarStack().Push(), this._scopeParent.SetFunctionParameters(f)) :
                this._scopeParent.EvaluateFunctionParameters(f) : k && c.GetLocalVarStack().Push()
        }
        RunAsFunctionCall(c, f) {
            let k, g;
            const l = 0 < c.length;
            var m = this._runtime;
            const u = this._eventStack,
                x = m.GetEventSheetManager(),
                p = 1 < x._IncTriggerDepth();
            this._EvaluateFunctionCallParameters(x, f, p);
            l && x.PushCleanSol(c);
            f = u.Push(this);
            this._CheckParentsOKToRun(f) && (m.IncrementExecCount(), f.SetCurrentEvent(this), (m = this._scopeParent.IsAsync()) && ([g, k] = this._scopeParent.StartAsyncFunctionCall()), this._RunAndBlock(f), m && this._scopeParent.MaybeFinishAsyncFunctionCall(g));
            u.Pop();
            p && x.GetLocalVarStack().Pop();
            l && x.PopSol(c);
            x._DecTriggerDepth();
            return k
        }* DebugRunAsFunctionCall(c, f) {
            let k, g;
            if (this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            const l = 0 < c.length;
            var m = this._runtime;
            const u = this._eventStack,
                x = m.GetEventSheetManager(),
                p = 1 < x._IncTriggerDepth();
            this._EvaluateFunctionCallParameters(x, f, p);
            l && x.PushCleanSol(c);
            f = u.Push(this);
            if (yield* this._DebugCheckParentsOKToRun(f)) m.IncrementExecCount(), f.SetCurrentEvent(this), (m = this._scopeParent.IsAsync()) &&
                ([g, k] = this._scopeParent.StartAsyncFunctionCall()), yield* this._DebugRunAndBlock(f), m && this._scopeParent.MaybeFinishAsyncFunctionCall(g);
            u.Pop();
            p && x.GetLocalVarStack().Pop();
            l && x.PopSol(c);
            x._DecTriggerDepth();
            return k
        }
        RunAsMappedFunctionCall(c) {
            const f = this.GetSolModifiersIncludingParents(),
                k = 0 < f.length,
                g = this._runtime,
                l = this._eventStack,
                m = g.GetEventSheetManager(),
                u = 1 < m._IncTriggerDepth();
            u && m.GetLocalVarStack().Push();
            this._scopeParent.SetFunctionParameters(c);
            k && m.PushCleanSol(f);
            c = l.Push(this);
            this._CheckParentsOKToRun(c) && (g.IncrementExecCount(), c.SetCurrentEvent(this), this._RunAndBlock(c));
            l.Pop();
            u && m.GetLocalVarStack().Pop();
            k && m.PopSol(f);
            m._DecTriggerDepth()
        }* DebugRunAsMappedFunctionCall(c) {
            if (this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            const f = this.GetSolModifiersIncludingParents(),
                k = 0 < f.length,
                g = this._runtime,
                l = this._eventStack,
                m = g.GetEventSheetManager(),
                u = 1 < m._IncTriggerDepth();
            u && m.GetLocalVarStack().Push();
            this._scopeParent.SetFunctionParameters(c);
            k &&
                m.PushCleanSol(f);
            c = l.Push(this);
            if (yield* this._DebugCheckParentsOKToRun(c)) g.IncrementExecCount(), c.SetCurrentEvent(this), yield* this._DebugRunAndBlock(c);
            l.Pop();
            u && m.GetLocalVarStack().Pop();
            k && m.PopSol(f);
            m._DecTriggerDepth()
        }
        RunAsExpressionFunctionCall(c, f, k, ...g) {
            let l, m;
            const u = 0 < c.length,
                x = this._runtime,
                p = this._eventStack,
                r = x.GetEventSheetManager(),
                t = 1 < r._IncTriggerDepth();
            t && r.GetLocalVarStack().Push();
            0 < g.length && this._scopeParent.SetFunctionParameters(g);
            u && r.PushCleanSol(c);
            g = p.Push(this);
            g.InitCallFunctionExpression(f, k);
            p.PushExpFunc(g);
            x.SetDebuggingEnabled(!1);
            this._CheckParentsOKToRun(g) && (x.IncrementExecCount(), g.SetCurrentEvent(this), (f = this._scopeParent.IsAsync()) && ([m, l] = this._scopeParent.StartAsyncFunctionCall()), this._RunAndBlock(g), f && this._scopeParent.MaybeFinishAsyncFunctionCall(m));
            x.SetDebuggingEnabled(!0);
            p.Pop();
            p.PopExpFunc();
            t && r.GetLocalVarStack().Pop();
            u && r.PopSol(c);
            r._DecTriggerDepth();
            return l || g.GetFunctionReturnValue()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = [];
    let a = !1;
    e.EventScript = class extends e.DefendedBase {
        constructor(d, c, f) {
            super();
            const k = d.GetRuntime(),
                g = d.GetEventSheetManager();
            this._eventSheet = d;
            this._eventSheetManager = g;
            this._runtime = d.GetRuntime();
            this._parent = c;
            this._func = k.GetObjectReference(f[1]);
            this._displayNumber = f[2];
            this._eventSheet._RegisterEventByDisplayNumber(this, this._displayNumber);
            this._debugData = k.IsDebug() ? {
                isBreakpoint: f[3][0],
                isBreakable: f[3][1]
            } : null
        }
        static Create(d, c, f) {
            return e.New(e.EventScript,
                d, c, f)
        }
        _PostInit() {
            const d = this._func,
                c = this._runtime.GetEventSheetManager()._GetLocalVariablesScriptInterface(this);
            this._func = d.bind(null, this._runtime.GetIRuntime(), c)
        }
        GetParent() {
            return this._parent
        }
        GetScopeParent() {
            return this._parent
        }
        GetEventSheet() {
            return this._eventSheet
        }
        GetDisplayNumber() {
            return this._displayNumber
        }
        IsDebugBreakable() {
            return this._debugData && this._debugData.isBreakable
        }
        IsDebugBreakpoint() {
            return this.IsDebugBreakable() && this._debugData.isBreakpoint
        }
        _SetDebugBreakpoint(d) {
            this._debugData.isBreakpoint = !!d
        }
        IsElseBlock() {
            return !1
        }
        GetSolModifiers() {
            return b
        }
        GetSolModifiersIncludingParents() {
            return this._parent ? this._parent.GetSolModifiersIncludingParents() : b
        }
        Run(d) {
            d.SetCurrentEvent(this);
            this._eventSheetManager.AddAsyncActionPromise(this._RunUserScript())
        }
        async _RunUserScript() {
            try {
                await this._func()
            } catch (d) {
                console.error(`Unhandled exception running script %c${this.GetEventSheet().GetName()}, event ${this.GetDisplayNumber()}:`, "font-size: 1.2em; font-weight: bold;", d), self.C3Debugger && self.C3Debugger._SetLastErrorScript(this),
                    a || (console.info("%cTip:%c run this to highlight in Construct the last script that had an error: %cgoToLastErrorScript()", "font-weight: bold; text-decoration: underline", "", "font-weight: bold"), a = !0)
            }
        }* DebugRun(d) {
            d.SetCurrentEvent(this);
            if (this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            this.Run(d)
        }
        DebugCanRunFast() {
            return !this.IsDebugBreakpoint() && !this._runtime.DebugBreakNext()
        }
        static HadUserScriptException() {
            return a
        }
        static SetHadUserScriptException() {
            a = !0
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.FunctionBlock = class extends e.DefendedBase {
        constructor(b, a, d) {
            super();
            this._eventSheet = b;
            this._runtime = b.GetRuntime();
            this._parent = a;
            const c = d[1];
            this._functionName = c[0];
            this._returnType = c[1];
            this._functionParameters = c[2].map(f => e.EventVariable.Create(b, this, f));
            this._isEnabled = c[3];
            this._innerLocalVariables = [];
            this._isAsync = c[4];
            this._nextAsyncId = 0;
            this._currentAsyncId = -1;
            this._asyncMap = new Map;
            this._eventBlock = e.EventBlock.Create(b, a, d);
            this._eventBlock._SetScopeParent(this)
        }
        static Create(b,
            a, d) {
            return e.New(e.FunctionBlock, b, a, d)
        }
        _PostInit() {
            for (const b of this._functionParameters) b._PostInit();
            this._eventBlock._PostInit(!1)
        }
        _GetAllLocalVariablesInScope() {
            return this._functionParameters
        }
        GetFunctionParameters() {
            return this._functionParameters
        }
        GetFunctionParameterCount() {
            return this._functionParameters.length
        }
        _RegisterLocalVariable(b) {
            this._innerLocalVariables.push(b)
        }
        _GetAllInnerLocalVariables() {
            return this._innerLocalVariables
        }
        EvaluateFunctionParameters(b) {
            const a = this._functionParameters;
            for (let d = 0, c = a.length; d < c; ++d) a[d].SetValue(b[d].Get(0))
        }
        SetFunctionParameters(b) {
            const a = this._functionParameters;
            for (let d = 0, c = a.length; d < c; ++d) a[d].SetValue(b[d])
        }
        CaptureFunctionParameters() {
            return this._functionParameters.map(b => b.GetValue())
        }
        GetParent() {
            return this._parent
        }
        GetScopeParent() {
            return this._parent
        }
        GetFunctionName() {
            return this._functionName
        }
        GetReturnType() {
            return this._returnType
        }
        IsEnabled() {
            return this._isEnabled
        }
        GetDefaultReturnValue() {
            switch (this._returnType) {
                case 0:
                    return null;
                case 2:
                    return "";
                default:
                    return 0
            }
        }
        GetEventBlock() {
            return this._eventBlock
        }
        IsAsync() {
            return this._isAsync
        }
        StartAsyncFunctionCall() {
            const b = this._nextAsyncId++;
            this._currentAsyncId = b;
            let a;
            const d = new Promise(c => a = c);
            this._asyncMap.set(b, {
                resolve: a,
                pauseCount: 0
            });
            return [b, d]
        }
        MaybeFinishAsyncFunctionCall(b) {
            const a = this._asyncMap.get(b);
            0 === a.pauseCount && (a.resolve(), this._asyncMap.delete(b));
            this._currentAsyncId = -1
        }
        PauseCurrentAsyncFunction() {
            this._asyncMap.get(this._currentAsyncId).pauseCount++;
            return this._currentAsyncId
        }
        ResumeAsyncFunction(b) {
            this._currentAsyncId =
                b;
            this._asyncMap.get(b).pauseCount--
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = [];
    e.EventVariable = class extends e.DefendedBase {
        constructor(a, d, c) {
            super();
            const f = a.GetEventSheetManager();
            this._eventSheet = a;
            this._eventSheetManager = f;
            this._runtime = a.GetRuntime();
            this._parent = d;
            this._localVarStack = f.GetLocalVarStack();
            this._name = c[1];
            this._type = c[2];
            this._initialValue = c[3];
            this._isStatic = !!c[4];
            this._isConstant = !!c[5];
            this._isFunctionParameter = d instanceof e.FunctionBlock;
            this._sid = c[6];
            this._jsPropName = this._runtime.GetJsPropName(c[8]);
            this._scriptSetter =
                k => this.SetValue(k);
            this._scriptGetter = () => this.GetValue();
            this._hasSingleValue = !this._parent || this._isStatic || this._isConstant;
            this._value = this._initialValue;
            this._localIndex = -1;
            this.IsBoolean() && (this._value = this._value ? 1 : 0);
            !this.IsLocal() || this.IsStatic() || this.IsConstant() || (this._localIndex = f._GetNextLocalVarIndex(this));
            f._RegisterEventVariable(this)
        }
        static Create(a, d, c) {
            return e.New(e.EventVariable, a, d, c)
        }
        _PostInit() {
            if (this.IsLocal() && !this.IsStatic() && !this.IsConstant() && !this.IsFunctionParameter()) {
                const a =
                    this._eventSheetManager.FindFirstFunctionBlockParent(this);
                a && a._RegisterLocalVariable(this)
            }
        }
        GetName() {
            return this._name
        }
        GetJsPropName() {
            return this._jsPropName
        }
        GetParent() {
            return this._parent
        }
        GetScopeParent() {
            return this.GetParent()
        }
        IsGlobal() {
            return !this.GetParent()
        }
        IsLocal() {
            return !this.IsGlobal()
        }
        IsFunctionParameter() {
            return this._isFunctionParameter
        }
        IsStatic() {
            return this._isStatic
        }
        IsConstant() {
            return this._isConstant
        }
        IsNumber() {
            return 0 === this._type
        }
        IsString() {
            return 1 === this._type
        }
        IsBoolean() {
            return 2 ===
                this._type
        }
        IsElseBlock() {
            return !1
        }
        GetSID() {
            return this._sid
        }
        GetInitialValue() {
            return this._initialValue
        }
        GetSolModifiers() {
            return b
        }
        Run(a) {
            !this.IsLocal() || this.IsStatic() || this.IsConstant() || this.SetValue(this.GetInitialValue())
        }
        DebugCanRunFast() {
            return !0
        }* DebugRun(a) {
            this.Run(a)
        }
        SetValue(a) {
            this.IsNumber() ? "number" !== typeof a && (a = parseFloat(a)) : this.IsString() ? "string" !== typeof a && (a = a.toString()) : this.IsBoolean() && (a = a ? 1 : 0);
            this._hasSingleValue ? this._value = a : this._localVarStack.GetCurrent()[this._localIndex] =
                a
        }
        GetValue() {
            return this._hasSingleValue ? this._value : this._localVarStack.GetCurrent()[this._localIndex]
        }
        GetTypedValue() {
            let a = this.GetValue();
            this.IsBoolean() && (a = !!a);
            return a
        }
        ResetToInitialValue() {
            this._value = this._initialValue
        }
        _GetScriptInterfaceDescriptor() {
            return {
                configurable: !1,
                enumerable: !0,
                get: this._scriptGetter,
                set: this._scriptSetter
            }
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = [];
    e.EventInclude = class extends e.DefendedBase {
        constructor(a, d, c) {
            super();
            const f = a.GetEventSheetManager();
            this._eventSheet = a;
            this._eventSheetManager = f;
            this._runtime = a.GetRuntime();
            this._parent = d;
            this._includeSheet = null;
            this._includeSheetName = c[1];
            this._isActive = !0
        }
        static Create(a, d, c) {
            return e.New(e.EventInclude, a, d, c)
        }
        _PostInit() {
            this._includeSheet = this._eventSheetManager.GetEventSheetByName(this._includeSheetName);
            this._eventSheet._AddShallowInclude(this);
            let a =
                this.GetParent();
            for (; a;) a instanceof e.EventBlock && a.IsGroup() && a._AddContainedInclude(this), a = a.GetParent();
            this.UpdateActive();
            this._runtime.IsDebug() && this._eventSheet._GetPerfRecord().children.push(this._includeSheet._GetPerfRecord())
        }
        GetParent() {
            return this._parent
        }
        GetSolModifiers() {
            return b
        }
        GetIncludeSheet() {
            return this._includeSheet
        }
        Run(a) {
            a = !!this.GetParent();
            const d = this._runtime.GetAllObjectClasses();
            a && this._eventSheetManager.PushCleanSol(d);
            this._includeSheet.Run();
            a && this._eventSheetManager.PopSol(d)
        }* DebugRun(a) {
            a = !!this.GetParent();
            const d = this._runtime.GetAllObjectClasses();
            a && this._eventSheetManager.PushCleanSol(d);
            yield* this._includeSheet.DebugRun();
            a && this._eventSheetManager.PopSol(d)
        }
        DebugCanRunFast() {
            return !1
        }
        IsActive() {
            return this._isActive
        }
        UpdateActive() {
            let a = this.GetParent();
            for (; a;) {
                if (a instanceof e.EventBlock && a.IsGroup() && !a.IsGroupActive()) {
                    this._isActive = !1;
                    return
                }
                a = a.GetParent()
            }
            this._isActive = !0
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.ExpNode = class extends e.DefendedBase {
        constructor(l) {
            super();
            this._owner = l;
            this._runtime = l.GetRuntime()
        }
        _PostInit() {}
        static CreateNode(l, m) {
            return e.New([k, c, f, g, b, a][m[0]], l, m)
        }
    };
    class b extends e.ExpNode {
        constructor(l, m) {
            super(l);
            this._systemPlugin = this._runtime.GetSystemPlugin();
            this._func = this._runtime.GetObjectReference(m[1]);
            this._func !== e.Plugins.System.Exps.random && this._func !== e.Plugins.System.Exps.choose || this._owner.SetVariesPerInstance()
        }
        GetBoundMethod() {
            return this._systemPlugin._GetBoundACEMethod(this._func,
                this._systemPlugin)
        }
    }
    class a extends e.ExpNode {
        constructor(l, m) {
            super(l);
            this._functionBlock = null;
            this._functionName = m[1];
            this._owner.SetVariesPerInstance()
        }
        _PostInit() {
            const l = this._runtime.GetEventSheetManager();
            this._functionBlock = l.GetFunctionBlockByName(this._functionName);
            this._functionName = null;
            const m = this._owner.GetEventBlock(),
                u = this._functionBlock.GetEventBlock();
            this._combinedSolModifiers = [...new Set([...m.GetSolModifiersIncludingParents(), ...u.GetSolModifiersIncludingParents()])];
            this._combinedSolModifiers =
                l._DeduplicateSolModifierList(this._combinedSolModifiers)
        }
        GetBoundMethod() {
            const l = this._functionBlock;
            if (l.IsEnabled()) {
                const m = l.GetEventBlock();
                return e.EventBlock.prototype.RunAsExpressionFunctionCall.bind(m, this._combinedSolModifiers, l.GetReturnType(), l.GetDefaultReturnValue())
            } {
                const m = l.GetDefaultReturnValue();
                return () => m
            }
        }
    }

    function d(l, m) {
        if (l >= m) return l % m;
        0 > l && (l <= -m && (l %= m), 0 > l && (l += m));
        return l
    }
    class c extends e.ExpNode {
        constructor(l, m) {
            super(l);
            this._objectClass = this._runtime.GetObjectClassByIndex(m[1]);
            this._func = this._runtime.GetObjectReference(m[2]);
            this._returnsString = !!m[3];
            this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
            this._owner._MaybeVaryFor(this._objectClass)
        }
        GetBoundMethod() {
            return this._objectClass.GetPlugin()._GetBoundACEMethod(this._func, this._objectClass.GetSingleGlobalInstance().GetSdkInstance())
        }
        ExpObject(...l) {
            const m = this._objectClass,
                u = m.GetCurrentSol().GetExpressionInstances();
            var x = u.length;
            if (0 === x) return this._returnsString ? "" : 0;
            x = d(this._owner.GetSolIndex(),
                x);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(m);
            return this._func.apply(u[x].GetSdkInstance(), l)
        }
        ExpObject_InstExpr(l, ...m) {
            const u = this._objectClass,
                x = u.GetInstances(),
                p = x.length;
            if (0 === p) return this._returnsString ? "" : 0;
            l = d(l, p);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(u);
            return this._func.apply(x[l].GetSdkInstance(), m)
        }
    }
    class f extends e.ExpNode {
        constructor(l, m) {
            super(l);
            this._objectClass = this._runtime.GetObjectClassByIndex(m[1]);
            this._varIndex = m[3];
            this._returnsString = !!m[2];
            this._owner._MaybeVaryFor(this._objectClass)
        }
        ExpInstVar() {
            const l = this._objectClass.GetCurrentSol().GetExpressionInstances();
            var m = l.length;
            if (0 === m) return this._returnsString ? "" : 0;
            m = d(this._owner.GetSolIndex(), m);
            return l[m]._GetInstanceVariableValueUnchecked(this._varIndex)
        }
        ExpInstVar_Family() {
            var l = this._objectClass,
                m = l.GetCurrentSol().GetExpressionInstances(),
                u = m.length;
            if (0 === u) return this._returnsString ? "" : 0;
            u = d(this._owner.GetSolIndex(), u);
            m = m[u];
            l = m.GetObjectClass().GetFamilyInstanceVariableOffset(l.GetFamilyIndex());
            return m._GetInstanceVariableValueUnchecked(this._varIndex + l)
        }
        ExpInstVar_InstExpr(l) {
            const m = this._objectClass;
            var u = m.GetInstances();
            const x = u.length;
            if (0 === x) return this._returnsString ? "" : 0;
            l = d(l, x);
            u = u[l];
            l = 0;
            m.IsFamily() && (l = u.GetObjectClass().GetFamilyInstanceVariableOffset(m.GetFamilyIndex()));
            return u._GetInstanceVariableValueUnchecked(this._varIndex + l)
        }
    }
    class k extends e.ExpNode {
        constructor(l, m) {
            super(l);
            this._objectClass = this._runtime.GetObjectClassByIndex(m[1]);
            this._behaviorType = this._objectClass.GetBehaviorTypeByName(m[2]);
            this._behaviorIndex = this._objectClass.GetBehaviorIndexByName(m[2]);
            this._func = this._runtime.GetObjectReference(m[3]);
            this._returnsString = !!m[4];
            this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
            this._owner._MaybeVaryFor(this._objectClass)
        }
        ExpBehavior(...l) {
            const m = this._objectClass;
            var u = m.GetCurrentSol().GetExpressionInstances(),
                x = u.length;
            if (0 === x) return this._returnsString ? "" : 0;
            x = d(this._owner.GetSolIndex(), x);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(m);
            u = u[x];
            x = 0;
            m.IsFamily() && (x = u.GetObjectClass().GetFamilyBehaviorOffset(m.GetFamilyIndex()));
            return this._func.apply(u.GetBehaviorInstances()[this._behaviorIndex + x].GetSdkInstance(), l)
        }
        ExpBehavior_InstExpr(l, ...m) {
            const u = this._objectClass;
            var x = u.GetInstances();
            const p = x.length;
            if (0 === p) return this._returnsString ? "" : 0;
            l = d(l, p);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(u);
            x = x[l];
            l = 0;
            u.IsFamily() && (l = x.GetObjectClass().GetFamilyBehaviorOffset(u.GetFamilyIndex()));
            return this._func.apply(x.GetBehaviorInstances()[this._behaviorIndex +
                l].GetSdkInstance(), m)
        }
    }
    class g extends e.ExpNode {
        constructor(l, m) {
            super(l);
            this._eventVar = null;
            this._eventVarSid = m[1]
        }
        _PostInit() {
            this._eventVar = this._runtime.GetEventSheetManager().GetEventVariableBySID(this._eventVarSid)
        }
        GetVar() {
            return this._eventVar
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Parameter = class extends e.DefendedBase {
        constructor(y, C, F) {
            super();
            this._owner = y;
            this._index = F;
            this._type = C;
            this.Get = null;
            this._isConstant = this._variesPerInstance = !1
        }
        static Create(y, C, F) {
            const H = C[0];
            return e.New([a, d, u, f, g, c, l, a, f, f, x, p, u, t, d, m, k, r, q, w][H], y, H, F, C)
        }
        _PostInit() {}
        SetVariesPerInstance() {
            this._variesPerInstance = !0
        }
        _MaybeVaryFor(y) {
            this._variesPerInstance || !y || y.GetPlugin().IsSingleGlobal() || (this._variesPerInstance = !0)
        }
        VariesPerInstance() {
            return this._variesPerInstance
        }
        GetIndex() {
            return this._index
        }
        GetRuntime() {
            return this._owner.GetRuntime()
        }
        GetEventBlock() {
            return this._owner.GetEventBlock()
        }
        IsConstant() {
            return this._isConstant
        }
    };

    function b(y) {
        y = self.C3_ExpressionFuncs[y];
        if (!y) throw Error("invalid expression number");
        return y
    }
    class a extends e.Parameter {
        constructor(y, C, F, H) {
            super(y, C, F);
            this._solIndex = 0;
            y = H[1];
            this._expressionNumber = y[0];
            this._numberedNodes = [];
            this._expressionFunc = null;
            for (let M = 1, B = y.length; M < B; ++M) this._numberedNodes.push(e.ExpNode.CreateNode(this, y[M]));
            this._numberedNodes.length ? this.Get = this.GetExpression : (this.Get = b(this._expressionNumber), this._isConstant = !0)
        }
        _GetNode(y) {
            if (0 > y || y >= this._numberedNodes.length) throw new RangeError("invalid numbered node");
            return this._numberedNodes[y]
        }
        _PostInit() {
            for (var y of this._numberedNodes) y._PostInit();
            y = b(this._expressionNumber);
            this._expressionFunc = this._numberedNodes.length ? y(this) : y
        }
        GetSolIndex() {
            return this._solIndex
        }
        GetExpression(y) {
            this._solIndex = y;
            return this._expressionFunc()
        }
    }
    class d extends a {
        constructor(y, C, F, H) {
            super(y, C, F, H);
            this.Get = this.GetStringExpression;
            14 === C && (this.GetEventBlock().SetAllSolModifiers(), this._owner instanceof e.Action && this.GetEventBlock().SetSolWriterAfterCnds())
        }
        GetStringExpression(y) {
            this._solIndex =
                y;
            y = this._expressionFunc();
            return "string" === typeof y ? y : ""
        }
        _GetFastTriggerValue() {
            return b(this._expressionNumber)()
        }
    }
    class c extends a {
        constructor(y, C, F, H) {
            super(y, C, F, H);
            this.Get = this.GetLayer;
            this._isConstant = !1
        }
        GetLayer(y) {
            this._solIndex = y;
            y = this._expressionFunc();
            return this.GetRuntime().GetCurrentLayout().GetLayer(y)
        }
    }
    class f extends e.Parameter {
        constructor(y, C, F, H) {
            super(y, C, F);
            this._combo = H[1];
            this.Get = this.GetCombo;
            this._isConstant = !0
        }
        GetCombo() {
            return this._combo
        }
    }
    class k extends e.Parameter {
        constructor(y,
            C, F, H) {
            super(y, C, F);
            this._bool = H[1];
            this.Get = this.GetBoolean;
            this._isConstant = !0
        }
        GetBoolean() {
            return this._bool
        }
    }
    class g extends e.Parameter {
        constructor(y, C, F, H) {
            super(y, C, F);
            this._objectClass = this.GetRuntime().GetObjectClassByIndex(H[1]);
            this.Get = this.GetObjectClass;
            y = this.GetEventBlock();
            y._AddSolModifier(this._objectClass);
            this._owner instanceof e.Action ? y.SetSolWriterAfterCnds() : y.GetParent() && y.GetParent().SetSolWriterAfterCnds();
            this._isConstant = !0
        }
        GetObjectClass() {
            return this._objectClass
        }
    }
    class l extends e.Parameter {
        constructor(y, C, F, H) {
            super(y, C, F);
            this._layout = this.GetRuntime().GetLayoutManager().GetLayoutByName(H[1]);
            this.Get = this.GetLayout;
            this._isConstant = !0
        }
        GetLayout() {
            return this._layout
        }
    }
    class m extends e.Parameter {
        constructor(y, C, F, H) {
            super(y, C, F);
            this._timeline = this.GetRuntime().GetTimelineManager().GetTimelineByName(H[1]);
            this.Get = this.GetTimeline;
            this._isConstant = !0
        }
        GetTimeline() {
            return this._timeline
        }
    }
    class u extends e.Parameter {
        constructor(y, C, F, H) {
            super(y, C, F);
            this._fileInfo =
                H[1];
            this.Get = this.GetFile;
            this._isConstant = !0
        }
        GetFile() {
            return this._fileInfo
        }
    }
    class x extends e.Parameter {
        constructor(y, C, F, H) {
            super(y, C, F);
            this._instVarIndex = H[1];
            (y = this._owner.GetObjectClass()) && y.IsFamily() ? (this.Get = this.GetFamilyInstanceVariable, this.SetVariesPerInstance()) : (this.Get = this.GetInstanceVariable, this._isConstant = !0)
        }
        GetInstanceVariable() {
            return this._instVarIndex
        }
        GetFamilyInstanceVariable(y) {
            y = y || 0;
            const C = this._owner.GetObjectClass();
            var F = C.GetCurrentSol();
            const H = F.GetInstances();
            if (H.length) y = H[y % H.length].GetObjectClass();
            else if (F.HasAnyElseInstances()) F = F.GetElseInstances(), y = F[y % F.length].GetObjectClass();
            else if (0 < C.GetInstanceCount()) F = C.GetInstances(), y = F[y % F.length].GetObjectClass();
            else return 0;
            return this._instVarIndex + y.GetFamilyInstanceVariableOffset(C.GetFamilyIndex())
        }
    }
    class p extends e.Parameter {
        constructor(y, C, F, H) {
            super(y, C, F);
            this._eventVarSid = H[1];
            this._eventVar = null;
            this.Get = this.GetEventVariable;
            this._isConstant = !0
        }
        _PostInit() {
            this._eventVar = this.GetRuntime().GetEventSheetManager().GetEventVariableBySID(this._eventVarSid)
        }
        GetEventVariable() {
            return this._eventVar
        }
    }
    class r extends e.Parameter {
        constructor(y, C, F, H) {
            super(y, C, F);
            this._functionBlockName = H[1];
            this._functionBlock = null;
            this.Get = this.GetFunction;
            this._isConstant = !0
        }
        _PostInit() {
            this._functionBlock = this.GetRuntime().GetEventSheetManager().GetFunctionBlockByName(this._functionBlockName);
            this._functionBlockName = null
        }
        GetFunction() {
            return this._functionBlock
        }
    }
    class t extends e.Parameter {
        constructor(y, C, F, H) {
            super(y, C, F);
            this._subParams = [];
            this._variadicRet = [];
            this._isConstant = !0;
            for (let M = 1, B = H.length; M <
                B; ++M) y = e.Parameter.Create(this._owner, H[M], 0), this._subParams.push(y), this._variadicRet.push(0), y.IsConstant() || (this._isConstant = !1);
            this.Get = this.GetVariadic
        }
        _PostInit() {
            for (const y of this._subParams) y._PostInit()
        }
        GetVariadic() {
            const y = this._subParams,
                C = this._variadicRet;
            for (let F = 0, H = y.length; F < H; ++F) C[F] = y[F].Get(0);
            return C
        }
    }
    class q extends e.Parameter {
        constructor(y, C, F, H) {
            super(y, C, F);
            this._easeIndex = H[1];
            this.Get = this.GetEase;
            this._isConstant = !0
        }
        GetEase() {
            return this._easeIndex
        }
    }
    class w extends e.Parameter {
        constructor(y,
            C, F, H) {
            super(y, C, F);
            this._brushIndex = H[1];
            this.Get = this.GetTilemapBrush;
            this._isConstant = !0
        }
        GetTilemapBrush() {
            return this._brushIndex
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(c, f) {
        for (let k = 0, g = c.length; k < g; ++k) f[k] = c[k].Get(0)
    }
    const a = [],
        d = function() {};
    e.Condition = class extends e.DefendedBase {
        constructor(c, f, k) {
            super();
            this._eventBlock = c;
            this._runtime = c.GetRuntime();
            this._index = k;
            this._func = this._runtime.GetObjectReference(f[1]);
            this._isTrigger = 0 < f[3];
            this._isFastTrigger = 2 === f[3];
            this._isLooping = !!f[4];
            this._isInverted = !!f[5];
            this._isStatic = !!f[6];
            this._sid = f[7];
            this._isInOrBlock = this._eventBlock.IsOrBlock();
            this._behaviorType =
                this._objectClass = null;
            this._behaviorIndex = -1;
            this._systemPlugin = null;
            this.DebugRun = this.Run = d;
            this._parameters = [];
            this._results = [];
            this._anyParamVariesPerInstance = !1;
            this._unsavedData = this._savedData = null;
            this._debugData = this._runtime.IsDebug() ? {
                isBreakpoint: f[8][0],
                canDebug: f[8][1]
            } : null; - 1 === f[0] ? this._systemPlugin = this._runtime.GetSystemPlugin() : (this._objectClass = this._runtime.GetObjectClassByIndex(f[0]), f[2] && (this._behaviorType = this._objectClass.GetBehaviorTypeByName(f[2]), this._behaviorIndex =
                this._objectClass.GetBehaviorIndexByName(f[2])), this._eventBlock.GetParent() && this._eventBlock.GetParent().SetSolWriterAfterCnds());
            if (10 === f.length) {
                c = f[9];
                for (let g of c) this._parameters.push(e.Parameter.Create(this, g, this._parameters.length)), this._results.push(0)
            }
            0 === this._parameters.length && (this._results = this._parameters = a);
            this._eventBlock.GetEventSheetManager()._RegisterCondition(this)
        }
        static Create(c, f, k) {
            return e.New(e.Condition, c, f, k)
        }
        _PostInit() {
            for (const c of this._parameters) c._PostInit(),
                c.VariesPerInstance() && (this._anyParamVariesPerInstance = !0);
            this._isFastTrigger ? (this.Run = this._RunFastTrigger, this.DebugRun = this._DebugRunFastTrigger) : this._systemPlugin ? (this._SetSystemRunMethod(), this.DebugRun = this._DebugRunSystem) : this._objectClass.GetPlugin().IsSingleGlobal() ? (this._SetSingleGlobalRunMethod(), this.DebugRun = this._DebugRunSingleGlobal) : this._isStatic ? (this.Run = this._RunStatic, this.DebugRun = this._DebugRunStatic) : (this.Run = this._RunObject, this.DebugRun = this._DebugRunObject)
        }
        _SetSystemRunMethod() {
            this._SetRunMethodForBoundFunc(this._systemPlugin,
                this._systemPlugin, this._RunSystem)
        }
        _SetSingleGlobalRunMethod() {
            const c = this._objectClass.GetPlugin(),
                f = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
            this._SetRunMethodForBoundFunc(c, f, this._RunSingleGlobal)
        }
        _SetRunMethodForBoundFunc(c, f, k) {
            const g = this._func,
                l = this._isInverted,
                m = this._parameters;
            if (0 === m.length) {
                const u = c._GetBoundACEMethod(g, f);
                this.Run = l ? function() {
                    return e.xor(u(), l)
                } : u
            } else if (1 === m.length) {
                const u = m[0];
                if (!l && u.IsConstant()) this.Run = c._GetBoundACEMethod_1param(g,
                    f, u.Get(0));
                else {
                    const x = c._GetBoundACEMethod(g, f);
                    this.Run = function() {
                        return e.xor(x(u.Get(0)), l)
                    }
                }
            } else if (2 === m.length) {
                const u = m[0],
                    x = m[1];
                if (!l && u.IsConstant() && x.IsConstant()) this.Run = c._GetBoundACEMethod_2params(g, f, u.Get(0), x.Get(0));
                else {
                    const p = c._GetBoundACEMethod(g, f);
                    this.Run = function() {
                        return e.xor(p(u.Get(0), x.Get(0)), l)
                    }
                }
            } else if (3 === m.length) {
                const u = m[0],
                    x = m[1],
                    p = m[2];
                if (!l && u.IsConstant() && x.IsConstant() && p.IsConstant()) this.Run = c._GetBoundACEMethod_3params(g, f, u.Get(0), x.Get(0),
                    p.Get(0));
                else {
                    const r = c._GetBoundACEMethod(g, f);
                    this.Run = function() {
                        return e.xor(r(u.Get(0), x.Get(0), p.Get(0)), l)
                    }
                }
            } else this.Run = k
        }
        GetSID() {
            return this._sid
        }
        _GetFunc() {
            return this._func
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetBehaviorType() {
            return this._behaviorType
        }
        GetEventBlock() {
            return this._eventBlock
        }
        GetRuntime() {
            return this._runtime
        }
        GetIndex() {
            return this._index
        }
        GetDebugIndex() {
            return this.GetIndex()
        }
        IsTrigger() {
            return this._isTrigger
        }
        IsFastTrigger() {
            return this._isFastTrigger
        }
        IsInverted() {
            return this._isInverted
        }
        IsLooping() {
            return this._isLooping
        }
        IsBreakpoint() {
            return this._debugData.isBreakpoint
        }
        _SetBreakpoint(c) {
            this._debugData.isBreakpoint = !!c;
            this._eventBlock._UpdateCanRunFastRecursive()
        }
        _DebugReturnsGenerator() {
            return this._debugData.canDebug
        }
        DebugCanRunFast() {
            return !this.IsBreakpoint() && !this._runtime.DebugBreakNext() && !this._DebugReturnsGenerator()
        }
        GetSavedDataMap() {
            this._savedData || (this._savedData = new Map);
            return this._savedData
        }
        GetUnsavedDataMap() {
            this._unsavedData || (this._unsavedData = new Map);
            return this._unsavedData
        }
        _RunSystem() {
            const c = this._results;
            b(this._parameters, c);
            return e.xor(this._func.apply(this._systemPlugin, c),
                this._isInverted)
        }* _DebugRunSystem() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                var c = this._results;
                b(this._parameters, c);
                c = this._func.apply(this._systemPlugin, c);
                e.IsIterator(c) && (c = yield* c);
                return e.xor(c, this._isInverted)
            }
            return this.Run()
        }
        _RunSingleGlobal() {
            const c = this._results;
            b(this._parameters, c);
            const f = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
            return e.xor(this._func.apply(f, c), this._isInverted)
        }* _DebugRunSingleGlobal() {
            if (this.IsBreakpoint() ||
                this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                var c = this._results;
                b(this._parameters, c);
                const f = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
                c = this._func.apply(f, c);
                e.IsIterator(c) && (c = yield* c);
                return e.xor(c, this._isInverted)
            }
            return this.Run()
        }
        _RunFastTrigger() {
            return !0
        }* _DebugRunFastTrigger() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            return !0
        }
        _RunStatic() {
            var c = this._results;
            b(this._parameters, c);
            c = this._func.apply(this._behaviorType ||
                this._objectClass, c);
            this._objectClass.ApplySolToContainer();
            return c
        }* _DebugRunStatic() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                var c = this._results;
                b(this._parameters, c);
                c = this._func.apply(this._behaviorType || this._objectClass, c);
                e.IsIterator(c) && (c = yield* c);
                this._objectClass.ApplySolToContainer();
                return c
            }
            return this.Run()
        }
        _RunObject() {
            const c = this._parameters,
                f = this._results,
                k = this._objectClass.GetCurrentSol();
            for (let g = 0, l = c.length; g <
                l; ++g) {
                const m = c[g];
                m.VariesPerInstance() || (f[g] = m.Get(0))
            }
            return k.IsSelectAll() ? this._RunObject_FirstFilter(k) : this._RunObject_NextFilter(k)
        }* _DebugRunObject() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            return this._RunObject()
        }
        _EvaluateVaryingParameters(c) {
            const f = this._parameters,
                k = this._results;
            for (let g = 0, l = f.length; g < l; ++g) {
                const m = f[g];
                m.VariesPerInstance() && (k[g] = m.Get(c))
            }
        }
        _RunObject_FirstFilter(c) {
            const f = this._objectClass,
                k = f.IsFamily(),
                g = f.GetFamilyIndex(),
                l = this._behaviorIndex,
                m = 0 <= l,
                u = f.GetInstances(),
                x = this._anyParamVariesPerInstance,
                p = this._results,
                r = this._func,
                t = this._isInverted,
                q = this._isInOrBlock && !this._isTrigger;
            c.ClearArrays();
            for (let y = 0, C = u.length; y < C; ++y) {
                const F = u[y];
                x && this._EvaluateVaryingParameters(y);
                var w = void 0;
                m ? (w = k ? F.GetObjectClass().GetFamilyBehaviorOffset(g) : 0, w = r.apply(F.GetBehaviorInstances()[l + w].GetSdkInstance(), p)) : w = r.apply(F.GetSdkInstance(), p);
                e.xor(w, t) ? c._PushInstance(F) : q && c._PushElseInstance(F)
            }
            f.FinishCondition(!0);
            c._SetSelectAll(!1);
            f.ApplySolToContainer();
            return c.HasAnyInstances()
        }
        _RunObject_NextFilter(c) {
            const f = this._objectClass;
            var k = f.IsFamily();
            const g = f.GetFamilyIndex(),
                l = f.IsInContainer(),
                m = this._behaviorIndex,
                u = 0 <= m,
                x = this._anyParamVariesPerInstance,
                p = this._results,
                r = this._func,
                t = this._isInverted,
                q = this._isInOrBlock && !this._isTrigger,
                w = c._GetOwnInstances(),
                y = c._GetOwnElseInstances(),
                C = q && !this._eventBlock.IsFirstConditionOfType(this),
                F = C ? y : w;
            let H = 0,
                M = !1;
            for (let A = 0, G = F.length; A < G; ++A) {
                const J = F[A];
                x && this._EvaluateVaryingParameters(A);
                var B = void 0;
                u ? (B = k ? J.GetObjectClass().GetFamilyBehaviorOffset(g) : 0, B = r.apply(J.GetBehaviorInstances()[m + B].GetSdkInstance(), p)) : B = r.apply(J.GetSdkInstance(), p);
                e.xor(B, t) ? (M = !0, C ? (w.push(J), l && J._PushSiblingsToSolInstances()) : (F[H] = J, l && J._SetSiblingsToSolInstancesIndex(H), ++H)) : C ? (F[H] = J, l && J._SetSiblingsToSolElseInstancesIndex(H), ++H) : q && (y.push(J), l && J._PushSiblingsToSolElseInstances())
            }
            e.truncateArray(F, H);
            l && f._TruncateContainerSols(C, H);
            k = M;
            C && !M && (M = this._OrBlockCheckInstances(w));
            f.FinishCondition(k ||
                q);
            return q ? M : c.HasAnyInstances()
        }
        _OrBlockCheckInstances(c) {
            var f = this._objectClass;
            const k = f.IsFamily();
            f = f.GetFamilyIndex();
            const g = this._anyParamVariesPerInstance,
                l = this._behaviorIndex,
                m = 0 <= l,
                u = this._results,
                x = this._func,
                p = this._isInverted;
            for (let t = 0, q = c.length; t < q; ++t) {
                var r = c[t];
                g && this._EvaluateVaryingParameters(t);
                if (m) {
                    const w = k ? r.GetObjectClass().GetFamilyBehaviorOffset(f) : 0;
                    r = x.apply(r.GetBehaviorInstances()[l + w].GetSdkInstance(), u)
                } else r = x.apply(r.GetSdkInstance(), u);
                if (e.xor(r, p)) return !0
            }
            return !1
        }
        ReevaluateParameter(c,
            f) {
            return this._parameters[c].Get(f)
        }
        GetFastTriggerValue() {
            const c = this._parameters;
            if (!c.length) throw Error("no parameters");
            return c[0]._GetFastTriggerValue()
        }
        _SaveToJson() {
            if (!this._savedData || !this._savedData.size) return null;
            const c = {};
            for (const [f, k] of this._savedData.entries()) {
                let g = k;
                "collmemory" === f && (g = [...k.entries()].map(l => [l[0].GetUID(), l[1].GetUID(), l[2]]));
                c[f] = g
            }
            return {
                ex: c
            }
        }
        _LoadFromJson(c) {
            this._savedData && (this._savedData.clear(), this._savedData = null);
            if (c) {
                var f = this._runtime,
                    k = c.ex;
                if (k) {
                    c = this.GetSavedDataMap();
                    c.clear();
                    for (const [g, l] of Object.entries(k)) k = l, "collmemory" === g && (k = e.New(e.PairMap, l.map(m => [f.GetInstanceByUID(m[0]), f.GetInstanceByUID(m[1]), m[2]]).filter(m => m[0] && m[1]))), c.set(g, k)
                }
            }
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(f, k) {
        for (let g = 0, l = f.length; g < l; ++g) k[g] = f[g].Get(0)
    }
    const a = [],
        d = function() {},
        c = function*() {};
    e.Action = class extends e.DefendedBase {
        constructor(f, k, g) {
            super();
            this._eventBlock = f;
            this._runtime = f = f.GetRuntime();
            this._index = g;
            this._sid = 4 <= k.length ? k[3] : -1;
            this._actionReturnType = 5 <= k.length ? k[4] : 0;
            this._behaviorType = this._objectClass = this._func = null;
            this._behaviorIndex = -1;
            this._systemPlugin = null;
            this._callFunctionName = "";
            this._combinedSolModifiers = this._callEventBlock =
                null;
            this.DebugRun = this.Run = d;
            this._parameters = [];
            this._results = [];
            this._anyParamVariesPerInstance = !1;
            this._unsavedData = this._savedData = null;
            const l = (g = -3 === k[0]) ? k[2] : k[5];
            this._debugData = f.IsDebug() || g ? {
                isBreakpoint: l[0],
                canDebug: l[1],
                index: l[2]
            } : null; - 1 === k[0] ? (this._systemPlugin = f.GetSystemPlugin(), this._func = f.GetObjectReference(k[1])) : -2 === k[0] ? this._callFunctionName = k[1] : g ? (this._func = f.GetObjectReference(k[1]), this.Run = this.RunUserScript, this.DebugRun = this.DebugRunUserScript, this._actionReturnType =
                1) : (this._func = f.GetObjectReference(k[1]), this._objectClass = f.GetObjectClassByIndex(k[0]), k[2] && (this._behaviorType = this._objectClass.GetBehaviorTypeByName(k[2]), this._behaviorIndex = this._objectClass.GetBehaviorIndexByName(k[2])));
            if (7 === k.length) {
                k = k[6];
                for (const m of k) this._parameters.push(e.Parameter.Create(this, m, this._parameters.length)), this._results.push(0)
            }
            0 === this._parameters.length && (this._results = this._parameters = a);
            this._eventBlock.GetEventSheetManager()._RegisterAction(this)
        }
        static Create(f,
            k, g) {
            return e.New(e.Action, f, k, g)
        }
        _PostInit() {
            for (var f of this._parameters) f._PostInit(), f.VariesPerInstance() && (this._anyParamVariesPerInstance = !0);
            if (this._systemPlugin) this._SetSystemRunMethod(), this.DebugRun = this._DebugRunSystem;
            else if (this._callFunctionName) this._SetCallFunctionRunMethod(), this._callFunctionName = "";
            else if (this.Run === this.RunUserScript) {
                f = this._func;
                const k = this._runtime.GetEventSheetManager()._GetLocalVariablesScriptInterface(this._eventBlock);
                this._func = f.bind(null, this._runtime.GetIRuntime(),
                    k)
            } else this._behaviorType ? this.IsAsync() ? (this.Run = this._RunBehavior_Async, this.DebugRun = this._DebugRunBehavior_Async) : (this.Run = this._RunBehavior, this.DebugRun = this._DebugRunBehavior) : this._objectClass.GetPlugin().IsSingleGlobal() ? (this._SetSingleGlobalRunMethod(), this.DebugRun = this._DebugRunSingleGlobal) : this.IsAsync() ? (this.Run = this._RunObject_Async, this.DebugRun = this._DebugRunObject_Async) : this._parameters.length ? this._parameters.every(k => k.VariesPerInstance()) ? (this.Run = this._RunObject_AllParamsVary,
                this.DebugRun = this._DebugRunObject_AllParamsVary) : this._anyParamVariesPerInstance ? (this.Run = this._RunObject_SomeParamsVary, this.DebugRun = this._DebugRunObject_SomeParamsVary) : this._parameters.every(k => k.IsConstant()) ? (b(this._parameters, this._results), this.Run = this._RunObject_ParamsConst, this.DebugRun = this._DebugRunObject_ParamsConst) : (this.Run = this._RunObject_ParamsDontVary, this.DebugRun = this._DebugRunObject_ParamsDontVary) : (this.Run = this._RunObject_ParamsConst, this.DebugRun = this._DebugRunObject_ParamsConst)
        }
        _SetSystemRunMethod() {
            this._SetRunMethodForBoundFunc(this._systemPlugin,
                this._systemPlugin, this._RunSystem)
        }
        _SetSingleGlobalRunMethod() {
            const f = this._objectClass.GetPlugin(),
                k = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
            this._SetRunMethodForBoundFunc(f, k, this._RunSingleGlobal)
        }
        _SetCallFunctionRunMethod() {
            const f = this._eventBlock.GetEventSheetManager(),
                k = f.GetFunctionBlockByName(this._callFunctionName);
            k.IsEnabled() ? (this._callEventBlock = k.GetEventBlock(), this._combinedSolModifiers = [...new Set([...this._eventBlock.GetSolModifiersIncludingParents(), ...this._callEventBlock.GetSolModifiersIncludingParents()])],
                this._combinedSolModifiers = f._DeduplicateSolModifierList(this._combinedSolModifiers), this.Run = e.EventBlock.prototype.RunAsFunctionCall.bind(this._callEventBlock, this._combinedSolModifiers, this._parameters), this.DebugRun = this._DebugRunCallFunction) : (this.Run = d, this.DebugRun = c)
        }
        _SetRunMethodForBoundFunc(f, k, g) {
            const l = this._func,
                m = this._parameters;
            if (0 === m.length) this.Run = f._GetBoundACEMethod(l, k);
            else if (1 === m.length) {
                const u = m[0];
                if (u.IsConstant()) this.Run = f._GetBoundACEMethod_1param(l, k, u.Get(0));
                else {
                    const x = f._GetBoundACEMethod(l, k);
                    this.Run = function() {
                        return x(u.Get(0))
                    }
                }
            } else if (2 === m.length) {
                const u = m[0],
                    x = m[1];
                if (u.IsConstant() && x.IsConstant()) this.Run = f._GetBoundACEMethod_2params(l, k, u.Get(0), x.Get(0));
                else {
                    const p = f._GetBoundACEMethod(l, k);
                    this.Run = function() {
                        return p(u.Get(0), x.Get(0))
                    }
                }
            } else if (3 === m.length) {
                const u = m[0],
                    x = m[1],
                    p = m[2];
                if (u.IsConstant() && x.IsConstant() && p.IsConstant()) this.Run = f._GetBoundACEMethod_3params(l, k, u.Get(0), x.Get(0), p.Get(0));
                else {
                    const r = f._GetBoundACEMethod(l,
                        k);
                    this.Run = function() {
                        return r(u.Get(0), x.Get(0), p.Get(0))
                    }
                }
            } else this.Run = g
        }
        GetSID() {
            return this._sid
        }
        IsAsync() {
            return 1 === this._actionReturnType
        }
        CanBailOut() {
            return 2 === this._actionReturnType
        }
        HasReturnType() {
            return 0 !== this._actionReturnType
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetEventBlock() {
            return this._eventBlock
        }
        GetRuntime() {
            return this._runtime
        }
        GetIndex() {
            return this._index
        }
        GetDebugIndex() {
            return this._debugData.index
        }
        GetCombinedSolModifiers() {
            return this._combinedSolModifiers
        }
        IsBreakpoint() {
            return this._debugData.isBreakpoint
        }
        _SetBreakpoint(f) {
            this._debugData.isBreakpoint = !!f;
            this._eventBlock._UpdateCanRunFastRecursive()
        }
        _DebugReturnsGenerator() {
            return this._debugData.canDebug
        }
        DebugCanRunFast() {
            return !this.IsBreakpoint() && !this._runtime.DebugBreakNext() && !this._DebugReturnsGenerator()
        }
        GetSavedDataMap() {
            this._savedData || (this._savedData = new Map);
            return this._savedData
        }
        GetUnsavedDataMap() {
            this._unsavedData || (this._unsavedData = new Map);
            return this._unsavedData
        }
        _RunSystem() {
            const f = this._results;
            b(this._parameters, f);
            return this._func.apply(this._systemPlugin, f)
        }* _DebugRunSystem() {
            if (this.IsBreakpoint() ||
                this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const f = this._results;
                b(this._parameters, f);
                return yield* this._func.apply(this._systemPlugin, f)
            }
            return this.Run()
        }* _DebugRunCallFunction() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            return yield* this._callEventBlock.DebugRunAsFunctionCall(this._combinedSolModifiers, this._parameters)
        }
        _RunSingleGlobal() {
            const f = this._results;
            b(this._parameters, f);
            return this._func.apply(this._objectClass.GetSingleGlobalInstance().GetSdkInstance(),
                f)
        }* _DebugRunSingleGlobal() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const f = this._results;
                b(this._parameters, f);
                return yield* this._func.apply(this._objectClass.GetSingleGlobalInstance().GetSdkInstance(), f)
            }
            return this.Run()
        }
        _RunObject_ParamsConst() {
            const f = this._results,
                k = this._objectClass.GetCurrentSol().GetInstances();
            for (let g = 0, l = k.length; g < l; ++g) this._func.apply(k[g].GetSdkInstance(), f)
        }* _DebugRunObject_ParamsConst() {
            if (this.IsBreakpoint() ||
                this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const f = this._results,
                    k = this._objectClass.GetCurrentSol().GetInstances();
                for (let g = 0, l = k.length; g < l; ++g) yield* this._func.apply(k[g].GetSdkInstance(), f)
            } else this._RunObject_ParamsConst()
        }
        _RunObject_ParamsDontVary() {
            const f = this._results;
            b(this._parameters, f);
            const k = this._objectClass.GetCurrentSol().GetInstances();
            for (let g = 0, l = k.length; g < l; ++g) this._func.apply(k[g].GetSdkInstance(), f)
        }* _DebugRunObject_ParamsDontVary() {
            if (this.IsBreakpoint() ||
                this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const f = this._results;
                b(this._parameters, f);
                const k = this._objectClass.GetCurrentSol().GetInstances();
                for (let g = 0, l = k.length; g < l; ++g) yield* this._func.apply(k[g].GetSdkInstance(), f)
            } else this._RunObject_ParamsDontVary()
        }
        _RunObject_AllParamsVary() {
            const f = this._parameters,
                k = this._results,
                g = this._func,
                l = this._objectClass.GetCurrentSol().GetInstances();
            for (let m = 0, u = l.length; m < u; ++m) {
                const x = l[m];
                for (let p = 0, r = f.length; p < r; ++p) k[p] =
                    f[p].Get(m);
                g.apply(x.GetSdkInstance(), k)
            }
        }* _DebugRunObject_AllParamsVary() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const f = this._parameters,
                    k = this._results,
                    g = this._func,
                    l = this._objectClass.GetCurrentSol().GetInstances();
                for (let m = 0, u = l.length; m < u; ++m) {
                    const x = l[m];
                    for (let p = 0, r = f.length; p < r; ++p) k[p] = f[p].Get(m);
                    yield* g.apply(x.GetSdkInstance(), k)
                }
            } else this._RunObject_AllParamsVary()
        }
        _RunObject_SomeParamsVary() {
            const f = this._parameters,
                k = this._results,
                g = this._func,
                l = this._objectClass.GetCurrentSol().GetInstances();
            for (let u = 0, x = f.length; u < x; ++u) {
                var m = f[u];
                m.VariesPerInstance() || (k[u] = m.Get(0))
            }
            for (let u = 0, x = l.length; u < x; ++u) {
                m = l[u];
                for (let p = 0, r = f.length; p < r; ++p) {
                    const t = f[p];
                    t.VariesPerInstance() && (k[p] = t.Get(u))
                }
                g.apply(m.GetSdkInstance(), k)
            }
        }* _DebugRunObject_SomeParamsVary() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const k = this._parameters,
                    g = this._results,
                    l = this._func,
                    m = this._objectClass.GetCurrentSol().GetInstances();
                for (let u = 0, x = k.length; u < x; ++u) {
                    var f = k[u];
                    f.VariesPerInstance() || (g[u] = f.Get(0))
                }
                for (let u = 0, x = m.length; u < x; ++u) {
                    f = m[u];
                    for (let p = 0, r = k.length; p < r; ++p) {
                        const t = k[p];
                        t.VariesPerInstance() && (g[p] = t.Get(u))
                    }
                    yield* l.apply(f.GetSdkInstance(), g)
                }
            } else this._RunObject_SomeParamsVary()
        }
        _RunBehavior() {
            var f = this._objectClass;
            const k = f.IsFamily(),
                g = f.GetFamilyIndex(),
                l = this._parameters,
                m = this._anyParamVariesPerInstance,
                u = this._results,
                x = this._func,
                p = this._behaviorIndex;
            f = f.GetCurrentSol().GetInstances();
            for (let q = 0, w = l.length; q < w; ++q) {
                var r = l[q];
                r.VariesPerInstance() || (u[q] = r.Get(0))
            }
            for (let q = 0, w = f.length; q < w; ++q) {
                r = f[q];
                if (m)
                    for (let y = 0, C = l.length; y < C; ++y) {
                        var t = l[y];
                        t.VariesPerInstance() && (u[y] = t.Get(q))
                    }
                t = k ? r.GetObjectClass().GetFamilyBehaviorOffset(g) : 0;
                x.apply(r.GetBehaviorInstances()[p + t].GetSdkInstance(), u)
            }
        }* _DebugRunBehavior() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                var f = this._objectClass;
                const l =
                    f.IsFamily(),
                    m = f.GetFamilyIndex(),
                    u = this._parameters,
                    x = this._anyParamVariesPerInstance,
                    p = this._results,
                    r = this._func,
                    t = this._behaviorIndex;
                f = f.GetCurrentSol().GetInstances();
                for (let q = 0, w = u.length; q < w; ++q) {
                    var k = u[q];
                    k.VariesPerInstance() || (p[q] = k.Get(0))
                }
                for (let q = 0, w = f.length; q < w; ++q) {
                    k = f[q];
                    if (x)
                        for (let y = 0, C = u.length; y < C; ++y) {
                            var g = u[y];
                            g.VariesPerInstance() && (p[y] = g.Get(q))
                        }
                    g = l ? k.GetObjectClass().GetFamilyBehaviorOffset(m) : 0;
                    yield* r.apply(k.GetBehaviorInstances()[t + g].GetSdkInstance(), p)
                }
            } else this._RunBehavior()
        }
        _RunObject_Async() {
            const f =
                this._parameters,
                k = this._results,
                g = this._func,
                l = this._objectClass.GetCurrentSol().GetInstances(),
                m = [];
            for (let u = 0, x = l.length; u < x; ++u) {
                const p = l[u];
                for (let r = 0, t = f.length; r < t; ++r) k[r] = f[r].Get(u);
                m.push(g.apply(p.GetSdkInstance(), k))
            }
            return Promise.all(m)
        }* _DebugRunObject_Async() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const f = this._parameters,
                    k = this._results,
                    g = this._func,
                    l = this._objectClass.GetCurrentSol().GetInstances(),
                    m = [];
                for (let u = 0,
                        x = l.length; u < x; ++u) {
                    const p = l[u];
                    for (let r = 0, t = f.length; r < t; ++r) k[r] = f[r].Get(u);
                    m.push(yield* g.apply(p.GetSdkInstance(), k))
                }
                return Promise.all(m)
            }
            return this._RunObject_Async()
        }
        _RunBehavior_Async() {
            var f = this._objectClass;
            const k = f.IsFamily(),
                g = f.GetFamilyIndex(),
                l = this._parameters,
                m = this._results,
                u = this._func,
                x = this._behaviorIndex;
            f = f.GetCurrentSol().GetInstances();
            const p = [];
            for (let r = 0, t = f.length; r < t; ++r) {
                const q = f[r];
                for (let y = 0, C = l.length; y < C; ++y) m[y] = l[y].Get(r);
                const w = k ? q.GetObjectClass().GetFamilyBehaviorOffset(g) :
                    0;
                p.push(u.apply(q.GetBehaviorInstances()[x + w].GetSdkInstance(), m))
            }
            return Promise.all(p)
        }* _DebugRunBehavior_Async() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                var f = this._objectClass;
                const k = f.IsFamily(),
                    g = f.GetFamilyIndex(),
                    l = this._parameters,
                    m = this._results,
                    u = this._func,
                    x = this._behaviorIndex;
                f = f.GetCurrentSol().GetInstances();
                const p = [];
                for (let r = 0, t = f.length; r < t; ++r) {
                    const q = f[r];
                    for (let y = 0, C = l.length; y < C; ++y) m[y] = l[y].Get(r);
                    const w = k ?
                        q.GetObjectClass().GetFamilyBehaviorOffset(g) : 0;
                    p.push(yield* u.apply(q.GetBehaviorInstances()[x + w].GetSdkInstance(), m))
                }
                return Promise.all(p)
            }
            return this._RunBehavior_Async()
        }
        async RunUserScript() {
            try {
                await this._func()
            } catch (f) {
                console.error(`Unhandled exception running script %c${this._eventBlock.GetEventSheet().GetName()}, event ${this._eventBlock.GetDisplayNumber()}, action ${this.GetDebugIndex()+1}:`, "font-size: 1.2em; font-weight: bold;", f), self.C3Debugger && self.C3Debugger._SetLastErrorScript(this),
                    e.EventScript.HadUserScriptException() || (console.info("%cTip:%c run this to highlight in Construct the last script that had an error: %cgoToLastErrorScript()", "font-weight: bold; text-decoration: underline", "", "font-weight: bold"), e.EventScript.SetHadUserScriptException())
            }
        }* DebugRunUserScript() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            return this.RunUserScript()
        }
        _SaveToJson() {
            return this._savedData && this._savedData.size ? {
                ex: e.ToSuperJSON(this._savedData)
            } : null
        }
        _LoadFromJson(f) {
            this._savedData &&
                (this._savedData.clear(), this._savedData = null);
            f && (f = f.ex) && (this._savedData = e.FromSuperJSON(f))
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = new e.Color;

    function a(N, P) {
        return e.compare(this.GetWorldInfo().GetX(), N, P)
    }

    function d(N, P) {
        return e.compare(this.GetWorldInfo().GetY(), N, P)
    }

    function c() {
        const N = this.GetWorldInfo(),
            P = N.GetLayer();
        return P.Has3DCamera() ? N.IsInViewport3D(P._GetViewFrustum()) : N.IsInViewport(P.GetViewport(), N.GetLayout().HasVanishingPointOutsideViewport(), N.GetLayout().IsOrthographicProjection())
    }

    function f() {
        var N = this.GetWorldInfo();
        const P = N.GetLayout();
        N = N.GetBoundingBox();
        return 0 >
            N.getRight() || 0 > N.getBottom() || N.getLeft() > P.GetWidth() || N.getTop() > P.GetHeight()
    }

    function k(N, P, W) {
        const Z = this.GetCurrentSol(),
            fa = Z.GetInstances();
        if (!fa.length) return !1;
        let ha = fa[0];
        var ka = ha.GetWorldInfo();
        let sa = ha,
            ma = e.distanceSquared(ka.GetX(), ka.GetY(), P, W);
        for (let xa = 1, ya = fa.length; xa < ya; ++xa)
            if (ha = fa[xa], ka = ha.GetWorldInfo(), ka = e.distanceSquared(ka.GetX(), ka.GetY(), P, W), 0 === N && ka < ma || 1 === N && ka > ma) ma = ka, sa = ha;
        Z.PickOne(sa);
        return !0
    }

    function g(N) {
        const P = this.GetWorldInfo();
        P.GetX() !== N &&
            (P.SetX(N), P.SetBboxChanged())
    }

    function l(N) {
        const P = this.GetWorldInfo();
        P.GetY() !== N && (P.SetY(N), P.SetBboxChanged())
    }

    function m(N, P) {
        const W = this.GetWorldInfo();
        W.EqualsXY(N, P) || (W.SetXY(N, P), W.SetBboxChanged())
    }

    function u(N, P) {
        if (N && (N = N.GetPairedInstance(this._inst))) {
            var [W, Z] = N.GetImagePoint(P);
            P = this.GetWorldInfo();
            if (P.GetX() !== W || P.GetY() !== Z) P.SetXY(W, Z), P.SetBboxChanged()
        }
    }

    function x(N) {
        if (0 !== N) {
            var P = this.GetWorldInfo();
            P.OffsetXY(P.GetCosAngle() * N, P.GetSinAngle() * N);
            P.SetBboxChanged()
        }
    }

    function p(N, P) {
        if (0 !== P) {
            var W = this.GetWorldInfo();
            N = e.toRadians(N);
            W.OffsetXY(Math.cos(N) * P, Math.sin(N) * P);
            W.SetBboxChanged()
        }
    }

    function r() {
        return this.GetWorldInfo().GetX()
    }

    function t() {
        return this.GetWorldInfo().GetY()
    }

    function q() {
        return this._runtime.GetDt(this._inst)
    }

    function w(N, P) {
        return e.compare(this.GetWorldInfo().GetWidth(), N, P)
    }

    function y(N, P) {
        return e.compare(this.GetWorldInfo().GetHeight(), N, P)
    }

    function C(N) {
        const P = this.GetWorldInfo();
        P.GetWidth() !== N && (P.SetWidth(N), P.SetBboxChanged())
    }

    function F(N) {
        const P = this.GetWorldInfo();
        P.GetHeight() !== N && (P.SetHeight(N), P.SetBboxChanged())
    }

    function H(N, P) {
        const W = this.GetWorldInfo();
        if (W.GetWidth() !== N || W.GetHeight() !== P) W.SetSize(N, P), W.SetBboxChanged()
    }

    function M() {
        return this.GetWorldInfo().GetWidth()
    }

    function B() {
        return this.GetWorldInfo().GetHeight()
    }

    function A() {
        return this.GetWorldInfo().GetBoundingBox().getLeft()
    }

    function G() {
        return this.GetWorldInfo().GetBoundingBox().getTop()
    }

    function J() {
        return this.GetWorldInfo().GetBoundingBox().getRight()
    }

    function L() {
        return this.GetWorldInfo().GetBoundingBox().getBottom()
    }

    function R(N, P) {
        return e.angleDiff(this.GetWorldInfo().GetAngle(), e.toRadians(P)) <= e.toRadians(N)
    }

    function U(N) {
        return e.angleClockwise(this.GetWorldInfo().GetAngle(), e.toRadians(N))
    }

    function V(N, P) {
        N = e.toRadians(N);
        P = e.toRadians(P);
        const W = this.GetWorldInfo().GetAngle();
        return e.angleClockwise(P, N) ? e.angleClockwise(W, N) && !e.angleClockwise(W, P) : !(!e.angleClockwise(W, N) && e.angleClockwise(W, P))
    }

    function ba(N) {
        const P = this.GetWorldInfo();
        N = e.clampAngle(e.toRadians(N));
        isNaN(N) || P.GetAngle() === N || (P.SetAngle(N), P.SetBboxChanged())
    }

    function ia(N) {
        if (!isNaN(N) && 0 !== N) {
            var P = this.GetWorldInfo();
            P.SetAngle(P.GetAngle() + e.toRadians(N));
            P.SetBboxChanged()
        }
    }

    function ja(N) {
        if (!isNaN(N) && 0 !== N) {
            var P = this.GetWorldInfo();
            P.SetAngle(P.GetAngle() - e.toRadians(N));
            P.SetBboxChanged()
        }
    }

    function qa(N, P) {
        const W = this.GetWorldInfo(),
            Z = W.GetAngle();
        N = e.angleRotate(Z, e.toRadians(P), e.toRadians(N));
        isNaN(N) || Z === N || (W.SetAngle(N), W.SetBboxChanged())
    }

    function za(N,
        P, W) {
        const Z = this.GetWorldInfo(),
            fa = Z.GetAngle();
        P -= Z.GetX();
        W -= Z.GetY();
        N = e.angleRotate(fa, Math.atan2(W, P), e.toRadians(N));
        isNaN(N) || fa === N || (Z.SetAngle(N), Z.SetBboxChanged())
    }

    function Ca(N, P) {
        const W = this.GetWorldInfo(),
            Z = W.GetAngle();
        N -= W.GetX();
        P -= W.GetY();
        P = Math.atan2(P, N);
        isNaN(P) || Z === P || (W.SetAngle(P), W.SetBboxChanged())
    }

    function Ma() {
        return e.toDegrees(this.GetWorldInfo().GetAngle())
    }

    function Fa(N, P) {
        return e.compare(e.round6dp(100 * this.GetWorldInfo().GetOpacity()), N, P)
    }

    function La() {
        return this.GetWorldInfo().IsVisible()
    }

    function na(N) {
        const P = this.GetWorldInfo();
        N = 2 === N ? !P.IsVisible() : 0 !== N;
        P.IsVisible() !== N && (P.SetVisible(N), this._runtime.UpdateRender())
    }

    function Sa(N) {
        N = e.clamp(N / 100, 0, 1);
        const P = this.GetWorldInfo();
        P.GetOpacity() !== N && (P.SetOpacity(N), this._runtime.UpdateRender())
    }

    function Aa(N) {
        b.setFromRgbValue(N);
        N = this.GetWorldInfo();
        N.GetUnpremultipliedColor().equalsIgnoringAlpha(b) || (N.SetUnpremultipliedColor(b), this._runtime.UpdateRender())
    }

    function Na() {
        const N = this.GetWorldInfo().GetUnpremultipliedColor();
        return e.PackRGBAEx(N.getR(), N.getG(), N.getB(), N.getA())
    }

    function lb() {
        return e.round6dp(100 * this.GetWorldInfo().GetOpacity())
    }

    function mb(N) {
        return N ? this.GetWorldInfo().GetLayer() === N : !1
    }

    function nb(N) {
        const P = this.GetCurrentSol(),
            W = P.GetInstances();
        if (!W.length) return !1;
        let Z = W[0];
        for (let fa = 1, ha = W.length; fa < ha; ++fa) {
            const ka = W[fa],
                sa = ka.GetWorldInfo(),
                ma = Z.GetWorldInfo(),
                xa = sa.GetLayer().GetIndex(),
                ya = ma.GetLayer().GetIndex();
            if (0 === N) {
                if (xa > ya || xa === ya && sa.GetZIndex() > ma.GetZIndex()) Z = ka
            } else if (xa <
                ya || xa === ya && sa.GetZIndex() < ma.GetZIndex()) Z = ka
        }
        P.PickOne(Z);
        return !0
    }

    function ab(N, P, W) {
        const Z = this.GetWorldInfo();
        N = 0 === N ? Z.GetZElevation() : Z.GetTotalZElevation();
        return e.compare(N, P, W)
    }

    function ob() {
        this.GetWorldInfo().ZOrderMoveToTop()
    }

    function pb() {
        this.GetWorldInfo().ZOrderMoveToBottom()
    }

    function qb(N) {
        N && this.GetWorldInfo().ZOrderMoveToLayer(N)
    }

    function rb(N, P) {
        N = 0 === N;
        P && (P = P.GetFirstPicked(this.GetInstance())) && this.GetWorldInfo().ZOrderMoveAdjacentToInstance(P, N)
    }

    function sb(N) {
        const P =
            this.GetWorldInfo();
        P.GetZElevation() !== N && (P.SetZElevation(N), this._runtime.UpdateRender())
    }

    function tb() {
        return this.GetWorldInfo().GetLayer().GetIndex()
    }

    function ub() {
        return this.GetWorldInfo().GetLayer().GetName()
    }

    function bb() {
        return this.GetWorldInfo().GetZIndex()
    }

    function vb() {
        return this.GetWorldInfo().GetZElevation()
    }

    function wb() {
        return this.GetWorldInfo().GetTotalZElevation()
    }

    function xb(N, P) {
        if (P = this.GetObjectClass().GetEffectList().GetEffectTypeByName(P)) {
            P = P.GetIndex();
            N = 1 === N;
            var W =
                this.GetWorldInfo().GetInstanceEffectList();
            W.IsEffectIndexActive(P) !== N && (W.SetEffectIndexActive(P, N), W.UpdateActiveEffects(), this._runtime.UpdateRender())
        }
    }

    function yb(N, P, W) {
        var Z = this.GetObjectClass().GetEffectList().GetEffectTypeByName(N);
        if (Z) {
            N = Z.GetIndex();
            var fa = this.GetWorldInfo().GetInstanceEffectList(),
                ha = fa.GetEffectParametersForIndex(N);
            P = Math.floor(P);
            if (!(0 > P || P >= ha.length)) {
                Z = Z.GetShaderProgram().GetParameterType(P);
                if ("color" === Z) {
                    b.setFromRgbValue(W);
                    P = ha[P];
                    if (b.equalsIgnoringAlpha(P)) return;
                    P.copyRgb(b)
                } else {
                    "percent" === Z && (W /= 100);
                    if (ha[P] === W) return;
                    ha[P] = W
                }
                fa.IsEffectIndexActive(N) && this._runtime.UpdateRender()
            }
        }
    }
    const cb = e.New(e.Rect),
        Xa = [],
        db = [];
    let eb = !1,
        Ya = null,
        fb = !1;
    const Ta = new Set;

    function gb(N, P, W, Z) {
        const fa = P.GetUID(),
            ha = W.GetUID();
        fa < ha ? N.Set(P, W, Z) : N.Set(W, P, Z)
    }

    function ra(N, P, W) {
        const Z = P.GetUID(),
            fa = W.GetUID();
        Z < fa ? N.Delete(P, W) : N.Delete(W, P)
    }

    function Qa(N, P) {
        N.DeleteEither(P)
    }

    function zb(N, P, W) {
        const Z = P.GetUID(),
            fa = W.GetUID();
        return Z < fa ? N.Get(P, W) : N.Get(W, P)
    }

    function Ab(N,
        P, W, Z) {
        if (!P) return !1;
        N = N.GetInstance();
        const fa = 0 !== W || 0 !== Z,
            ha = N.GetWorldInfo(),
            ka = N.GetRuntime(),
            sa = ka.GetCollisionEngine();
        var ma = ka.GetCurrentCondition();
        const xa = ma.GetEventBlock().IsOrBlock();
        var ya = ma.GetObjectClass();
        ma = ma.IsInverted();
        const Ka = P.GetCurrentSol();
        ya = ya !== P;
        Ya = P;
        eb = ya && !ma;
        fb = !1;
        let Ra = 0,
            Ea = 0,
            la = !1;
        Ka.IsSelectAll() ? (cb.copy(ha.GetBoundingBox()), cb.offset(W, Z), sa.GetCollisionCandidates(ha.GetLayer(), P, cb, db), P = db) : xa ? ka.IsCurrentConditionFirst() && !Ka._GetOwnElseInstances().length &&
            Ka._GetOwnInstances().length ? P = Ka._GetOwnInstances() : (P = Ka._GetOwnElseInstances(), fb = !0) : P = Ka._GetOwnInstances();
        fa && (Ra = ha.GetX(), Ea = ha.GetY(), ha.OffsetXY(W, Z), ha.SetBboxChanged());
        for (const da of P)
            if (sa.TestOverlap(N, da)) {
                la = !0;
                if (ma) break;
                ya && Ta.add(da)
            }
        fa && (ha.SetXY(Ra, Ea), ha.SetBboxChanged());
        e.clearArray(db);
        return la
    }

    function Db(N) {
        N = N.GetRuntime().GetCurrentEvent().IsOrBlock();
        const P = Ya.GetCurrentSol(),
            W = P._GetOwnInstances(),
            Z = P._GetOwnElseInstances();
        P.IsSelectAll() ? (P.SetSetPicked(Ta),
            N && (e.clearArray(Z), P.AddElseInstances(Ta, Ya.GetInstances()))) : N ? fb ? P.TransferElseInstancesToOwn(Ta) : (P.AddElseInstances(Ta, W), P.SetSetPicked(Ta)) : P.SetSetPicked(Ta);
        Ya.ApplySolToContainer()
    }

    function Eb(N, P) {
        eb && (P && Db(N), Ta.clear(), Ya = null, eb = !1)
    }

    function Fb(N) {
        if (this._runtime.IsDebugging()) return Gb.call(this, N);
        if (!N) return !1;
        var P = this._runtime;
        const W = P.GetCollisionEngine(),
            Z = P.GetEventSheetManager(),
            fa = Z.GetEventStack();
        var ha = Z.GetCurrentCondition();
        const ka = ha.GetObjectClass();
        var sa = ha.GetSavedDataMap(),
            ma = ha.GetUnsavedDataMap();
        ha = fa.GetCurrentStackFrame();
        const xa = P.GetTickCount(),
            ya = xa - 1,
            Ka = ha.GetCurrentEvent(),
            Ra = fa.Push(Ka);
        let Ea = sa.get("collmemory");
        Ea || (Ea = e.New(e.PairMap), sa.set("collmemory", Ea));
        ma.get("collisionCreatedDestroyCallback") || (ma.set("collisionCreatedDestroyCallback", !0), P.Dispatcher().addEventListener("instancedestroy", Ua => Qa(Ea, Ua.instance)));
        sa = ka.GetCurrentSol();
        P = N.GetCurrentSol();
        sa = sa.GetInstances();
        ma = null;
        for (let Ua = 0; Ua < sa.length; ++Ua) {
            const Da = sa[Ua];
            P.IsSelectAll() ?
                (W.GetCollisionCandidates(Da.GetWorldInfo().GetLayer(), N, Da.GetWorldInfo().GetBoundingBox(), Xa), ma = Xa, W.AddRegisteredCollisionCandidates(Da, N, ma)) : ma = P.GetInstances();
            for (let $a = 0; $a < ma.length; ++$a) {
                const Pa = ma[$a];
                if (W.TestOverlap(Da, Pa) || W.CheckRegisteredCollision(Da, Pa)) {
                    var la = zb(Ea, Da, Pa),
                        da = !1,
                        oa = -2;
                    "number" === typeof la && (da = !0, oa = la);
                    la = !da || oa < ya;
                    gb(Ea, Da, Pa, xa);
                    la && (la = Ka.GetSolModifiers(), Z.PushCopySol(la), oa = ka.GetCurrentSol(), da = N.GetCurrentSol(), oa._SetSelectAll(!1), da._SetSelectAll(!1),
                        ka === N ? (da = oa._GetOwnInstances(), e.clearArray(da), da.push(Da), da.push(Pa), ka.ApplySolToContainer()) : (oa = oa._GetOwnInstances(), da = da._GetOwnInstances(), e.clearArray(oa), e.clearArray(da), oa.push(Da), da.push(Pa), ka.ApplySolToContainer(), N.ApplySolToContainer()), Ka.Retrigger(ha, Ra), Z.PopSol(la))
                } else ra(Ea, Da, Pa)
            }
            e.clearArray(Xa)
        }
        fa.Pop();
        return !1
    }

    function* Gb(N) {
        if (!N) return !1;
        var P = this._runtime;
        const W = P.GetCollisionEngine(),
            Z = P.GetEventSheetManager(),
            fa = Z.GetEventStack(),
            ha = fa.GetCurrentStackFrame(),
            ka = P.GetTickCount(),
            sa = ka - 1,
            ma = ha.GetCurrentEvent(),
            xa = fa.Push(ma);
        var ya = Z.GetCurrentCondition();
        const Ka = ya.GetObjectClass();
        var Ra = ya.GetSavedDataMap();
        ya = ya.GetUnsavedDataMap();
        let Ea = Ra.get("collmemory");
        Ea || (Ea = e.New(e.PairMap), Ra.set("collmemory", Ea));
        ya.get("collisionCreatedDestroyCallback") || (ya.set("collisionCreatedDestroyCallback", !0), P.Dispatcher().addEventListener("instancedestroy", Ua => Qa(Ea, Ua.instance)));
        Ra = Ka.GetCurrentSol();
        P = N.GetCurrentSol();
        Ra = Ra.GetInstances();
        ya = null;
        for (let Ua =
                0; Ua < Ra.length; ++Ua) {
            const Da = Ra[Ua];
            P.IsSelectAll() ? (W.GetCollisionCandidates(Da.GetWorldInfo().GetLayer(), N, Da.GetWorldInfo().GetBoundingBox(), Xa), ya = Xa, W.AddRegisteredCollisionCandidates(Da, N, ya)) : ya = P.GetInstances();
            for (let $a = 0; $a < ya.length; ++$a) {
                const Pa = ya[$a];
                if (W.TestOverlap(Da, Pa) || W.CheckRegisteredCollision(Da, Pa)) {
                    var la = zb(Ea, Da, Pa),
                        da = !1,
                        oa = -2;
                    "number" === typeof la && (da = !0, oa = la);
                    la = !da || oa < sa;
                    gb(Ea, Da, Pa, ka);
                    la && (la = ma.GetSolModifiers(), Z.PushCopySol(la), oa = Ka.GetCurrentSol(), da = N.GetCurrentSol(),
                        oa._SetSelectAll(!1), da._SetSelectAll(!1), Ka === N ? (da = oa._GetOwnInstances(), e.clearArray(da), da.push(Da), da.push(Pa), Ka.ApplySolToContainer()) : (oa = oa._GetOwnInstances(), da = da._GetOwnInstances(), e.clearArray(oa), e.clearArray(da), oa.push(Da), da.push(Pa), Ka.ApplySolToContainer(), N.ApplySolToContainer()), yield* ma.DebugRetrigger(ha, xa), Z.PopSol(la))
                } else ra(Ea, Da, Pa)
            }
            e.clearArray(Xa)
        }
        fa.Pop();
        return !1
    }

    function hb(N) {
        return Ab(this, N, 0, 0)
    }

    function ib(N, P, W) {
        return Ab(this, N, P, W)
    }

    function jb() {
        return this.GetWorldInfo().HasParent()
    }

    function kb() {
        return this.GetWorldInfo().HasChildren()
    }

    function Za(N, P) {
        const W = this.GetCurrentSol().GetInstances();
        if (0 === W.length) return !1;
        const Z = N.GetCurrentSol();
        var fa = Z.GetInstances();
        if (0 === fa.length) return !1;
        fa = new Set(fa);
        const ha = new Set;
        for (let sa = 0, ma = W.length; sa < ma; ++sa) {
            var ka = W[sa];
            if (1 === P)
                for (const xa of ka.parents()) xa.BelongsToObjectClass(N) && fa.has(xa) && ha.add(xa);
            else {
                if (0 === P) {
                    if (ka = ka.GetParent(), null === ka) continue
                } else ka = ka.GetTopParent();
                ka.BelongsToObjectClass(N) && fa.has(ka) &&
                    ha.add(ka)
            }
        }
        if (0 === ha.size) return !1;
        Z.SetSetPicked(ha);
        N.ApplySolToContainer();
        return !0
    }

    function h(N, P) {
        const W = this.GetCurrentSol().GetInstances();
        if (0 === W.length) return !1;
        const Z = N.GetCurrentSol();
        var fa = Z.GetInstances();
        if (Z.IsSelectAll()) {
            var ha = [...this._runtime.instancesPendingCreateForObjectClass(N)];
            0 < ha.length && (fa = fa.concat(ha))
        }
        if (0 === fa.length) return !1;
        fa = new Set(fa);
        ha = new Set;
        for (let ka = 0, sa = W.length; ka < sa; ++ka) {
            const ma = W[ka];
            2 === P && !ma.HasChildren() && ma.BelongsToObjectClass(N) && fa.has(ma) &&
                ha.add(ma);
            for (const xa of 0 === P ? ma.children() : ma.allChildren()) 2 === P && xa.HasChildren() || xa.BelongsToObjectClass(N) && fa.has(xa) && ha.add(xa)
        }
        if (0 === ha.size) return !1;
        Z.SetSetPicked(ha);
        N.ApplySolToContainer();
        return !0
    }

    function n(N, P) {
        const W = this.GetCurrentSol().GetInstances();
        if (0 === W.length) return !1;
        const Z = N.GetCurrentSol();
        var fa = Z.GetInstances();
        if (Z.IsSelectAll()) {
            var ha = [...this._runtime.instancesPendingCreateForObjectClass(N)];
            0 < ha.length && (fa = fa.concat(ha))
        }
        if (0 === fa.length) return !1;
        fa = new Set(fa);
        ha = [];
        for (let ka = 0, sa = W.length; ka < sa; ++ka) {
            const ma = W[ka].GetChildAt(P);
            null !== ma && ma.BelongsToObjectClass(N) && fa.has(ma) && ha.push(ma)
        }
        if (0 === ha.length) return !1;
        Z.SetArrayPicked(ha);
        N.ApplySolToContainer();
        return !0
    }

    function v(N, P) {
        return e.compare(this._inst.GetChildCount(), N, P)
    }

    function z(N, P, W, Z, fa, ha, ka, sa) {
        const ma = this._inst,
            xa = this._runtime.GetCurrentAction().GetObjectClass();
        for (const ya of N.allCorrespondingInstances(ma, xa)) {
            if (!ya.GetPlugin().SupportsSceneGraph()) break;
            ma.AddChild(ya, {
                transformX: P,
                transformY: W,
                transformWidth: Z,
                transformHeight: fa,
                transformAngle: ha,
                transformZElevation: ka,
                destroyWithParent: sa
            })
        }
    }

    function D(N) {
        const P = this._inst,
            W = this._runtime.GetCurrentAction().GetObjectClass();
        for (const Z of N.allCorrespondingInstances(P, W)) P.RemoveChild(Z)
    }

    function E() {
        this._inst.HasParent() && this._inst.GetParent().RemoveChild(this._inst)
    }

    function I() {
        return this._inst.GetChildCount()
    }

    function K(N, P) {
        N = Math.floor(N);
        P = Math.floor(P);
        const W = this.GetWorldInfo();
        2 > N || 2 > P || !isFinite(N) || !isFinite(P) ?
            (W.ReleaseMesh(), W.SetBboxChanged()) : W.CreateMesh(N, P)
    }

    function O(N, P, W, Z, fa, ha, ka, sa) {
        const ma = this.GetWorldInfo();
        ma.SetMeshPoint(N, P, {
            mode: 0 === W ? "absolute" : "relative",
            x: Z,
            y: fa,
            zElevation: ha,
            u: ka,
            v: sa
        }) && ma.SetBboxChanged()
    }

    function Q() {
        const N = this.GetWorldInfo();
        return N.HasMesh() ? N.GetSourceMesh().GetHSize() : 0
    }

    function S() {
        const N = this.GetWorldInfo();
        return N.HasMesh() ? N.GetSourceMesh().GetVSize() : 0
    }

    function T(N) {
        const P = this.GetWorldInfo();
        N = 2 === N ? !P.IsVisible() : 0 !== N;
        P.IsVisible() !== N && P.SetVisible(N)
    }

    function Y(N, P) {
        this.SetElementCSSStyle(N, P)
    }

    function X(N, P) {
        this.SetElementAttribute(N, "" + P)
    }

    function ea(N) {
        this.RemoveElementAttribute(N)
    }

    function ca() {
        this.FocusElement()
    }

    function aa() {
        this.BlurElement()
    }

    function wa() {
        return this.IsElementFocused()
    }

    function pa(N) {
        this._SetEnabled(0 !== N)
    }

    function ua() {
        return this._IsEnabled()
    }

    function va(N, P, W) {
        return e.compare(this.GetInstance().GetInstanceVariableValue(N), P, W)
    }

    function ta(N) {
        return !!this.GetInstance().GetInstanceVariableValue(N)
    }

    function Ga(N,
        P) {
        const W = this.GetCurrentSol(),
            Z = W.GetInstances();
        if (!Z.length) return !1;
        let fa = Z[0],
            ha = fa,
            ka = fa.GetInstanceVariableValue(P);
        for (let sa = 1, ma = Z.length; sa < ma; ++sa) {
            fa = Z[sa];
            const xa = fa.GetInstanceVariableValue(P);
            if (0 === N && xa < ka || 1 === N && xa > ka) ka = xa, ha = fa
        }
        W.PickOne(ha);
        return !0
    }

    function Ha(N) {
        return this._runtime.GetCurrentCondition().IsInverted() ? Ja(this, N) : Ia(this, N)
    }

    function Ia(N, P) {
        P = N.GetRuntime().GetInstanceByUID(P);
        if (!P) return !1;
        const W = N.GetCurrentSol();
        if (!W.IsSelectAll() && !W._GetOwnInstances().includes(P)) return !1;
        if (N.IsFamily()) {
            if (P.GetObjectClass().BelongsToFamily(N)) return W.PickOne(P), N.ApplySolToContainer(), !0
        } else if (P.GetObjectClass() === N) return W.PickOne(P), N.ApplySolToContainer(), !0;
        return !1
    }

    function Ja(N, P) {
        const W = N.GetCurrentSol();
        if (W.IsSelectAll()) {
            W._SetSelectAll(!1);
            W.ClearArrays();
            var Z = N.GetInstances();
            for (let ha = 0, ka = Z.length; ha < ka; ++ha) {
                var fa = Z[ha];
                fa.GetUID() === P ? W._PushElseInstance(fa) : W._PushInstance(fa)
            }
            N.ApplySolToContainer();
            return !!W._GetOwnInstances().length
        }
        Z = W._GetOwnInstances();
        fa = 0;
        for (let ha = 0, ka = Z.length; ha < ka; ++ha) {
            const sa = Z[ha];
            Z[fa] = sa;
            sa.GetUID() === P ? W._PushElseInstance(sa) : ++fa
        }
        e.truncateArray(Z, fa);
        N.ApplySolToContainer();
        return !!Z.length
    }

    function Oa() {
        this._runtime.DestroyInstance(this._inst)
    }

    function Va() {
        return !0
    }

    function Wa() {
        return !0
    }

    function Ba(N, P) {
        this.GetInstance().SetInstanceVariableValue(N, P)
    }

    function Bb(N, P) {
        const W = this.GetInstance(),
            Z = W.GetInstanceVariableValue(N);
        "number" === typeof Z && "number" !== typeof P ? P = parseFloat(P) : "string" === typeof Z && "string" !==
            typeof P && (P = P.toString());
        W.SetInstanceVariableValue(N, Z + P)
    }

    function Cb(N, P) {
        const W = this.GetInstance(),
            Z = W.GetInstanceVariableValue(N);
        "number" === typeof Z && ("number" !== typeof P && (P = parseFloat(P)), W.SetInstanceVariableValue(N, Z - P))
    }

    function Hb(N, P) {
        this.GetInstance().SetInstanceVariableValue(N, P ? 1 : 0)
    }

    function Ib(N) {
        const P = this.GetInstance();
        P.SetInstanceVariableValue(N, 0 === P.GetInstanceVariableValue(N) ? 1 : 0)
    }

    function Jb(N) {
        let P;
        try {
            P = JSON.parse(N)
        } catch (W) {
            console.error("Failed to load from JSON string: ",
                W);
            return
        }
        N = this.GetInstance();
        N._OnBeforeLoad("state");
        N.LoadFromJson(P, "state")
    }

    function Kb() {
        return JSON.stringify(this.GetInstance().SaveToJson("state"))
    }

    function Lb() {
        return this.GetInstance().GetObjectClass().GetName()
    }

    function Mb() {
        const N = this._runtime.GetCurrentEventStackFrame().GetExpressionObjectClass();
        let P = N.GetInstanceCount();
        for (const W of this._runtime.instancesPendingCreateForObjectClass(N)) ++P;
        return P
    }

    function Nb() {
        return this._runtime.GetCurrentEventStackFrame().GetExpressionObjectClass().GetCurrentSol().GetInstances().length
    }

    function Ob() {
        return this._inst.GetIID()
    }

    function Pb() {
        return this._inst.GetUID()
    }
    e.AddCommonACEs = function(N, P) {
        const W = N[1],
            Z = N[4],
            fa = N[5],
            ha = N[6],
            ka = N[7],
            sa = N[8],
            ma = N[10],
            xa = N[11],
            ya = N[12],
            Ka = N[13],
            Ra = N[14],
            Ea = N[15],
            la = P.Cnds,
            da = P.Acts,
            oa = P.Exps;
        N[3] && (la.CompareX = a, la.CompareY = d, la.IsOnScreen = c, la.IsOutsideLayout = f, la.PickDistance = k, da.SetX = g, da.SetY = l, da.SetPos = m, da.SetPosToObject = u, da.MoveForward = x, da.MoveAtAngle = p, oa.X = r, oa.Y = t, oa.dt = q);
        Z && (la.CompareWidth = w, la.CompareHeight = y, da.SetWidth = C,
            da.SetHeight = F, da.SetSize = H, oa.Width = M, oa.Height = B, oa.BBoxLeft = A, oa.BBoxTop = G, oa.BBoxRight = J, oa.BBoxBottom = L);
        fa && (la.AngleWithin = R, la.IsClockwiseFrom = U, la.IsBetweenAngles = V, da.SetAngle = ba, da.RotateClockwise = ia, da.RotateCounterclockwise = ja, da.RotateTowardAngle = qa, da.RotateTowardPosition = za, da.SetTowardPosition = Ca, oa.Angle = Ma);
        ha && (la.IsVisible = La, la.CompareOpacity = Fa, da.SetVisible = na, da.SetOpacity = Sa, da.SetDefaultColor = Aa, oa.Opacity = lb, oa.ColorValue = Na);
        ka && (la.IsOnLayer = mb, la.PickTopBottom = nb, la.CompareZElevation =
            ab, da.MoveToTop = ob, da.MoveToBottom = pb, da.MoveToLayer = qb, da.ZMoveToObject = rb, da.SetZElevation = sb, oa.LayerNumber = tb, oa.LayerName = ub, oa.ZIndex = bb, oa.ZElevation = vb, oa.TotalZElevation = wb);
        sa && (da.SetEffectEnabled = xb, da.SetEffectParam = yb);
        Ka && (la.HasParent = jb, la.HasChildren = kb, la.PickParent = Za, la.PickChildren = h, la.PickNthChild = n, la.CompareChildCount = v, da.AddChild = z, da.RemoveChild = D, da.RemoveFromParent = E, oa.ChildCount = I);
        Ra && (da.SetMeshSize = K, da.SetMeshPoint = O, oa.MeshColumns = Q, oa.MeshRows = S);
        ma && (la.IsVisible =
            La, da.SetVisible = T, da.SetCSSStyle = Y, da.SetElemAttribute = X, da.RemoveElemAttribute = ea);
        xa && (la.IsFocused = wa, da.SetFocus = ca, da.SetBlur = aa);
        ya && (la.IsEnabled = ua, da.SetEnabled = pa);
        Ea && (la.OnCollision = Fb, la.IsOverlapping = hb, la.IsOverlappingOffset = ib, P.FinishCollisionCondition = Eb);
        W || (la.CompareInstanceVar = va, la.IsBoolInstanceVarSet = ta, la.PickInstVarHiLow = Ga, la.PickByUID = Ha, da.SetInstanceVar = Ba, da.AddInstanceVar = Bb, da.SubInstanceVar = Cb, da.SetBoolInstanceVar = Hb, da.ToggleBoolInstanceVar = Ib, la.OnCreated = Va,
            la.OnDestroyed = Wa, da.Destroy = Oa, da.LoadFromJsonString || (da.LoadFromJsonString = Jb), oa.AsJSON || (oa.AsJSON = Kb), oa.Count = Mb, oa.PickedCount = Nb, oa.IID = Ob, oa.UID = Pb, oa.ObjectTypeName = Lb)
    }
} {
    "use strict";
    const e = self.C3;
    e.ScheduledWait = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._eventSheetManager = b;
            this._type = "";
            this._time = -1;
            this._signalTag = "";
            this._isSignalled = !1;
            this._event = null;
            this._actIndex = 0;
            this._solModifiers = [];
            this._sols = new Map;
            this._callingFunctionBlock = null;
            this._asyncId = -1;
            this._functionInnerLocalVars = this._functionParameters = null;
            this._shouldRelease = !1
        }
        Release() {
            this._type = "";
            this._time = -1;
            this._signalTag = "";
            this._functionInnerLocalVars = this._functionParameters =
                this._callingFunctionBlock = this._event = null;
            this._asyncId = -1;
            e.clearArray(this._solModifiers);
            for (const b of this._sols.values()) b.Release();
            this._sols.clear()
        }
        _Init() {
            var b = this._eventSheetManager,
                a = b.GetRuntime().GetAllObjectClasses();
            const d = b.GetCurrentEventStackFrame();
            this._event = d.GetCurrentEvent();
            this._actIndex = d.GetActionIndex() + 1;
            if (b = b.FindFirstFunctionBlockParent(this._event)) this._callingFunctionBlock = b, this._functionParameters = b.CaptureFunctionParameters(), this._functionInnerLocalVars =
                b._GetAllInnerLocalVariables().map(c => c.GetValue()), b.IsAsync() && (this._asyncId = b.PauseCurrentAsyncFunction());
            for (const c of a)
                if (a = c.GetCurrentSol(), !a.IsSelectAll() || this._event.HasSolModifier(c)) this._solModifiers.push(c), this._sols.set(c, e.New(e.SolState, a))
        }
        InitTimer(b) {
            this._type = "timer";
            this._Init();
            this._time = this._eventSheetManager.GetRuntime().GetGameTime() + b
        }
        InitSignal(b) {
            this._type = "signal";
            this._Init();
            this._signalTag = b.toLowerCase()
        }
        InitPromise(b) {
            this._type = "promise";
            this._Init();
            b.then(() => this.SetSignalled()).catch(a => {
                console.warn("[C3 runtime] Promise rejected in 'Wait for previous actions to complete': ", a);
                this.SetSignalled()
            })
        }
        IsTimer() {
            return "timer" === this._type
        }
        IsSignal() {
            return "signal" === this._type
        }
        IsPromise() {
            return "promise" === this._type
        }
        GetSignalTag() {
            return this._signalTag
        }
        IsSignalled() {
            return this._isSignalled
        }
        SetSignalled() {
            this._isSignalled = !0
        }
        _ShouldRun() {
            return this.IsTimer() ? this._time <= this._eventSheetManager.GetRuntime().GetGameTime() : this.IsSignalled()
        }
        _RestoreState(b) {
            b._Restore(this._event,
                this._actIndex);
            for (const [a, d] of this._sols.entries()) b = a.GetCurrentSol(), d._Restore(b);
            if (b = this._callingFunctionBlock) b.SetFunctionParameters(this._functionParameters), b._GetAllInnerLocalVariables().map((a, d) => a.SetValue(this._functionInnerLocalVars[d])), b.IsAsync() && b.ResumeAsyncFunction(this._asyncId)
        }
        _Run(b) {
            this._RestoreState(b);
            this._event._ResumeActionsAndSubEvents(b);
            this._callingFunctionBlock && this._callingFunctionBlock.IsAsync() && this._callingFunctionBlock.MaybeFinishAsyncFunctionCall(this._asyncId);
            this._eventSheetManager.ClearSol(this._solModifiers);
            this._shouldRelease = !0
        }
        async _DebugRun(b) {
            this._RestoreState(b);
            for (const a of this._event._DebugResumeActionsAndSubEvents(b)) await this._eventSheetManager.GetRuntime().DebugBreak(a);
            this._callingFunctionBlock && this._callingFunctionBlock.IsAsync() && this._callingFunctionBlock.MaybeFinishAsyncFunctionCall(this._asyncId);
            this._eventSheetManager.ClearSol(this._solModifiers);
            this._shouldRelease = !0
        }
        ShouldRelease() {
            return this._shouldRelease
        }
        RemoveInstances(b) {
            for (const a of this._sols.values()) a.RemoveInstances(b)
        }
        _SaveToJson() {
            const b = {},
                a = {
                    t: this._time,
                    st: this._signalTag,
                    s: this._isSignalled,
                    ev: this._event.GetSID(),
                    sm: this._solModifiers.map(d => d.GetSID()),
                    sols: b
                };
            this._event._HasActionIndex(this._actIndex) && (a.act = this._event.GetActionAt(this._actIndex).GetSID());
            for (const [d, c] of this._sols) b[d.GetSID().toString()] = c._SaveToJson();
            return a
        }
        static _CreateFromJson(b, a) {
            const d = b.GetRuntime();
            var c = b.GetEventBlockBySID(a.ev);
            if (!c) return null;
            let f = 0;
            if (a.hasOwnProperty("act")) {
                var k = b.GetActionBySID(a.act);
                if (!k) return null;
                f = k.GetIndex()
            }
            k =
                e.New(e.ScheduledWait, b);
            k._time = a.t;
            k._type = -1 === k._time ? "signal" : "timer";
            k._signalTag = a.st;
            k._isSignalled = a.s;
            k._event = c;
            k._actIndex = f;
            for (var g of a.sm)(c = d.GetObjectClassBySID(g)) && k._solModifiers.push(c);
            for (const [l, m] of Object.entries(a.sols))
                if (a = parseInt(l, 10), a = d.GetObjectClassBySID(a)) g = e.New(e.SolState, null), g._LoadFromJson(b, m), k._sols.set(a, g);
            return k
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SolState = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._objectClass = null;
            this._isSelectAll = !0;
            this._instances = [];
            b && (this._objectClass = b.GetObjectClass(), this._isSelectAll = b.IsSelectAll(), e.shallowAssignArray(this._instances, b._GetOwnInstances()))
        }
        Release() {
            this._objectClass = null;
            e.clearArray(this._instances)
        }
        _Restore(b) {
            b._SetSelectAll(this._isSelectAll);
            e.shallowAssignArray(b._GetOwnInstances(), this._instances)
        }
        RemoveInstances(b) {
            e.arrayRemoveAllInSet(this._instances,
                b)
        }
        _SaveToJson() {
            return {
                sa: this._isSelectAll,
                insts: this._instances.map(b => b.GetUID())
            }
        }
        _LoadFromJson(b, a) {
            b = b.GetRuntime();
            this._isSelectAll = !!a.sa;
            e.clearArray(this._instances);
            for (const d of a.insts)(a = b.GetInstanceByUID(d)) && this._instances.push(a)
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(a, d) {
        let c = a.get(d);
        c || (c = new Map, a.set(d, c));
        return c
    }
    e.SDKPluginBase = class extends e.DefendedBase {
        constructor(a) {
            super();
            this._runtime = a.runtime;
            this._isSingleGlobal = !!a.isSingleGlobal;
            this._isWorldType = !!a.isWorld;
            this._isRotatable = !!a.isRotatable;
            this._mustPredraw = !!a.mustPredraw;
            this._hasEffects = !!a.hasEffects;
            this._supportsSceneGraph = !!a.supportsSceneGraph;
            this._supportsMesh = !!a.supportsMesh;
            this._singleGlobalObjectClass = null;
            this._boundACEMethodCache =
                new Map;
            this._boundACEMethodCache_1param = new Map;
            this._boundACEMethodCache_2params = new Map;
            this._boundACEMethodCache_3params = new Map
        }
        Release() {
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        OnCreate() {}
        IsSingleGlobal() {
            return this._isSingleGlobal
        }
        IsWorldType() {
            return this._isWorldType
        }
        IsRotatable() {
            return this._isRotatable
        }
        MustPreDraw() {
            return this._mustPredraw
        }
        HasEffects() {
            return this._hasEffects
        }
        SupportsSceneGraph() {
            return this._supportsSceneGraph
        }
        SupportsMesh() {
            return this._supportsMesh
        }
        _GetBoundACEMethod(a,
            d) {
            if (!d) throw Error("missing 'this' binding");
            let c = this._boundACEMethodCache.get(a);
            if (c) return c;
            c = a.bind(d);
            this._boundACEMethodCache.set(a, c);
            return c
        }
        _GetBoundACEMethod_1param(a, d, c) {
            if (!d) throw Error("missing 'this' binding");
            const f = b(this._boundACEMethodCache_1param, a);
            let k = f.get(c);
            if (k) return k;
            k = a.bind(d, c);
            f.set(c, k);
            return k
        }
        _GetBoundACEMethod_2params(a, d, c, f) {
            if (!d) throw Error("missing 'this' binding");
            var k = b(this._boundACEMethodCache_2params, a);
            k = b(k, c);
            let g = k.get(f);
            if (g) return g;
            g = a.bind(d, c, f);
            k.set(f, g);
            return g
        }
        _GetBoundACEMethod_3params(a, d, c, f, k) {
            if (!d) throw Error("missing 'this' binding");
            var g = b(this._boundACEMethodCache_3params, a);
            g = b(g, c);
            g = b(g, f);
            let l = g.get(k);
            if (l) return l;
            l = a.bind(d, c, f, k);
            g.set(k, l);
            return l
        }
        _SetSingleGlobalObjectClass(a) {
            if (!this.IsSingleGlobal()) throw Error("must be single-global plugin");
            this._singleGlobalObjectClass = a
        }
        GetSingleGlobalObjectClass() {
            if (!this.IsSingleGlobal()) throw Error("must be single-global plugin");
            return this._singleGlobalObjectClass
        }
        GetSingleGlobalInstance() {
            if (!this.IsSingleGlobal()) throw Error("must be single-global plugin");
            return this._singleGlobalObjectClass.GetSingleGlobalInstance()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SDKDOMPluginBase = class extends e.SDKPluginBase {
        constructor(b, a) {
            super(b);
            this._domComponentId = a;
            this._nextElementId = 0;
            this._instMap = new Map;
            this.AddElementMessageHandler("elem-focused", d => d._OnElemFocused());
            this.AddElementMessageHandler("elem-blurred", d => {
                d && d._OnElemBlurred()
            })
        }
        Release() {
            super.Release()
        }
        _AddElement(b) {
            const a = this._nextElementId++;
            this._instMap.set(a, b);
            return a
        }
        _RemoveElement(b) {
            this._instMap.delete(b)
        }
        AddElementMessageHandler(b, a) {
            this._runtime.AddDOMComponentMessageHandler(this._domComponentId,
                b, d => {
                    const c = this._instMap.get(d.elementId);
                    a(c, d)
                })
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SDKTypeBase = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._objectClass = b;
            this._runtime = b.GetRuntime();
            this._plugin = b.GetPlugin()
        }
        Release() {
            this._plugin = this._runtime = this._objectClass = null
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetRuntime() {
            return this._runtime
        }
        GetPlugin() {
            return this._plugin
        }
        GetImageInfo() {
            return this._objectClass.GetImageInfo()
        }
        FinishCondition(b) {}
        LoadTextures(b) {}
        ReleaseTextures() {}
        OnDynamicTextureLoadComplete() {}
        PreloadTexturesWithInstances(b) {}
        LoadTilemapData() {}
        GetScriptInterfaceClass() {
            return null
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SDKInstanceBase = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._inst = b;
            this._domComponentId = a;
            this._runtime = b.GetRuntime();
            this._objectClass = this._inst.GetObjectClass();
            this._sdkType = this._objectClass.GetSdkType();
            this._tick2Func = this._tickFunc = null;
            this._isTicking2 = this._isTicking = !1;
            this._disposables = null;
            this._wasReleased = !1
        }
        Release() {
            this._wasReleased = !0;
            this._StopTicking();
            this._StopTicking2();
            this._tick2Func = this._tickFunc = null;
            this._disposables &&
                (this._disposables.Release(), this._disposables = null);
            this._sdkType = this._objectClass = this._runtime = this._inst = null
        }
        WasReleased() {
            return this._wasReleased
        }
        GetInstance() {
            return this._inst
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetPlugin() {
            return this._sdkType.GetPlugin()
        }
        GetSdkType() {
            return this._sdkType
        }
        GetScriptInterface() {
            return this._inst.GetInterfaceClass()
        }
        Trigger(b) {
            return this._runtime.Trigger(b, this._inst, null)
        }
        DebugTrigger(b) {
            return this._runtime.DebugTrigger(b,
                this._inst, null)
        }
        TriggerAsync(b) {
            return this._runtime.TriggerAsync(b, this._inst, null)
        }
        FastTrigger(b, a) {
            return this._runtime.FastTrigger(b, this._inst, a)
        }
        DebugFastTrigger(b, a) {
            return this._runtime.DebugFastTrigger(b, this._inst, a)
        }
        ScheduleTriggers(b) {
            return this._runtime.ScheduleTriggers(b)
        }
        AddDOMMessageHandler(b, a) {
            this._runtime.AddDOMComponentMessageHandler(this._domComponentId, b, a)
        }
        AddDOMMessageHandlers(b) {
            for (const [a, d] of b) this.AddDOMMessageHandler(a, d)
        }
        PostToDOM(b, a) {
            this._runtime.PostComponentMessageToDOM(this._domComponentId,
                b, a)
        }
        PostToDOMAsync(b, a) {
            return this._runtime.PostComponentMessageToDOMAsync(this._domComponentId, b, a)
        }
        _PostToDOMMaybeSync(b, a) {
            if (this._runtime.IsInWorker()) this.PostToDOM(b, a);
            else return window.c3_runtimeInterface._OnMessageFromRuntime({
                type: "event",
                component: this._domComponentId,
                handler: b,
                data: a,
                responseId: null
            })
        }
        Tick() {}
        Tick2() {}
        _StartTicking() {
            this._isTicking || (this._tickFunc || (this._tickFunc = () => this.Tick()), this._runtime.Dispatcher().addEventListener("tick", this._tickFunc), this._isTicking = !0)
        }
        _StopTicking() {
            this._isTicking && (this._runtime.Dispatcher().removeEventListener("tick", this._tickFunc), this._isTicking = !1)
        }
        IsTicking() {
            return this._isTicking
        }
        _StartTicking2() {
            this._isTicking2 || (this._tick2Func || (this._tick2Func = () => this.Tick2()), this._runtime.Dispatcher().addEventListener("tick2", this._tick2Func), this._isTicking2 = !0)
        }
        _StopTicking2() {
            this._isTicking2 && (this._runtime.Dispatcher().removeEventListener("tick2", this._tick2Func), this._isTicking2 = !1)
        }
        IsTicking2() {
            return this._isTicking2
        }
        GetDebuggerProperties() {
            return []
        }
        SaveToJson() {
            return null
        }
        LoadFromJson(b) {}
        GetPropertyValueByIndex(b) {}
        SetPropertyValueByIndex(b,
            a) {}
        OffsetPropertyValueByIndex(b, a) {
            if (0 !== a) {
                var d = this.GetPropertyValueByIndex(b);
                if ("number" !== typeof d) throw Error("expected number");
                this.SetPropertyValueByIndex(b, d + a)
            }
        }
        SetPropertyColorOffsetValueByIndex(b, a, d, c) {}
        CallAction(b, ...a) {
            b.call(this, ...a)
        }
        CallExpression(b, ...a) {
            return b.call(this, ...a)
        }
        GetScriptInterfaceClass() {
            return null
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SDKWorldInstanceBase = class extends e.SDKInstanceBase {
        constructor(b, a) {
            super(b, a);
            this._worldInfo = b.GetWorldInfo();
            this._webglcontextrestored_handler = this._webglcontextlost_handler = null
        }
        Release() {
            if (this._webglcontextlost_handler) {
                const b = this._runtime.Dispatcher();
                b.removeEventListener("webglcontextlost", this._webglcontextlost_handler);
                b.removeEventListener("webglcontextrestored", this._webglcontextrestored_handler);
                this._webglcontextrestored_handler = this._webglcontextlost_handler =
                    null
            }
            this._worldInfo = null;
            super.Release()
        }
        HandleWebGLContextLoss() {
            if (!this._webglcontextlost_handler) {
                this._webglcontextlost_handler = () => this.OnWebGLContextLost();
                this._webglcontextrestored_handler = () => this.OnWebGLContextRestored();
                var b = this._runtime.Dispatcher();
                b.addEventListener("webglcontextlost", this._webglcontextlost_handler);
                b.addEventListener("webglcontextrestored", this._webglcontextrestored_handler)
            }
        }
        OnWebGLContextLost() {}
        OnWebGLContextRestored() {}
        GetWorldInfo() {
            return this._worldInfo
        }
        IsOriginalSizeKnown() {
            return !1
        }
        GetOriginalWidth() {
            if (!this.IsOriginalSizeKnown()) throw Error("original size not known");
            const b = this.GetCurrentImageInfo();
            if (b) return b.GetWidth()
        }
        GetOriginalHeight() {
            if (!this.IsOriginalSizeKnown()) throw Error("original size not known");
            const b = this.GetCurrentImageInfo();
            if (b) return b.GetHeight()
        }
        GetCurrentImageInfo() {
            return null
        }
        GetCurrentSurfaceSize() {
            var b = this.GetCurrentImageInfo();
            return b && (b = b.GetTexture()) ? [b.GetWidth(), b.GetHeight()] : [100, 100]
        }
        GetCurrentTexRect() {
            const b = this.GetCurrentImageInfo();
            return b ? b.GetTexRect() : null
        }
        GetCurrentTexQuad() {
            const b = this.GetCurrentImageInfo();
            return b ? b.GetTexQuad() : null
        }
        GetImagePoint(b) {
            b = this._inst.GetWorldInfo();
            return [b.GetX(), b.GetY()]
        }
        LoadTilemapData(b, a, d) {}
        TestPointOverlapTile(b, a) {}
        RendersToOwnZPlane() {
            return !0
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = e.New(e.Rect);
    e.SDKDOMInstanceBase = class extends e.SDKWorldInstanceBase {
        constructor(a, d) {
            super(a, d);
            this._elementId = this.GetPlugin()._AddElement(this);
            this._isElementShowing = !0;
            this._autoFontSize = this._elemHasFocus = !1;
            this._lastRect = e.New(e.Rect, 0, 0, -1, -1);
            a = this._runtime.GetCanvasManager();
            this._lastWindowWidth = a.GetLastWidth();
            this._lastWindowHeight = a.GetLastHeight();
            this._isPendingUpdateState = !1;
            this._StartTicking()
        }
        Release() {
            this.GetPlugin()._RemoveElement(this._elementId);
            this.PostToDOMElement("destroy");
            this._elementId = -1;
            super.Release()
        }
        _GetElementInDOMMode() {
            if (this._runtime.IsInWorker()) throw Error("not valid in worker mode");
            return this._PostToDOMElementMaybeSync("get-element")
        }
        PostToDOMElement(a, d) {
            d || (d = {});
            d.elementId = this._elementId;
            this.PostToDOM(a, d)
        }
        _PostToDOMElementMaybeSync(a, d) {
            d || (d = {});
            d.elementId = this._elementId;
            return this._PostToDOMMaybeSync(a, d)
        }
        PostToDOMElementAsync(a, d) {
            d || (d = {});
            d.elementId = this._elementId;
            return this.PostToDOMAsync(a, d)
        }
        CreateElement(a) {
            a ||
                (a = {});
            const d = this.GetWorldInfo().IsVisible();
            a.elementId = this._elementId;
            a.isVisible = d;
            Object.assign(a, this.GetElementState());
            this._isElementShowing = !!a.isVisible;
            this._PostToDOMMaybeSync("create", a);
            this._UpdatePosition(!0)
        }
        SetElementVisible(a) {
            a = !!a;
            this._isElementShowing !== a && (this._isElementShowing = a, this.PostToDOMElement("set-visible", {
                isVisible: a
            }))
        }
        Tick() {
            this._UpdatePosition(!1)
        }
        _ShouldPreserveElement() {
            const a = this._runtime.GetCanvasManager().GetFullscreenMode();
            return "Android" === e.Platform.OS &&
                ("scale-inner" === a || "scale-outer" === a || "crop" === a)
        }
        _UpdatePosition(a) {
            var d = this.GetWorldInfo();
            const c = d.GetLayer();
            var f = d.GetX(),
                k = d.GetY();
            let [g, l] = c.LayerToCanvasCss(f, k), [m, u] = c.LayerToCanvasCss(f + d.GetWidth(), k + d.GetHeight());
            f = this._runtime.GetCanvasManager();
            k = f.GetCssWidth();
            const x = f.GetCssHeight();
            if (d.IsVisible() && c.IsVisible()) {
                if (!this._ShouldPreserveElement()) {
                    if (0 >= m || 0 >= u || g >= k || l >= x) {
                        this.SetElementVisible(!1);
                        return
                    }
                    1 > g && (g = 1);
                    1 > l && (l = 1);
                    m >= k && (m = k - 1);
                    u >= x && (u = x - 1)
                }
                b.set(g, l,
                    m, u);
                d = f.GetLastWidth();
                k = f.GetLastHeight();
                !a && b.equals(this._lastRect) && this._lastWindowWidth === d && this._lastWindowHeight === k ? this.SetElementVisible(!0) : (this._lastRect.copy(b), this._lastWindowWidth = d, this._lastWindowHeight = k, this.SetElementVisible(!0), a = null, this._autoFontSize && (a = c.GetDisplayScale() - .2), this.PostToDOMElement("update-position", {
                    left: Math.round(this._lastRect.getLeft()) + f.GetCanvasClientX(),
                    top: Math.round(this._lastRect.getTop()) + f.GetCanvasClientY(),
                    width: Math.round(this._lastRect.width()),
                    height: Math.round(this._lastRect.height()),
                    fontSize: a
                }))
            } else this.SetElementVisible(!1)
        }
        FocusElement() {
            this._PostToDOMElementMaybeSync("focus", {
                focus: !0
            })
        }
        BlurElement() {
            this._PostToDOMElementMaybeSync("focus", {
                focus: !1
            })
        }
        _OnElemFocused() {
            this._elemHasFocus = !0
        }
        _OnElemBlurred() {
            this._elemHasFocus = !1
        }
        IsElementFocused() {
            return this._elemHasFocus
        }
        SetElementCSSStyle(a, d) {
            this.PostToDOMElement("set-css-style", {
                prop: e.CSSToCamelCase(a),
                val: d
            })
        }
        SetElementAttribute(a, d) {
            this.PostToDOMElement("set-attribute", {
                name: a,
                val: d
            })
        }
        RemoveElementAttribute(a) {
            this.PostToDOMElement("remove-attribute", {
                name: a
            })
        }
        UpdateElementState() {
            this._isPendingUpdateState || (this._isPendingUpdateState = !0, Promise.resolve().then(() => {
                this._isPendingUpdateState = !1;
                this.PostToDOMElement("update-state", this.GetElementState())
            }))
        }
        GetElementState() {}
        GetElementId() {
            return this._elementId
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.IBehavior;
    e.SDKBehaviorBase = class extends e.DefendedBase {
        constructor(a) {
            super();
            this._runtime = a.runtime;
            this._myObjectClasses = e.New(e.ArraySet);
            this._myInstances = e.New(e.ArraySet);
            this._iBehavior = null;
            this._scriptInterfaceClass = a.scriptInterfaceClass || null
        }
        Release() {
            this._myInstances.Release();
            this._myObjectClasses.Release();
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        OnCreate() {}
        _AddObjectClass(a) {
            this._myObjectClasses.Add(a)
        }
        GetObjectClasses() {
            return this._myObjectClasses.GetArray()
        }
        _AddInstance(a) {
            this._myInstances.Add(a)
        }
        _RemoveInstance(a) {
            this._myInstances.Delete(a)
        }
        GetInstances() {
            return this._myInstances.GetArray()
        }
        GetIBehavior() {
            if (null ===
                this._iBehavior) {
                const a = this._scriptInterfaceClass;
                if (a) {
                    if (this._iBehavior = new a(this), !(this._iBehavior instanceof b)) throw new TypeError("script interface class must derive from IBehavior");
                } else this._iBehavior = new b(this)
            }
            return this._iBehavior
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SDKBehaviorTypeBase = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._runtime = b.GetRuntime();
            this._behaviorType = b;
            this._objectClass = b.GetObjectClass();
            this._behavior = b.GetBehavior();
            this._behavior._AddObjectClass(this._objectClass)
        }
        Release() {
            this._behavior = this._objectClass = this._behaviorType = this._runtime = null
        }
        GetBehaviorType() {
            return this._behaviorType
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetRuntime() {
            return this._runtime
        }
        GetBehavior() {
            return this._behavior
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SDKBehaviorInstanceBase = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._behInst = b;
            this._domComponentId = a;
            this._inst = b.GetObjectInstance();
            this._runtime = b.GetRuntime();
            this._behaviorType = b.GetBehaviorType();
            this._sdkType = this._behaviorType.GetSdkType();
            this._isPostTicking = this._isTicking2 = this._isTicking = !1;
            this._disposables = null
        }
        Release() {
            this._StopTicking();
            this._StopTicking2();
            this._StopPostTicking();
            this._disposables && (this._disposables.Release(), this._disposables =
                null);
            this._sdkType = this._behaviorType = this._runtime = this._inst = this._behInst = null
        }
        GetBehavior() {
            return this._behaviorType.GetBehavior()
        }
        GetBehaviorInstance() {
            return this._behInst
        }
        GetObjectInstance() {
            return this._inst
        }
        GetObjectClass() {
            return this._inst.GetObjectClass()
        }
        GetWorldInfo() {
            return this._inst.GetWorldInfo()
        }
        GetRuntime() {
            return this._runtime
        }
        GetBehaviorType() {
            return this._behaviorType
        }
        GetSdkType() {
            return this._sdkType
        }
        GetScriptInterface() {
            return this._behInst.GetScriptInterface()
        }
        Trigger(b) {
            return this._runtime.Trigger(b,
                this._inst, this._behaviorType)
        }
        DebugTrigger(b) {
            return this._runtime.DebugTrigger(b, this._inst, this._behaviorType)
        }
        TriggerAsync(b) {
            return this._runtime.TriggerAsync(b, this._inst, this._behaviorType)
        }
        PostCreate() {}
        Tick() {}
        Tick2() {}
        PostTick() {}
        _StartTicking() {
            this._isTicking || (this._runtime._AddBehInstToTick(this), this._isTicking = !0)
        }
        _StopTicking() {
            this._isTicking && (this._runtime._RemoveBehInstToTick(this), this._isTicking = !1)
        }
        IsTicking() {
            return this._isTicking
        }
        _StartTicking2() {
            this._isTicking2 || (this._runtime._AddBehInstToTick2(this),
                this._isTicking2 = !0)
        }
        _StopTicking2() {
            this._isTicking2 && (this._runtime._RemoveBehInstToTick2(this), this._isTicking2 = !1)
        }
        IsTicking2() {
            return this._isTicking2
        }
        _StartPostTicking() {
            this._isPostTicking || (this._runtime._AddBehInstToPostTick(this), this._isPostTicking = !0)
        }
        _StopPostTicking() {
            this._isPostTicking && (this._runtime._RemoveBehInstToPostTick(this), this._isPostTicking = !1)
        }
        IsPostTicking() {
            return this._isPostTicking
        }
        GetDebuggerProperties() {
            return []
        }
        AddDOMMessageHandler(b, a) {
            this._runtime.AddDOMComponentMessageHandler(this._domComponentId,
                b, a)
        }
        OnSpriteFrameChanged(b, a) {}
        SaveToJson() {
            return null
        }
        LoadFromJson(b) {}
        GetPropertyValueByIndex(b) {}
        SetPropertyValueByIndex(b, a) {}
        OffsetPropertyValueByIndex(b, a) {
            if (0 !== a) {
                var d = this.GetPropertyValueByIndex(b);
                if ("number" !== typeof d) throw Error("expected number");
                this.SetPropertyValueByIndex(b, d + a)
            }
        }
        SetPropertyColorOffsetValueByIndex(b, a, d, c) {}
        CallAction(b, ...a) {
            b.call(this, ...a)
        }
        CallExpression(b, ...a) {
            return b.call(this, ...a)
        }
        GetScriptInterfaceClass() {
            return null
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins = {};
    e.Behaviors = {};
    e.PluginManager = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._runtime = b;
            this._allPlugins = [];
            this._pluginsByCtor = new Map;
            this._systemPlugin = null;
            this._allBehaviors = [];
            this._behaviorsByCtor = new Map;
            this._jumpthruBehavior = this._solidBehavior = null
        }
        CreatePlugin(b) {
            const a = this._runtime.GetObjectReference(b[0]);
            if (!a) throw Error("missing plugin");
            e.AddCommonACEs(b, a);
            b = e.New(a, {
                runtime: this._runtime,
                isSingleGlobal: b[1],
                isWorld: b[2],
                isRotatable: b[5],
                hasEffects: b[8],
                mustPredraw: b[9],
                supportsSceneGraph: b[13],
                supportsMesh: b[14]
            });
            b.OnCreate();
            this._allPlugins.push(b);
            this._pluginsByCtor.set(a, b)
        }
        CreateSystemPlugin() {
            this._systemPlugin = e.New(e.Plugins.System, {
                runtime: this._runtime,
                isSingleGlobal: !0
            });
            this._systemPlugin.OnCreate()
        }
        CreateBehavior(b) {
            b = this._runtime.GetObjectReference(b[1]);
            if (!b) throw Error("missing behavior");
            const a = e.New(b, {
                runtime: this._runtime
            });
            a.OnCreate();
            this._allBehaviors.push(a);
            this._behaviorsByCtor.set(b, a);
            !this._solidBehavior &&
                e.Behaviors.solid && a instanceof e.Behaviors.solid ? this._solidBehavior = a : !this._jumpthruBehavior && e.Behaviors.jumpthru && a instanceof e.Behaviors.jumpthru && (this._jumpthruBehavior = a)
        }
        GetPluginByConstructorFunction(b) {
            return this._pluginsByCtor.get(b) || null
        }
        HasBehaviorByConstructorFunction(b) {
            return this._behaviorsByCtor.has(b)
        }
        GetBehaviorByConstructorFunction(b) {
            return this._behaviorsByCtor.get(b) || null
        }
        GetSystemPlugin() {
            return this._systemPlugin
        }
        GetSolidBehavior() {
            return this._solidBehavior
        }
        GetJumpthruBehavior() {
            return this._jumpthruBehavior
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = new Set;
    e.ImageInfo = class extends e.DefendedBase {
        constructor() {
            super();
            this._url = "";
            this._height = this._width = this._offsetY = this._offsetX = this._size = 0;
            this._hasMetaData = this._isRotated = !1;
            this._imageAsset = null;
            this._textureState = "";
            this._rcTex = e.New(e.Rect);
            this._quadTex = e.New(e.Quad);
            b.add(this)
        }
        Release() {
            this.ReleaseTexture();
            this._imageAsset = null;
            b.delete(this)
        }
        static OnWebGLContextLost() {
            for (const a of b) a._textureState = "", a._rcTex.set(0, 0, 0, 0), a._quadTex.setFromRect(a._rcTex)
        }
        LoadData(a) {
            this._url =
                a[0];
            this._size = a[1];
            this._offsetX = a[2];
            this._offsetY = a[3];
            this._width = a[4];
            this._height = a[5];
            this._isRotated = a[6];
            this._hasMetaData = !0
        }
        LoadDynamicAsset(a, d) {
            if (this._imageAsset) throw Error("already loaded asset");
            this._url = d;
            const c = {};
            e.IsAbsoluteURL(d) && (c.loadPolicy = "remote");
            this.LoadAsset(a, c);
            return this._imageAsset.Load()
        }
        ReplaceWith(a) {
            if (a === this) throw Error("cannot replace with self");
            this.ReleaseTexture();
            this._url = a._url;
            this._size = a._size;
            this._offsetX = a._offsetX;
            this._offsetY = a._offsetY;
            this._width = a._width;
            this._height = a._height;
            this._hasMetaData = a._hasMetaData;
            this._imageAsset = a._imageAsset;
            this._textureState = a._textureState;
            this._rcTex = a._rcTex;
            this._quadTex = a._quadTex
        }
        GetURL() {
            return this._url
        }
        GetSize() {
            return this._size
        }
        GetOffsetX() {
            return this._offsetX
        }
        GetOffsetY() {
            return this._offsetY
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetSheetWidth() {
            return this._imageAsset.GetWidth()
        }
        GetSheetHeight() {
            return this._imageAsset.GetHeight()
        }
        LoadAsset(a, d) {
            if (this._imageAsset) throw Error("already got asset");
            d = Object.assign({}, d, {
                url: this.GetURL(),
                size: this.GetSize()
            });
            this._imageAsset = a.LoadImage(d)
        }
        IsLoaded() {
            return this._imageAsset && this._imageAsset.IsLoaded()
        }
        async LoadStaticTexture(a, d) {
            if (!this._imageAsset) throw Error("no asset");
            if (this._textureState) throw Error("already loaded texture");
            this._textureState = "loading";
            a = await this._imageAsset.LoadStaticTexture(a, d);
            if (!a) return this._textureState = "", null;
            this._textureState = "loaded";
            this._hasMetaData || (this._width = a.GetWidth(), this._height = a.GetHeight(),
                this._hasMetaData = !0);
            this._rcTex.set(this._offsetX, this._offsetY, this._offsetX + (this._isRotated ? this._height : this._width), this._offsetY + (this._isRotated ? this._width : this._height));
            this._rcTex.divide(a.GetWidth(), a.GetHeight());
            this._quadTex.setFromRect(this._rcTex);
            this._isRotated && this._quadTex.rotatePointsAnticlockwise();
            return a
        }
        ReleaseTexture() {
            this._textureState && (this._imageAsset && this._imageAsset.ReleaseTexture(), this._textureState = "", this._rcTex.set(0, 0, 0, 0), this._quadTex.setFromRect(this._rcTex))
        }
        GetTexture() {
            return this._imageAsset ?
                this._imageAsset.GetTexture() : null
        }
        GetTexRect() {
            return this._rcTex
        }
        GetTexQuad() {
            return this._quadTex
        }
        async ExtractImageToCanvas() {
            const a = await this._imageAsset.LoadToDrawable(),
                d = e.CreateCanvas(this._width, this._height);
            d.getContext("2d").drawImage(a, this._offsetX, this._offsetY, this._width, this._height, 0, 0, this._width, this._height);
            return d
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.AnimationInfo = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._name = b[0];
            this._speed = b[1];
            this._isLooping = !!b[2];
            this._repeatCount = b[3];
            this._repeatTo = b[4];
            this._isPingPong = !!b[5];
            this._sid = b[6];
            this._frames = b[7].map(a => e.New(e.AnimationFrameInfo, a))
        }
        Release() {
            for (const b of this._frames) b.Release();
            e.clearArray(this._frames)
        }
        LoadAllAssets(b) {
            for (const a of this._frames) a.GetImageInfo().LoadAsset(b)
        }
        LoadAllTextures(b, a) {
            return Promise.all(this._frames.map(d =>
                d.GetImageInfo().LoadStaticTexture(b, a)))
        }
        ReleaseAllTextures() {
            for (const b of this._frames) b.GetImageInfo().ReleaseTexture()
        }
        GetName() {
            return this._name
        }
        GetSID() {
            return this._sid
        }
        GetFrameCount() {
            return this._frames.length
        }
        GetFrames() {
            return this._frames
        }
        GetFrameAt(b) {
            b = Math.floor(b);
            if (0 > b || b >= this._frames.length) throw new RangeError("invalid frame");
            return this._frames[b]
        }
        GetSpeed() {
            return this._speed
        }
        IsLooping() {
            return this._isLooping
        }
        GetRepeatCount() {
            return this._repeatCount
        }
        GetRepeatTo() {
            return this._repeatTo
        }
        IsPingPong() {
            return this._isPingPong
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.AnimationFrameInfo = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._imageInfo = e.New(e.ImageInfo);
            this._imageInfo.LoadData(b);
            this._duration = b[7];
            this._origin = e.New(e.Vector2, b[8], b[9]);
            this._imagePoints = b[10].map(a => e.New(e.ImagePoint, this, a));
            this._imagePointsByName = new Map;
            for (const a of this._imagePoints) this._imagePointsByName.set(a.GetName().toLowerCase(), a);
            this._collisionPoly = null;
            b = b[11];
            6 <= b.length && (this._collisionPoly = e.New(e.CollisionPoly, b))
        }
        Release() {
            this._collisionPoly &&
                (this._collisionPoly.Release(), this._collisionPoly = null);
            this._imageInfo.Release();
            this._imageInfo = null
        }
        GetImageInfo() {
            return this._imageInfo
        }
        GetDuration() {
            return this._duration
        }
        GetOriginX() {
            return this._origin.getX()
        }
        GetOriginY() {
            return this._origin.getY()
        }
        GetCollisionPoly() {
            return this._collisionPoly
        }
        GetImagePointByName(b) {
            return this._imagePointsByName.get(b.toLowerCase()) || null
        }
        GetImagePointByIndex(b) {
            b = Math.floor(b);
            return 0 > b || b >= this._imagePoints.length ? null : this._imagePoints[b]
        }
        GetImagePointCount() {
            return this._imagePoints.length
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.ImagePoint = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._afi = b;
            this._name = a[0];
            this._pos = e.New(e.Vector2, a[1], a[2])
        }
        Release() {}
        GetName() {
            return this._name
        }
        GetX() {
            return this._pos.getX()
        }
        GetY() {
            return this._pos.getY()
        }
        GetVec2() {
            return this._pos
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3Debugger,
        a = self.IObjectClass;
    e.ObjectClass = class extends e.DefendedBase {
        constructor(d, c, f) {
            super();
            const k = d.GetObjectReference(f[1]);
            this._runtime = d;
            this._plugin = d.GetPluginManager().GetPluginByConstructorFunction(k);
            this._sdkType = null;
            this._instSdkCtor = k.Instance;
            this._index = c;
            this._sid = f[11];
            this._name = f[0];
            this._jsPropName = this._runtime.GetJsPropName(f[14]);
            this._isGlobal = !!f[9];
            this._isFamily = !!f[2];
            this._isOnLoaderLayout = !!f[10];
            this._instVars = f[3].map(g =>
                ({
                    sid: g[0],
                    type: g[1],
                    name: g[2],
                    jsPropName: d.GetJsPropName(g[3])
                }));
            this._behaviorsCount = f[4];
            this._effectsCount = f[5];
            this._isWorldType = this._plugin.IsWorldType();
            this._effectList = null;
            this._collisionGrid = e.New(e.SparseGrid, d.GetOriginalViewportWidth(), d.GetOriginalViewportHeight());
            this._anyCollisionCellChanged = !0;
            this._anyInstanceParallaxed = !1;
            this._familyMembersSet = this._familyMembers = null;
            this._familyIndex = -1;
            this._familyEffectMap = this._familyBehaviorMap = this._familyInstVarMap = this._familiesSet =
                this._families = null;
            this._isInContainer = !1;
            this._container = null;
            this._behaviorTypes = f[8].map(g => e.BehaviorType.Create(this, g));
            this._behaviorTypesIncludingInherited = [];
            this._behaviorsByName = new Map;
            this._behaviorNameToIndex = new Map;
            this._usedBehaviorCtors = new Set;
            this._solStack = e.New(e.SolStack, this);
            this._defaultInstanceData = null;
            this._defaultLayerIndex = 0;
            this._isContained = !1;
            this._animationsBySid = this._animationsByName = this._animations = this._imageInfo = this._container = null;
            this._textureRefCount =
                0;
            this._savedData = new Map;
            this._unsavedData = new Map;
            this._instances = [];
            this._iidsStale = !0;
            this._plugin.HasEffects() && (this._effectList = e.New(e.EffectList, this, f[12]));
            f[6] && (this._imageInfo = e.New(e.ImageInfo), this._imageInfo.LoadData(f[6]));
            if (f[7]) {
                this._animations = f[7].map(g => e.New(e.AnimationInfo, g));
                this._animationsByName = new Map;
                this._animationsBySid = new Map;
                for (const g of this._animations) this._animationsByName.set(g.GetName().toLowerCase(), g), this._animationsBySid.set(g.GetSID(), g)
            }
            this._isFamily ?
                (this._familyMembers = [], this._familyMembersSet = new Set, this._familyIndex = this._runtime._GetNextFamilyIndex()) : (this._families = [], this._familiesSet = new Set, this._familyInstVarMap = [], this._familyBehaviorMap = [], this._familyEffectMap = []);
            this._sdkType = e.New(k.Type, this, f[15]);
            this._instanceUserScriptClass = this._iObjectClass = null;
            this._userScriptDispatcher = e.New(e.Event.Dispatcher);
            if (c = this._sdkType.GetScriptInterfaceClass()) {
                if (this._iObjectClass = new c(this), !(this._iObjectClass instanceof a)) throw new TypeError("script interface class must derive from IObjectClass");
            } else this._iObjectClass = new a(this);
            f[13] && (c = f[13]) && this._sdkType.LoadTilemapData(c[0], c[1], c[2]);
            this._runtime.UsesLoaderLayout() && !this._isFamily && !this._isOnLoaderLayout && this._isWorldType || this.OnCreate();
            this._plugin.IsSingleGlobal() && (this._plugin._SetSingleGlobalObjectClass(this), this._CreateSingleGlobalInstance(f))
        }
        static Create(d, c, f) {
            return e.New(e.ObjectClass, d, c, f)
        }
        Release() {
            this._imageInfo && (this._imageInfo.Release(), this._imageInfo = null);
            if (this._animations) {
                for (const d of this._animations) d.Release();
                e.clearArray(this._animations);
                this._animationsByName.clear();
                this._animationsBySid.clear()
            }
            this._solStack.Release();
            this._solStack = null;
            this._savedData.clear();
            this._unsavedData.clear();
            this._runtime = this._container = null
        }
        _LoadFamily(d) {
            for (let c = 1, f = d.length; c < f; ++c) {
                const k = this._runtime.GetObjectClassByIndex(d[c]);
                this._familyMembers.push(k);
                this._familyMembersSet.add(k);
                k._families.push(this);
                k._familiesSet.add(this)
            }
        }
        _SetContainer(d) {
            this._isInContainer = !0;
            this._container = d
        }
        IsInContainer() {
            return this._isInContainer
        }
        GetContainer() {
            return this._container
        }
        _OnAfterCreate() {
            var d =
                0;
            if (!this._isFamily)
                for (var c of this._families)
                    for (var f of c.GetBehaviorTypes()) {
                        const l = f.GetName().toLowerCase();
                        this._behaviorsByName.set(l, f);
                        this._behaviorNameToIndex.set(l, d);
                        this._behaviorTypesIncludingInherited.push(f);
                        ++d
                    }
            for (var k of this.GetBehaviorTypes()) c = k.GetName().toLowerCase(), this._behaviorsByName.set(c, k), this._behaviorNameToIndex.set(c, d), this._behaviorTypesIncludingInherited.push(k), ++d;
            for (var g of this._behaviorTypesIncludingInherited) this._usedBehaviorCtors.add(g.GetBehavior().constructor);
            if (!this._isFamily && this._families.length) {
                d = this._runtime.GetFamilyCount();
                e.extendArray(this._familyInstVarMap, d, 0);
                e.extendArray(this._familyBehaviorMap, d, 0);
                e.extendArray(this._familyEffectMap, d, 0);
                d = [];
                c = g = k = 0;
                for (const l of this._families)
                    if (f = l.GetFamilyIndex(), this._familyInstVarMap[f] = k, k += l.GetInstanceVariablesCount(), this._familyBehaviorMap[f] = g, g += l.GetBehaviorTypesCount(), this._familyEffectMap[f] = c, c += l.GetEffectTypesCount(), (f = l.GetEffectList()) && this._effectList)
                        for (const m of f.GetAllEffectTypes()) d.push(m.Clone(this._effectList));
                this._effectList && this._effectList.PrependEffectTypes(d)
            }
        }
        _CreateSingleGlobalInstance(d) {
            const c = this._runtime._GetNewUID(),
                f = e.New(e.Instance, {
                    runtime: this._runtime,
                    objectType: this,
                    uid: c
                });
            f._CreateSdkInstance(d[16], []);
            this._runtime._MapInstanceByUID(c, f);
            this._instances.push(f)
        }
        GetSdkType() {
            return this._sdkType
        }
        IsOnLoaderLayout() {
            return this._isOnLoaderLayout
        }
        OnCreate() {
            this._isFamily || this._sdkType.OnCreate()
        }
        HasLoadedTextures() {
            return 0 < this._textureRefCount
        }
        LoadTextures(d) {
            if (this._isFamily) return Promise.resolve();
            this._textureRefCount++;
            return 1 === this._textureRefCount ? this._sdkType.LoadTextures(d) || Promise.resolve() : Promise.resolve()
        }
        ReleaseTextures() {
            if (!this._isFamily) {
                this._textureRefCount--;
                if (0 > this._textureRefCount) throw Error("released textures too many times");
                0 === this._textureRefCount && this._sdkType.ReleaseTextures()
            }
        }
        OnDynamicTextureLoadComplete() {
            if (this._isFamily) throw Error("not applicable to family");
            this._sdkType.OnDynamicTextureLoadComplete()
        }
        PreloadTexturesWithInstances(d) {
            return this._isFamily ?
                Promise.resolve() : this._sdkType.PreloadTexturesWithInstances(d)
        }
        GetRuntime() {
            return this._runtime
        }
        GetPlugin() {
            return this._plugin
        }
        GetInstanceSdkCtor() {
            return this._instSdkCtor
        }
        GetName() {
            return this._name
        }
        GetJsPropName() {
            return this._jsPropName
        }
        GetIndex() {
            return this._index
        }
        GetSID() {
            return this._sid
        }
        IsFamily() {
            return this._isFamily
        }
        IsGlobal() {
            return this._isGlobal
        }
        IsWorldType() {
            return this._isWorldType
        }
        GetFamilyIndex() {
            return this._familyIndex
        }
        GetBehaviorTypes() {
            return this._behaviorTypes
        }
        GetBehaviorTypesCount() {
            return this._behaviorsCount
        }
        UsesBehaviorByCtor(d) {
            return d &&
                this._usedBehaviorCtors.has(d)
        }
        GetInstanceVariablesCount() {
            return this._instVars.length
        }
        GetInstanceVariableSIDs() {
            return this._instVars.map(d => d.sid)
        }
        GetInstanceVariableIndexBySID(d) {
            return this._instVars.findIndex(c => c.sid === d)
        }
        GetInstanceVariableIndexByName(d) {
            return this._instVars.findIndex(c => c.name === d)
        }
        _GetAllInstanceVariableNames() {
            return this._instVars.map(d => d.name)
        }
        _GetAllInstanceVariableJsPropNames() {
            return this._instVars.map(d => d.jsPropName)
        }
        GetInstanceVariableType(d) {
            d = Math.floor(d);
            if (0 > d || d >= this._instVars.length) throw new RangeError("invalid instance variable index");
            return this._instVars[d].type
        }
        GetInstanceVariableName(d) {
            d = Math.floor(d);
            if (0 > d || d >= this._instVars.length) throw new RangeError("invalid instance variable index");
            return this._instVars[d].name
        }
        GetEffectTypesCount() {
            return this._effectsCount
        }
        GetBehaviorTypesIncludingInherited() {
            return this._behaviorTypesIncludingInherited
        }
        GetBehaviorTypeByName(d) {
            return this._behaviorsByName.get(d.toLowerCase()) || null
        }
        GetBehaviorIndexByName(d) {
            d =
                this._behaviorNameToIndex.get(d.toLowerCase());
            return "undefined" === typeof d ? -1 : d
        }
        GetEffectList() {
            return this._effectList
        }
        HasEffects() {
            return this._plugin.HasEffects()
        }
        UsesEffects() {
            return this._effectList && this._effectList.HasAnyEffectType()
        }
        GetSolStack() {
            return this._solStack
        }
        GetCurrentSol() {
            return this._solStack.GetCurrentSol()
        }
        GetImageInfo() {
            return this._imageInfo
        }
        SetDefaultInstanceData(d) {
            this._defaultInstanceData = d
        }
        GetDefaultInstanceData() {
            return this._defaultInstanceData
        }
        _SetDefaultLayerIndex(d) {
            this._defaultLayerIndex =
                d
        }
        GetDefaultLayerIndex() {
            return this._defaultLayerIndex
        }
        GetAnimations() {
            return this._animations
        }
        GetAnimationCount() {
            return this._animations.length
        }
        GetFamilies() {
            return this._families
        }
        BelongsToFamily(d) {
            return this._familiesSet.has(d)
        }
        GetFamilyMembers() {
            return this._familyMembers
        }
        FamilyHasMember(d) {
            return this._familyMembersSet.has(d)
        }
        GetFamilyBehaviorOffset(d) {
            return this._familyBehaviorMap[d]
        }
        GetFamilyInstanceVariableOffset(d) {
            return this._familyInstVarMap[d]
        }
        GetAnimationByName(d) {
            if (!this._animations) throw Error("no animations");
            return this._animationsByName.get(d.toLowerCase()) || null
        }
        GetAnimationBySID(d) {
            if (!this._animations) throw Error("no animations");
            return this._animationsBySid.get(d) || null
        }
        GetFirstAnimationFrame() {
            if (!this._animations) throw Error("no animations");
            return this._animations[0].GetFrameAt(0)
        }
        GetDefaultInstanceSize() {
            if (this._animations) {
                const d = this.GetFirstAnimationFrame().GetImageInfo();
                return [d.GetWidth(), d.GetHeight()]
            }
            return this._imageInfo ? [this._imageInfo.GetWidth(), this._imageInfo.GetHeight()] : [100,
                100
            ]
        }
        GetSingleGlobalInstance() {
            if (!this._plugin.IsSingleGlobal()) throw Error("not a single-global plugin");
            return this._instances[0]
        }
        GetInstances() {
            return this._instances
        }* instances() {
            yield* this._instances
        }* instancesIncludingPendingCreate() {
            yield* this._instances;
            for (const d of this._runtime._GetInstancesPendingCreate()) d.GetObjectClass() === this && (yield d)
        }
        GetInstanceCount() {
            return this._instances.length
        }
        _AddInstance(d) {
            this._instances.push(d)
        }
        _SetIIDsStale() {
            this._iidsStale = !0
        }
        _UpdateIIDs() {
            if (this._iidsStale &&
                !this._isFamily) {
                var d = this._instances,
                    c = 0;
                for (let f = d.length; c < f; ++c) d[c]._SetIID(c);
                d = this._runtime._GetInstancesPendingCreate();
                for (const f of d) f.GetObjectClass() === this && f._SetIID(c++);
                this._iidsStale = !1
            }
        }
        GetInstanceByIID(d) {
            var c = this._instances;
            if (d < c.length) return c[d];
            d -= c.length;
            c = this._runtime._GetInstancesPendingCreate();
            for (const f of c)
                if (f.GetObjectClass() === this) {
                    if (0 === d) return f;
                    --d
                }
            return null
        }
        GetFirstPicked(d) {
            if (d && d.IsInContainer() && d.GetObjectClass() !== this)
                for (const c of d.siblings())
                    if (c.GetObjectClass() ===
                        this) return c;
            d = this.GetCurrentSol().GetInstances();
            return d.length ? d[0] : null
        }
        GetPairedInstance(d) {
            const c = this.GetCurrentSol().GetInstances();
            return 0 < c.length ? c[d.GetIID() % c.length] : null
        }* allCorrespondingInstances(d, c) {
            const f = this.GetCurrentSol().GetInstances();
            var k = f.length;
            const g = c.GetCurrentSol(),
                l = c.GetCurrentSol().GetInstances(),
                m = l.length;
            var u = d.GetIID();
            if (c.IsFamily() || !g.IsSelectAll()) u = l.indexOf(d);
            d = Math.ceil(k / m);
            k %= m;
            0 === k || u < k ? (u *= d, k = d) : (u = k * d + (u - k) * (d - 1), k = d - 1);
            for (let x = u, p =
                    u + k; x < p; ++x) yield f[x]
        }
        FinishCondition(d) {
            this._sdkType.FinishCondition(d)
        }
        ApplySolToContainer() {
            if (this._isInContainer && !this._isFamily) {
                this._UpdateIIDs();
                var d = this.GetCurrentSol(),
                    c = d._GetOwnInstances(),
                    f = d.IsSelectAll(),
                    k = this._runtime.GetCurrentEventStackFrame();
                k = k && k.GetCurrentEvent() && k.GetCurrentEvent().IsOrBlock();
                for (const m of this._container.objectTypes())
                    if (m !== this) {
                        m._UpdateIIDs();
                        var g = m.GetCurrentSol();
                        g._SetSelectAll(f);
                        if (!f) {
                            var l = g._GetOwnInstances();
                            e.clearArray(l);
                            for (const u of c) l.push(m.GetInstanceByIID(u.GetIID()));
                            if (k) {
                                l = d._GetOwnElseInstances();
                                g = g._GetOwnElseInstances();
                                e.clearArray(g);
                                for (const u of l) g.push(m.GetInstanceByIID(u.GetIID()))
                            }
                        }
                    }
            }
        }
        _TruncateContainerSols(d, c) {
            for (const f of this.GetContainer().objectTypes()) {
                const k = f.GetCurrentSol();
                d ? e.truncateArray(k._GetOwnElseInstances(), c) : e.truncateArray(k._GetOwnInstances(), c)
            }
        }
        _GetCollisionCellGrid() {
            return this._collisionGrid
        }
        _SetAnyCollisionCellChanged(d) {
            this._anyCollisionCellChanged = !!d
        }
        _SetAnyInstanceParallaxed(d) {
            this._anyInstanceParallaxed = !!d
        }
        IsAnyInstanceParallaxed() {
            return this._anyInstanceParallaxed
        }
        _UpdateAllCollisionCells() {
            if (this._anyCollisionCellChanged &&
                this._isWorldType) {
                for (const d of this._instances) d.GetWorldInfo()._UpdateCollisionCell();
                for (const d of this._runtime._GetInstancesPendingCreate()) d.GetObjectClass() === this && d.GetWorldInfo()._UpdateCollisionCell();
                this._anyCollisionCellChanged = !1
            }
        }
        GetSavedDataMap() {
            this._savedData || (this._savedData = new Map);
            return this._savedData
        }
        GetUnsavedDataMap() {
            this._unsavedData || (this._unsavedData = new Map);
            return this._unsavedData
        }
        HasSolidBehavior() {
            return this.UsesBehaviorByCtor(e.Behaviors.solid)
        }
        HasNoSaveBehavior() {
            return this.UsesBehaviorByCtor(e.Behaviors.NoSave)
        }
        HasPersistBehavior() {
            return this.UsesBehaviorByCtor(e.Behaviors.Persist)
        }
        _SaveToJson() {
            const d = {
                instances: this._instances.map(c => c.SaveToJson())
            };
            this._savedData && this._savedData.size && (d.ex = e.ToSuperJSON(this._savedData));
            return d
        }
        _LoadFromJson(d) {
            this._savedData && (this._savedData.clear(), this._savedData = null);
            var c = d.ex;
            c && (this._savedData = e.FromSuperJSON(c));
            c = this._instances;
            d = d.instances;
            for (let f = 0, k = Math.min(c.length, d.length); f < k; ++f) c[f].LoadFromJson(d[f]);
            for (let f = d.length, k = c.length; f < k; ++f) this._runtime.DestroyInstance(c[f]);
            for (let f = c.length, k = d.length; f < k; ++f) {
                c = d[f];
                let g =
                    null;
                if (this.IsWorldType() && (g = this._runtime.GetMainRunningLayout().GetLayerBySID(c.w.l), !g)) continue;
                this._runtime.CreateInstanceFromData(this._defaultInstanceData || this, g, !1, 0, 0, !0).LoadFromJson(c)
            }
            this._SetIIDsStale()
        }
        GetIObjectClass() {
            return this._iObjectClass
        }
        UserScriptDispatcher() {
            return this._userScriptDispatcher
        }
        _GetUserScriptInstanceClass() {
            return this._instanceUserScriptClass
        }
        _SetUserScriptInstanceClass(d) {
            this._instanceUserScriptClass = d
        }
        DispatchUserScriptEvent(d) {
            var c = this._runtime;
            (c =
                c.IsDebug() && !c.GetEventSheetManager().IsInEventEngine()) && b.StartMeasuringScriptTime();
            this._userScriptDispatcher.dispatchEvent(d);
            c && b.AddScriptTime()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Container = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._runtime = b;
            this._objectTypes = a;
            for (const d of this._objectTypes) d._SetContainer(this)
        }
        Release() {
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectTypes() {
            return this._objectTypes
        }
        objectTypes() {
            return this._objectTypes
        }
        HasAnyWorldType() {
            return this._objectTypes.some(b => b.IsWorldType())
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3Debugger,
        a = self.IInstance,
        d = [];
    let c = 0;
    const f = new WeakMap,
        k = new WeakMap;
    e.Instance = class extends e.DefendedBase {
        constructor(g) {
            super();
            this._runtime = g.runtime;
            this._objectType = g.objectType;
            this._iScriptInterface = this._sdkInst = this._worldInfo = null;
            this._iid = 0;
            this._uid = g.uid;
            this._puid = c++;
            this._flags = 0;
            this._behaviorInstances = this._instVarValues = d;
            var l = this._objectType.GetBehaviorTypesIncludingInherited();
            0 < l.length && (this._behaviorInstances = l.map((m, u) => e.New(e.BehaviorInstance, {
                runtime: this._runtime,
                behaviorType: m,
                instance: this,
                index: u
            })));
            this._siblings = this._objectType.IsInContainer() ? [] : null;
            this._timeScale = -1;
            this._dispatcher = null;
            l = this.GetPlugin();
            l.MustPreDraw() && (this._flags |= 4);
            if (l.IsWorldType())
                if (this._worldInfo = e.New(e.WorldInfo, this, g.layer), g.worldData) this._worldInfo.Init(g.worldData);
                else {
                    this._worldInfo.InitNoData();
                    const [m, u] = this._objectType.GetDefaultInstanceSize();
                    this._worldInfo.SetSize(m, u);
                    this.GetObjectClass().UsesEffects() && this._worldInfo.GetInstanceEffectList().LoadDefaultEffectParameters()
                }
            g.instVarData ?
                this._LoadInstanceVariableData(g.instVarData) : this._LoadDefaultInstanceVariables()
        }
        Release() {
            this._iScriptInterface && (this._iScriptInterface._Release(), this._iScriptInterface = null);
            if (0 < this._behaviorInstances.length) {
                for (var g of this._behaviorInstances) g.Release();
                e.clearArray(this._behaviorInstances)
            }
            this._sdkInst.Release();
            this._sdkInst = null;
            if (g = f.get(this)) g.clear(), f.delete(this);
            if (g = k.get(this)) g.clear(), k.delete(this);
            this._siblings && e.clearArray(this._siblings);
            this._dispatcher && (this._dispatcher.Release(),
                this._dispatcher = null);
            this._objectType = this._runtime = null;
            0 < this._instVarValues.length && e.clearArray(this._instVarValues);
            this._worldInfo && (this._worldInfo.Release(), this._worldInfo = null)
        }
        _LoadInstanceVariableData(g) {
            0 < g.length && (this._instVarValues = [], e.shallowAssignArray(this._instVarValues, g))
        }
        _LoadDefaultInstanceVariables() {
            const g = this._objectType.GetInstanceVariablesCount();
            if (0 !== g) {
                this._instVarValues = [];
                var l = [0, 0, ""];
                for (let m = 0; m < g; ++m) this._instVarValues.push(l[this._objectType.GetInstanceVariableType(m)])
            }
        }
        _CreateSdkInstance(g,
            l) {
            if (this._sdkInst) throw Error("already got sdk instance");
            for (let m = 0, u = this._behaviorInstances.length; m < u; ++m) this._behaviorInstances[m]._CreateSdkInstance(l ? l[m] : null);
            this._sdkInst = e.New(this._objectType.GetInstanceSdkCtor(), this, g);
            if (!(this._sdkInst instanceof e.SDKInstanceBase)) throw Error("sdk type must derive from SDKInstanceBase");
            for (let m = 0, u = this._behaviorInstances.length; m < u; ++m) this._behaviorInstances[m].PostCreate();
            this._objectType._GetUserScriptInstanceClass() && this._InitUserScriptInterface()
        }
        GetSdkInstance() {
            return this._sdkInst
        }
        GetWorldInfo() {
            return this._worldInfo
        }
        GetRuntime() {
            return this._runtime
        }
        GetTimeScale() {
            return this._timeScale
        }
        GetActiveTimeScale() {
            const g =
                this._timeScale;
            return -1 === g ? this.GetRuntime().GetTimeScale() : g
        }
        SetTimeScale(g) {
            g = +g;
            if (0 > g || !isFinite(g)) g = 0;
            this._timeScale = g
        }
        RestoreTimeScale() {
            this._timeScale = -1
        }
        Dispatcher() {
            this._dispatcher || (this._dispatcher = e.New(e.Event.Dispatcher));
            return this._dispatcher
        }
        Draw(g) {
            this._sdkInst.Draw(g)
        }
        OnCreate(g) {
            this._sdkInst.OnCreate(g)
        }
        _SetHasTilemap() {
            this._flags |= 2
        }
        HasTilemap() {
            return 0 !== (this._flags & 2)
        }
        _MarkDestroyed() {
            this._flags |= 1
        }
        IsDestroyed() {
            return 0 !== (this._flags & 1)
        }
        MustPreDraw() {
            return 0 !==
                (this._flags & 4)
        }
        SetMustMitigateZFighting() {
            this._flags |= 32
        }
        MustMitigateZFighting() {
            return 0 !== (this._flags & 32)
        }
        _IsSolidEnabled() {
            return 0 !== (this._flags & 8)
        }
        _SetSolidEnabled(g) {
            this._flags = g ? this._flags | 8 : this._flags & -9
        }
        _IsJumpthruEnabled() {
            return 0 !== (this._flags & 16)
        }
        _SetJumpthruEnabled(g) {
            this._flags = g ? this._flags | 16 : this._flags & -17
        }
        SetFlag(g, l) {
            g <<= 16;
            this._flags = l ? this._flags | g : this._flags & ~g
        }
        GetFlag(g) {
            return 0 !== (this._flags & g << 16)
        }
        GetCurrentImageInfo() {
            return this._sdkInst.GetCurrentImageInfo()
        }
        GetCurrentSurfaceSize() {
            return this._sdkInst.GetCurrentSurfaceSize()
        }
        GetCurrentTexRect() {
            return this._sdkInst.GetCurrentTexRect()
        }
        GetCurrentTexQuad() {
            return this._sdkInst.GetCurrentTexQuad()
        }
        GetImagePoint(g) {
            return this._sdkInst.GetImagePoint(g)
        }
        GetObjectClass() {
            return this._objectType
        }
        RendersToOwnZPlane() {
            return this._sdkInst.RendersToOwnZPlane()
        }
        BelongsToObjectClass(g) {
            return g.IsFamily() ?
                g.FamilyHasMember(this.GetObjectClass()) : this.GetObjectClass() === g
        }
        VerifySupportsSceneGraph() {
            if (!this.GetPlugin().SupportsSceneGraph()) throw Error("object does not support scene graph");
        }
        HasParent() {
            return null !== this.GetParent()
        }
        GetParent() {
            var g = this.GetWorldInfo();
            return g ? (g = g.GetParent()) ? g.GetInstance() : null : null
        }
        GetTopParent() {
            var g = this.GetWorldInfo();
            return g ? (g = g.GetTopParent()) ? g.GetInstance() : null : null
        }* parents() {
            const g = this.GetWorldInfo();
            if (g)
                for (const l of g.parents()) yield l.GetInstance()
        }
        HasChildren() {
            const g =
                this.GetWorldInfo();
            return g ? g.HasChildren() : !1
        }
        GetChildren() {
            const g = this.GetWorldInfo();
            return g ? g.GetChildren().map(l => l.GetInstance()) : []
        }* children() {
            const g = this.GetWorldInfo();
            if (g)
                for (const l of g.children()) yield l.GetInstance()
        }* allChildren() {
            const g = this.GetWorldInfo();
            if (g)
                for (const l of g.allChildren()) yield l.GetInstance()
        }
        GetChildCount() {
            const g = this.GetWorldInfo();
            return g ? g.GetChildCount() : 0
        }
        GetChildAt(g) {
            const l = this.GetWorldInfo();
            return l ? (g = l.GetChildAt(g)) ? g.GetInstance() : null :
                null
        }
        AddChild(g, l) {
            this.VerifySupportsSceneGraph();
            g.VerifySupportsSceneGraph();
            this.GetWorldInfo().AddChild(g.GetWorldInfo(), l || {})
        }
        RemoveChild(g) {
            const l = this.GetWorldInfo();
            l && l.RemoveChild(g.GetWorldInfo())
        }
        GetDestroyWithParent() {
            const g = this.GetWorldInfo();
            return g ? g.GetDestroyWithParent() : !1
        }
        SetupInitialSceneGraphConnections() {
            var g = this.GetWorldInfo();
            if (g && (g = g.GetSceneGraphChildrenExportData()))
                for (const l of g)
                    if (g = this._runtime.GetInstanceByUID(l[2])) {
                        const m = l[3];
                        this.AddChild(g, {
                            transformX: !!(m >>
                                0 & 1),
                            transformY: !!(m >> 1 & 1),
                            transformWidth: !!(m >> 2 & 1),
                            transformHeight: !!(m >> 3 & 1),
                            transformAngle: !!(m >> 4 & 1),
                            destroyWithParent: !!(m >> 5 & 1),
                            transformZElevation: !!(m >> 6 & 1)
                        })
                    }
        }
        IsInContainer() {
            return null !== this._siblings
        }
        _AddSibling(g) {
            this._siblings.push(g)
        }
        GetSiblings() {
            return this._siblings
        }
        HasSibling(g) {
            return !!this.GetSibling(g)
        }
        GetSibling(g) {
            const l = this.siblings();
            if (null === l || 0 === l.length) return !1;
            for (const m of l)
                if (m.GetObjectClass() === g) return m;
            return null
        }
        siblings() {
            return this._siblings
        }
        SetSiblingsSinglePicked() {
            for (const g of this.siblings()) g.GetObjectClass().GetCurrentSol().SetSinglePicked(g)
        }
        _PushSiblingsToSolInstances() {
            for (const g of this.siblings()) g.GetObjectClass().GetCurrentSol()._PushInstance(g)
        }
        _SetSiblingsToSolInstancesIndex(g) {
            for (const l of this.siblings()) l.GetObjectClass().GetCurrentSol()._GetOwnInstances()[g] =
                l
        }
        _PushSiblingsToSolElseInstances() {
            for (const g of this.siblings()) g.GetObjectClass().GetCurrentSol()._PushElseInstance(g)
        }
        _SetSiblingsToSolElseInstancesIndex(g) {
            for (const l of this.siblings()) l.GetObjectClass().GetCurrentSol()._GetOwnElseInstances()[g] = l
        }
        GetPlugin() {
            return this._objectType.GetPlugin()
        }
        _SetIID(g) {
            this._iid = g
        }
        GetIID() {
            this._objectType._UpdateIIDs();
            return this._iid
        }
        GetUID() {
            return this._uid
        }
        GetPUID() {
            return this._puid
        }
        GetBehaviorInstances() {
            return this._behaviorInstances
        }
        GetBehaviorInstanceFromCtor(g) {
            if (!g) return null;
            for (const l of this._behaviorInstances)
                if (l.GetBehavior() instanceof g) return l;
            return null
        }
        GetBehaviorSdkInstanceFromCtor(g) {
            return g ? (g = this.GetBehaviorInstanceFromCtor(g)) ? g.GetSdkInstance() : null : null
        }
        GetBehaviorIndexBySID(g) {
            const l = this._behaviorInstances;
            for (let m = 0, u = l.length; m < u; ++m)
                if (l[m].GetBehaviorType().GetSID() === g) return m;
            return -1
        }
        GetAllInstanceVariableValues() {
            return this._instVarValues
        }
        _GetAllInstanceVariableNames() {
            return this._objectType._GetAllInstanceVariableNames()
        }
        GetInstanceVariableCount() {
            return this._instVarValues.length
        }
        GetInstanceVariableValue(g) {
            g |=
                0;
            const l = this._instVarValues;
            if (0 > g || g >= l.length) throw new RangeError("invalid instance variable");
            return l[g]
        }
        _GetInstanceVariableValueUnchecked(g) {
            return this._instVarValues[g]
        }
        _GetInstanceVariableTypedValue(g) {
            const l = this._instVarValues[g];
            return 0 === this._objectType.GetInstanceVariableType(g) ? !!l : l
        }
        SetInstanceVariableValue(g, l) {
            g |= 0;
            const m = this._instVarValues;
            if (0 > g || g >= m.length) throw new RangeError("invalid instance variable");
            switch (this._objectType.GetInstanceVariableType(g)) {
                case 0:
                    m[g] =
                        l ? 1 : 0;
                    break;
                case 1:
                    m[g] = "number" === typeof l ? l : parseFloat(l);
                    break;
                case 2:
                    m[g] = "string" === typeof l ? l : l.toString();
                    break;
                default:
                    throw Error("unknown instance variable type");
            }
        }
        SetInstanceVariableOffset(g, l) {
            if (0 !== l) {
                g |= 0;
                var m = this._instVarValues;
                if (0 > g || g >= m.length) throw new RangeError("invalid instance variable");
                var u = m[g];
                if ("number" === typeof u) m[g] = "number" === typeof l ? m[g] + l : m[g] + parseFloat(l);
                else {
                    if ("boolean" === typeof u) throw Error("can not set offset of boolean variable");
                    if ("string" === typeof u) throw Error("can not set offset of string variable");
                    throw Error("unknown instance variable type");
                }
            }
        }
        GetSavedDataMap() {
            let g = f.get(this);
            if (g) return g;
            g = new Map;
            f.set(this, g);
            return g
        }
        GetUnsavedDataMap() {
            let g = k.get(this);
            if (g) return g;
            g = new Map;
            k.set(this, g);
            return g
        }
        _HasAnyCreateDestroyHandler(g) {
            const l = this.GetObjectClass();
            if (l.UserScriptDispatcher().HasAnyHandlerFor(g)) return !0;
            for (const m of l.GetFamilies())
                if (m.UserScriptDispatcher().HasAnyHandlerFor(g)) return !0;
            return this._runtime.UserScriptDispatcher().HasAnyHandlerFor(g) ? !0 : !1
        }
        _TriggerOnCreatedOnSelfAndRelated() {
            const g =
                new Set;
            g.add(this);
            const l = this.GetWorldInfo();
            if (l && l.HasChildren())
                for (const m of this.allChildren())
                    if (g.add(m), m.IsInContainer())
                        for (const u of m.siblings()) g.add(u);
            if (this.IsInContainer())
                for (const m of this.siblings()) g.add(m);
            for (const m of g.values()) m._TriggerOnCreated()
        }
        _TriggerOnCreated() {
            if (this._HasAnyCreateDestroyHandler("instancecreate")) {
                const g = this.GetObjectClass(),
                    l = new e.Event("instancecreate");
                l.instance = this.GetInterfaceClass();
                g.DispatchUserScriptEvent(l);
                for (const m of g.GetFamilies()) m.DispatchUserScriptEvent(l);
                this._runtime.DispatchUserScriptEvent(l)
            }
            this._runtime.Trigger(this.GetPlugin().constructor.Cnds.OnCreated, this, null)
        }
        _TriggerOnDestroyed() {
            this._runtime.Trigger(this.GetPlugin().constructor.Cnds.OnDestroyed, this, null)
        }
        _FireDestroyedScriptEvents(g) {
            if (this._iScriptInterface) {
                var l = new e.Event("destroy");
                l.isEndingLayout = g;
                this.DispatchUserScriptEvent(l)
            }
            if (this._HasAnyCreateDestroyHandler("instancedestroy")) {
                l = this.GetObjectClass();
                var m = new e.Event("instancedestroy");
                m.instance = this.GetInterfaceClass();
                m.isEndingLayout = g;
                l.DispatchUserScriptEvent(m);
                for (const u of l.GetFamilies()) u.DispatchUserScriptEvent(m);
                this._runtime.DispatchUserScriptEvent(m)
            }
        }
        _GetDebuggerProperties() {
            return this._sdkInst.GetDebuggerProperties()
        }
        SaveToJson(g = "full") {
            const l = {};
            "full" === g ? l.uid = this.GetUID() : l.c3 = !0;
            if ("visual-state" !== g) {
                var m = f.get(this);
                m && m.size && (l.ex = e.ToSuperJSON(m)); - 1 !== this.GetTimeScale() && (l.mts = this.GetTimeScale());
                if (0 < this._objectType.GetInstanceVariablesCount()) {
                    m = {};
                    var u = this._objectType.GetInstanceVariableSIDs();
                    for (let x = 0, p = this._instVarValues.length; x < p; ++x) m[u[x].toString()] = this._instVarValues[x];
                    l.ivs = m
                }
                if (this._behaviorInstances.length) {
                    m = {};
                    for (const x of this._behaviorInstances)(u = x.SaveToJson()) && (m[x.GetBehaviorType().GetSID().toString()] = u);
                    l.behs = m
                }
            }
            this._worldInfo && (l.w = this._worldInfo._SaveToJson(g));
            (g = this._sdkInst.SaveToJson()) && (l.data = g);
            return l
        }
        _OnBeforeLoad(g = "full") {
            this._worldInfo && this._worldInfo._OnBeforeLoad(g)
        }
        LoadFromJson(g, l = "full") {
            if ("full" === l) this._uid = g.uid;
            else if (!g.c3) return;
            if ("visual-state" !== l) {
                var m = f.get(this);
                m && (m.clear(), f.delete(this));
                if (m = g.ex) m = e.FromSuperJSON(m), f.set(this, m);
                this._timeScale = g.hasOwnProperty("mts") ? g.mts : -1;
                if (m = g.ivs)
                    for (const [p, r] of Object.entries(m))
                        if (m = parseInt(p, 10), m = this._objectType.GetInstanceVariableIndexBySID(m), !(0 > m || m >= this._instVarValues.length)) {
                            var u = r;
                            null === u && (u = NaN);
                            this._instVarValues[m] = u
                        }
            }
            if (this.GetPlugin().IsWorldType()) {
                m = g.w;
                var x = m.l;
                this._worldInfo.GetLayer().GetSID() !== x && (u = this._worldInfo.GetLayer(), (x = u.GetLayout().GetLayerBySID(x)) ?
                    (this._worldInfo._SetLayer(x), u._RemoveInstance(this, !0), x._AddInstance(this, !0), x.SetZIndicesChanged(), this._worldInfo.SetBboxChanged()) : "full" === l && this._runtime.DestroyInstance(this));
                this._worldInfo._LoadFromJson(m, l)
            }
            if ("visual-state" !== l && (l = g.behs))
                for (const [p, r] of Object.entries(l)) l = parseInt(p, 10), l = this.GetBehaviorIndexBySID(l), 0 > l || l >= this._behaviorInstances.length || this._behaviorInstances[l].LoadFromJson(r);
            (g = g.data) && this._sdkInst.LoadFromJson(g)
        }
        GetInterfaceClass() {
            return this._iScriptInterface ||
                this._InitUserScriptInterface()
        }
        _InitUserScriptInterface() {
            var g = this._worldInfo ? self.IWorldInstance : a;
            const l = this._sdkInst.GetScriptInterfaceClass(),
                m = this._objectType._GetUserScriptInstanceClass(),
                u = m || l || g;
            a._Init(this);
            this._iScriptInterface = new u;
            a._Init(null);
            if (l && !(this._iScriptInterface instanceof g)) throw new TypeError(`script interface class '${l.name}' does not extend the right base class '${g.name}'`);
            if (m && (g = l || g, !(this._iScriptInterface instanceof g))) throw new TypeError(`setInstanceClass(): class '${m.name}' does not extend the right base class '${g.name}'`);
            return this._iScriptInterface
        }
        _GetInstVarsScriptDescriptor(g) {
            if (0 !== this._instVarValues.length) {
                var l = {},
                    m = this._objectType._GetAllInstanceVariableJsPropNames();
                for (let u = 0, x = m.length; u < x; ++u) l[m[u]] = {
                    configurable: !1,
                    enumerable: !0,
                    get: e.Instance.prototype._GetInstanceVariableTypedValue.bind(this, u),
                    set: e.Instance.prototype.SetInstanceVariableValue.bind(this, u)
                };
                l = Object.create(Object.prototype, l);
                g.instVars = {
                    value: l,
                    writable: !1
                }
            }
        }
        _GetBehaviorsScriptDescriptor(g) {
            var l = this._behaviorInstances;
            if (0 !==
                l.length) {
                var m = {};
                for (const u of l) m[u.GetBehaviorType().GetJsPropName()] = {
                    value: u.GetScriptInterface(),
                    writable: !1
                };
                l = Object.create(Object.prototype, m);
                g.behaviors = {
                    value: l,
                    writable: !1
                }
            }
        }
        DispatchUserScriptEvent(g) {
            g.instance = this.GetInterfaceClass();
            var l = this._runtime;
            (l = l.IsDebug() && !l.GetEventSheetManager().IsInEventEngine()) && b.StartMeasuringScriptTime();
            this.GetInterfaceClass().dispatchEvent(g);
            l && b.AddScriptTime()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SceneGraphInfo = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._owner = b;
            this._parent = null;
            this._children = [];
            this._startWidth = b.GetWidth();
            this._startHeight = b.GetHeight();
            this._startScaleY = this._startScaleX = 1;
            this._parentStartAngle = 0
        }
        Release() {
            this._parent = null;
            e.clearArray(this._children)
        }
        SetParent(b) {
            this._parentStartAngle = (this._parent = b) ? b.GetAngle() : 0
        }
        GetParent() {
            return this._parent
        }
        HasChildren() {
            return 0 < this._children.length
        }
        GetChildren() {
            return this._children
        }
        GetStartScaleX() {
            return this._startScaleX
        }
        SetStartScaleX(b) {
            this._startScaleX =
                b
        }
        GetStartScaleY() {
            return this._startScaleY
        }
        SetStartScaleY(b) {
            this._startScaleY = b
        }
        _GetStartWidth() {
            return this._startWidth
        }
        _GetStartHeight() {
            return this._startHeight
        }
        GetParentScaleX() {
            return this._owner.GetTransformWithParentWidth() ? this._parent.GetWidth() / this._parent._GetSceneGraphInfo()._GetStartWidth() : 1
        }
        GetParentScaleY() {
            return this._owner.GetTransformWithParentHeight() ? this._parent.GetHeight() / this._parent._GetSceneGraphInfo()._GetStartHeight() : 1
        }
        GetParentStartAngle() {
            return this._parentStartAngle
        }
        _SaveToJson() {
            return {
                sw: this._startWidth,
                sh: this._startHeight,
                sx: this._startScaleX,
                sy: this._startScaleY,
                psa: this._parentStartAngle,
                c: this._children.map(b => {
                    let a = "";
                    b.GetTransformWithParentX() && (a += "x");
                    b.GetTransformWithParentY() && (a += "y");
                    b.GetTransformWithParentWidth() && (a += "w");
                    b.GetTransformWithParentHeight() && (a += "h");
                    b.GetTransformWithParentAngle() && (a += "a");
                    b.GetTransformWithParentZElevation() && (a += "z");
                    b.GetDestroyWithParent() && (a += "d");
                    return {
                        uid: b.GetInstance().GetUID(),
                        f: a
                    }
                })
            }
        }
        _LoadFromJson(b) {
            this._startWidth = b.sw;
            this._startHeight =
                b.sh;
            this._startScaleX = b.sx;
            this._startScaleY = b.sy;
            this._parentStartAngle = b.psa
        }
        _OnAfterLoad(b) {
            const a = this._owner,
                d = a.GetRuntime();
            for (const c of b.c) {
                b = d.GetInstanceByUID(c.uid).GetWorldInfo();
                const f = c.f,
                    k = {};
                k.transformX = f.includes("x");
                k.transformY = f.includes("y");
                k.transformWidth = f.includes("w");
                k.transformHeight = f.includes("h");
                k.transformAngle = f.includes("a");
                k.transformZElevation = f.includes("z");
                k.destroyWithParent = f.includes("d");
                a.AddChild(b, k)
            }
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = e.New(e.Rect),
        a = e.New(e.Quad),
        d = e.New(e.Event, "bboxchange", !1),
        c = e.New(e.Color, 0, 0, 0, 0),
        f = e.New(e.CollisionPoly),
        k = e.New(e.Color, 1, 1, 1, 1),
        g = e.New(e.Rect, 0, 0, -1, -1),
        l = e.New(e.Rect, 0, 0, -1, -1),
        m = new Set(["absolute", "relative"]),
        u = [];
    let x = !0;
    e.WorldInfo = class extends e.DefendedBase {
        constructor(p, r) {
            super();
            this._inst = p;
            this._objectClass = p.GetObjectClass();
            this._runtime = p.GetRuntime();
            this._layer = r;
            this._zIndex = -1;
            this._flags = 196635;
            this._objectClass.GetPlugin().IsRotatable() &&
                (this._flags |= 128);
            this._oy = this._ox = this._cosA = this._sinA = this._a = this._depth = this._h = this._w = this._zElevation = this._y = this._x = NaN;
            this._boundingBox = e.New(e.Rect);
            this._boundingQuad = e.New(e.Quad);
            this._collisionCells = l;
            this._renderCells = g;
            this._solidFilterTags = this._transformedPolyInfo = this._sourceCollisionPoly = null;
            this._colorPremultiplied = this._color = k;
            this._instanceEffectList = this._stateGroup = null;
            this._inst.GetObjectClass().UsesEffects() && (this._instanceEffectList = e.New(e.InstanceEffectList,
                this._inst, this));
            this._sceneGraphInfo = null;
            this._sceneGraphFlagsExportData = NaN;
            this._sceneGraphChildrenExportData = null;
            this._sceneGraphZIndex = this._sceneGraphZIndexExportData = NaN;
            this._meshInfo = null
        }
        _MarkDestroyed() {
            this._flags |= 256
        }
        Release() {
            this._stateGroup && (this._runtime.GetRenderer().ReleaseStateGroup(this._stateGroup), this._stateGroup = null);
            this._sourceCollisionPoly = null;
            this._transformedPolyInfo && (this._transformedPolyInfo.poly.Release(), this._transformedPolyInfo = null);
            this._solidFilterTags &&
                (this._solidFilterTags.clear(), this._solidFilterTags = null);
            this.ReleaseMesh();
            this.HasParent() && this.GetParent().RemoveChild(this);
            if (this.HasChildren()) {
                const p = [...this.GetChildren()];
                for (const r of p) this.RemoveChild(r)
            }
            this._ReleaseSceneGraphInfo();
            this._layer = this._runtime = this._objectClass = this._inst = null
        }
        Init(p) {
            x = !1;
            this.SetXY(p[0], p[1]);
            this.SetZElevation(p[2]);
            this.SetSize(p[3], p[4]);
            this._depth = 0;
            this.IsRotatable() ? this.SetAngle(p[6]) : this._a = 0;
            c.setFromJSON(p[7]);
            this._SetColor(c);
            this.SetOriginX(p[8]);
            this.SetOriginY(p[9]);
            this.SetBlendMode(p[10]);
            this._instanceEffectList && this._instanceEffectList._LoadEffectParameters(p[12]);
            p[14] && (this._sceneGraphFlagsExportData = p[14][0], this._sceneGraphChildrenExportData = p[14][1], this._sceneGraphZIndexExportData = p[14][2]);
            if (p[15]) {
                var r = p[15];
                this.CreateMesh(r[0], r[1]);
                p = this.GetSourceMesh();
                r = r[2];
                for (let t = 0, q = r.length; t < q; ++t) {
                    const w = r[t];
                    for (let y = 0, C = w.length; y < C; ++y) {
                        const F = w[y],
                            H = p.GetMeshPointAt(y, t);
                        H.SetX(F[0]);
                        H.SetY(F[1]);
                        H.SetZElevation(F[2]);
                        H.SetU(F[3]);
                        H.SetV(F[4])
                    }
                }
            }
            x = !0;
            this._UpdateRendererStateGroup()
        }
        InitNoData() {
            this._sinA = this._a = this._depth = this._h = this._w = this._zElevation = this._y = this._x = 0;
            this._cosA = 1;
            this._oy = this._ox = 0;
            this._UpdateRendererStateGroup()
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetInstance() {
            return this._inst
        }
        _GetParentOffsetAngle() {
            return this.GetTransformWithParentAngle() ? this.GetParent().GetAngle() - this._sceneGraphInfo.GetParentStartAngle() : 0
        }
        SetX(p) {
            p = +p;
            if (this.GetTransformWithParentX()) {
                const r =
                    this._sceneGraphInfo;
                p -= this.GetX();
                const t = -this._GetParentOffsetAngle();
                0 === t ? this._x += p / r.GetParentScaleX() : (this._x += Math.cos(t) * p / r.GetParentScaleX(), this.GetTransformWithParentY() && (this._y += Math.sin(t) * p / r.GetParentScaleY()))
            } else this._x = p
        }
        OffsetX(p) {
            p = +p;
            this.GetTransformWithParentX() ? this.SetX(this.GetX() + p) : this._x += p
        }
        GetX() {
            if (this.GetTransformWithParentX()) {
                let p = this._x;
                const r = this._sceneGraphInfo,
                    t = this.GetParent(),
                    q = this._GetParentOffsetAngle();
                0 === q ? p *= r.GetParentScaleX() : (p = p * r.GetParentScaleX() *
                    Math.cos(q), this.GetTransformWithParentY() && (p -= this._y * r.GetParentScaleY() * Math.sin(q)));
                return t.GetX() + p
            }
            return this._x
        }
        SetY(p) {
            p = +p;
            if (this.GetTransformWithParentY()) {
                const r = this._sceneGraphInfo;
                p -= this.GetY();
                const t = -this._GetParentOffsetAngle();
                0 === t ? this._y += p / r.GetParentScaleY() : (this.GetTransformWithParentX() && (this._x -= Math.sin(t) * p / r.GetParentScaleX()), this._y += Math.cos(t) * p / r.GetParentScaleY())
            } else this._y = p
        }
        OffsetY(p) {
            p = +p;
            this.GetTransformWithParentY() ? this.SetY(this.GetY() + p) : this._y +=
                p
        }
        GetY() {
            if (this.GetTransformWithParentY()) {
                let p = this._y;
                const r = this._sceneGraphInfo,
                    t = this.GetParent(),
                    q = this._GetParentOffsetAngle();
                0 === q ? p *= r.GetParentScaleY() : (p = p * r.GetParentScaleY() * Math.cos(q), this.GetTransformWithParentX() && (p += this._x * r.GetParentScaleX() * Math.sin(q)));
                return t.GetY() + p
            }
            return this._y
        }
        SetXY(p, r) {
            p = +p;
            r = +r;
            if (this.GetTransformWithParentXOrY()) {
                const q = this.GetTransformWithParentX(),
                    w = this.GetTransformWithParentY(),
                    y = this._sceneGraphInfo,
                    C = p - this.GetX(),
                    F = r - this.GetY();
                var t = -this._GetParentOffsetAngle();
                if (0 === t) this._x = q ? this._x + C / y.GetParentScaleX() : p, this._y = w ? this._y + F / y.GetParentScaleY() : r;
                else {
                    const H = Math.sin(t);
                    t = Math.cos(t);
                    this._x = q ? w ? this._x + (t * C - H * F) / y.GetParentScaleX() : this._x + t * C / y.GetParentScaleX() : p;
                    this._y = w ? q ? this._y + (H * C + t * F) / y.GetParentScaleY() : this._y + t * F / y.GetParentScaleY() : r
                }
            } else this._x = p, this._y = r
        }
        OffsetXY(p, r) {
            p = +p;
            r = +r;
            this.GetTransformWithParentXOrY() ? this.SetXY(this.GetX() + p, this.GetY() + r) : (this._x += p, this._y += r)
        }
        EqualsXY(p, r) {
            return this.GetX() ===
                p && this.GetY() === r
        }
        SetZElevation(p) {
            p = +p;
            this.GetTransformWithParentZElevation() && (p -= this.GetParent().GetZElevation());
            this._zElevation !== p && (this._zElevation = p, this._UpdateZElevation(), p = this.GetLayer(), 0 !== this._zElevation && p._SetAnyInstanceZElevated(), p.SetZIndicesChanged())
        }
        _UpdateZElevation() {
            this._UpdateRendererStateGroup();
            if (this.HasChildren()) {
                const p = this.GetChildren();
                for (let r = 0, t = p.length; r < t; r++) {
                    const q = p[r];
                    q.GetTransformWithParentZElevation() && q._UpdateZElevation()
                }
            }
        }
        OffsetZElevation(p) {
            this.SetZElevation(this.GetZElevation() +
                p)
        }
        GetZElevation() {
            return this.GetTransformWithParentZElevation() ? this.GetParent().GetZElevation() + this._zElevation : this._zElevation
        }
        GetTotalZElevation() {
            return this.GetLayer().GetZElevation() + this.GetZElevation()
        }
        SetWidth(p) {
            p = +p;
            this.GetTransformWithParentWidth() ? this._w *= p / this.GetWidth() : this._w = p
        }
        OffsetWidth(p) {
            p = +p;
            this.GetTransformWithParentWidth() ? this.SetWidth(this.GetWidth() + p) : this._w += p
        }
        GetWidth() {
            return this.GetTransformWithParentWidth() ? this.GetParent().GetWidth() * this._w : this._w
        }
        SetHeight(p) {
            p = +p;
            this.GetTransformWithParentHeight() ? this._h *= p / this.GetHeight() : this._h = p
        }
        OffsetHeight(p) {
            p = +p;
            this.GetTransformWithParentHeight() ? this.SetHeight(this.GetHeight() + p) : this._h += p
        }
        GetHeight() {
            return this.GetTransformWithParentHeight() ? this.GetParent().GetHeight() * this._h : this._h
        }
        SetSize(p, r) {
            p = +p;
            r = +r;
            this.GetTransformWithParentWidth() ? this._w *= p / this.GetWidth() : this._w = p;
            this.GetTransformWithParentHeight() ? this._h *= r / this.GetHeight() : this._h = r
        }
        GetDepth() {
            return this._depth
        }
        SetDepth(p) {
            if (0 > p) throw new RangeError("invalid depth");
            this._depth = p
        }
        GetSceneGraphScale() {
            if (this.HasParent()) {
                const p = this._sceneGraphInfo;
                return Math.min(p.GetParentScaleX(), p.GetParentScaleY())
            }
            return 1
        }
        IsRotatable() {
            return 0 !== (this._flags & 128)
        }
        SetAngle(p) {
            p = +p;
            this.IsRotatable() && (this.GetTransformWithParentAngle() && (p -= this.GetParent().GetAngle()), p = e.clampAngle(p), this._a !== p && (this._a = p, this._MarkSinCosAngleChanged()))
        }
        OffsetAngle(p) {
            p = +p;
            0 !== p && this.IsRotatable() && (this._a = e.clampAngle(this._a + p), this._MarkSinCosAngleChanged())
        }
        _MarkSinCosAngleChanged() {
            this._flags |=
                262144;
            if (this.HasChildren()) {
                const p = this.GetChildren();
                for (let r = 0, t = p.length; r < t; r++) p[r]._MarkSinCosAngleChanged()
            }
        }
        GetAngle() {
            return this.GetTransformWithParentAngle() ? e.clampAngle(this.GetParent().GetAngle() + this._a) : this._a
        }
        _MaybeUpdateSinCosAngle() {
            const p = this._flags;
            if (0 !== (p & 262144)) {
                var r = this.GetAngle();
                this._sinA = Math.sin(r);
                this._cosA = Math.cos(r);
                this._flags = p & -262145
            }
        }
        GetSinAngle() {
            this._MaybeUpdateSinCosAngle();
            return this._sinA
        }
        GetCosAngle() {
            this._MaybeUpdateSinCosAngle();
            return this._cosA
        }
        SetOriginX(p) {
            this._ox = +p
        }
        OffsetOriginX(p) {
            this._ox += +p
        }
        GetOriginX() {
            return this._ox
        }
        SetOriginY(p) {
            this._oy = +p
        }
        OffsetOriginY(p) {
            this._oy += +p
        }
        GetOriginY() {
            return this._oy
        }
        _SetColor(p) {
            this._color.equals(p) || (this._color === k ? (this._color = e.New(e.Color, p), this._colorPremultiplied = e.New(e.Color, p), this._colorPremultiplied.premultiply()) : p.equalsRgba(1, 1, 1, 1) ? this._colorPremultiplied = this._color = k : (this._color.set(p), this._colorPremultiplied.set(p), this._colorPremultiplied.premultiply()), this._UpdateRendererStateGroup())
        }
        SetOpacity(p) {
            p =
                e.clamp(+p, 0, 1);
            this._color.a !== p && (c.copyRgb(this._color), c.a = p, this._SetColor(c))
        }
        OffsetOpacity(p) {
            this.SetOpacity(this.GetOpacity() + p)
        }
        GetOpacity() {
            return this._color.a
        }
        SetUnpremultipliedColor(p) {
            this._color.equalsIgnoringAlpha(p) || (c.copyRgb(p), c.a = this._color.a, this._SetColor(c))
        }
        SetUnpremultipliedColorRGB(p, r, t) {
            c.setRgb(p, r, t);
            this.SetUnpremultipliedColor(c)
        }
        OffsetUnpremultipliedColorRGB(p, r, t) {
            if (0 !== p || 0 !== r || 0 !== t) c.copyRgb(this._color), c.r += p, c.g += r, c.b += t, this.SetUnpremultipliedColor(c)
        }
        GetUnpremultipliedColor() {
            return this._color
        }
        GetPremultipliedColor() {
            return this._colorPremultiplied
        }
        GetDestroyWithParent() {
            return 0 !==
                (this._flags & 512)
        }
        SetDestroyWithParent(p) {
            this._SetFlag(512, p)
        }
        GetTransformWithParentX() {
            return 0 !== (this._flags & 1024)
        }
        SetTransformWithParentX(p) {
            this._SetFlag(1024, p)
        }
        GetTransformWithParentY() {
            return 0 !== (this._flags & 2048)
        }
        GetTransformWithParentXOrY() {
            return 0 !== (this._flags & 3072)
        }
        SetTransformWithParentY(p) {
            this._SetFlag(2048, p)
        }
        GetTransformWithParentWidth() {
            return 0 !== (this._flags & 4096)
        }
        SetTransformWithParentWidth(p) {
            this._SetFlag(4096, p)
        }
        GetTransformWithParentHeight() {
            return 0 !== (this._flags & 8192)
        }
        SetTransformWithParentHeight(p) {
            this._SetFlag(8192,
                p)
        }
        GetTransformWithParentAngle() {
            return 0 !== (this._flags & 16384)
        }
        SetTransformWithParentAngle(p) {
            this._SetFlag(16384, p)
        }
        GetTransformWithParentZElevation() {
            return 0 !== (this._flags & 32768)
        }
        SetTransformWithParentZElevation(p) {
            this._SetFlag(32768, p)
        }
        _ClearAllSceneGraphFlags() {
            this._flags &= -65025
        }
        AddChild(p, r) {
            if (p !== this && !p.HasParent() && !this._HasChildRecursive(p) && !this._HasAnyParent(p)) {
                var t = p.GetX(),
                    q = p.GetY(),
                    w = p.GetWidth(),
                    y = p.GetHeight(),
                    C = p.GetAngle(),
                    F = p.GetZElevation();
                p._SetParent(this);
                p.SetTransformWithParentX(r.transformX);
                p.SetTransformWithParentY(r.transformY);
                p.SetTransformWithParentWidth(r.transformWidth);
                p.SetTransformWithParentHeight(r.transformHeight);
                p.SetTransformWithParentAngle(r.transformAngle);
                p.SetTransformWithParentZElevation(r.transformZElevation);
                p.SetDestroyWithParent(r.destroyWithParent);
                r.transformX && (p._x = t - this.GetX(), r.transformWidth && (p._x /= this.GetWidth() / this._sceneGraphInfo._GetStartWidth()));
                r.transformY && (p._y = q - this.GetY(), r.transformHeight && (p._y /= this.GetHeight() / this._sceneGraphInfo._GetStartHeight()));
                r.transformWidth && (p._w = w / this.GetWidth(), p._sceneGraphInfo.SetStartScaleX(p._w));
                r.transformHeight && (p._h = y / this.GetHeight(), p._sceneGraphInfo.SetStartScaleY(p._h));
                r.transformAngle && (p._a = C - this.GetAngle());
                r.transformZElevation && (p._zElevation = F - this.GetZElevation());
                this._AddChildToSceneGraphInfo(p);
                this.SetBboxChanged()
            }
        }
        RemoveChild(p) {
            if (p.GetParent() === this) {
                var r = p.GetX(),
                    t = p.GetY(),
                    q = p.GetWidth(),
                    w = p.GetHeight(),
                    y = p.GetAngle(),
                    C = p.GetZElevation();
                p._SetParent(null);
                p._ClearAllSceneGraphFlags();
                p.SetXY(r, t);
                p.SetSize(q, w);
                p.SetAngle(y);
                p.SetZElevation(C);
                this._RemoveChildFromSceneGraphInfo(p);
                this.SetBboxChanged()
            }
        }
        _ResetAllSceneGraphState() {
            for (var p of this.children()) this.RemoveChild(p);
            (p = this.GetParent()) && p.RemoveChild(this);
            this._ClearAllSceneGraphFlags()
        }
        HasParent() {
            return null !== this.GetParent()
        }
        GetParent() {
            const p = this._sceneGraphInfo;
            return null !== p ? p.GetParent() : null
        }
        GetTopParent() {
            let p = this;
            for (; p.HasParent();) p = p.GetParent();
            return p
        }* parents() {
            let p = this.GetParent();
            for (; p;) yield p,
                p = p.GetParent()
        }
        HasChild(p) {
            return this.GetChildren().includes(p)
        }
        HasChildren() {
            const p = this._sceneGraphInfo;
            return null !== p ? p.HasChildren() : !1
        }
        GetChildren() {
            const p = this._sceneGraphInfo;
            return null !== p ? p.GetChildren() : u
        }
        children() {
            return this.GetChildren()
        }* allChildren() {
            for (const p of this.children()) yield p, yield* p.allChildren()
        }
        GetChildCount() {
            return this.GetChildren().length
        }
        GetChildAt(p) {
            const r = this.GetChildren();
            p = Math.floor(+p);
            return 0 > p || p >= r.length ? null : r[p]
        }
        _CreateSceneGraphInfo(p) {
            this._sceneGraphInfo ||
                (this._sceneGraphInfo = e.New(e.SceneGraphInfo, this));
            p && this._sceneGraphInfo.SetParent(p)
        }
        _GetSceneGraphInfo() {
            return this._sceneGraphInfo
        }
        _ReleaseSceneGraphInfo() {
            this._sceneGraphInfo && (this._sceneGraphInfo.Release(), this._sceneGraphInfo = null)
        }
        _SetParent(p) {
            p ? (p._CreateSceneGraphInfo(null), this._CreateSceneGraphInfo(p)) : (this._sceneGraphInfo && this._sceneGraphInfo.SetParent(null), this.HasChildren() || this._ReleaseSceneGraphInfo())
        }
        _HasAnyParent(p) {
            if (!this.HasParent()) return !1;
            const r = this.GetParent();
            return r === p ? !0 : r._HasAnyParent(p)
        }
        _HasChildRecursive(p) {
            if (this.HasChild(p)) return !0;
            for (const r of this.GetChildren())
                if (r._HasChildRecursive(p)) return !0;
            return !1
        }
        _AddChildToSceneGraphInfo(p) {
            this._sceneGraphInfo.GetChildren().push(p)
        }
        _RemoveChildFromSceneGraphInfo(p) {
            const r = this._sceneGraphInfo.GetChildren(),
                t = r.indexOf(p); - 1 !== t && r.splice(t, 1);
            0 !== r.length || this.HasParent() || this._ReleaseSceneGraphInfo();
            p.HasChildren() || p._ReleaseSceneGraphInfo()
        }
        GetSceneGraphChildrenExportData() {
            return this._sceneGraphChildrenExportData
        }
        GetSceneGraphZIndexExportData() {
            return this._sceneGraphZIndexExportData
        }
        GetSceneGraphZIndex() {
            return this._sceneGraphZIndex
        }
        SetSceneGraphZIndex(p) {
            this._sceneGraphZIndex =
                p
        }
        SetUsePointsShaderProgram() {
            this._SetFlag(524288, !0);
            this._UpdateRendererStateGroup()
        }
        _UpdateRendererStateGroup() {
            if (x) {
                var p = this._runtime.GetRenderer();
                this._stateGroup && p.ReleaseStateGroup(this._stateGroup);
                var r = 0 !== (this._flags & 524288) ? p.GetPointsRenderingProgram() || "<point>" : p.GetTextureFillShaderProgram() || "<default>";
                this._stateGroup = p.AcquireStateGroup(r, this.GetBlendMode(), this._colorPremultiplied, this.GetZElevation())
            }
        }
        GetRendererStateGroup() {
            return this._stateGroup
        }
        HasDefaultColor() {
            return this._color ===
                k
        }
        SetBlendMode(p) {
            p |= 0;
            if (0 > p || 31 < p) throw new RangeError("invalid blend mode");
            this.GetBlendMode() !== p && (this._flags = this._flags & -2080374785 | p << 26, this._UpdateRendererStateGroup())
        }
        GetBlendMode() {
            return (this._flags & 2080374784) >> 26
        }
        _SetLayer(p) {
            this._layer = p;
            0 !== this.GetZElevation() && this._layer._SetAnyInstanceZElevated()
        }
        GetLayer() {
            return this._layer
        }
        GetLayout() {
            return this.GetLayer().GetLayout()
        }
        _SetZIndex(p) {
            this._zIndex = p | 0
        }
        GetZIndex() {
            this._layer._UpdateZIndices();
            return this._zIndex
        }
        _GetLastCachedZIndex() {
            return this._zIndex
        }
        _SetFlag(p,
            r) {
            this._flags = r ? this._flags | p : this._flags & ~p
        }
        IsVisible() {
            return 0 !== (this._flags & 1)
        }
        SetVisible(p) {
            this._SetFlag(1, p)
        }
        IsCollisionEnabled() {
            return 0 !== (this._flags & 8)
        }
        SetCollisionEnabled(p) {
            p = !!p;
            this.IsCollisionEnabled() !== p && (this._SetFlag(8, p), p ? this.SetBboxChanged() : this._RemoveFromCollisionCells())
        }
        SetSolidCollisionFilter(p, r) {
            this._SetFlag(32, p);
            this._solidFilterTags && this._solidFilterTags.clear();
            if (r.trim()) {
                this._solidFilterTags || (this._solidFilterTags = new Set);
                for (const t of r.split(" ")) t &&
                    this._solidFilterTags.add(t.toLowerCase())
            } else this._solidFilterTags = null
        }
        IsSolidCollisionAllowed(p) {
            const r = 0 !== (this._flags & 32),
                t = this._solidFilterTags;
            if (!p || !t) return !r;
            for (const q of t)
                if (p.has(q)) return r;
            return !r
        }
        SetBboxChanged() {
            this._flags |= 65554;
            this._objectClass._SetAnyCollisionCellChanged(!0);
            this._runtime.UpdateRender();
            this._layer.UsesRenderCells() && (this.CalculateBbox(this._boundingBox, this._boundingQuad, !0), this._flags &= -3, this._UpdateRenderCell());
            0 !== (this._flags & 4) && this._inst.Dispatcher().dispatchEvent(d);
            if (null !== this._sceneGraphInfo) {
                const p = this._sceneGraphInfo.GetChildren();
                for (let r = 0, t = p.length; r < t; ++r) p[r].SetBboxChanged()
            }
        }
        CalculateBbox(p, r, t) {
            const q = this.GetX(),
                w = this.GetY(),
                y = this.GetWidth(),
                C = this.GetHeight(),
                F = this.GetAngle();
            p.setWH(q - this._ox * y, w - this._oy * C, y, C);
            t && this.HasMesh() && this._ExpandBboxForMesh(p);
            0 === F ? r.setFromRect(p) : (p.offset(-q, -w), r.setFromRotatedRectPrecalc(p, this.GetSinAngle(), this.GetCosAngle()), r.offset(q, w), r.getBoundingBox(p));
            p.normalize()
        }
        _UpdateBbox() {
            const p =
                this._flags;
            0 !== (p & 2) && (this.CalculateBbox(this._boundingBox, this._boundingQuad, !0), this._flags = p & -3)
        }
        GetBoundingBox() {
            this._UpdateBbox();
            return this._boundingBox
        }
        GetBoundingQuad() {
            this._UpdateBbox();
            return this._boundingQuad
        }
        PixelRoundQuad(p) {
            var r = this.GetX(),
                t = this.GetY();
            r = Math.round(r) - r;
            t = Math.round(t) - t;
            if (0 === r && 0 === t) return p;
            a.copy(p);
            a.offset(r, t);
            return a
        }
        OverwriteBoundingBox(p) {
            this._boundingBox.copy(p);
            this._boundingQuad.setFromRect(this._boundingBox);
            this._flags &= -3;
            this._UpdateCollisionCell();
            this._UpdateRenderCell()
        }
        SetBboxChangeEventEnabled(p) {
            this._SetFlag(4, p)
        }
        IsBboxChangeEventEnabled() {
            return 0 !== (this._flags & 4)
        }
        IsInViewport(p, r, t) {
            return r && 0 !== this.GetDepth() ? this.IsInViewport3D(this.GetLayer()._GetViewFrustum()) : 0 === this.GetZElevation() || t ? p.intersectsRect(this.GetBoundingBox()) : this._IsInViewport_ZElevated()
        }
        _IsInViewport_ZElevated() {
            const p = this.GetLayer(),
                r = this.GetTotalZElevation();
            if (r >= p.GetCameraZ()) return !1;
            p.GetViewportForZ(r, b);
            return b.intersectsRect(this.GetBoundingBox())
        }
        IsInViewport3D(p) {
            var r =
                this.GetBoundingBox();
            const t = r.getLeft(),
                q = r.getRight(),
                w = r.getTop();
            r = r.getBottom();
            const y = this.GetTotalZElevation(),
                C = y + this.GetDepth();
            return p.ContainsAABB(t, w, y, q, r, C)
        }
        _SetDrawBackFaceOnly(p) {
            this._SetFlag(1048576, p)
        }
        _SetDrawNonBackFacesOnly(p) {
            this._SetFlag(2097152, p)
        }
        IsDrawBackFaceOnly() {
            return 0 !== (this._flags & 1048576)
        }
        IsDrawNonBackFacesOnly() {
            return 0 !== (this._flags & 2097152)
        }
        SetSourceCollisionPoly(p) {
            this._sourceCollisionPoly = p;
            this._DiscardTransformedCollisionPoly();
            this.HasMesh() && (this._meshInfo.meshPoly =
                null)
        }
        GetSourceCollisionPoly() {
            return this._sourceCollisionPoly
        }
        HasOwnCollisionPoly() {
            return null !== this._sourceCollisionPoly || this.HasMesh()
        }
        GetTransformedCollisionPoly() {
            return this._GetCustomTransformedCollisionPolyPrecalc(this.GetWidth(), this.GetHeight(), this.GetAngle(), this.GetSinAngle(), this.GetCosAngle())
        }
        GetCustomTransformedCollisionPoly(p, r, t) {
            let q = 0,
                w = 1;
            0 !== t && (q = Math.sin(t), w = Math.cos(t));
            return this._GetCustomTransformedCollisionPolyPrecalc(p, r, t, q, w)
        }
        _GetCustomTransformedCollisionPolyPrecalc(p,
            r, t, q, w) {
            let y = this._transformedPolyInfo;
            null === y && (this._transformedPolyInfo = y = {
                poly: e.New(e.CollisionPoly),
                width: NaN,
                height: NaN,
                angle: NaN
            });
            const C = y.poly;
            if (y.width === p && y.height === r && y.angle === t) return C;
            const F = this._sourceCollisionPoly;
            if (this.HasMesh()) {
                const H = this.GetOriginX(),
                    M = this.GetOriginY(),
                    B = this.GetSourceMesh();
                let A = this._meshInfo.meshPoly;
                A || (F ? (f.copy(F), f.offset(H, M)) : f.setDefaultPoints(), A = B.InsertPolyMeshVertices(f), this._meshInfo.meshPoly = A);
                B.TransformCollisionPoly(A, C);
                C.offset(-H, -M);
                C.transformPrecalc(p, r, q, w)
            } else F ? (C.copy(F), C.transformPrecalc(p, r, q, w)) : C.setFromQuad(this.GetBoundingQuad(), -this.GetX(), -this.GetY());
            y.width = p;
            y.height = r;
            y.angle = t;
            return C
        }
        _DiscardTransformedCollisionPoly() {
            this.SetPhysicsBodyChanged(!0);
            const p = this._transformedPolyInfo;
            null !== p && (p.width = NaN)
        }
        CreateMesh(p, r) {
            p = Math.floor(p);
            r = Math.floor(r);
            if (!this.GetInstance().GetPlugin().SupportsMesh()) throw Error("object does not support mesh");
            this.ReleaseMesh();
            this._meshInfo = {
                sourceMesh: e.New(e.Gfx.Mesh,
                    p, r),
                transformedMesh: e.New(e.Gfx.Mesh, p, r),
                meshPoly: null
            }
        }
        HasMesh() {
            return null !== this._meshInfo
        }
        GetSourceMesh() {
            if (!this.HasMesh()) throw Error("no mesh");
            return this._meshInfo.sourceMesh
        }
        GetTransformedMesh() {
            if (!this.HasMesh()) throw Error("no mesh");
            return this._meshInfo.transformedMesh
        }
        SetMeshChanged(p) {
            this._SetFlag(65536, p)
        }
        IsMeshChanged() {
            return 0 !== (this._flags & 65536)
        }
        SetPhysicsBodyChanged(p) {
            this._SetFlag(131072, p)
        }
        IsPhysicsBodyChanged() {
            return 0 !== (this._flags & 131072)
        }
        _ExpandBboxForMesh(p) {
            const r =
                this._meshInfo.sourceMesh,
                t = Math.min(r.GetMinX(), 0),
                q = Math.min(r.GetMinY(), 0),
                w = Math.max(r.GetMaxX(), 1),
                y = Math.max(r.GetMaxY(), 1),
                C = p.width(),
                F = p.height();
            p.offsetLeft(t * C);
            p.offsetTop(q * F);
            p.offsetRight((w - 1) * C);
            p.offsetBottom((y - 1) * F);
            this._depth = r.GetMaxZ()
        }
        ReleaseMesh() {
            this._meshInfo && (this._meshInfo.sourceMesh.Release(), this._meshInfo.transformedMesh.Release(), this._meshInfo = null, this._DiscardTransformedCollisionPoly())
        }
        SetMeshPoint(p, r, t) {
            p = Math.floor(p);
            r = Math.floor(r);
            var q = t.mode || "absolute";
            if (!m.has(q)) throw Error("invalid mode");
            q = "relative" === q;
            let w = t.x,
                y = t.y;
            const C = t.zElevation;
            let F = "number" === typeof t.u ? t.u : q ? 0 : -1;
            t = "number" === typeof t.v ? t.v : q ? 0 : -1;
            if (!this.HasMesh()) return !1;
            const H = this.GetSourceMesh(),
                M = H.GetMeshPointAt(p, r);
            if (null === M) return !1;
            let B = !1;
            "number" === typeof C && M.GetZElevation() !== C && (M.SetZElevation(C), B = !0);
            q && (w += p / (H.GetHSize() - 1), y += r / (H.GetVSize() - 1)); - 1 !== F || q ? (q && (F += p / (H.GetHSize() - 1)), F = e.clamp(F, 0, 1)) : F = M.GetU(); - 1 !== t || q ? (q && (t += r / (H.GetVSize() - 1)),
                t = e.clamp(t, 0, 1)) : t = M.GetV();
            if (M.GetX() === w && M.GetY() === y && M.GetU() === F && M.GetV() === t) return B;
            M.SetX(w);
            M.SetY(y);
            M.SetU(F);
            M.SetV(t);
            this._DiscardTransformedCollisionPoly();
            return !0
        }
        HasTilemap() {
            return this._inst.HasTilemap()
        }
        ContainsPoint(p, r) {
            return this.GetBoundingBox().containsPoint(p, r) && this.GetBoundingQuad().containsPoint(p, r) ? this.HasTilemap() ? this._inst.GetSdkInstance().TestPointOverlapTile(p, r) : this.HasOwnCollisionPoly() ? this.GetTransformedCollisionPoly().containsPoint(p - this.GetX(),
                r - this.GetY()) : !0 : !1
        }
        _IsCollisionCellChanged() {
            return 0 !== (this._flags & 16)
        }
        _UpdateCollisionCell() {
            if (this._IsCollisionCellChanged() && this.IsCollisionEnabled() && 0 === (this._flags & 256)) {
                var p = this.GetBoundingBox(),
                    r = this._objectClass._GetCollisionCellGrid(),
                    t = this._collisionCells;
                b.set(r.XToCell(p.getLeft()), r.YToCell(p.getTop()), r.XToCell(p.getRight()), r.YToCell(p.getBottom()));
                t.equals(b) || (p = this._inst, t === l ? (r.Update(p, null, b), this._collisionCells = e.New(e.Rect, b)) : (r.Update(p, t, b), t.copy(b)), this._flags &=
                    -17)
            }
        }
        _RemoveFromCollisionCells() {
            const p = this._collisionCells;
            p !== l && (this._objectClass._GetCollisionCellGrid().Update(this._inst, p, null), this._collisionCells = l)
        }
        _UpdateRenderCell() {
            const p = this.GetLayer();
            if (p.UsesRenderCells() && 0 === (this._flags & 256)) {
                var r = p.GetRenderGrid(),
                    t = this.GetBoundingBox(),
                    q = this._renderCells;
                b.set(r.XToCell(t.getLeft()), r.YToCell(t.getTop()), r.XToCell(t.getRight()), r.YToCell(t.getBottom()));
                q.equals(b) || (t = this._inst, q === g ? (r.Update(t, null, b), this._renderCells = e.New(e.Rect,
                    b)) : (r.Update(t, q, b), q.copy(b)), p.SetRenderListStale())
            }
        }
        _RemoveFromRenderCells() {
            const p = this._renderCells;
            p !== g && (this.GetLayer().GetRenderGrid().Update(this._inst, p, null), this._renderCells = g)
        }
        GetRenderCellRange() {
            return this._renderCells
        }
        ZOrderMoveToTop() {
            const p = this._inst,
                r = this._layer,
                t = r._GetInstances();
            t.length && t.at(-1) === p || (r._RemoveInstance(p, !1), r._AddInstance(p, !1), this._runtime.UpdateRender())
        }
        ZOrderMoveToBottom() {
            const p = this._inst,
                r = this._layer,
                t = r._GetInstances();
            t.length && t[0] ===
                p || (r._RemoveInstance(p, !1), r._PrependInstance(p, !1), this._runtime.UpdateRender())
        }
        ZOrderMoveToLayer(p) {
            const r = this._inst,
                t = this._layer;
            if (t.GetLayout() !== p.GetLayout()) throw Error("layer from different layout");
            p !== t && (t._RemoveInstance(r, !0), this._SetLayer(p), p._AddInstance(r, !0), this._runtime.UpdateRender())
        }
        ZOrderMoveAdjacentToInstance(p, r) {
            const t = this._inst;
            let q = !1;
            const w = this._layer;
            if (p.GetUID() !== t.GetUID()) {
                var y = p.GetWorldInfo();
                if (!y) throw Error("expected world instance");
                y = y.GetLayer();
                w.GetIndex() !== y.GetIndex() && (w._RemoveInstance(t, !0), this._SetLayer(y), y._AddInstance(t, !0), q = !0);
                p = y.MoveInstanceAdjacent(t, p, !!r);
                (q || p) && this._runtime.UpdateRender()
            }
        }
        GetInstanceEffectList() {
            return this._instanceEffectList
        }
        _SetHasAnyActiveEffect(p) {
            this._SetFlag(64, p)
        }
        HasAnyActiveEffect() {
            return 0 !== (this._flags & 64)
        }
        _SaveToJson(p) {
            const r = {
                x: this.GetX(),
                y: this.GetY(),
                w: this.GetWidth(),
                h: this.GetHeight(),
                l: this.GetLayer().GetSID(),
                zi: this.GetZIndex()
            };
            0 !== this.GetZElevation() && (r.ze = this.GetZElevation());
            0 !== this.GetAngle() && (r.a = this.GetAngle());
            this.HasDefaultColor() || (r.c = this._color.toJSON());
            .5 !== this.GetOriginX() && (r.oX = this.GetOriginX());
            .5 !== this.GetOriginY() && (r.oY = this.GetOriginY());
            0 !== this.GetBlendMode() && (r.bm = this.GetBlendMode());
            this.IsVisible() || (r.v = this.IsVisible());
            this.IsCollisionEnabled() || (r.ce = this.IsCollisionEnabled());
            this.IsBboxChangeEventEnabled() && (r.be = this.IsBboxChangeEventEnabled());
            this._instanceEffectList && (r.fx = this._instanceEffectList._SaveToJson());
            const t = 0 !==
                (this._flags & 32);
            t && (r.sfi = t);
            this._solidFilterTags && (r.sft = [...this._solidFilterTags].join(" "));
            this._sceneGraphInfo && "visual-state" !== p && (r.sgi = this._sceneGraphInfo._SaveToJson());
            this.HasMesh() && (r.mesh = this.GetSourceMesh().SaveToJson());
            return r
        }
        _OnBeforeLoad(p) {
            "visual-state" !== p && this._ResetAllSceneGraphState()
        }
        _LoadFromJson(p, r) {
            x = !1;
            this.SetX(p.x);
            this.SetY(p.y);
            this.SetWidth(p.w);
            this.SetHeight(p.h);
            this._SetZIndex(p.zi);
            this.SetZElevation(p.hasOwnProperty("ze") ? p.ze : 0);
            this.SetAngle(p.hasOwnProperty("a") ?
                p.a : 0);
            p.hasOwnProperty("c") ? c.setFromJSON(p.c) : p.hasOwnProperty("o") ? (c.copyRgb(this._color), c.a = p.o) : c.setRgba(1, 1, 1, 1);
            this._SetColor(c);
            this.SetOriginX(p.hasOwnProperty("oX") ? p.oX : .5);
            this.SetOriginY(p.hasOwnProperty("oY") ? p.oY : .5);
            this.SetBlendMode(p.hasOwnProperty("bm") ? p.bm : 0);
            this.SetVisible(p.hasOwnProperty("v") ? p.v : !0);
            this.SetCollisionEnabled(p.hasOwnProperty("ce") ? p.ce : !0);
            this.SetBboxChangeEventEnabled(p.hasOwnProperty("be") ? p.be : !1);
            this.SetSolidCollisionFilter(p.hasOwnProperty("sfi") ?
                p.sfi : !1, p.hasOwnProperty("sft") ? p.sft : "");
            this._instanceEffectList && p.hasOwnProperty("fx") && this._instanceEffectList._LoadFromJson(p.fx);
            if (p.hasOwnProperty("sgi") && "visual-state" !== r) {
                this._CreateSceneGraphInfo(null);
                const t = this._sceneGraphInfo,
                    q = p.sgi;
                t._LoadFromJson(q);
                const w = this.GetRuntime().Dispatcher(),
                    y = () => {
                        w.removeEventListener("afterload", y);
                        0 === (this._flags & 256) && t._OnAfterLoad(q)
                    };
                w.addEventListener("afterload", y)
            }
            p.hasOwnProperty("mesh") ? (p = p.mesh, this.CreateMesh(p.cols, p.rows), this.GetSourceMesh().LoadFromJson(p)) :
                this.ReleaseMesh();
            this.SetBboxChanged();
            x = !0;
            this._UpdateRendererStateGroup()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.BehaviorType = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            const d = b.GetRuntime(),
                c = d.GetPluginManager(),
                f = d.GetObjectReference(a[1]);
            c.HasBehaviorByConstructorFunction(f) || c.CreateBehavior(a);
            this._runtime = d;
            this._objectClass = b;
            this._behavior = c.GetBehaviorByConstructorFunction(f);
            this._sdkType = null;
            this._instSdkCtor = f.Instance;
            this._sid = a[2];
            this._name = a[0];
            this._jsPropName = this._runtime.GetJsPropName(a[3]);
            this._sdkType = e.New(f.Type, this);
            this.OnCreate()
        }
        static Create(b,
            a) {
            return e.New(e.BehaviorType, b, a)
        }
        Release() {
            this._behavior = this._runtime = null;
            this._sdkType.Release();
            this._instSdkCtor = this._sdkType = null
        }
        GetSdkType() {
            return this._sdkType
        }
        OnCreate() {
            this._sdkType.OnCreate()
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetBehavior() {
            return this._behavior
        }
        GetInstanceSdkCtor() {
            return this._instSdkCtor
        }
        GetName() {
            return this._name
        }
        GetSID() {
            return this._sid
        }
        GetJsPropName() {
            return this._jsPropName
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.IBehaviorInstance;
    e.BehaviorInstance = class extends e.DefendedBase {
        constructor(a) {
            super();
            this._runtime = a.runtime;
            this._behaviorType = a.behaviorType;
            this._behavior = this._behaviorType.GetBehavior();
            this._inst = a.instance;
            this._index = a.index;
            this._iScriptInterface = this._sdkInst = null;
            this._behavior._AddInstance(this._inst)
        }
        Release() {
            this._iScriptInterface && (this._iScriptInterface._Release(), this._iScriptInterface = null);
            this._behavior._RemoveInstance(this._inst);
            this._sdkInst.Release();
            this._inst = this._behavior = this._behaviorType = this._runtime = this._iScriptInterface = this._sdkInst = null
        }
        _CreateSdkInstance(a) {
            if (this._sdkInst) throw Error("already got sdk instance");
            this._sdkInst = e.New(this._behaviorType.GetInstanceSdkCtor(), this, a);
            this._InitScriptInterface()
        }
        GetSdkInstance() {
            return this._sdkInst
        }
        GetObjectInstance() {
            return this._inst
        }
        GetRuntime() {
            return this._runtime
        }
        GetBehaviorType() {
            return this._behaviorType
        }
        GetBehavior() {
            return this._behavior
        }
        _GetIndex() {
            return this._index
        }
        PostCreate() {
            this._sdkInst.PostCreate()
        }
        OnSpriteFrameChanged(a,
            d) {
            this._sdkInst.OnSpriteFrameChanged(a, d)
        }
        _GetDebuggerProperties() {
            return this._sdkInst.GetDebuggerProperties()
        }
        SaveToJson() {
            return this._sdkInst.SaveToJson()
        }
        LoadFromJson(a) {
            return this._sdkInst.LoadFromJson(a)
        }
        static SortByTickSequence(a, d) {
            var c = a.GetObjectInstance(),
                f = d.GetObjectInstance();
            const k = c.GetObjectClass().GetIndex(),
                g = f.GetObjectClass().GetIndex();
            if (k !== g) return k - g;
            c = c.GetPUID();
            f = f.GetPUID();
            return c !== f ? c - f : a.GetBehaviorInstance()._GetIndex() - d.GetBehaviorInstance()._GetIndex()
        }
        _InitScriptInterface() {
            const a =
                this._sdkInst.GetScriptInterfaceClass(),
                d = a || b;
            b._Init(this);
            this._iScriptInterface = new d;
            b._Init(null);
            if (a && !(this._iScriptInterface instanceof b)) throw new TypeError(`script interface class '${a.name}' does not extend the right base class '${b.name}'`);
        }
        GetScriptInterface() {
            return this._iScriptInterface
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.EffectList = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._owner = b;
            this._allEffectTypes = [];
            this._activeEffectTypes = [];
            this._effectTypesByName = new Map;
            this._effectParams = [];
            this._preservesOpaqueness = !0;
            for (const d of a) b = e.New(e.EffectType, this, d, this._allEffectTypes.length), this._allEffectTypes.push(b), this._effectTypesByName.set(b.GetName().toLowerCase(), b), 3 <= d.length && this._effectParams.push(this._LoadSingleEffectParameters(d[2]));
            this.GetRuntime()._AddEffectList(this)
        }
        Release() {
            e.clearArray(this._allEffectTypes);
            e.clearArray(this._activeEffectTypes);
            this._effectTypesByName.clear();
            e.clearArray(this._effectParams);
            this._owner = null
        }
        PrependEffectTypes(b) {
            if (b.length) {
                this._allEffectTypes = b.concat(this._allEffectTypes);
                for (const a of b) this._effectTypesByName.set(a.GetName().toLowerCase(), a);
                for (let a = 0, d = this._allEffectTypes.length; a < d; ++a) this._allEffectTypes[a]._SetIndex(a)
            }
        }
        _LoadSingleEffectParameters(b) {
            b = b.slice(0);
            for (let a = 0, d = b.length; a < d; ++a) {
                const c = b[a];
                if (Array.isArray(c)) {
                    const f = e.New(e.Color);
                    f.setFromJSON(c);
                    b[a] = f
                }
            }
            return b
        }
        GetOwner() {
            return this._owner
        }
        GetRuntime() {
            return this._owner.GetRuntime()
        }
        UpdateActiveEffects() {
            e.clearArray(this._activeEffectTypes);
            let b = !0;
            for (const a of this._allEffectTypes) a.IsActive() && (this._activeEffectTypes.push(a), a.GetShaderProgram().PreservesOpaqueness() || (b = !1));
            this._preservesOpaqueness = b
        }
        GetAllEffectTypes() {
            return this._allEffectTypes
        }
        HasAnyEffectType() {
            return 0 < this._allEffectTypes.length
        }
        GetEffectTypeByName(b) {
            return this._effectTypesByName.get(b.toLowerCase()) ||
                null
        }
        GetEffectTypeByIndex(b) {
            b = Math.floor(+b);
            if (0 > b || b >= this._allEffectTypes.length) throw new RangeError("invalid effect type index");
            return this._allEffectTypes[b]
        }
        IsEffectIndexActive(b) {
            return this.GetEffectTypeByIndex(b).IsActive()
        }
        SetEffectIndexActive(b, a) {
            this.GetEffectTypeByIndex(b).SetActive(a)
        }
        GetActiveEffectTypes() {
            return this._activeEffectTypes
        }
        HasAnyActiveEffect() {
            return 0 < this._activeEffectTypes.length
        }
        PreservesOpaqueness() {
            return this._preservesOpaqueness
        }
        GetEffectParametersForIndex(b) {
            return this._effectParams[b]
        }
        static SaveFxParamToJson(b) {
            return b &&
                b instanceof e.Color ? {
                    t: "color",
                    v: b.toJSON()
                } : b
        }
        static LoadFxParamFromJson(b) {
            if ("object" === typeof b) {
                if ("color" === b.t) {
                    const a = e.New(e.Color);
                    a.setFromJSON(b.v);
                    return a
                }
                throw Error("invalid effect parameter type");
            }
            return b
        }
        static SaveFxParamsToJson(b) {
            return b.map(e.EffectList.SaveFxParamToJson)
        }
        static LoadFxParamsFromJson(b) {
            return b.map(e.EffectList.LoadFxParamFromJson)
        }
        SaveToJson() {
            return this._allEffectTypes.map(b => ({
                name: b.GetName(),
                active: b.IsActive(),
                params: e.EffectList.SaveFxParamsToJson(this._effectParams[b.GetIndex()])
            }))
        }
        LoadFromJson(b) {
            for (const a of b)
                if (b =
                    this.GetEffectTypeByName(a.name)) b.SetActive(a.active), this._effectParams[b.GetIndex()] = e.EffectList.LoadFxParamsFromJson(a.params);
            this.UpdateActiveEffects()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.EffectType = class extends e.DefendedBase {
        constructor(b, a, d) {
            super();
            this._effectList = b;
            this._id = a[0];
            this._name = a[1];
            this._index = d;
            this._shaderProgram = null;
            this._isActive = !0
        }
        Release() {
            this._shaderProgram = this._effectList = null
        }
        Clone(b) {
            b = e.New(e.EffectType, b, [this._id, this._name], -1);
            b._shaderProgram = this._shaderProgram;
            b._isActive = this._isActive;
            return b
        }
        _InitRenderer(b) {
            b = b.GetShaderProgramByName(this._id);
            if (!b) throw Error("failed to find shader program '" + this._id +
                "'");
            this._shaderProgram = b
        }
        GetEffectList() {
            return this._effectList
        }
        GetName() {
            return this._name
        }
        _SetIndex(b) {
            this._index = b
        }
        GetIndex() {
            return this._index
        }
        GetOwner() {
            return this._effectList.GetOwner()
        }
        GetRuntime() {
            return this._effectList.GetRuntime()
        }
        SetActive(b) {
            this._isActive = !!b
        }
        IsActive() {
            return this._isActive
        }
        GetShaderProgram() {
            return this._shaderProgram
        }
        GetDefaultParameterValues() {
            const b = [];
            for (let a = 0, d = this._shaderProgram.GetParameterCount(); a < d; ++a) {
                const c = this._shaderProgram.GetParameterType(a);
                if ("float" === c || "percent" === c) b.push(0);
                else if ("color" === c) b.push(e.New(e.Color, 1, 1, 1, 1));
                else throw new TypeError("unknown effect parameter type");
            }
            return b
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.InstanceEffectList = class extends e.DefendedBase {
        constructor(b, a, d) {
            super();
            this._inst = b;
            this._wi = a;
            this._effectList = b.GetObjectClass().GetEffectList();
            this._activeEffectFlags = [];
            this._activeEffectTypes = [];
            this._preservesOpaqueness = !0;
            this._effectParams = [];
            for (const c of this._effectList.GetAllEffectTypes()) this._activeEffectFlags.push(!0);
            this.UpdateActiveEffects()
        }
        Release() {
            e.clearArray(this._activeEffectFlags);
            e.clearArray(this._activeEffectTypes);
            e.clearArray(this._effectParams);
            this._effectList = this._inst = null
        }
        _LoadEffectParameters(b) {
            for (const a of b) this._effectParams.push(this._LoadSingleEffectParameters(a))
        }
        _LoadSingleEffectParameters(b) {
            b = b.slice(0);
            for (let a = 0, d = b.length; a < d; ++a) {
                const c = b[a];
                if (Array.isArray(c)) {
                    const f = e.New(e.Color);
                    f.setFromJSON(c);
                    b[a] = f
                }
            }
            return b
        }
        LoadDefaultEffectParameters() {
            for (const b of this._effectList.GetAllEffectTypes()) this._effectParams.push(b.GetDefaultParameterValues())
        }
        GetOwner() {
            return this._owner
        }
        GetEffectList() {
            return this._effectList
        }
        GetRuntime() {
            return this._inst.GetRuntime()
        }
        UpdateActiveEffects() {
            e.clearArray(this._activeEffectTypes);
            const b = this._effectList.GetAllEffectTypes(),
                a = this._activeEffectTypes,
                d = this._activeEffectFlags;
            let c = !0;
            for (let f = 0, k = b.length; f < k; ++f)
                if (d[f]) {
                    const g = b[f];
                    a.push(g);
                    g.GetShaderProgram().PreservesOpaqueness() || (c = !1)
                }
            this._preservesOpaqueness = c;
            this._wi._SetHasAnyActiveEffect(!!a.length)
        }
        GetActiveEffectTypes() {
            return this._activeEffectTypes
        }
        GetEffectParametersForIndex(b) {
            return this._effectParams[b]
        }
        PreservesOpaqueness() {
            return this._preservesOpaqueness
        }
        HasAnyActiveBackgroundBlendingEffect() {
            return this._activeEffectTypes.some(b =>
                b.GetShaderProgram().UsesDest())
        }
        IsEffectIndexActive(b) {
            return this._activeEffectFlags[b]
        }
        SetEffectIndexActive(b, a) {
            this._activeEffectFlags[b] = !!a
        }
        GetAllEffectTypes() {
            return this._effectList.GetAllEffectTypes()
        }
        _SaveToJson() {
            return this._effectList.GetAllEffectTypes().map(b => ({
                name: b.GetName(),
                active: this._activeEffectFlags[b.GetIndex()],
                params: e.EffectList.SaveFxParamsToJson(this._effectParams[b.GetIndex()])
            }))
        }
        _LoadFromJson(b) {
            for (const a of b)
                if (b = this._effectList.GetEffectTypeByName(a.name)) this._activeEffectFlags[b.GetIndex()] =
                    a.active, this._effectParams[b.GetIndex()] = e.EffectList.LoadFxParamsFromJson(a.params);
            this.UpdateActiveEffects()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = [],
        a = [],
        d = [],
        c = e.New(e.CollisionPoly),
        f = e.New(e.CollisionPoly),
        k = e.New(e.Quad),
        g = e.New(e.Rect),
        l = e.New(e.Rect);
    let m = null,
        u = null,
        x = null;
    e.CollisionEngine = class extends e.DefendedBase {
        constructor(p) {
            super();
            this._runtime = p;
            this._registeredCollisions = [];
            this._polyCheckSec = this._polyCheckCount = this._collisionCheckSec = this._collisionCheckCount = 0
        }
        Release() {
            this._runtime = null
        }
        _Update1sStats() {
            this._collisionCheckSec = this._collisionCheckCount;
            this._collisionCheckCount = 0;
            this._polyCheckSec =
                this._polyCheckCount;
            this._polyCheckCount = 0
        }
        Get1secCollisionChecks() {
            return this._collisionCheckSec
        }
        Get1secPolyChecks() {
            return this._polyCheckSec
        }
        RegisterCollision(p, r) {
            const t = p.GetWorldInfo(),
                q = r.GetWorldInfo();
            t && q && t.IsCollisionEnabled() && q.IsCollisionEnabled() && this._registeredCollisions.push([p, r])
        }
        AddRegisteredCollisionCandidates(p, r, t) {
            for (const [q, w] of this._registeredCollisions) {
                let y;
                if (p === q) y = w;
                else if (p === w) y = q;
                else continue;
                y.BelongsToObjectClass(r) && (t.includes(y) || t.push(y))
            }
        }
        CheckRegisteredCollision(p,
            r) {
            if (!this._registeredCollisions.length) return !1;
            for (const [t, q] of this._registeredCollisions)
                if (p === t && r === q || p === q && r === t) return !0;
            return !1
        }
        ClearRegisteredCollisions() {
            e.clearArray(this._registeredCollisions)
        }
        TestOverlap(p, r) {
            if (!p || !r || p === r) return !1;
            p = p.GetWorldInfo();
            r = r.GetWorldInfo();
            if (!p.IsCollisionEnabled() || !r.IsCollisionEnabled()) return !1;
            this._collisionCheckCount++;
            const t = p.GetLayer(),
                q = r.GetLayer();
            return t.IsTransformCompatibleWith(q) ? this._TestOverlap_SameLayers(p, r) : this._TestOverlap_DifferentLayers(p,
                r)
        }
        _TestOverlap_SameLayers(p, r) {
            if (!p.GetBoundingBox().intersectsRect(r.GetBoundingBox())) return !1;
            this._polyCheckCount++;
            if (!p.GetBoundingQuad().intersectsQuad(r.GetBoundingQuad()) || p.HasTilemap() && r.HasTilemap()) return !1;
            if (p.HasTilemap()) return this.TestTilemapOverlap(p, r);
            if (r.HasTilemap()) return this.TestTilemapOverlap(r, p);
            if (!p.HasOwnCollisionPoly() && !r.HasOwnCollisionPoly()) return !0;
            const t = p.GetTransformedCollisionPoly(),
                q = r.GetTransformedCollisionPoly();
            return t.intersectsPoly(q, r.GetX() -
                p.GetX(), r.GetY() - p.GetY())
        }
        _TestOverlap_DifferentLayers(p, r) {
            var t = p.HasTilemap(),
                q = r.HasTilemap();
            if (t && !q) return this.TestTilemapOverlapDifferentLayers(p, r);
            if (q && !t) return this.TestTilemapOverlapDifferentLayers(r, p);
            if (q || t) return !1;
            q = p.GetLayer();
            t = r.GetLayer();
            c.copy(p.GetTransformedCollisionPoly());
            f.copy(r.GetTransformedCollisionPoly());
            var w = c.pointsArr();
            for (let y = 0, C = w.length; y < C; y += 2) {
                const F = y + 1,
                    H = w[F],
                    [M, B] = q.LayerToCanvasCss(w[y] + p.GetX(), H + p.GetY());
                w[y] = M;
                w[F] = B
            }
            p = f.pointsArr();
            for (let y =
                    0, C = p.length; y < C; y += 2) {
                q = y + 1;
                w = p[q];
                const [F, H] = t.LayerToCanvasCss(p[y] + r.GetX(), w + r.GetY());
                p[y] = F;
                p[q] = H
            }
            c.setBboxChanged();
            f.setBboxChanged();
            this._polyCheckCount++;
            return c.intersectsPoly(f, 0, 0)
        }
        TestTilemapOverlapDifferentLayers(p, r) {
            var t = p.GetLayer(),
                q = r.GetLayer();
            m || (m = e.New(e.CollisionPoly));
            u || (u = e.New(e.Rect));
            x || (x = e.New(e.Quad));
            var w = r.GetX(),
                y = r.GetY();
            const [C, F] = q.LayerToCanvasCss(w, y), [H, M] = t.CanvasCssToLayer(C, F);
            t = H - w;
            y = M - y;
            u.copy(r.GetBoundingBox());
            u.offset(t, y);
            if (!p.GetBoundingBox().intersectsRect(u)) return !1;
            x.copy(r.GetBoundingQuad());
            x.offset(t, y);
            this._polyCheckCount++;
            if (!p.GetBoundingQuad().intersectsQuad(x)) return !1;
            m.copy(r.GetTransformedCollisionPoly());
            q = m.pointsArr();
            for (let B = 0, A = q.length; B < A; B += 2) w = B + 1, q[B] += t, q[w] += y;
            m.setBboxChanged();
            return this.TestTilemapOverlap(p, r, H, M, m, u, x)
        }
        TestTilemapOverlap(p, r, t, q, w, y, C) {
            y = void 0 !== y ? y : r.GetBoundingBox();
            const F = p.GetX(),
                H = p.GetY();
            var M = p.GetInstance().GetSdkInstance();
            t = void 0 !== t ? t : r.GetX();
            q = void 0 !== q ? q : r.GetY();
            p = r.HasOwnCollisionPoly();
            C =
                void 0 !== C ? C : r.GetBoundingQuad();
            M.GetCollisionRectCandidates(y, a);
            for (let G = 0, J = a.length; G < J; ++G) {
                var B = a[G];
                M = B.GetRect();
                this._collisionCheckCount++;
                if (y.intersectsRectOffset(M, F, H) && (k.setFromRect(M), k.offset(F, H), k.intersectsQuad(C)))
                    if (p) {
                        var A = void 0 !== w ? w : r.GetTransformedCollisionPoly();
                        if (B = B.GetPoly()) {
                            if (this._polyCheckCount++, B.intersectsPoly(A, t - (F + M.getLeft()), q - (H + M.getTop()))) return e.clearArray(a), !0
                        } else if (c.setFromQuad(k, 0, 0), c.intersectsPoly(A, t, q)) return e.clearArray(a), !0
                    } else if (A =
                    B.GetPoly()) {
                    if (c.setFromQuad(C, 0, 0), A.intersectsPoly(c, -(F + M.getLeft()), -(H + M.getTop()))) return e.clearArray(a), !0
                } else return e.clearArray(a), !0
            }
            e.clearArray(a);
            return !1
        }
        TestAndSelectCanvasPointOverlap(p, r, t, q) {
            const w = p.GetCurrentSol();
            var y = this._runtime.GetCurrentEvent();
            if (!y) throw Error("cannot call outside event");
            y = y.IsOrBlock();
            if (w.IsSelectAll()) {
                q || (w._SetSelectAll(!1), e.clearArray(w._GetOwnInstances()));
                for (var C of p.GetInstances()) {
                    var F = C.GetWorldInfo(),
                        H = F.GetLayer();
                    const [M, B] =
                    H.CanvasCssToLayer(r, t, F.GetTotalZElevation());
                    if (F.ContainsPoint(M, B)) {
                        if (q) return !1;
                        w._PushInstance(C)
                    } else y && w._PushElseInstance(C)
                }
            } else {
                C = y ? w._GetOwnElseInstances() : w._GetOwnInstances();
                F = 0;
                for (let M = 0, B = C.length; M < B; ++M) {
                    H = C[M];
                    const A = H.GetWorldInfo(),
                        G = A.GetLayer(),
                        [J, L] = G.CanvasCssToLayer(r, t, A.GetTotalZElevation());
                    if (A.ContainsPoint(J, L)) {
                        if (q) return !1;
                        y ? w._PushInstance(H) : C[F++] = H
                    } else y && (C[F++] = H)
                }
                q || (C.length = F)
            }
            p.ApplySolToContainer();
            return q ? !0 : w.HasAnyInstances()
        }
        GetCollisionCandidates(p,
            r, t, q) {
            p = p ? 1 !== p.GetParallaxX() || 1 !== p.GetParallaxY() : !1;
            if (r.IsFamily())
                for (const w of r.GetFamilyMembers()) p || w.IsAnyInstanceParallaxed() ? e.appendArray(q, w.GetInstances()) : (w._UpdateAllCollisionCells(), w._GetCollisionCellGrid().QueryRange(t, q));
            else p || r.IsAnyInstanceParallaxed() ? e.appendArray(q, r.GetInstances()) : (r._UpdateAllCollisionCells(), r._GetCollisionCellGrid().QueryRange(t, q))
        }
        GetObjectClassesCollisionCandidates(p, r, t, q) {
            for (const w of r) this.GetCollisionCandidates(p, w, t, q)
        }
        GetSolidCollisionCandidates(p,
            r, t) {
            const q = this._runtime.GetSolidBehavior();
            q && this.GetObjectClassesCollisionCandidates(p, q.GetObjectClasses(), r, t)
        }
        GetJumpthruCollisionCandidates(p, r, t) {
            const q = this._runtime.GetJumpthruBehavior();
            q && this.GetObjectClassesCollisionCandidates(p, q.GetObjectClasses(), r, t)
        }
        IsSolidCollisionAllowed(p, r) {
            return p._IsSolidEnabled() && (!r || r.GetWorldInfo().IsSolidCollisionAllowed(p.GetSavedDataMap().get("solidTags")))
        }
        TestOverlapSolid(p) {
            const r = p.GetWorldInfo();
            this.GetSolidCollisionCandidates(r.GetLayer(),
                r.GetBoundingBox(), b);
            for (const t of b)
                if (this.IsSolidCollisionAllowed(t, p) && this.TestOverlap(p, t)) return e.clearArray(b), t;
            e.clearArray(b);
            return null
        }
        TestRectOverlapSolid(p, r) {
            this.GetSolidCollisionCandidates(null, p, b);
            for (const t of b)
                if (this.IsSolidCollisionAllowed(t, r) && this.TestRectOverlap(p, t)) return e.clearArray(b), t;
            e.clearArray(b);
            return null
        }
        TestOverlapJumpthru(p, r) {
            let t = null;
            r && (t = d, e.clearArray(t));
            const q = p.GetWorldInfo();
            this.GetJumpthruCollisionCandidates(q.GetLayer(), q.GetBoundingBox(),
                b);
            for (const w of b)
                if (w._IsJumpthruEnabled() && this.TestOverlap(p, w))
                    if (r) t.push(w);
                    else return e.clearArray(b), w;
            e.clearArray(b);
            return t
        }
        PushOut(p, r, t, q, w) {
            q = q || 50;
            const y = p.GetWorldInfo(),
                C = y.GetX(),
                F = y.GetY();
            for (let H = 0; H < q; ++H)
                if (y.SetXY(C + r * H, F + t * H), y.SetBboxChanged(), !this.TestOverlap(p, w)) return !0;
            y.SetXY(C, F);
            y.SetBboxChanged();
            return !1
        }
        PushOutSolid(p, r, t, q, w, y) {
            q = q || 50;
            const C = p.GetWorldInfo(),
                F = C.GetX(),
                H = C.GetY();
            let M = null,
                B = null;
            for (let A = 0; A < q; ++A)
                if (C.SetXY(F + r * A, H + t * A), C.SetBboxChanged(), !this.TestOverlap(p, M))
                    if (M = this.TestOverlapSolid(p)) B = M;
                    else if (w && (M = y ? this.TestOverlap(p, y) ? y : null : this.TestOverlapJumpthru(p)) && (B = M), !M) return B && this.PushInFractional(p, r, t, B, 16, !0), !0;
            C.SetXY(F, H);
            C.SetBboxChanged();
            return !1
        }
        PushOutSolidAxis(p, r, t, q) {
            q = q || 50;
            const w = p.GetWorldInfo(),
                y = w.GetX(),
                C = w.GetY();
            let F = null,
                H = null;
            for (let M = 0; M < q; ++M)
                for (let B = 0; 2 > B; ++B) {
                    const A = 2 * B - 1;
                    w.SetXY(y + r * M * A, C + t * M * A);
                    w.SetBboxChanged();
                    if (!this.TestOverlap(p, F))
                        if (F = this.TestOverlapSolid(p)) H = F;
                        else return H &&
                            this.PushInFractional(p, r * A, t * A, H, 16, !0), !0
                }
            w.SetXY(y, C);
            w.SetBboxChanged();
            return !1
        }
        PushInFractional(p, r, t, q, w, y) {
            let C = 2,
                F = !1;
            var H = !1;
            const M = p.GetWorldInfo();
            let B = M.GetX(),
                A = M.GetY();
            for (; C <= w;) H = 1 / C, C *= 2, M.OffsetXY(r * H * (F ? 1 : -1), t * H * (F ? 1 : -1)), M.SetBboxChanged(), this.TestOverlap(p, q) || y && this.TestOverlapSolid(p) ? H = F = !0 : (H = F = !1, B = M.GetX(), A = M.GetY());
            H && (M.SetXY(B, A), M.SetBboxChanged())
        }
        PushOutSolidNearest(p, r = 100) {
            let t = 0;
            const q = p.GetWorldInfo(),
                w = q.GetX(),
                y = q.GetY();
            let C = 0,
                F = this.TestOverlapSolid(p);
            if (!F) return !0;
            for (; t <= r;) {
                let H = 0,
                    M = 0;
                switch (C) {
                    case 0:
                        H = 0;
                        M = -1;
                        t++;
                        break;
                    case 1:
                        H = 1;
                        M = -1;
                        break;
                    case 2:
                        H = 1;
                        M = 0;
                        break;
                    case 3:
                        M = H = 1;
                        break;
                    case 4:
                        H = 0;
                        M = 1;
                        break;
                    case 5:
                        H = -1;
                        M = 1;
                        break;
                    case 6:
                        H = -1;
                        M = 0;
                        break;
                    case 7:
                        M = H = -1
                }
                C = (C + 1) % 8;
                q.SetXY(Math.floor(w + H * t), Math.floor(y + M * t));
                q.SetBboxChanged();
                if (!this.TestOverlap(p, F) && (F = this.TestOverlapSolid(p), !F)) return !0
            }
            q.SetXY(w, y);
            q.SetBboxChanged();
            return !1
        }
        CalculateBounceAngle(p, r, t, q) {
            const w = p.GetWorldInfo(),
                y = w.GetX(),
                C = w.GetY(),
                F = Math.max(10, e.distanceTo(r,
                    t, y, C));
            var H = e.angleTo(r, t, y, C),
                M = q || this.TestOverlapSolid(p);
            if (!M) return e.clampAngle(H + Math.PI);
            let B = M;
            var A = 0,
                G = 0;
            const J = e.toRadians(5);
            let L;
            for (L = 1; 36 > L; ++L) {
                const R = H - L * J;
                w.SetXY(r + Math.cos(R) * F, t + Math.sin(R) * F);
                w.SetBboxChanged();
                if (!this.TestOverlap(p, B) && (B = q ? null : this.TestOverlapSolid(p), !B)) {
                    A = R;
                    break
                }
            }
            36 === L && (A = e.clampAngle(H + Math.PI));
            B = M;
            for (L = 1; 36 > L; ++L)
                if (M = H + L * J, w.SetXY(r + Math.cos(M) * F, t + Math.sin(M) * F), w.SetBboxChanged(), !this.TestOverlap(p, B) && (B = q ? null : this.TestOverlapSolid(p), !B)) {
                    G = M;
                    break
                }
            36 === L && (G = e.clampAngle(H + Math.PI));
            w.SetXY(y, C);
            w.SetBboxChanged();
            if (G === A) return G;
            p = e.angleDiff(G, A) / 2;
            p = e.angleClockwise(G, A) ? e.clampAngle(A + p + Math.PI) : e.clampAngle(G + p);
            A = Math.cos(H);
            H = Math.sin(H);
            G = Math.cos(p);
            p = Math.sin(p);
            r = A * G + H * p;
            return e.angleTo(0, 0, A - 2 * r * G, H - 2 * r * p)
        }
        TestSegmentOverlap(p, r, t, q, w) {
            if (!w) return !1;
            const y = w.GetWorldInfo();
            if (!y.IsCollisionEnabled()) return !1;
            this._collisionCheckCount++;
            g.set(Math.min(p, t), Math.min(r, q), Math.max(p, t), Math.max(r, q));
            if (!y.GetBoundingBox().intersectsRect(g)) return !1;
            if (w.HasTilemap()) return this._TestSegmentOverlapTilemap(p, r, t, q, w, y);
            this._polyCheckCount++;
            return y.GetBoundingQuad().intersectsSegment(p, r, t, q) ? y.HasOwnCollisionPoly() ? y.GetTransformedCollisionPoly().intersectsSegment(y.GetX(), y.GetY(), p, r, t, q) : !0 : !1
        }
        _TestSegmentOverlapTilemap(p, r, t, q, w, y) {
            const C = y.GetX();
            y = y.GetY();
            w = w.GetSdkInstance();
            l.set(p, r, t, q);
            l.normalize();
            w.GetCollisionRectCandidates(l, a);
            for (let H = 0, M = a.length; H < M; ++H) {
                var F = a[H];
                w = F.GetRect();
                this._collisionCheckCount++;
                if (g.intersectsRectOffset(w,
                        C, y) && (k.setFromRect(w), k.offset(C, y), k.intersectsSegment(p, r, t, q)))
                    if (F = F.GetPoly()) {
                        if (this._polyCheckCount++, F.intersectsSegment(C + w.getLeft(), y + w.getTop(), p, r, t, q)) return e.clearArray(a), !0
                    } else return e.clearArray(a), !0
            }
            e.clearArray(a);
            return !1
        }
        TestRectOverlap(p, r) {
            if (!r) return !1;
            const t = r.GetWorldInfo();
            if (!t.IsCollisionEnabled()) return !1;
            this._collisionCheckCount++;
            if (!t.GetBoundingBox().intersectsRect(p)) return !1;
            if (r.HasTilemap()) return this._TestRectOverlapTilemap(p, r, t);
            this._polyCheckCount++;
            k.setFromRect(p);
            if (!t.GetBoundingQuad().intersectsQuad(k)) return !1;
            if (!t.HasOwnCollisionPoly()) return !0;
            c.setFromRect(p, t.GetX(), t.GetY());
            p = t.GetTransformedCollisionPoly();
            return c.intersectsPoly(p, 0, 0)
        }
        _TestRectOverlapTilemap(p, r, t) {
            const q = t.GetX();
            t = t.GetY();
            r.GetSdkInstance().GetCollisionRectCandidates(p, a);
            for (let y = 0, C = a.length; y < C; ++y) {
                var w = a[y];
                r = w.GetRect();
                this._collisionCheckCount++;
                if (p.intersectsRectOffset(r, q, t))
                    if (w = w.GetPoly()) {
                        if (this._polyCheckCount++, c.setFromRect(p, 0, 0), w.intersectsPoly(c, -(q + r.getLeft()), -(t + r.getTop()))) return e.clearArray(a), !0
                    } else return e.clearArray(a), !0
            }
            e.clearArray(a);
            return !1
        }
        TestRayIntersectsInstance(p, r) {
            if (p) {
                var t = p.GetWorldInfo();
                t.IsCollisionEnabled() && (this._collisionCheckCount++, t.GetBoundingBox().intersectsRect(r.rect) && (p.HasTilemap() ? this._TestRayIntersectsTilemap(p, t, r) : (this._polyCheckCount++, t.HasOwnCollisionPoly() ? r.TestInstancePoly(p, t.GetX(), t.GetY(), t.GetTransformedCollisionPoly()) : r.TestInstanceQuad(p, t.GetBoundingQuad()))))
            }
        }
        _TestRayIntersectsTilemap(p,
            r, t) {
            const q = r.GetX(),
                w = r.GetY();
            p.GetSdkInstance().GetCollisionRectCandidates(t.rect, a);
            for (let C = 0, F = a.length; C < F; C++) {
                var y = a[C];
                const H = y.GetRect();
                this._collisionCheckCount++;
                t.rect.intersectsRectOffset(H, q, w) && (y = y.GetPoly(), this._polyCheckCount++, y ? t.TestInstancePoly(p, q + H.getLeft(), w + H.getTop(), y) : t.TestInstanceRect(p, r.GetX(), r.GetY(), H))
            }
            e.clearArray(a)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SparseGrid = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._cellWidth = b;
            this._cellHeight = a;
            this._cells = e.New(e.PairMap)
        }
        Release() {
            this._cells.Release();
            this._cells = null
        }
        GetCell(b, a, d) {
            let c = this._cells.Get(b, a);
            return c ? c : d ? (c = e.New(e.GridCell, this, b, a), this._cells.Set(b, a, c), c) : null
        }
        XToCell(b) {
            b = Math.floor(b / this._cellWidth);
            return isFinite(b) ? b : 0
        }
        YToCell(b) {
            b = Math.floor(b / this._cellHeight);
            return isFinite(b) ? b : 0
        }
        Update(b, a, d) {
            if (a)
                for (let c = a.getLeft(),
                        f = a.getRight(); c <= f; ++c)
                    for (let k = a.getTop(), g = a.getBottom(); k <= g; ++k) {
                        if (d && d.containsPoint(c, k)) continue;
                        const l = this.GetCell(c, k, !1);
                        l && (l.Remove(b), l.IsEmpty() && this._cells.Delete(c, k))
                    }
            if (d)
                for (let c = d.getLeft(), f = d.getRight(); c <= f; ++c)
                    for (let k = d.getTop(), g = d.getBottom(); k <= g; ++k) a && a.containsPoint(c, k) || this.GetCell(c, k, !0).Insert(b)
        }
        QueryRange(b, a) {
            let d = this.XToCell(b.getLeft());
            const c = this.YToCell(b.getTop()),
                f = this.XToCell(b.getRight());
            b = this.YToCell(b.getBottom());
            if (isFinite(f) && isFinite(b))
                for (; d <=
                    f; ++d)
                    for (let k = c; k <= b; ++k) {
                        const g = this.GetCell(d, k, !1);
                        g && g.Dump(a)
                    }
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.GridCell = class extends e.DefendedBase {
        constructor(b, a, d) {
            super();
            this._grid = b;
            this._x = a;
            this._y = d;
            this._instances = e.New(e.ArraySet)
        }
        Release() {
            this._instances.Release();
            this._grid = this._instances = null
        }
        IsEmpty() {
            return this._instances.IsEmpty()
        }
        Insert(b) {
            this._instances.Add(b)
        }
        Remove(b) {
            this._instances.Delete(b)
        }
        Dump(b) {
            e.appendArray(b, this._instances.GetArray())
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Ray = class {
        constructor() {
            this.dy = this.dx = this.y2 = this.x2 = this.y1 = this.x1 = 0;
            this.rect = new e.Rect;
            this.hitFraction = 2;
            this.hitUid = null;
            this.distance = this.hitY = this.hitX = this.hitNormalDy = this.hitNormalDx = this.hitNormal = 0;
            this.normalX = 1;
            this.normalY = 0;
            this.reflectionX = 1;
            this.reflectionY = 0
        }
        DidCollide() {
            return 1.000001 > this.hitFraction
        }
        Set(b, a, d, c) {
            this.x1 = b;
            this.y1 = a;
            this.x2 = d;
            this.y2 = c;
            this.dx = d - b;
            this.dy = c - a;
            this.rect.set(b, a, d, c);
            this.rect.normalize();
            this.hitFraction =
                2;
            this.hitUid = null;
            this.distance = this.hitY = this.hitX = this.hitNormalDy = this.hitNormalDx = this.hitNormal = 0;
            this.normalX = 1;
            this.normalY = 0;
            this.reflectionX = 1;
            this.reflectionY = 0;
            return this
        }
        Complete() {
            if (!1 !== this.DidCollide()) {
                var b = this.dx * this.hitFraction,
                    a = this.dy * this.hitFraction,
                    d = Math.sqrt(b * b + a * a);
                b /= d;
                a /= d;
                this.distance = d - 1E-6;
                this.hitX = this.x1 + b * this.distance;
                this.hitY = this.y1 + a * this.distance;
                this.hitNormal = Math.atan2(this.hitNormalDy, this.hitNormalDx) + Math.PI / 2;
                this.normalX = Math.cos(this.hitNormal);
                this.normalY = Math.sin(this.hitNormal);
                d = b * this.normalX + a * this.normalY;
                this.reflectionX = b - 2 * this.normalX * d;
                this.reflectionY = a - 2 * this.normalY * d;
                0 < d && (this.hitNormal = e.clampAngle(this.hitNormal + Math.PI), this.normalX = -this.normalX, this.normalY = -this.normalY)
            }
        }
        TestInstanceSegment(b, a, d, c, f) {
            const k = e.rayIntersect(this.x1, this.y1, this.x2, this.y2, a, d, c, f);
            0 <= k && k < this.hitFraction && (this.hitFraction = k, this.hitUid = b.GetUID(), this.hitNormalDx = a - c, this.hitNormalDy = d - f)
        }
        TestInstanceRect(b, a, d, c) {
            const f = a + c.getLeft();
            a += c.getRight();
            const k = d + c.getTop();
            d += c.getBottom();
            this.TestInstanceSegment(b, f, k, a, k);
            this.TestInstanceSegment(b, a, k, a, d);
            this.TestInstanceSegment(b, a, d, f, d);
            this.TestInstanceSegment(b, f, d, f, k)
        }
        TestInstanceQuad(b, a) {
            const d = a.getTlx(),
                c = a.getTly(),
                f = a.getTrx(),
                k = a.getTry(),
                g = a.getBrx(),
                l = a.getBry(),
                m = a.getBlx();
            a = a.getBly();
            this.TestInstanceSegment(b, d, c, f, k);
            this.TestInstanceSegment(b, f, k, g, l);
            this.TestInstanceSegment(b, g, l, m, a);
            this.TestInstanceSegment(b, m, a, d, c)
        }
        TestInstancePoly(b, a, d, c) {
            c =
                c.pointsArr();
            for (let f = 0, k = c.length; f < k; f += 2) {
                const g = (f + 2) % k;
                this.TestInstanceSegment(b, c[f] + a, c[f + 1] + d, c[g] + a, c[g + 1] + d)
            }
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = new Set("off crop scale-inner scale-outer letterbox-scale letterbox-integer-scale".split(" ")),
        a = new Set(["high", "low"]),
        d = self.glMatrix.mat4,
        c = d.create(),
        f = e.New(e.Quad),
        k = e.New(e.Rect);
    e.CanvasManager = class extends e.DefendedBase {
        constructor(g) {
            super();
            this._runtime = g;
            this._canvas = null;
            this._isWebGPUEnabled = !1;
            this._webgpuRenderer = this._webglRenderer = null;
            this._gpuPreference = "high-performance";
            this._canvasCssOffsetY = this._canvasCssOffsetX = this._canvasDeviceHeight =
                this._canvasDeviceWidth = this._canvasCssHeight = this._canvasCssWidth = this._windowInnerHeight = this._windowInnerWidth = 0;
            this._enableMipmaps = !0;
            this._drawHeight = this._drawWidth = this._textureAnisotropy = 0;
            this._documentFullscreenMode = this._fullscreenMode = "letterbox-scale";
            this._deviceTransformOffY = this._deviceTransformOffX = 0;
            this._defaultProjectionMatrix = d.create();
            this._fullscreenScalingQuality = this._wantFullscreenScalingQuality = "high";
            this._isDocumentFullscreen = !1;
            this._availableAdditionalRenderTargets = [];
            this._usedAdditionalRenderTargets = new Set;
            this._shaderData = self.C3_Shaders;
            this._gpuTimeEndFrame = this._gpuTimeStartFrame = 0;
            this._gpuLastUtilisation = NaN;
            this._gpuFrameTimingsBuffer = null;
            this._layersGpuProfile = new Map;
            this._gpuCurUtilisation = NaN;
            this._webgpuFrameTimings = new Map;
            this._snapshotFormat = "";
            this._snapshotQuality = 1;
            this._snapshotArea = e.New(e.Rect);
            this._snapshotUrl = "";
            this._snapshotResolve = this._snapshotPromise = null;
            this._loaderStartTime = this._isPastingToDrawingCanvas = 0;
            this._rafId = -1;
            this._loadingProgress = 0;
            this._loadingprogress_handler = l => this._loadingProgress = l.progress;
            this._percentText = null;
            this._splashTextures = {
                logo: null,
                powered: null,
                website: null
            };
            this._splashFadeOutStartTime = this._splashFadeInFinishTime = this._splashFrameNumber = 0;
            this._splashState = "fade-in";
            this._splashDoneResolve = null;
            this._splashDonePromise = new Promise(l => this._splashDoneResolve = l)
        }
        _SetGPUPowerPreference(g) {
            this._gpuPreference = g
        }
        _SetWebGPUEnabled(g) {
            this._isWebGPUEnabled = !!g
        }
        async CreateCanvas(g) {
            this._canvas =
                g.canvas;
            this._runtime.AddDOMComponentMessageHandler("runtime", "window-resize", u => this._OnWindowResize(u));
            this._runtime.AddDOMComponentMessageHandler("runtime", "fullscreenchange", u => this._OnFullscreenChange(u));
            this._runtime.AddDOMComponentMessageHandler("runtime", "fullscreenerror", u => this._OnFullscreenError(u));
            this._canvas.addEventListener("webglcontextlost", u => this._OnWebGLContextLost(u));
            this._canvas.addEventListener("webglcontextrestored", u => this._OnWebGLContextRestored(u));
            this._isDocumentFullscreen = !!g.isFullscreen;
            var l = navigator.gpu && this._isWebGPUEnabled;
            let m = !1;
            if (l) try {
                await this._InitWebGPUContext(!0)
            } catch (u) {
                this._webgpuRenderer = null
            }
            if (!this.GetRenderer()) try {
                await this._InitWebGLContext(!0)
            } catch (u) {
                this._webglRenderer = null
            }
            this.GetRenderer() || (m = !0);
            if (!this.GetRenderer() && l) try {
                await this._InitWebGPUContext(!1)
            } catch (u) {
                this._webgpuRenderer = null
            }
            if (!this.GetRenderer()) try {
                await this._InitWebGLContext(!1)
            } catch (u) {
                this._webglRenderer = null
            }
            l = this.GetRenderer();
            if (!l) throw Error("failed to acquire a renderer - check WebGL or WebGPU is supported");
            l.SetHasMajorPerformanceCaveat(m);
            this.SetSize(g.windowInnerWidth, g.windowInnerHeight, !0);
            this._webgpuRenderer ? await this._InitWebGPU() : this._webglRenderer && await this._InitWebGL();
            l.SetMipmapsEnabled(this._enableMipmaps);
            l.SupportsGPUProfiling() && (this._gpuLastUtilisation = 0);
            g = !1;
            for (const u of this._runtime._GetAllEffectLists()) {
                for (const x of u.GetAllEffectTypes()) x._InitRenderer(l), x.GetShaderProgram().UsesDest() && (g = !0);
                u.UpdateActiveEffects()
            }
            this._runtime._SetUsesAnyBackgroundBlending(g)
        }
        async _InitWebGPUContext(g) {
            g = {
                powerPreference: this._gpuPreference,
                depth: this._runtime.Uses3DFeatures(),
                failIfMajorPerformanceCaveat: g
            };
            this._webgpuRenderer = e.New(e.Gfx.WebGPURenderer);
            await this._webgpuRenderer.Create(this._canvas, g)
        }
        async _InitWebGLContext(g) {
            g = {
                powerPreference: this._gpuPreference,
                enableGpuProfiling: !0,
                depth: this._runtime.Uses3DFeatures(),
                failIfMajorPerformanceCaveat: g
            };
            "Android" === e.Platform.OS && "Chromium" === e.Platform.BrowserEngine && 75 > e.Platform.BrowserVersionNumber && (console.warn("[Construct 3] Disabling WebGL 2 because this device appears to be affected by crbug.com/934823. Install software updates to avoid this."),
                g.maxWebGLVersion = 1);
            "standard" === this._runtime.GetCompositingMode() ? g.alpha = !0 : (g.alpha = !1, g.lowLatency = !0);
            this._webglRenderer = e.New(e.Gfx.WebGLRenderer, this._canvas, g);
            await this._webglRenderer.InitState()
        }
        async _InitWebGPU() {
            if (this._shaderData) {
                const g = [];
                for (const [l, m] of Object.entries(this._shaderData)) {
                    const u = e.Gfx.WebGPUShaderProgram.GetDefaultVertexShaderSource();
                    g.push(this._webgpuRenderer.CreateShaderProgram(l, m.wgsl, u))
                }
                await Promise.all(g)
            }
        }
        async _InitWebGL() {
            if (this._shaderData) {
                const g = [];
                for (const [l, m] of Object.entries(this._shaderData)) {
                    m.src = m.glsl;
                    const u = e.Gfx.WebGLShaderProgram.GetDefaultVertexShaderSource();
                    g.push(this._webglRenderer.CreateShaderProgram(m, u, l))
                }
                await Promise.all(g);
                this._webglRenderer.ResetLastProgram();
                this._webglRenderer.SetTextureFillMode()
            }
            this._webglRenderer.SupportsGPUProfiling() && (this._gpuFrameTimingsBuffer = e.New(e.Gfx.WebGLQueryResultBuffer, this._webglRenderer))
        }
        Release() {
            this._canvas = this._webglRenderer = this._runtime = null
        }
        _OnWindowResize(g) {
            const l =
                this._runtime,
                m = g.devicePixelRatio;
            l.IsInWorker() && (self.devicePixelRatio = m);
            l._SetDevicePixelRatio(m);
            this._isDocumentFullscreen = !!g.isFullscreen;
            this.SetSize(g.innerWidth, g.innerHeight);
            l.UpdateRender();
            l.IsDebug() && (l.HitBreakpoint() || self.C3Debugger.IsDebuggerPaused()) && l.Render()
        }
        _OnFullscreenChange(g) {
            this._isDocumentFullscreen = !!g.isFullscreen;
            this.SetSize(g.innerWidth, g.innerHeight, !0);
            this._runtime.UpdateRender()
        }
        _OnFullscreenError(g) {
            this._isDocumentFullscreen = !!g.isFullscreen;
            this.SetSize(g.innerWidth,
                g.innerHeight, !0);
            this._runtime.UpdateRender()
        }
        SetSize(g, l, m = !1) {
            g = Math.floor(g);
            l = Math.floor(l);
            if (0 >= g || 0 >= l) throw Error("invalid size");
            if (this._windowInnerWidth !== g || this._windowInnerHeight !== l || m) {
                this._windowInnerWidth = g;
                this._windowInnerHeight = l;
                m = this.GetCurrentFullscreenMode();
                "letterbox-scale" === m ? this._CalculateLetterboxScale(g, l) : "letterbox-integer-scale" === m ? this._CalculateLetterboxIntegerScale(g, l) : "off" === m ? this._CalculateFixedSizeCanvas(g, l) : this._CalculateFullsizeCanvas(g, l);
                this._UpdateFullscreenScalingQuality(m);
                this._canvas.width = this._canvasDeviceWidth;
                this._canvas.height = this._canvasDeviceHeight;
                this._runtime.PostComponentMessageToDOM("canvas", "update-size", {
                    marginLeft: this._canvasCssOffsetX,
                    marginTop: this._canvasCssOffsetY,
                    styleWidth: this._canvasCssWidth,
                    styleHeight: this._canvasCssHeight
                });
                g = this.GetRenderer();
                g.SetSize(this._canvasDeviceWidth, this._canvasDeviceHeight, !0);
                for (var u of this._availableAdditionalRenderTargets) g.DeleteRenderTarget(u);
                e.clearArray(this._availableAdditionalRenderTargets);
                g.CalculatePerspectiveMatrix(this._defaultProjectionMatrix,
                    this.GetDrawWidth() / this.GetDrawHeight());
                u = this._runtime.GetLayoutManager();
                u.SetAllLayerProjectionChanged();
                u.SetAllLayerMVChanged()
            }
        }
        GetDefaultProjectionMatrix() {
            return this._defaultProjectionMatrix
        }
        _CalculateLetterboxScale(g, l) {
            const m = this._runtime.GetDevicePixelRatio(),
                u = this._runtime.GetOriginalViewportWidth(),
                x = this._runtime.GetOriginalViewportHeight(),
                p = u / x;
            g / l > p ? (this._canvasCssWidth = Math.round(l * p), this._canvasCssHeight = l, this._canvasCssOffsetX = Math.floor((g - this._canvasCssWidth) / 2), this._canvasCssOffsetY =
                0) : (this._canvasCssWidth = g, this._canvasCssHeight = Math.round(g / p), this._canvasCssOffsetX = 0, this._canvasCssOffsetY = Math.floor((l - this._canvasCssHeight) / 2));
            this._canvasDeviceWidth = Math.round(this._canvasCssWidth * m);
            this._canvasDeviceHeight = Math.round(this._canvasCssHeight * m);
            this._runtime.SetViewportSize(u, x)
        }
        _CalculateLetterboxIntegerScale(g, l) {
            const m = this._runtime.GetDevicePixelRatio();
            1 !== m && (g += 1, l += 1);
            const u = this._runtime.GetOriginalViewportWidth(),
                x = this._runtime.GetOriginalViewportHeight();
            var p = u / x;
            p = g / l > p ? l * p * m / u : g / p * m / x;
            1 < p ? p = Math.floor(p) : 1 > p && (p = 1 / Math.ceil(1 / p));
            this._canvasDeviceWidth = Math.round(u * p);
            this._canvasDeviceHeight = Math.round(x * p);
            this._canvasCssWidth = this._canvasDeviceWidth / m;
            this._canvasCssHeight = this._canvasDeviceHeight / m;
            this._canvasCssOffsetX = Math.max(Math.floor((g - this._canvasCssWidth) / 2), 0);
            this._canvasCssOffsetY = Math.max(Math.floor((l - this._canvasCssHeight) / 2), 0);
            this._runtime.SetViewportSize(u, x)
        }
        _CalculateFullsizeCanvas(g, l) {
            const m = this._runtime.GetDevicePixelRatio();
            this._canvasCssWidth = g;
            this._canvasCssHeight = l;
            this._canvasDeviceWidth = Math.round(this._canvasCssWidth * m);
            this._canvasDeviceHeight = Math.round(this._canvasCssHeight * m);
            this._canvasCssOffsetY = this._canvasCssOffsetX = 0;
            g = this.GetDisplayScale();
            this._runtime.SetViewportSize(this._canvasCssWidth / g, this._canvasCssHeight / g)
        }
        _CalculateFixedSizeCanvas(g, l) {
            const m = this._runtime.GetDevicePixelRatio();
            this._canvasCssWidth = this._runtime.GetViewportWidth();
            this._canvasCssHeight = this._runtime.GetViewportHeight();
            this._canvasDeviceWidth = Math.round(this._canvasCssWidth * m);
            this._canvasDeviceHeight = Math.round(this._canvasCssHeight * m);
            this.IsDocumentFullscreen() ? (this._canvasCssOffsetX = Math.floor((g - this._canvasCssWidth) / 2), this._canvasCssOffsetY = Math.floor((l - this._canvasCssHeight) / 2)) : this._canvasCssOffsetY = this._canvasCssOffsetX = 0;
            this._runtime.SetViewportSize(this._runtime.GetViewportWidth(), this._runtime.GetViewportHeight())
        }
        _UpdateFullscreenScalingQuality(g) {
            if ("high" === this._wantFullscreenScalingQuality) this._drawWidth =
                this._canvasDeviceWidth, this._drawHeight = this._canvasDeviceHeight, this._fullscreenScalingQuality = "high";
            else {
                let m;
                if ("off" === this.GetCurrentFullscreenMode()) {
                    var l = this._runtime.GetViewportWidth();
                    m = this._runtime.GetViewportHeight()
                } else l = this._runtime.GetOriginalViewportWidth(), m = this._runtime.GetOriginalViewportHeight();
                this._canvasDeviceWidth < l && this._canvasDeviceHeight < m ? (this._drawWidth = this._canvasDeviceWidth, this._drawHeight = this._canvasDeviceHeight, this._fullscreenScalingQuality = "high") :
                    (this._drawWidth = l, this._drawHeight = m, this._fullscreenScalingQuality = "low", "scale-inner" === g ? (g = l / m, l = this._windowInnerWidth / this._windowInnerHeight, l < g ? this._drawWidth = this._drawHeight * l : l > g && (this._drawHeight = this._drawWidth / l)) : "scale-outer" === g && (g = l / m, l = this._windowInnerWidth / this._windowInnerHeight, l > g ? this._drawWidth = this._drawHeight * l : l < g && (this._drawHeight = this._drawWidth / l)))
            }
        }
        IsDocumentFullscreen() {
            return this._isDocumentFullscreen
        }
        SetFullscreenMode(g) {
            if (!b.has(g)) throw Error("invalid fullscreen mode");
            this._fullscreenMode = g;
            g = this._runtime.GetLayoutManager();
            g.SetAllLayerProjectionChanged();
            g.SetAllLayerMVChanged()
        }
        GetFullscreenMode() {
            return this._fullscreenMode
        }
        SetDocumentFullscreenMode(g) {
            if (!b.has(g)) throw Error("invalid fullscreen mode");
            this._documentFullscreenMode = g;
            g = this._runtime.GetLayoutManager();
            g.SetAllLayerProjectionChanged();
            g.SetAllLayerMVChanged()
        }
        GetDocumentFullscreenMode() {
            return this._documentFullscreenMode
        }
        GetCurrentFullscreenMode() {
            return this.IsDocumentFullscreen() ? this.GetDocumentFullscreenMode() :
                this.GetFullscreenMode()
        }
        SetFullscreenScalingQuality(g) {
            if (!a.has(g)) throw Error("invalid fullscreen scaling quality");
            this._wantFullscreenScalingQuality = g;
            this._runtime.GetLayoutManager().SetAllLayerProjectionChanged()
        }
        GetSetFullscreenScalingQuality() {
            return this._wantFullscreenScalingQuality
        }
        GetCurrentFullscreenScalingQuality() {
            return this._fullscreenScalingQuality
        }
        static _FullscreenModeNumberToString(g) {
            switch (g) {
                case 0:
                    return "off";
                case 1:
                    return "crop";
                case 2:
                    return "scale-inner";
                case 3:
                    return "scale-outer";
                case 4:
                    return "letterbox-scale";
                case 5:
                    return "letterbox-integer-scale";
                default:
                    throw Error("invalid fullscreen mode");
            }
        }
        GetLastWidth() {
            return this._windowInnerWidth
        }
        GetLastHeight() {
            return this._windowInnerHeight
        }
        GetDrawWidth() {
            return this._drawWidth
        }
        GetDrawHeight() {
            return this._drawHeight
        }
        SetMipmapsEnabled(g) {
            this._enableMipmaps = !!g
        }
        _SetTextureAnisotropy(g) {
            this._textureAnisotropy = g
        }
        GetTextureAnisotropy() {
            return this._textureAnisotropy
        }
        IsRendererContextLost() {
            return this.GetRenderer().IsContextLost()
        }
        _OnWebGLContextLost(g) {
            console.log("[Construct 3] WebGL context lost");
            g.preventDefault();
            this._availableAdditionalRenderTargets = [];
            this._usedAdditionalRenderTargets.clear();
            this._webglRenderer.OnContextLost();
            this._runtime._OnWebGLContextLost()
        }
        async _OnWebGLContextRestored(g) {
            await this._webglRenderer.OnContextRestored();
            await this._LoadWebGLShaderPrograms();
            for (const l of this._runtime._GetAllEffectLists())
                for (const m of l.GetAllEffectTypes()) m._InitRenderer(this._webglRenderer);
            await this._runtime._OnWebGLContextRestored();
            console.log("[Construct 3] WebGL context restored")
        }
        GetWebGLRenderer() {
            return this._webglRenderer
        }
        GetWebGPURenderer() {
            return this._webgpuRenderer
        }
        GetRenderer() {
            return this._webgpuRenderer ||
                this._webglRenderer
        }
        GetRenderScale() {
            return "low" === this._fullscreenScalingQuality ? 1 / this._runtime.GetDevicePixelRatio() : this.GetDisplayScale()
        }
        GetDisplayScale() {
            const g = this.GetCurrentFullscreenMode();
            if ("off" === g || "crop" === g) return 1;
            const l = this._runtime.GetOriginalViewportWidth(),
                m = this._runtime.GetOriginalViewportHeight(),
                u = l / m,
                x = this._canvasDeviceWidth / this._canvasDeviceHeight;
            return "scale-inner" !== g && x > u || "scale-inner" === g && x < u ? this._canvasCssHeight / m : this._canvasCssWidth / l
        }
        SetDeviceTransformOffset(g,
            l) {
            this._deviceTransformOffX = g;
            this._deviceTransformOffY = l
        }
        SetDeviceTransform(g, l, m, u = !0) {
            l = l || this._drawWidth;
            m = m || this._drawHeight;
            const x = l / 2 + this._deviceTransformOffX,
                p = m / 2 + this._deviceTransformOffY;
            if (u) {
                u = this.GetDefaultProjectionMatrix();
                if (l !== this._drawWidth || m !== this._drawHeight) g.CalculatePerspectiveMatrix(c, l / m), u = c;
                g.SetProjectionMatrix(u)
            }
            l = g.CalculateLookAtModelView2(x, p, g.GetDefaultCameraZ() * this._runtime.GetDevicePixelRatio(), x, p, 0, m || this._drawHeight);
            g.SetModelViewMatrix(l)
        }
        SetCssTransform(g,
            l = !0) {
            const m = this._canvasCssWidth / 2,
                u = this._canvasCssHeight / 2;
            l && g.SetProjectionMatrix(this.GetDefaultProjectionMatrix());
            l = g.CalculateLookAtModelView2(m, u, g.GetDefaultCameraZ(), m, u, 0);
            g.SetModelViewMatrix(l)
        }
        GetDeviceWidth() {
            return this._canvasDeviceWidth
        }
        GetDeviceHeight() {
            return this._canvasDeviceHeight
        }
        GetCssWidth() {
            return this._canvasCssWidth
        }
        GetCssHeight() {
            return this._canvasCssHeight
        }
        GetCanvasClientX() {
            return this._canvasCssOffsetX
        }
        GetCanvasClientY() {
            return this._canvasCssOffsetY
        }
        GetAdditionalRenderTarget(g) {
            g.depth =
                this._runtime.Uses3DFeatures();
            const l = this._availableAdditionalRenderTargets,
                m = l.findIndex(x => x.IsCompatibleWithOptions(g));
            let u; - 1 !== m ? (u = l[m], l.splice(m, 1)) : u = this.GetRenderer().CreateRenderTarget(g);
            this._usedAdditionalRenderTargets.add(u);
            return u
        }
        ReleaseAdditionalRenderTarget(g) {
            if (!this._usedAdditionalRenderTargets.has(g)) throw Error("render target not in use");
            this._usedAdditionalRenderTargets.delete(g);
            this._availableAdditionalRenderTargets.push(g)
        }* activeLayersGpuProfiles() {
            for (const g of this._runtime.GetLayoutManager().runningLayouts())
                for (const l of g.GetLayers()) {
                    const m =
                        this._layersGpuProfile.get(l);
                    m && (yield m)
                }
        }
        GetLayerTimingsBuffer(g) {
            if (!this.GetRenderer().SupportsGPUProfiling()) return null;
            let l = this._layersGpuProfile.get(g);
            l || (l = {
                name: g.GetName(),
                timingsBuffer: e.New(e.Gfx.WebGLQueryResultBuffer, this._webglRenderer),
                curUtilisation: 0,
                lastUtilisation: 0
            }, this._layersGpuProfile.set(g, l));
            return l.timingsBuffer
        }
        _Update1sFrameRange() {
            const g = this.GetRenderer();
            if (g.SupportsGPUProfiling() && 0 === this._gpuTimeEndFrame) {
                this._gpuTimeEndFrame = g.GetFrameNumber();
                this._gpuCurUtilisation =
                    NaN;
                for (const l of this.activeLayersGpuProfiles()) l.curUtilisation = NaN
            }
        }
        _UpdateTick() {
            this._webglRenderer && this._webglRenderer.SupportsGPUProfiling() && this._UpdateTick_WebGL();
            this._webgpuRenderer && this._webgpuRenderer.SupportsGPUProfiling() && this._UpdateTick_WebGPU()
        }
        _UpdateTick_WebGL() {
            if (isNaN(this._gpuCurUtilisation) && (this._gpuCurUtilisation = this._gpuFrameTimingsBuffer.GetFrameRangeResultSum(this._gpuTimeStartFrame, this._gpuTimeEndFrame), !isNaN(this._gpuCurUtilisation))) {
                if (this._runtime.IsDebug())
                    for (const g of this.activeLayersGpuProfiles())
                        if (g.curUtilisation =
                            g.timingsBuffer.GetFrameRangeResultSum(this._gpuTimeStartFrame, this._gpuTimeEndFrame), isNaN(g.curUtilisation)) return;
                this._gpuFrameTimingsBuffer.DeleteAllBeforeFrameNumber(this._gpuTimeEndFrame);
                this._gpuLastUtilisation = Math.min(this._gpuCurUtilisation, 1);
                if (this._runtime.IsDebug()) {
                    for (const g of this.activeLayersGpuProfiles()) g.timingsBuffer.DeleteAllBeforeFrameNumber(this._gpuTimeEndFrame), g.lastUtilisation = Math.min(g.curUtilisation, 1);
                    self.C3Debugger.UpdateGPUProfile(this._gpuLastUtilisation, [...this.activeLayersGpuProfiles()])
                }
                this._gpuTimeStartFrame = this._gpuTimeEndFrame;
                this._gpuTimeEndFrame = 0
            }
        }
        GetGPUFrameTimingsBuffer() {
            return this._gpuFrameTimingsBuffer
        }
        _UpdateTick_WebGPU() {
            if (0 !== this._gpuTimeEndFrame) {
                for (var g = this._gpuTimeStartFrame; g < this._gpuTimeEndFrame; ++g) {
                    var l = this._webgpuFrameTimings.get(g);
                    if (l && !l.HasResult()) return
                }
                l = this._runtime.GetMainRunningLayout();
                g = e.MakeFilledArray(l.GetLayerCount() + 1, 0);
                for (var m = this._gpuTimeStartFrame; m < this._gpuTimeEndFrame; ++m) {
                    var u =
                        this._webgpuFrameTimings.get(m);
                    if (u) {
                        u = u.GetResult();
                        for (let x = 0, p = Math.min(g.length, u.length / 2); x < p; ++x) {
                            const r = u[2 * x],
                                t = u[2 * x + 1];
                            g[x] = 0 === Number(r) || 0 === Number(t) ? NaN : g[x] + Number(t - r) / 1E9
                        }
                    }
                }
                this._gpuLastUtilisation = e.clamp(g[0], 0, 1);
                if (this._runtime.IsDebug()) {
                    m = [];
                    l = l.GetLayers();
                    for (let x = 0, p = Math.min(l.length, g.length - 1); x < p; ++x) m.push({
                        name: l[x].GetName(),
                        lastUtilisation: e.clamp(g[x + 1], 0, 1)
                    });
                    self.C3Debugger.UpdateGPUProfile(this._gpuLastUtilisation, m)
                }
                for (g = this._gpuTimeStartFrame; g < this._gpuTimeEndFrame; ++g) this._webgpuFrameTimings.delete(g);
                this._gpuTimeStartFrame = this._gpuTimeEndFrame;
                this._gpuTimeEndFrame = 0
            }
        }
        _AddWebGPUFrameTiming(g) {
            this._webgpuFrameTimings.set(this._webgpuRenderer.GetFrameNumber(), g)
        }
        GetGPUUtilisation() {
            return this._gpuLastUtilisation
        }
        SnapshotCanvas(g, l, m, u, x, p) {
            this._snapshotFormat = g;
            this._snapshotQuality = l;
            this._snapshotArea.setWH(m, u, x, p);
            return this._snapshotPromise ? this._snapshotPromise : this._snapshotPromise = new Promise(r => {
                this._snapshotResolve = r
            })
        }
        _MaybeTakeSnapshot() {
            if (this._snapshotFormat) {
                var g = this._canvas,
                    l = this._snapshotArea,
                    m = e.clamp(Math.floor(l.getLeft()), 0, g.width),
                    u = e.clamp(Math.floor(l.getTop()), 0, g.height),
                    x = l.width();
                x = 0 === x ? g.width - m : e.clamp(Math.floor(x), 0, g.width - m);
                l = l.height();
                l = 0 === l ? g.height - u : e.clamp(Math.floor(l), 0, g.height - u);
                (0 !== m || 0 !== u || x !== g.width || l !== g.height) && 0 < x && 0 < l && (g = e.CreateCanvas(x, l), g.getContext("2d").drawImage(this._canvas, m, u, x, l, 0, 0, x, l));
                e.CanvasToBlob(g, this._snapshotFormat, this._snapshotQuality).then(p => {
                    this._snapshotUrl = URL.createObjectURL(p);
                    this._snapshotPromise =
                        null;
                    this._snapshotResolve(this._snapshotUrl)
                });
                this._snapshotFormat = "";
                this._snapshotQuality = 1
            }
        }
        GetCanvasSnapshotUrl() {
            return this._snapshotUrl
        }
        SetIsPastingToDrawingCanvas(g) {
            g ? this._isPastingToDrawingCanvas++ : this._isPastingToDrawingCanvas--
        }
        IsPastingToDrawingCanvas() {
            return 0 < this._isPastingToDrawingCanvas
        }
        InitLoadingScreen(g) {
            this._webglRenderer && (2 === g ? (this._percentText = e.New(e.Gfx.RendererText, this.GetRenderer()), this._percentText.SetIsAsync(!1), this._percentText.SetFontName("Arial"), this._percentText.SetFontSize(16),
                this._percentText.SetHorizontalAlignment("center"), this._percentText.SetVerticalAlignment("center"), this._percentText.SetSize(300, 200)) : 0 === g ? (g = this._runtime.GetLoadingLogoAsset()) && g.LoadStaticTexture(this._webglRenderer).catch(l => console.warn("[C3 runtime] Failed to create texture for loading logo: ", l)) : 4 === g && (this._LoadSvgSplashImage("splash-images/splash-logo.svg").then(l => {
                "done" === this._splashState ? this._webglRenderer.DeleteTexture(l) : this._splashTextures.logo = l
            }).catch(l => console.warn("Failed to load splash image: ",
                l)), this._LoadBitmapSplashImage("splash-images/splash-poweredby-512.png").then(l => {
                "done" === this._splashState ? this._webglRenderer.DeleteTexture(l) : this._splashTextures.powered = l
            }).catch(l => console.warn("Failed to load splash image: ", l)), this._LoadBitmapSplashImage("splash-images/splash-website-512.png").then(l => {
                "done" === this._splashState ? this._webglRenderer.DeleteTexture(l) : this._splashTextures.website = l
            }).catch(l => console.warn("Failed to load splash image: ", l))))
        }
        async _LoadSvgSplashImage(g) {
            g =
                (new URL(g, this._runtime.GetBaseURL())).toString();
            g = await e.FetchBlob(g);
            g = await this._runtime.RasterSvgImage(g, 2048, 2048);
            return await this._webglRenderer.CreateStaticTextureAsync(g, {
                mipMapQuality: "high"
            })
        }
        async _LoadBitmapSplashImage(g) {
            g = (new URL(g, this._runtime.GetBaseURL())).toString();
            g = await e.FetchBlob(g);
            return await this._webglRenderer.CreateStaticTextureAsync(g, {
                mipMapQuality: "high"
            })
        }
        HideCordovaSplashScreen() {
            this._runtime.PostComponentMessageToDOM("runtime", "hide-cordova-splash")
        }
        StartLoadingScreen() {
            this._loaderStartTime =
                Date.now();
            this._runtime.Dispatcher().addEventListener("loadingprogress", this._loadingprogress_handler);
            this._rafId = requestAnimationFrame(() => this._DrawLoadingScreen());
            3 !== this._runtime.GetLoaderStyle() && this.HideCordovaSplashScreen()
        }
        async EndLoadingScreen() {
            if (this._webglRenderer) {
                this._loadingProgress = 1;
                var g = this._runtime.GetLoaderStyle();
                4 === g && await this._splashDonePromise;
                this._splashDonePromise = this._splashDoneResolve = null; - 1 !== this._rafId && (cancelAnimationFrame(this._rafId), this._rafId = -1);
                this._runtime.Dispatcher().removeEventListener("loadingprogress", this._loadingprogress_handler);
                this._loadingprogress_handler = null;
                this._percentText && (this._percentText.Release(), this._percentText = null);
                this._runtime.ReleaseLoadingLogoAsset();
                this._webglRenderer.Start();
                this._splashTextures.logo && (this._webglRenderer.DeleteTexture(this._splashTextures.logo), this._splashTextures.logo = null);
                this._splashTextures.powered && (this._webglRenderer.DeleteTexture(this._splashTextures.powered), this._splashTextures.powered =
                    null);
                this._splashTextures.website && (this._webglRenderer.DeleteTexture(this._splashTextures.website), this._splashTextures.website = null);
                this._webglRenderer.ClearRgba(0, 0, 0, 0);
                this._webglRenderer.Finish();
                this._splashState = "done";
                this._gpuTimeStartFrame = this._webglRenderer.GetFrameNumber();
                3 === g && this.HideCordovaSplashScreen()
            }
        }
        _DrawLoadingScreen() {
            if (-1 !== this._rafId) {
                var g = this._webglRenderer;
                if (g) {
                    g.Start();
                    this._rafId = -1;
                    var l = this._runtime.GetAssetManager().HasHadErrorLoading(),
                        m = this._runtime.GetLoaderStyle();
                    3 !== m && (this.SetCssTransform(g), g.ClearRgba(0, 0, 0, 0), g.ResetColor(), g.SetTextureFillMode(), g.SetTexture(null));
                    if (0 === m) this._DrawProgressBarAndLogoLoadingScreen(l);
                    else if (1 === m) this._DrawProgressBarLoadingScreen(l, 120, 0);
                    else if (2 === m) this._DrawPercentTextLoadingScreen(l);
                    else if (3 === m) e.noop();
                    else if (4 === m) this._DrawSplashLoadingScreen(l);
                    else throw Error("invalid loader style");
                    g.Finish();
                    this._rafId = requestAnimationFrame(() => this._DrawLoadingScreen())
                }
            }
        }
        _DrawPercentTextLoadingScreen(g) {
            g ? this._percentText.SetColorRgb(1,
                0, 0) : this._percentText.SetColorRgb(.6, .6, .6);
            this._percentText.SetText(Math.round(100 * this._loadingProgress) + "%");
            g = this._canvasCssWidth / 2;
            const l = this._canvasCssHeight / 2;
            f.setRect(g - 150, l - 100, g + 150, l + 100);
            this._webglRenderer.SetTexture(this._percentText.GetTexture());
            this._webglRenderer.Quad3(f, this._percentText.GetTexRect())
        }
        _DrawProgressBarLoadingScreen(g, l, m) {
            const u = this._webglRenderer;
            u.SetColorFillMode();
            g ? u.SetColorRgba(1, 0, 0, 1) : u.SetColorRgba(.118, .565, 1, 1);
            g = this._canvasCssWidth / 2;
            const x =
                this._canvasCssHeight / 2,
                p = l / 2;
            k.setWH(g - p, x - 4 + m, Math.floor(l * this._loadingProgress), 8);
            u.Rect(k);
            k.setWH(g - p, x - 4 + m, l, 8);
            k.offset(-.5, -.5);
            k.inflate(.5, .5);
            u.SetColorRgba(0, 0, 0, 1);
            u.LineRect2(k);
            k.inflate(1, 1);
            u.SetColorRgba(1, 1, 1, 1);
            u.LineRect2(k)
        }
        _DrawProgressBarAndLogoLoadingScreen(g) {
            var l = this._runtime.GetLoadingLogoAsset();
            if (l)
                if (l = l.GetTexture()) {
                    var m = l.GetWidth(),
                        u = l.GetHeight(),
                        x = this._canvasCssWidth / 2,
                        p = this._canvasCssHeight / 2,
                        r = m / 2;
                    u /= 2;
                    f.setRect(x - r, p - u, x + r, p + u);
                    this._webglRenderer.SetTexture(l);
                    this._webglRenderer.Quad(f);
                    this._DrawProgressBarLoadingScreen(g, m, u + 16)
                } else this._DrawProgressBarLoadingScreen(g, 120, 0);
            else this._DrawProgressBarLoadingScreen(g, 120, 0)
        }
        _DrawSplashLoadingScreen(g) {
            const l = this._webglRenderer,
                m = this._splashTextures.logo,
                u = this._splashTextures.powered,
                x = this._splashTextures.website,
                p = Date.now();
            0 === this._splashFrameNumber && (this._loaderStartTime = p);
            const r = this._runtime.IsPreview() || this._runtime.IsFBInstantAvailable() && !this._runtime.IsCordova(),
                t = r ? 0 : 200,
                q = r ? 0 :
                3E3;
            let w = 1;
            "fade-in" === this._splashState ? w = Math.min((p - this._loaderStartTime) / 300, 1) : "fade-out" === this._splashState && (w = Math.max(1 - (p - this._splashFadeOutStartTime) / 300, 0));
            l.SetColorFillMode();
            l.SetColorRgba(.231 * w, .251 * w, .271 * w, w);
            k.set(0, 0, this._canvasCssWidth, this._canvasCssHeight);
            l.Rect(k);
            const y = Math.ceil(this._canvasCssWidth),
                C = Math.ceil(this._canvasCssHeight);
            let F;
            256 < this._canvasCssHeight ? (l.SetColorRgba(.302 * w, .334 * w, .365 * w, w), F = Math.max(.005 * C, 2), k.setWH(0, .8 * C - F / 2, y, F), l.Rect(k), g ?
                l.SetColorRgba(w, 0, 0, w) : l.SetColorRgba(.161 * w, .953 * w, .816 * w, w), g = y * this._loadingProgress, k.setWH(.5 * y - g / 2, .8 * C - F / 2, g, F), l.Rect(k), l.SetColorRgba(w, w, w, w), l.SetTextureFillMode(), u && (g = 1.5 * e.clamp(.22 * C, 105, .6 * y), F = g / 8, k.setWH(.5 * y - g / 2, .2 * C - F / 2, g, F), l.SetTexture(u), l.Rect(k)), m && (F = g = Math.min(.395 * C, .95 * y), k.setWH(.5 * y - g / 2, .485 * C - F / 2, g, F), l.SetTexture(m), l.Rect(k)), x && (g = 1.5 * e.clamp(.22 * C, 105, .6 * y), F = g / 8, k.setWH(.5 * y - g / 2, .868 * C - F / 2, g, F), l.SetTexture(x), l.Rect(k))) : (l.SetColorRgba(.302 * w, .334 * w, .365 *
                w, w), F = Math.max(.005 * C, 2), k.setWH(0, .85 * C - F / 2, y, F), l.Rect(k), g ? l.SetColorRgba(w, 0, 0, w) : l.SetColorRgba(.161 * w, .953 * w, .816 * w, w), g = y * this._loadingProgress, k.setWH(.5 * y - g / 2, .85 * C - F / 2, g, F), l.Rect(k), l.SetColorRgba(w, w, w, w), l.SetTextureFillMode(), m && (F = g = .55 * C, k.setWH(.5 * y - g / 2, .45 * C - F / 2, g, F), l.SetTexture(m), l.Rect(k)));
            this._splashFrameNumber++;
            "fade-in" === this._splashState && 300 <= p - this._loaderStartTime && 2 <= this._splashFrameNumber && (this._splashState = "wait", this._splashFadeInFinishTime = p);
            "wait" === this._splashState &&
                p - this._splashFadeInFinishTime >= q && 1 <= this._loadingProgress && (this._splashState = "fade-out", this._splashFadeOutStartTime = p);
            ("fade-out" === this._splashState && p - this._splashFadeOutStartTime >= 300 + t || r && 1 <= this._loadingProgress && 500 > p - this._loaderStartTime) && this._splashDoneResolve()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3Debugger,
        a = {
            messagePort: null,
            baseUrl: "",
            headless: !1,
            hasDom: !0,
            isInWorker: !1,
            useAudio: !0,
            projectData: "",
            exportType: ""
        };
    let d = !0;
    e.Runtime = class extends e.DefendedBase {
        constructor(c) {
            c = Object.assign({}, a, c);
            super();
            this._messagePort = c.messagePort;
            this._baseUrl = c.baseUrl;
            this._isHeadless = !!c.headless;
            this._hasDom = !!c.hasDom;
            this._isInWorker = !!c.isInWorker;
            d = c.ife;
            this._useAudio = !!c.useAudio;
            this._exportType = c.exportType;
            this._isiOSCordova = !!c.isiOSCordova;
            this._isiOSWebView = !!c.isiOSWebView;
            this._isFBInstantAvailable = !!c.isFBInstantAvailable;
            this._opusWasmScriptUrl = c.opusWasmScriptUrl;
            this._opusWasmBinaryUrl = c.opusWasmBinaryUrl;
            this._isDebugging = this._breakpointsEnabled = this._isDebug = !("preview" !== this._exportType || !c.isDebug);
            this._debuggingDisabled = 0;
            this._additionalLoadPromises = [];
            this._additionalCreatePromises = [];
            this._isUsingCreatePromises = !1;
            this._appId = this._projectUniqueId = this._projectVersion = this._projectName = "";
            this._originalViewportHeight = this._originalViewportWidth =
                0;
            this._devicePixelRatio = self.devicePixelRatio;
            this._loaderStyle = this._viewportHeight = this._viewportWidth = this._parallaxYorigin = this._parallaxXorigin = 0;
            this._usesLoaderLayout = !1;
            this._isLoading = !0;
            this._usesAnyBackgroundBlending = !1;
            this._loadingLogoAsset = null;
            this._assetManager = e.New(e.AssetManager, this, c);
            this._layoutManager = e.New(e.LayoutManager, this);
            this._eventSheetManager = e.New(e.EventSheetManager, this);
            this._pluginManager = e.New(e.PluginManager, this);
            this._collisionEngine = e.New(e.CollisionEngine,
                this);
            this._timelineManager = e.New(e.TimelineManager, this);
            this._transitionManager = e.New(e.TransitionManager, this);
            this._allObjectClasses = [];
            this._objectClassesByName = new Map;
            this._objectClassesBySid = new Map;
            this._familyCount = 0;
            this._allContainers = [];
            this._allEffectLists = [];
            this._currentLayoutStack = [];
            this._instancesPendingCreate = [];
            this._instancesPendingDestroy = new Map;
            this._isFlushingPendingInstances = this._hasPendingInstances = !1;
            this._nextUid = this._objectCount = 0;
            this._instancesByUid = new Map;
            this._instancesToReleaseAtEndOfTick =
                new Set;
            this._instancesToReleaseAffectedObjectClasses = new Set;
            this._objectReferenceTable = [];
            this._jsPropNameTable = [];
            this._canvasManager = null;
            this._uses3dFeatures = !1;
            this._framerateMode = "vsync";
            this._compositingMode = "standard";
            this._sampling = "trilinear";
            this._isPixelRoundingEnabled = !1;
            this._needRender = !0;
            this._isPausedOnBlur = this._pauseOnBlur = !1;
            this._tickCallbacks = {
                normal: f => {
                    this._ruafId = this._rafId = -1;
                    this.Tick(f)
                },
                tickOnly: f => {
                    this._ruafId = -1;
                    this.Tick(f, !1, "skip-render")
                },
                renderOnly: () => {
                    this._rafId = -1;
                    this.Render()
                }
            };
            this._ruafId = this._rafId = -1;
            this._execCount = this._tickCountNoSave = this._tickCount = 0;
            this._hasStartedTicking = this._isInTick = this._hasStarted = !1;
            this._isLayoutFirstTick = !0;
            this._suspendCount = 0;
            this._scheduleTriggersThrottle = new e.PromiseThrottle(1);
            this._randomNumberCallback = () => Math.random();
            this._dt = this._dt1 = this._lastTickTime = this._startTime = 0;
            this._timeScale = 1;
            this._minimumFramerate = 30;
            this._gameTime = e.New(e.KahanSum);
            this._gameTimeRaw = e.New(e.KahanSum);
            this._wallTime = e.New(e.KahanSum);
            this._fpsFrameCount = -1;
            this._mainThreadTime = this._mainThreadTimeCounter = this._fps = this._fpsLastTime = 0;
            this._isLoadingState = !1;
            this._loadFromSlotName = this._saveToSlotName = "";
            this._loadFromJson = null;
            this._lastSaveJson = "";
            this._savegamesStorage = this._projectStorage = null;
            this._dispatcher = e.New(e.Event.Dispatcher);
            this._domEventHandlers = new Map;
            this._pendingResponsePromises = new Map;
            this._nextDomResponseId = 0;
            this._isReadyToHandleEvents = this._didRequestDeviceMotionEvent = this._didRequestDeviceOrientationEvent = !1;
            this._waitingToHandleEvents = [];
            this._eventObjects = {
                pretick: e.New(e.Event, "pretick", !1),
                tick: e.New(e.Event, "tick", !1),
                tick2: e.New(e.Event, "tick2", !1),
                instancedestroy: e.New(e.Event, "instancedestroy", !1),
                beforelayoutchange: e.New(e.Event, "beforelayoutchange", !1),
                layoutchange: e.New(e.Event, "layoutchange", !1)
            };
            this._eventObjects.instancedestroy.instance = null;
            this._userScriptDispatcher = e.New(e.Event.Dispatcher);
            this._userScriptEventObjects = null;
            this._behInstsToTick = e.New(e.RedBlackSet, e.BehaviorInstance.SortByTickSequence);
            this._behInstsToPostTick = e.New(e.RedBlackSet, e.BehaviorInstance.SortByTickSequence);
            this._behInstsToTick2 = e.New(e.RedBlackSet, e.BehaviorInstance.SortByTickSequence);
            this._jobScheduler = e.New(e.JobSchedulerRuntime, this, c.jobScheduler);
            c.canvas && (this._canvasManager = e.New(e.CanvasManager, this));
            this._messagePort.onmessage = f => this._OnMessageFromDOM(f.data);
            this.AddDOMComponentMessageHandler("runtime", "visibilitychange", f => this._OnVisibilityChange(f));
            this.AddDOMComponentMessageHandler("runtime", "opus-decode",
                f => this._WasmDecodeWebMOpus(f.arrayBuffer));
            this.AddDOMComponentMessageHandler("runtime", "get-remote-preview-status-info", () => this._GetRemotePreviewStatusInfo());
            this.AddDOMComponentMessageHandler("runtime", "js-invoke-function", f => this._InvokeFunctionFromJS(f));
            this.AddDOMComponentMessageHandler("runtime", "go-to-last-error-script", self.goToLastErrorScript);
            this._dispatcher.addEventListener("window-blur", f => this._OnWindowBlur(f));
            this._dispatcher.addEventListener("window-focus", () => this._OnWindowFocus());
            this._timelineManager.AddRuntimeListeners();
            this._iRuntime = null;
            this._interfaceMap = new WeakMap;
            this._commonScriptInterfaces = {
                keyboard: null,
                mouse: null,
                touch: null
            }
        }
        static Create(c) {
            return e.New(e.Runtime, c)
        }
        Release() {
            e.clearArray(this._allObjectClasses);
            this._objectClassesByName.clear();
            this._objectClassesBySid.clear();
            this._layoutManager.Release();
            this._layoutManager = null;
            this._eventSheetManager.Release();
            this._eventSheetManager = null;
            this._pluginManager.Release();
            this._pluginManager = null;
            this._assetManager.Release();
            this._assetManager = null;
            this._collisionEngine.Release();
            this._collisionEngine = null;
            this._timelineManager.Release();
            this._timelineManager = null;
            this._transitionManager.Release();
            this._transitionManager = null;
            this._canvasManager && (this._canvasManager.Release(), this._canvasManager = null);
            this._dispatcher.Release();
            this._tickEvent = this._dispatcher = null
        }["_OnMessageFromDOM"](c) {
            const f = c.type;
            if ("event" === f) this._OnEventFromDOM(c);
            else if ("result" === f) this._OnResultFromDOM(c);
            else throw Error(`unknown message '${f}'`);
        }
        _OnEventFromDOM(c) {
            if (this._isReadyToHandleEvents) {
                var f = c.component,
                    k = c.handler,
                    g = c.data,
                    l = c.dispatchOpts,
                    m = !(!l || !l.dispatchRuntimeEvent);
                l = !(!l || !l.dispatchUserScriptEvent);
                var u = c.responseId;
                if ("runtime" === f && (m && (c = new e.Event(k), c.data = g, this._dispatcher.dispatchEventAndWaitAsyncSequential(c)), l)) {
                    c = new e.Event(k, !0);
                    for (const [x, p] of Object.entries(g)) c[x] = p;
                    this.DispatchUserScriptEvent(c)
                }
                if (c = this._domEventHandlers.get(f))
                    if (c = c.get(k)) {
                        m = null;
                        try {
                            m = c(g)
                        } catch (x) {
                            console.error(`Exception in '${f}' handler '${k}':`,
                                x);
                            null !== u && this._PostResultToDOM(u, !1, "" + x);
                            return
                        }
                        null !== u && (m && m.then ? m.then(x => this._PostResultToDOM(u, !0, x)).catch(x => {
                            console.error(`Rejection from '${f}' handler '${k}':`, x);
                            this._PostResultToDOM(u, !1, "" + x)
                        }) : this._PostResultToDOM(u, !0, m))
                    } else m || l || console.warn(`[Runtime] No DOM handler '${k}' for component '${f}'`);
                else m || l || console.warn(`[Runtime] No DOM event handlers for component '${f}'`)
            } else this._waitingToHandleEvents.push(c)
        }
        _PostResultToDOM(c, f, k) {
            this._messagePort.postMessage({
                type: "result",
                responseId: c,
                isOk: f,
                result: k
            })
        }
        _OnResultFromDOM(c) {
            const f = c.responseId,
                k = c.isOk;
            c = c.result;
            const g = this._pendingResponsePromises.get(f);
            k ? g.resolve(c) : g.reject(c);
            this._pendingResponsePromises.delete(f)
        }
        AddDOMComponentMessageHandler(c, f, k) {
            let g = this._domEventHandlers.get(c);
            g || (g = new Map, this._domEventHandlers.set(c, g));
            if (g.has(f)) throw Error(`[Runtime] Component '${c}' already has handler '${f}'`);
            g.set(f, k)
        }
        PostComponentMessageToDOM(c, f, k) {
            this._messagePort.postMessage({
                type: "event",
                component: c,
                handler: f,
                data: k,
                responseId: null
            })
        }
        PostComponentMessageToDOMAsync(c, f, k) {
            const g = this._nextDomResponseId++,
                l = new Promise((m, u) => {
                    this._pendingResponsePromises.set(g, {
                        resolve: m,
                        reject: u
                    })
                });
            this._messagePort.postMessage({
                type: "event",
                component: c,
                handler: f,
                data: k,
                responseId: g
            });
            return l
        }
        PostToDebugger(c) {
            if (!this.IsDebug()) throw Error("not in debug mode");
            this.PostComponentMessageToDOM("runtime", "post-to-debugger", c)
        }
        async Init(c) {
            this.IsDebug() ? await b.Init(this) : self.C3Debugger && self.C3Debugger.InitPreview(this);
            var [f] = await Promise.all([this._assetManager.FetchJson("data.json"), this._MaybeLoadOpusDecoder(), this._jobScheduler.Init()]);
            this._LoadDataJson(f);
            await this._InitialiseCanvas(c);
            this.IsPreview() || console.info("Made with Construct 3, the game and app creator :: https://www.construct.net");
            this.GetWebGLRenderer() ? (f = this.GetWebGLRenderer(), console.info(`[C3 runtime] Hosted in ${this.IsInWorker()?"worker":"DOM"}, rendering with WebGL ${f.GetWebGLVersionNumber()} [${f.GetUnmaskedRenderer()}] (${f.IsDesynchronized()?
"desynchronized":"standard"} compositing)`)) : this.GetWebGPURenderer() && console.info(`[C3 runtime] Hosted in ${this.IsInWorker()?"worker":"DOM"}, rendering with experimental WebGPU`);
            this.GetRenderer().HasMajorPerformanceCaveat() && console.warn("[C3 runtime] The renderer indicates a major performance caveat. Software rendering may be in use. This can result in significantly degraded performance.");
            this._isReadyToHandleEvents = !0;
            for (const k of this._waitingToHandleEvents) this._OnEventFromDOM(k);
            e.clearArray(this._waitingToHandleEvents);
            this._canvasManager && this._canvasManager.StartLoadingScreen();
            for (const k of c.runOnStartupFunctions) this._additionalLoadPromises.push(this._RunOnStartupFunction(k));
            await Promise.all([this._assetManager.WaitForAllToLoad(), ...this._additionalLoadPromises]);
            e.clearArray(this._additionalLoadPromises);
            if (this._assetManager.HasHadErrorLoading()) this._canvasManager && this._canvasManager.HideCordovaSplashScreen();
            else return this._canvasManager && await this._canvasManager.EndLoadingScreen(), await this._dispatcher.dispatchEventAndWaitAsync(new e.Event("beforeruntimestart")),
                await this.Start(), this._messagePort.postMessage({
                    type: "runtime-ready"
                }), this
        }
        async _RunOnStartupFunction(c) {
            try {
                await c(this._iRuntime)
            } catch (f) {
                console.error("[C3 runtime] Error in runOnStartup function: ", f)
            }
        }
        _LoadDataJson(c) {
            c = c.project;
            this._projectName = c[0];
            this._projectVersion = c[16];
            this._projectUniqueId = c[31];
            this._appId = c[38];
            const f = c[39] || "loading-logo.png";
            this._isPixelRoundingEnabled = !!c[9];
            this._originalViewportWidth = this._viewportWidth = c[10];
            this._originalViewportHeight = this._viewportHeight =
                c[11];
            this._parallaxXorigin = this._originalViewportWidth / 2;
            this._parallaxYorigin = this._originalViewportHeight / 2;
            this._compositingMode = c[36];
            this._framerateMode = c[37];
            "low-latency" === this._compositingMode && this.IsAndroidWebView() && 77 >= e.Platform.BrowserVersionNumber && (console.warn("[C3 runtime] Desynchronized (low-latency) compositing is enabled, but is disabled in the Android WebView <=77 due to crbug.com/1008842. Reverting to synchronized (standard) compositing."), this._compositingMode = "standard");
            this._uses3dFeatures = !!c[40];
            this._sampling = c[14];
            this._usesLoaderLayout = !!c[18];
            this._loaderStyle = c[19];
            this._nextUid = c[21];
            this._pauseOnBlur = c[22];
            const k = this._assetManager;
            k._SetAudioFiles(c[7], c[25]);
            k._SetMediaSubfolder(c[8]);
            k._SetFontsSubfolder(c[32]);
            k._SetIconsSubfolder(c[28]);
            k._SetWebFonts(c[29]);
            if (0 === this._loaderStyle) {
                let x = "";
                this.IsPreview() ? k._HasLocalUrlBlob(f) && (x = k.GetLocalUrlAsBlobUrl(f)) : x = k.GetIconsSubfolder() + f;
                x && (this._loadingLogoAsset = k.LoadImage({
                    url: x
                }))
            }
            this._canvasManager &&
                (this._canvasManager.SetFullscreenMode(e.CanvasManager._FullscreenModeNumberToString(c[12])), this._canvasManager.SetFullscreenScalingQuality(c[23] ? "high" : "low"), this._canvasManager.SetMipmapsEnabled(0 !== c[24]), this._canvasManager._SetGPUPowerPreference(c[34]), this._canvasManager._SetTextureAnisotropy(c[41]), this._canvasManager._SetWebGPUEnabled(c[13]));
            this._pluginManager.CreateSystemPlugin();
            this._objectReferenceTable = self.C3_GetObjectRefTable();
            for (var g of c[2]) this._pluginManager.CreatePlugin(g);
            this._objectReferenceTable = self.C3_GetObjectRefTable();
            this._LoadJsPropNameTable();
            for (var l of c[3]) g = e.ObjectClass.Create(this, this._allObjectClasses.length, l), this._allObjectClasses.push(g), this._objectClassesByName.set(g.GetName().toLowerCase(), g), this._objectClassesBySid.set(g.GetSID(), g);
            for (const x of c[4]) this._allObjectClasses[x[0]]._LoadFamily(x);
            for (var m of c[27]) l = m.map(x => this._allObjectClasses[x]), this._allContainers.push(e.New(e.Container, this, l));
            for (const x of this._allObjectClasses) x._OnAfterCreate();
            for (const x of c[5]) this._layoutManager.Create(x);
            (m = c[1]) && (m = this._layoutManager.GetLayoutByName(m)) && this._layoutManager.SetFirstLayout(m);
            for (var u of c[33]) this._timelineManager.Create(u);
            for (const x of c[35]) this._transitionManager.Create(x);
            this._InitScriptInterfaces();
            for (const x of c[6]) this._eventSheetManager.Create(x);
            this._eventSheetManager._PostInit();
            this._InitGlobalVariableScriptInterface();
            e.clearArray(this._objectReferenceTable);
            this.FlushPendingInstances();
            u = "any";
            c = c[20];
            1 === c ?
                u = "portrait" : 2 === c && (u = "landscape");
            this.PostComponentMessageToDOM("runtime", "set-target-orientation", {
                targetOrientation: u
            })
        }
        GetLoaderStyle() {
            return this._loaderStyle
        }
        IsFBInstantAvailable() {
            return this._isFBInstantAvailable
        }
        IsLoading() {
            return this._isLoading
        }
        AddLoadPromise(c) {
            this._additionalLoadPromises.push(c)
        }
        SetUsingCreatePromises(c) {
            this._isUsingCreatePromises = !!c
        }
        AddCreatePromise(c) {
            this._isUsingCreatePromises && this._additionalCreatePromises.push(c)
        }
        GetCreatePromises() {
            return this._additionalCreatePromises
        }
        _GetNextFamilyIndex() {
            return this._familyCount++
        }
        GetFamilyCount() {
            return this._familyCount
        }
        _AddEffectList(c) {
            this._allEffectLists.push(c)
        }
        _GetAllEffectLists() {
            return this._allEffectLists
        }
        async _InitialiseCanvas(c) {
            this._canvasManager &&
                (await this._canvasManager.CreateCanvas(c), this._canvasManager.InitLoadingScreen(this._loaderStyle))
        }
        async _MaybeLoadOpusDecoder() {
            if (!this._assetManager.IsAudioFormatSupported("audio/webm; codecs=opus")) {
                var c = null;
                try {
                    c = this.IsiOSCordova() && this._assetManager.IsFileProtocol() ? await this._assetManager.CordovaFetchLocalFileAsArrayBuffer(this._opusWasmBinaryUrl) : await this._assetManager.FetchArrayBuffer(this._opusWasmBinaryUrl)
                } catch (f) {
                    console.info("Failed to fetch Opus decoder WASM; assuming project has no Opus audio.",
                        f);
                    return
                }
                c ? this.AddJobWorkerBuffer(c, "opus-decoder-wasm") : this.AddJobWorkerBlob(null, "opus-decoder-wasm");
                await this.AddJobWorkerScripts([this._opusWasmScriptUrl])
            }
        }
        async _WasmDecodeWebMOpus(c) {
            return await this.AddJob("OpusDecode", {
                arrayBuffer: c
            }, [c])
        }
        async Start() {
            this._hasStarted = !0;
            this._startTime = Date.now();
            if (this._usesLoaderLayout) {
                for (var c of this._allObjectClasses) c.IsFamily() || c.IsOnLoaderLayout() || !c.IsWorldType() || c.OnCreate();
                this._assetManager.WaitForAllToLoad().then(() => {
                    this._isLoading = !1;
                    this._OnLoadFinished()
                })
            } else this._isLoading = !1;
            this._assetManager.SetInitialLoadFinished();
            this.IsDebug() && b.RuntimeInit(d);
            for (const f of this._layoutManager.GetAllLayouts()) f._CreateGlobalNonWorlds();
            c = this._layoutManager.GetFirstLayout();
            await c._Load(null, this.GetRenderer());
            await c._StartRunning(!0);
            this._fpsLastTime = performance.now();
            this._usesLoaderLayout || this._OnLoadFinished();
            (await this.PostComponentMessageToDOMAsync("runtime", "before-start-ticking")).isSuspended ? this._suspendCount++ :
                this.Tick()
        }
        _OnLoadFinished() {
            this.Trigger(e.Plugins.System.Cnds.OnLoadFinished, null, null);
            this.PostComponentMessageToDOM("runtime", "register-sw")
        }
        GetObjectReference(c) {
            c = Math.floor(c);
            const f = this._objectReferenceTable;
            if (0 > c || c >= f.length) throw Error("invalid object reference");
            return f[c]
        }
        _LoadJsPropNameTable() {
            for (const c of self.C3_JsPropNameTable) {
                const f = e.first(Object.keys(c));
                this._jsPropNameTable.push(f)
            }
        }
        GetJsPropName(c) {
            c = Math.floor(c);
            const f = this._jsPropNameTable;
            if (0 > c || c >= f.length) throw Error("invalid prop reference");
            return f[c]
        }
        HasDOM() {
            return this._hasDom
        }
        IsHeadless() {
            return this._isHeadless
        }
        IsInWorker() {
            return this._isInWorker
        }
        GetBaseURL() {
            return this._baseUrl
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetEventStack() {
            return this._eventSheetManager.GetEventStack()
        }
        GetCurrentEventStackFrame() {
            return this._eventSheetManager.GetCurrentEventStackFrame()
        }
        GetCurrentEvent() {
            return this._eventSheetManager.GetCurrentEvent()
        }
        GetCurrentCondition() {
            return this._eventSheetManager.GetCurrentCondition()
        }
        IsCurrentConditionFirst() {
            return 0 ===
                this.GetCurrentEventStackFrame().GetConditionIndex()
        }
        GetCurrentAction() {
            return this._eventSheetManager.GetCurrentAction()
        }
        GetPluginManager() {
            return this._pluginManager
        }
        GetSystemPlugin() {
            return this._pluginManager.GetSystemPlugin()
        }
        GetObjectClassByIndex(c) {
            c = Math.floor(c);
            if (0 > c || c >= this._allObjectClasses.length) throw new RangeError("invalid index");
            return this._allObjectClasses[c]
        }
        GetObjectClassByName(c) {
            return this._objectClassesByName.get(c.toLowerCase()) || null
        }
        GetObjectClassBySID(c) {
            return this._objectClassesBySid.get(c) ||
                null
        }
        GetSingleGlobalObjectClassByCtor(c) {
            return (c = this._pluginManager.GetPluginByConstructorFunction(c)) ? c.GetSingleGlobalObjectClass() : null
        }
        GetAllObjectClasses() {
            return this._allObjectClasses
        }* allInstances() {
            for (const c of this._allObjectClasses) c.IsFamily() || (yield* c.instances())
        }
        Dispatcher() {
            return this._dispatcher
        }
        UserScriptDispatcher() {
            return this._userScriptDispatcher
        }
        DispatchUserScriptEvent(c) {
            c.runtime = this.GetIRuntime();
            const f = this.IsDebug() && !this._eventSheetManager.IsInEventEngine();
            f &&
                b.StartMeasuringScriptTime();
            this._userScriptDispatcher.dispatchEvent(c);
            f && b.AddScriptTime()
        }
        DispatchUserScriptEventAsyncWait(c) {
            c.runtime = this.GetIRuntime();
            return this._userScriptDispatcher.dispatchEventAndWaitAsync(c)
        }
        GetOriginalViewportWidth() {
            return this._originalViewportWidth
        }
        GetOriginalViewportHeight() {
            return this._originalViewportHeight
        }
        SetOriginalViewportSize(c, f) {
            if (this._originalViewportWidth !== c || this._originalViewportHeight !== f) this._originalViewportWidth = c, this._originalViewportHeight =
                f, c = this.GetLayoutManager(), c.SetAllLayerProjectionChanged(), c.SetAllLayerMVChanged()
        }
        GetViewportWidth() {
            return this._viewportWidth
        }
        GetViewportHeight() {
            return this._viewportHeight
        }
        SetViewportSize(c, f) {
            if (this._viewportWidth !== c || this._viewportHeight !== f) this._viewportWidth = c, this._viewportHeight = f, c = this.GetLayoutManager(), c.SetAllLayerProjectionChanged(), c.SetAllLayerMVChanged()
        }
        _SetDevicePixelRatio(c) {
            this._devicePixelRatio = c
        }
        GetDevicePixelRatio() {
            return this._devicePixelRatio
        }
        GetParallaxXOrigin() {
            return this._parallaxXorigin
        }
        GetParallaxYOrigin() {
            return this._parallaxYorigin
        }
        GetCanvasManager() {
            return this._canvasManager
        }
        GetDrawWidth() {
            return this._canvasManager ?
                this._canvasManager.GetDrawWidth() : this._viewportWidth
        }
        GetDrawHeight() {
            return this._canvasManager ? this._canvasManager.GetDrawHeight() : this._viewportHeight
        }
        GetRenderScale() {
            return this._canvasManager ? this._canvasManager.GetRenderScale() : 1
        }
        GetDisplayScale() {
            return this._canvasManager ? this._canvasManager.GetDisplayScale() : 1
        }
        GetCanvasClientX() {
            return this._canvasManager ? this._canvasManager.GetCanvasClientX() : 0
        }
        GetCanvasClientY() {
            return this._canvasManager ? this._canvasManager.GetCanvasClientY() : 0
        }
        GetCanvasCssWidth() {
            return this._canvasManager ?
                this._canvasManager.GetCssWidth() : 0
        }
        GetCanvasCssHeight() {
            return this._canvasManager ? this._canvasManager.GetCssHeight() : 0
        }
        GetFullscreenMode() {
            return this._canvasManager ? this._canvasManager.GetFullscreenMode() : "off"
        }
        GetAdditionalRenderTarget(c) {
            return this._canvasManager ? this._canvasManager.GetAdditionalRenderTarget(c) : null
        }
        ReleaseAdditionalRenderTarget(c) {
            this._canvasManager && this._canvasManager.ReleaseAdditionalRenderTarget(c)
        }
        _SetUsesAnyBackgroundBlending(c) {
            this._usesAnyBackgroundBlending = !!c
        }
        UsesAnyBackgroundBlending() {
            return this._usesAnyBackgroundBlending
        }
        GetGPUUtilisation() {
            return this._canvasManager ?
                this._canvasManager.GetGPUUtilisation() : NaN
        }
        IsLinearSampling() {
            return "nearest" !== this.GetSampling()
        }
        GetFramerateMode() {
            return this._framerateMode
        }
        GetCompositingMode() {
            return this._compositingMode
        }
        GetSampling() {
            return this._sampling
        }
        UsesLoaderLayout() {
            return this._usesLoaderLayout
        }
        GetLoadingLogoAsset() {
            return this._loadingLogoAsset
        }
        ReleaseLoadingLogoAsset() {
            this._loadingLogoAsset && (this._loadingLogoAsset.Release(), this._loadingLogoAsset = null)
        }
        GetLayoutManager() {
            return this._layoutManager
        }
        GetMainRunningLayout() {
            return this._layoutManager.GetMainRunningLayout()
        }
        GetTimelineManager() {
            return this._timelineManager
        }
        GetTransitionManager() {
            return this._transitionManager
        }
        GetAssetManager() {
            return this._assetManager
        }
        LoadImage(c) {
            return this._assetManager.LoadImage(c)
        }
        CreateInstance(c,
            f, k, g, l) {
            return this.CreateInstanceFromData(c, f, !1, k, g, !1, l, void 0, l)
        }
        CreateInstanceFromData(c, f, k, g, l, m, u, x, p) {
            var r = null;
            let t = null;
            if (c instanceof e.ObjectClass) {
                t = c;
                if (t.IsFamily()) {
                    c = t.GetFamilyMembers();
                    var q = Math.floor(this.Random() * c.length);
                    t = c[q]
                }
                r = t.GetDefaultInstanceData()
            } else r = c, t = this.GetObjectClassByIndex(r[1]);
            var w = t.GetPlugin().IsWorldType();
            if (this._isLoading && w && !t.IsOnLoaderLayout()) return null;
            const y = f;
            w || (f = null);
            var C = k && !m && r && !this._instancesByUid.has(r[2]) ? r[2] : this._nextUid++;
            q = r ? r[0] : null;
            c = e.New(e.Instance, {
                runtime: this,
                objectType: t,
                layer: f,
                worldData: q,
                instVarData: r ? r[3] : null,
                uid: C
            });
            this._instancesByUid.set(C, c);
            C = null;
            w && (C = c.GetWorldInfo(), "undefined" !== typeof g && "undefined" !== typeof l && (C.SetX(g), C.SetY(l)), t._SetAnyCollisionCellChanged(!0));
            f && (p || f._AddInstance(c, !0), 1 === f.GetParallaxX() && 1 === f.GetParallaxY() || t._SetAnyInstanceParallaxed(!0), f.GetLayout().MaybeLoadTexturesFor(t));
            this._objectCount++;
            let F = !0;
            if (x) {
                var H = x.GetObjectClass();
                H.IsInContainer() && t.IsInContainer() &&
                    (x = t.GetContainer(), H = H.GetContainer(), x === H && (F = !1))
            }
            if (t.IsInContainer() && !k && !m && F) {
                for (var M of t.GetContainer().objectTypes()) M !== t && (x = this.CreateInstanceFromData(M, y, !1, C ? C.GetX() : g, C ? C.GetY() : l, !0, !1, void 0, p), c._AddSibling(x));
                for (var B of c.siblings()) {
                    B._AddSibling(c);
                    for (const A of c.siblings()) B !== A && B._AddSibling(A)
                }
            }
            w && !k && u && this._CreateChildInstancesFromData(c, q, C, f, g, l, p);
            if (t.IsInContainer() && !k && !m && u)
                for (const A of c.siblings())
                    if (k = A.GetWorldInfo()) M = A.GetPlugin(), B = A.GetObjectClass().GetDefaultInstanceData()[0],
                        M.IsWorldType() ? this._CreateChildInstancesFromData(A, B, k, f, k.GetX(), k.GetY(), p) : this._CreateChildInstancesFromData(A, B, k, f, void 0, void 0, p);
            !m && u && ("undefined" === typeof g && (g = q[0]), "undefined" === typeof l && (l = q[1]), f = C.GetTopParent(), g = g - C.GetX() + f.GetX(), l = l - C.GetY() + f.GetY(), f.SetXY(g, l));
            t._SetIIDsStale();
            l = r ? e.cloneArray(r[5]) : null;
            r = r ? r[4].map(A => e.cloneArray(A)) : null;
            (w = w && q && q[13]) && c._SetHasTilemap();
            c._CreateSdkInstance(l, r);
            w && (q = q[13], c.GetSdkInstance().LoadTilemapData(q[2], q[0], q[1]));
            this._instancesPendingCreate.push(c);
            this._hasPendingInstances = !0;
            this.IsDebug() && b.InstanceCreated(c);
            return c
        }
        _CreateChildInstancesFromData(c, f, k, g, l, m, u) {
            var x = k.GetSceneGraphZIndexExportData(),
                p = k.GetSceneGraphChildrenExportData();
            c.GetWorldInfo().SetSceneGraphZIndex(x);
            if (p) {
                "undefined" === typeof l && (l = f[0]);
                "undefined" === typeof m && (m = f[1]);
                x = new Set;
                k = f[0];
                f = f[1];
                for (const y of p) {
                    var r = y[1],
                        t = y[2];
                    p = y[3];
                    var q = !!y[4];
                    const C = y[5];
                    t = this._layoutManager.GetLayoutBySID(y[0]).GetLayer(r).GetInitialInstanceData(t);
                    r = this.GetObjectClassByIndex(t[1]);
                    var w = c.HasSibling(r);
                    const F = x.has(r);
                    w && !F && q ? (q = c.GetSibling(r), w = l + t[0][0] - k, t = m + t[0][1] - f, q.GetWorldInfo().SetXY(w, t), q.GetWorldInfo().SetSceneGraphZIndex(C), c.AddChild(q, {
                        transformX: !!(p >> 0 & 1),
                        transformY: !!(p >> 1 & 1),
                        transformWidth: !!(p >> 2 & 1),
                        transformHeight: !!(p >> 3 & 1),
                        transformAngle: !!(p >> 4 & 1),
                        destroyWithParent: !!(p >> 5 & 1),
                        transformZElevation: !!(p >> 6 & 1)
                    }), x.add(r)) : (r = this.CreateInstanceFromData(t, g, !1, l + t[0][0] - k, m + t[0][1] - f, !1, !0, c, u), r.GetWorldInfo().SetSceneGraphZIndex(C),
                        c.AddChild(r, {
                            transformX: !!(p >> 0 & 1),
                            transformY: !!(p >> 1 & 1),
                            transformWidth: !!(p >> 2 & 1),
                            transformHeight: !!(p >> 3 & 1),
                            transformAngle: !!(p >> 4 & 1),
                            destroyWithParent: !!(p >> 5 & 1),
                            transformZElevation: !!(p >> 6 & 1)
                        }))
                }
            }
        }
        DestroyInstance(c) {
            if (!this._instancesToReleaseAtEndOfTick.has(c)) {
                var f = c.GetObjectClass(),
                    k = this._instancesPendingDestroy.get(f);
                if (k) {
                    if (k.has(c)) return;
                    k.add(c)
                } else k = new Set, k.add(c), this._instancesPendingDestroy.set(f, k);
                this.IsDebug() && b.InstanceDestroyed(c);
                c._MarkDestroyed();
                this._hasPendingInstances = !0;
                if (c.IsInContainer())
                    for (const g of c.siblings()) this.DestroyInstance(g);
                for (const g of c.children()) g.GetDestroyWithParent() && this.DestroyInstance(g);
                this._layoutManager.IsEndingLayout() || this._isLoadingState || (f = this.GetEventSheetManager(), f.BlockFlushingInstances(!0), c._TriggerOnDestroyed(), f.BlockFlushingInstances(!1));
                c._FireDestroyedScriptEvents(this._layoutManager.IsEndingLayout())
            }
        }
        FlushPendingInstances() {
            this._hasPendingInstances && (this._isFlushingPendingInstances = !0, this._FlushInstancesPendingCreate(),
                this._FlushInstancesPendingDestroy(), this._hasPendingInstances = this._isFlushingPendingInstances = !1, this.UpdateRender())
        }
        _FlushInstancesPendingCreate() {
            for (const c of this._instancesPendingCreate) {
                const f = c.GetObjectClass();
                f._AddInstance(c);
                for (const k of f.GetFamilies()) k._AddInstance(c), k._SetIIDsStale()
            }
            e.clearArray(this._instancesPendingCreate)
        }
        _FlushInstancesPendingDestroy() {
            this._dispatcher.SetDelayRemoveEventsEnabled(!0);
            for (const [c, f] of this._instancesPendingDestroy.entries()) this._FlushInstancesPendingDestroyForObjectClass(c,
                f), f.clear();
            this._instancesPendingDestroy.clear();
            this._dispatcher.SetDelayRemoveEventsEnabled(!1)
        }
        _FlushInstancesPendingDestroyForObjectClass(c, f) {
            for (const g of f) {
                var k = this._eventObjects.instancedestroy;
                k.instance = g;
                this._dispatcher.dispatchEvent(k);
                this._instancesByUid.delete(g.GetUID());
                if (k = g.GetWorldInfo()) k._RemoveFromCollisionCells(), k._RemoveFromRenderCells(), k._MarkDestroyed();
                this._instancesToReleaseAtEndOfTick.add(g);
                this._objectCount--
            }
            e.arrayRemoveAllInSet(c.GetInstances(), f);
            c._SetIIDsStale();
            this._instancesToReleaseAffectedObjectClasses.add(c);
            0 === c.GetInstances().length && c._SetAnyInstanceParallaxed(!1);
            for (const g of c.GetFamilies()) e.arrayRemoveAllInSet(g.GetInstances(), f), g._SetIIDsStale(), this._instancesToReleaseAffectedObjectClasses.add(g);
            if (c.GetPlugin().IsWorldType()) {
                c = new Set([...f].map(g => g.GetWorldInfo().GetLayer()));
                for (const g of c) g._RemoveAllInstancesInSet(f)
            }
        }
        _GetInstancesPendingCreate() {
            return this._instancesPendingCreate
        }* instancesPendingCreateForObjectClass(c) {
            for (const f of this._GetInstancesPendingCreate()) c.IsFamily() ?
                f.GetObjectClass().BelongsToFamily(c) && (yield f) : f.GetObjectClass() === c && (yield f)
        }
        _GetNewUID() {
            return this._nextUid++
        }
        _MapInstanceByUID(c, f) {
            this._instancesByUid.set(c, f)
        }
        _OnWebGLContextLost() {
            this._dispatcher.dispatchEvent(e.New(e.Event, "webglcontextlost"));
            this.SetSuspended(!0);
            for (var c of this._allObjectClasses) !c.IsFamily() && c.HasLoadedTextures() && c.ReleaseTextures();
            (c = this.GetMainRunningLayout()) && c._OnWebGLContextLost();
            e.ImageInfo.OnWebGLContextLost();
            e.ImageAsset.OnWebGLContextLost()
        }
        async _OnWebGLContextRestored() {
            await this.GetMainRunningLayout()._Load(null,
                this.GetWebGLRenderer());
            this._dispatcher.dispatchEvent(e.New(e.Event, "webglcontextrestored"));
            this.SetSuspended(!1);
            this.UpdateRender()
        }
        _OnVisibilityChange(c) {
            this.SetSuspended(c.hidden)
        }
        _OnWindowBlur(c) {
            this.IsPreview() && this._pauseOnBlur && !e.Platform.IsMobile && !c.data.parentHasFocus && (this.SetSuspended(!0), this._isPausedOnBlur = !0)
        }
        _OnWindowFocus() {
            this._isPausedOnBlur && (this.SetSuspended(!1), this._isPausedOnBlur = !1)
        }
        _RequestAnimationFrame() {
            const c = this._tickCallbacks;
            "vsync" === this._framerateMode ?
                -1 === this._rafId && (this._rafId = self.requestAnimationFrame(c.normal)) : "unlimited-tick" === this._framerateMode ? (-1 === this._ruafId && (this._ruafId = e.RequestUnlimitedAnimationFrame(c.tickOnly)), -1 === this._rafId && (this._rafId = self.requestAnimationFrame(c.renderOnly))) : -1 === this._ruafId && (this._ruafId = e.RequestUnlimitedAnimationFrame(c.normal))
        }
        _CancelAnimationFrame() {
            -1 !== this._rafId && (self.cancelAnimationFrame(this._rafId), this._rafId = -1); - 1 !== this._ruafId && (e.CancelUnlimitedAnimationFrame(this._ruafId),
                this._ruafId = -1)
        }
        IsSuspended() {
            return 0 < this._suspendCount
        }
        SetSuspended(c) {
            var f = this.IsSuspended();
            this._suspendCount += c ? 1 : -1;
            0 > this._suspendCount && (this._suspendCount = 0);
            c = this.IsSuspended();
            !f && c ? (console.log("[Construct 3] Suspending"), this._CancelAnimationFrame(), this._dispatcher.dispatchEvent(e.New(e.Event, "suspend")), this.Trigger(e.Plugins.System.Cnds.OnSuspend, null, null)) : f && !c && (console.log("[Construct 3] Resuming"), this._fpsLastTime = this._lastTickTime = f = performance.now(), this._mainThreadTimeCounter =
                this._mainThreadTime = this._fps = this._fpsFrameCount = 0, this._dispatcher.dispatchEvent(e.New(e.Event, "resume")), this.Trigger(e.Plugins.System.Cnds.OnResume, null, null), this.HitBreakpoint() || this.Tick(f))
        }
        _AddBehInstToTick(c) {
            this._behInstsToTick.Add(c)
        }
        _AddBehInstToPostTick(c) {
            this._behInstsToPostTick.Add(c)
        }
        _AddBehInstToTick2(c) {
            this._behInstsToTick2.Add(c)
        }
        _RemoveBehInstToTick(c) {
            this._behInstsToTick.Remove(c)
        }
        _RemoveBehInstToPostTick(c) {
            this._behInstsToPostTick.Remove(c)
        }
        _RemoveBehInstToTick2(c) {
            this._behInstsToTick2.Remove(c)
        }
        _BehaviorTick() {
            this._behInstsToTick.SetQueueingEnabled(!0);
            for (const c of this._behInstsToTick) c.Tick();
            this._behInstsToTick.SetQueueingEnabled(!1)
        }
        _BehaviorPostTick() {
            this._behInstsToPostTick.SetQueueingEnabled(!0);
            for (const c of this._behInstsToPostTick) c.PostTick();
            this._behInstsToPostTick.SetQueueingEnabled(!1)
        }
        _BehaviorTick2() {
            this._behInstsToTick2.SetQueueingEnabled(!0);
            for (const c of this._behInstsToTick2) c.Tick2();
            this._behInstsToTick2.SetQueueingEnabled(!1)
        }* _DebugBehaviorTick() {
            this._behInstsToTick.SetQueueingEnabled(!0);
            for (const c of this._behInstsToTick) {
                const f =
                    c.Tick();
                e.IsIterator(f) && (yield* f)
            }
            this._behInstsToTick.SetQueueingEnabled(!1)
        }* _DebugBehaviorPostTick() {
            this._behInstsToPostTick.SetQueueingEnabled(!0);
            for (const c of this._behInstsToPostTick) {
                const f = c.PostTick();
                e.IsIterator(f) && (yield* f)
            }
            this._behInstsToPostTick.SetQueueingEnabled(!1)
        }* _DebugBehaviorTick2() {
            this._behInstsToTick2.SetQueueingEnabled(!0);
            for (const c of this._behInstsToTick2) {
                const f = c.Tick2();
                e.IsIterator(f) && (yield* f)
            }
            this._behInstsToTick2.SetQueueingEnabled(!1)
        }
        async Tick(c, f,
            k) {
            this._hasStartedTicking = !0;
            const g = "background-wake" === k;
            k = "background-wake" !== k && "skip-render" !== k;
            this._hasStarted && (!this.IsSuspended() || f || g) && (f = performance.now(), this._isInTick = !0, this._MeasureDt(c || 0), c = this.Step_BeforePreTick(), this.IsDebugging() && await c, c = this._dispatcher.dispatchEventAndWait_AsyncOptional(this._eventObjects.pretick), c instanceof Promise && await c, c = this.Step_AfterPreTick(), this.IsDebugging() && await c, this._NeedsHandleSaveOrLoad() && await this._HandleSaveOrLoad(), this.GetLayoutManager().IsPendingChangeMainLayout() &&
                await this._MaybeChangeLayout(), c = this.Step_RunEventsEtc(), this.IsDebugging() && await c, k && this.Render(), this.IsSuspended() || g || this._RequestAnimationFrame(), this._tickCount++, this._tickCountNoSave++, this._execCount++, this._isInTick = !1, this._mainThreadTimeCounter += performance.now() - f)
        }
        async Step_BeforePreTick() {
            const c = this._eventSheetManager,
                f = this.IsDebug();
            this.FlushPendingInstances();
            c.BlockFlushingInstances(!0);
            this.PushCurrentLayout(this.GetMainRunningLayout());
            f && b.StartMeasuringTime();
            this.IsDebugging() ?
                await c.DebugRunScheduledWaits() : c.RunScheduledWaits();
            f && b.AddEventsTime();
            this.PopCurrentLayout();
            c.BlockFlushingInstances(!1);
            this.FlushPendingInstances();
            c.BlockFlushingInstances(!0)
        }
        async Step_AfterPreTick() {
            const c = this.IsDebug(),
                f = this.IsDebugging(),
                k = this._dispatcher,
                g = this._eventObjects,
                l = this._userScriptEventObjects;
            c && b.StartMeasuringTime();
            f ? await this.DebugIterateAndBreak(this._DebugBehaviorTick()) : this._BehaviorTick();
            f ? await this.DebugIterateAndBreak(this._DebugBehaviorPostTick()) :
                this._BehaviorPostTick();
            c && b.AddBehaviorTickTime();
            c && b.StartMeasuringTime();
            f ? await this.DebugFireGeneratorEventAndBreak(g.tick) : k.dispatchEvent(g.tick);
            c && b.AddPluginTickTime();
            this._eventSheetManager.BlockFlushingInstances(!1);
            this.DispatchUserScriptEvent(l.tick)
        }
        async Step_RunEventsEtc() {
            const c = this._eventSheetManager,
                f = this._dispatcher,
                k = this._eventObjects,
                g = this.IsDebug(),
                l = this.IsDebugging();
            g && b.StartMeasuringTime();
            l ? await c.DebugRunEvents(this._layoutManager) : c.RunEvents(this._layoutManager);
            g && b.AddEventsTime();
            this._collisionEngine.ClearRegisteredCollisions();
            this._ReleaseInstancesAtEndOfTick();
            this._isLayoutFirstTick = !1;
            c.BlockFlushingInstances(!0);
            g && b.StartMeasuringTime();
            l ? await this.DebugIterateAndBreak(this._DebugBehaviorTick2()) : this._BehaviorTick2();
            g && b.AddBehaviorTickTime();
            g && b.StartMeasuringTime();
            l ? await this.DebugFireGeneratorEventAndBreak(k.tick2) : f.dispatchEvent(k.tick2);
            g && b.AddPluginTickTime();
            c.BlockFlushingInstances(!1);
            l && await c.RunQueuedDebugTriggersAsync()
        }
        _ReleaseInstancesAtEndOfTick() {
            if (0 !==
                this._instancesToReleaseAtEndOfTick.size) {
                var c = this._dispatcher;
                c.SetDelayRemoveEventsEnabled(!0);
                for (const f of this._instancesToReleaseAffectedObjectClasses) f.GetSolStack().RemoveInstances(this._instancesToReleaseAtEndOfTick);
                this._instancesToReleaseAffectedObjectClasses.clear();
                this._eventSheetManager.RemoveInstancesFromScheduledWaits(this._instancesToReleaseAtEndOfTick);
                for (const f of this._instancesToReleaseAtEndOfTick) f.Release();
                this._instancesToReleaseAtEndOfTick.clear();
                c.SetDelayRemoveEventsEnabled(!1)
            }
        }
        async _MaybeChangeLayout() {
            const c =
                this.GetLayoutManager();
            let f = 0;
            for (; c.IsPendingChangeMainLayout() && 10 > f++;) await this._DoChangeLayout(c.GetPendingChangeMainLayout())
        }
        _MeasureDt(c) {
            let f = 0;
            0 !== this._lastTickTime && (f = Math.max(c - this._lastTickTime, 0) / 1E3, .5 < f && (f = 0), this._dt1 = Math.min(f, 1 / this._minimumFramerate));
            this._lastTickTime = c;
            this._dt = this._dt1 * this._timeScale;
            this._gameTime.Add(this._dt);
            this._gameTimeRaw.Add(f * this._timeScale);
            this._wallTime.Add(this._dt1);
            this._canvasManager && this._canvasManager._UpdateTick();
            1E3 <= c - this._fpsLastTime &&
                (this._fpsLastTime += 1E3, 1E3 <= c - this._fpsLastTime && (this._fpsLastTime = c), this._fps = this._fpsFrameCount, this._fpsFrameCount = 0, this._mainThreadTime = Math.min(this._mainThreadTimeCounter / 1E3, 1), this._mainThreadTimeCounter = 0, this._canvasManager && this._canvasManager._Update1sFrameRange(), this._collisionEngine._Update1sStats(), this.IsDebug() && b.Update1sPerfStats());
            this._fpsFrameCount++
        }
        async _DoChangeLayout(c) {
            const f = this._dispatcher,
                k = this.GetLayoutManager().GetMainRunningLayout();
            await k._StopRunning();
            k._Unload(c, this.GetRenderer());
            k === c && this._eventSheetManager.ClearAllScheduledWaits();
            this._collisionEngine.ClearRegisteredCollisions();
            this._ReleaseInstancesAtEndOfTick();
            f.dispatchEvent(this._eventObjects.beforelayoutchange);
            e.Asyncify.SetHighThroughputMode(!0);
            await c._Load(k, this.GetRenderer());
            e.Asyncify.SetHighThroughputMode(!1);
            await c._StartRunning(!1);
            f.dispatchEvent(this._eventObjects.layoutchange);
            this.UpdateRender();
            this._isLayoutFirstTick = !0;
            this.FlushPendingInstances()
        }
        UpdateRender() {
            this._needRender = !0
        }
        GetWebGLRenderer() {
            return this._canvasManager ? this._canvasManager.GetWebGLRenderer() : null
        }
        GetWebGPURenderer() {
            return this._canvasManager ? this._canvasManager.GetWebGPURenderer() : null
        }
        GetRenderer() {
            return this._canvasManager ? this._canvasManager.GetRenderer() : null
        }
        Render() {
            const c = this._canvasManager;
            if (c && !c.IsRendererContextLost()) {
                var f = this.GetRenderer(),
                    k = f.SupportsGPUProfiling(),
                    g = k && f.IsWebGL();
                k = k && f.IsWebGPU();
                g && f.CheckForQueryResults();
                if (this._needRender) {
                    var l = this._layoutManager.GetMainRunningLayout();
                    f.Start();
                    var m = this.IsDebug();
                    m && b.StartMeasuringTime();
                    this._needRender = !1;
                    var u = null;
                    g && (u = c.GetGPUFrameTimingsBuffer().AddTimeElapsedQuery(), f.StartQuery(u));
                    g = null;
                    k && (g = f.StartFrameTiming(2 * (1 + l.GetLayerCount())), f.WriteTimestamp(0));
                    this.Uses3DFeatures() && "low" === c.GetCurrentFullscreenScalingQuality() ? f.SetFixedSizeDepthBuffer(c.GetDrawWidth(), c.GetDrawHeight()) : f.SetAutoSizeDepthBuffer();
                    this._Render(this.GetRenderer(), l);
                    u && f.EndQuery(u);
                    k && (f.WriteTimestamp(1), this._canvasManager._AddWebGPUFrameTiming(g));
                    f.Finish();
                    m && (b.AddDrawCallsTime(), b.UpdateInspectHighlight());
                    c && c._MaybeTakeSnapshot()
                } else f.IncrementFrameNumber()
            }
        }
        _Render(c, f) {
            c.SetTextureFillMode();
            c.SetAlphaBlend();
            c.SetColorRgba(1, 1, 1, 1);
            c.SetRenderTarget(null);
            c.SetTexture(null);
            c.SetDepthEnabled(this.Uses3DFeatures());
            f.Draw(c)
        }
        Trigger(c, f, k) {
            if (!this._hasStarted) return !1;
            var g = !this._isInTick && !this._eventSheetManager.IsInTrigger();
            let l = 0;
            g && (l = performance.now());
            const m = this.IsDebug();
            m && this.SetDebuggingEnabled(!1);
            c = this._eventSheetManager._Trigger(this._layoutManager,
                c, f, k);
            g && (g = performance.now() - l, this._mainThreadTimeCounter += g, m && b.AddTriggersTime(g));
            m && this.SetDebuggingEnabled(!0);
            return c
        }
        DebugTrigger(c, f, k) {
            if (!this.IsDebug()) return this.Trigger(c, f, k);
            if (this.HitBreakpoint()) throw Error("called DebugTrigger() while stopped on breakpoint");
            if (!this._isInTick && !this._eventSheetManager.IsInTrigger()) throw Error("called DebugTrigger() outside of event code - use TriggerAsync() instead");
            return this._eventSheetManager._DebugTrigger(this._layoutManager, c, f,
                k)
        }
        async TriggerAsync(c, f, k) {
            if (!this.IsDebugging()) return this.Trigger(c, f, k);
            if (!this._hasStarted) return !1;
            if (this.HitBreakpoint()) return this._eventSheetManager.QueueDebugTrigger(c, f, k);
            if (!this.GetMainRunningLayout()) return this._eventSheetManager.QueueTrigger(c, f, k);
            const g = performance.now();
            c = this._eventSheetManager._DebugTrigger(this._layoutManager, c, f, k);
            for (f = c.next(); !f.done;) await this.DebugBreak(f.value), f = c.next();
            this.IsSuspended() || this._eventSheetManager.IsInTrigger() || (await this._eventSheetManager.RunQueuedDebugTriggersAsync(),
                this._hasStartedTicking && !this._isInTick && this._RequestAnimationFrame());
            this._mainThreadTimeCounter += performance.now() - g;
            return f.value
        }
        FastTrigger(c, f, k) {
            const g = this.IsDebug();
            g && this.SetDebuggingEnabled(!1);
            c = this._eventSheetManager._FastTrigger(this._layoutManager, c, f, k);
            g && this.SetDebuggingEnabled(!0);
            return c
        }
        DebugFastTrigger(c, f, k) {
            return this._eventSheetManager._DebugFastTrigger(this._layoutManager, c, f, k)
        }
        ScheduleTriggers(c) {
            return this._scheduleTriggersThrottle.Add(c)
        }
        PushCurrentLayout(c) {
            this._currentLayoutStack.push(c)
        }
        PopCurrentLayout() {
            if (!this._currentLayoutStack.length) throw Error("layout stack empty");
            this._currentLayoutStack.pop()
        }
        GetCurrentLayout() {
            return this._currentLayoutStack.length ? this._currentLayoutStack.at(-1) : this.GetMainRunningLayout()
        }
        GetDt(c) {
            return c && -1 !== c.GetTimeScale() ? this._dt1 * c.GetTimeScale() : this._dt
        }
        _GetDtFast() {
            return this._dt
        }
        GetDt1() {
            return this._dt1
        }
        GetTimeScale() {
            return this._timeScale
        }
        SetTimeScale(c) {
            if (isNaN(c) || 0 > c) c = 0;
            this._timeScale = c
        }
        SetMinimumFramerate(c) {
            this._minimumFramerate = e.clamp(c, 1, 120)
        }
        GetMinimumFramerate() {
            return this._minimumFramerate
        }
        GetFPS() {
            return this._fps
        }
        GetMainThreadTime() {
            return this._mainThreadTime
        }
        GetStartTime() {
            return this._startTime
        }
        GetGameTime() {
            return this._gameTime.Get()
        }
        GetGameTimeRaw() {
            return this._gameTimeRaw.Get()
        }
        GetWallTime() {
            return this._wallTime.Get()
        }
        GetTickCount() {
            return this._tickCount
        }
        GetTickCountNoSave() {
            return this._tickCountNoSave
        }
        IncrementExecCount() {
            ++this._execCount
        }
        GetExecCount() {
            return this._execCount
        }
        GetObjectCount() {
            return this._objectCount
        }
        GetProjectName() {
            return this._projectName
        }
        GetProjectVersion() {
            return this._projectVersion
        }
        GetProjectUniqueId() {
            return this._projectUniqueId
        }
        GetAppId() {
            return this._appId
        }
        GetInstanceByUID(c) {
            if (this._isLoadingState) throw Error("cannot call while loading state - wait until afterload event");
            return this._instancesByUid.get(c) || null
        }
        _RefreshUidMap() {
            this._instancesByUid.clear();
            for (const c of this._allObjectClasses)
                if (!c.IsFamily())
                    for (const f of c.GetInstances()) this._instancesByUid.set(f.GetUID(), f)
        }
        IsPreview() {
            return "preview" === this._exportType
        }
        IsDebug() {
            return this._isDebug
        }
        GetExportType() {
            return this._exportType
        }
        IsCordova() {
            return "cordova" === this._exportType
        }
        IsAndroidWebView() {
            return "Android" === e.Platform.OS && ("cordova" === this._exportType || "playable-ad" === this._exportType || "instant-games" ===
                this._exportType)
        }
        IsiOSCordova() {
            return this._isiOSCordova
        }
        IsiOSWebView() {
            return this._isiOSWebView
        }
        GetCollisionEngine() {
            return this._collisionEngine
        }
        GetSolidBehavior() {
            return this._pluginManager.GetSolidBehavior()
        }
        GetJumpthruBehavior() {
            return this._pluginManager.GetJumpthruBehavior()
        }
        Uses3DFeatures() {
            return this._uses3dFeatures
        }
        GetZScaleFactor() {
            const c = this.GetRenderer();
            return this.GetViewportHeight() / 2 / Math.tan(c.GetFovY() / 2) / c.GetDefaultCameraZ()
        }
        IsLayoutFirstTick() {
            return this._isLayoutFirstTick
        }
        SetPixelRoundingEnabled(c) {
            c = !!c;
            this._isPixelRoundingEnabled !== c && (this._isPixelRoundingEnabled = c, this.GetLayoutManager().SetAllLayerMVChanged(), this.UpdateRender())
        }
        IsPixelRoundingEnabled() {
            return this._isPixelRoundingEnabled
        }
        SaveToSlot(c) {
            this._saveToSlotName = c
        }
        LoadFromSlot(c) {
            this._loadFromSlotName = c
        }
        LoadFromJsonString(c) {
            this._loadFromJson = c
        }
        GetLastSaveJsonString() {
            return this._lastSaveJson
        }
        _NeedsHandleSaveOrLoad() {
            return !(!this._saveToSlotName && !this._loadFromSlotName && null === this._loadFromJson)
        }
        async _HandleSaveOrLoad() {
            this._saveToSlotName &&
                (this.FlushPendingInstances(), await this._DoSaveToSlot(this._saveToSlotName), this._ClearSaveOrLoad());
            this._loadFromSlotName && (await this._DoLoadFromSlot(this._loadFromSlotName), this._ClearSaveOrLoad(), this.IsDebug() && b.StepIfPausedInDebugger());
            if (null !== this._loadFromJson) {
                this.FlushPendingInstances();
                try {
                    await this._DoLoadFromJsonString(this._loadFromJson), this._lastSaveJson = this._loadFromJson, await this.TriggerAsync(e.Plugins.System.Cnds.OnLoadComplete, null), this._lastSaveJson = ""
                } catch (c) {
                    console.error("[Construct 3] Failed to load state from JSON string: ",
                        c), await this.TriggerAsync(e.Plugins.System.Cnds.OnLoadFailed, null)
                }
                this._ClearSaveOrLoad()
            }
        }
        _ClearSaveOrLoad() {
            this._loadFromSlotName = this._saveToSlotName = "";
            this._loadFromJson = null
        }
        _GetProjectStorage() {
            this._projectStorage || (this._projectStorage = localforage.createInstance({
                name: "c3-localstorage-" + this.GetProjectUniqueId(),
                description: this.GetProjectName()
            }));
            return this._projectStorage
        }
        _GetSavegamesStorage() {
            this._savegamesStorage || (this._savegamesStorage = localforage.createInstance({
                name: "c3-savegames-" +
                    this.GetProjectUniqueId(),
                description: this.GetProjectName()
            }));
            return this._savegamesStorage
        }
        async _DoSaveToSlot(c) {
            const f = await this._SaveToJsonString();
            try {
                await this._GetSavegamesStorage().setItem(c, f), console.log("[Construct 3] Saved state to storage (" + f.length + " chars)"), this._lastSaveJson = f, await this.TriggerAsync(e.Plugins.System.Cnds.OnSaveComplete, null), this._lastSaveJson = ""
            } catch (k) {
                console.error("[Construct 3] Failed to save state to storage: ", k), await this.TriggerAsync(e.Plugins.System.Cnds.OnSaveFailed,
                    null)
            }
        }
        async _DoLoadFromSlot(c) {
            try {
                const f = await this._GetSavegamesStorage().getItem(c);
                if (!f) throw Error("empty slot");
                console.log("[Construct 3] Loaded state from storage (" + f.length + " chars)");
                await this._DoLoadFromJsonString(f);
                this._lastSaveJson = f;
                await this.TriggerAsync(e.Plugins.System.Cnds.OnLoadComplete, null);
                this._lastSaveJson = ""
            } catch (f) {
                console.error("[Construct 3] Failed to load state from storage: ", f), await this.TriggerAsync(e.Plugins.System.Cnds.OnLoadFailed, null)
            }
        }
        async _SaveToJsonString() {
            const c = {
                c3save: !0,
                version: 1,
                rt: {
                    time: this.GetGameTime(),
                    timeRaw: this.GetGameTimeRaw(),
                    walltime: this.GetWallTime(),
                    timescale: this.GetTimeScale(),
                    tickcount: this.GetTickCount(),
                    execcount: this.GetExecCount(),
                    next_uid: this._nextUid,
                    running_layout: this.GetMainRunningLayout().GetSID(),
                    start_time_offset: Date.now() - this._startTime
                },
                types: {},
                layouts: {},
                events: this._eventSheetManager._SaveToJson(),
                timelines: this._timelineManager._SaveToJson(),
                user_script_data: null
            };
            for (var f of this._allObjectClasses) f.IsFamily() ||
                f.HasNoSaveBehavior() || (c.types[f.GetSID().toString()] = f._SaveToJson());
            for (const k of this._layoutManager.GetAllLayouts()) c.layouts[k.GetSID().toString()] = k._SaveToJson();
            f = this._CreateUserScriptEvent("save");
            f.saveData = null;
            await this.DispatchUserScriptEventAsyncWait(f);
            c.user_script_data = f.saveData;
            return JSON.stringify(c)
        }
        IsLoadingState() {
            return this._isLoadingState
        }
        async _DoLoadFromJsonString(c) {
            var f = this.GetLayoutManager();
            c = JSON.parse(c);
            if (c.c2save) throw Error("C2 saves are incompatible with C3 runtime");
            if (!c.c3save) throw Error("not valid C3 save data");
            if (1 < c.version) throw Error("C3 save data from future version");
            this._dispatcher.dispatchEvent(e.New(e.Event, "beforeload"));
            for (var k of this.allInstances()) k._OnBeforeLoad();
            this._isLoadingState = !0;
            k = c.rt;
            this._gameTime.Set(k.time);
            k.hasOwnProperty("timeRaw") && this._gameTimeRaw.Set(k.timeRaw);
            this._wallTime.Set(k.walltime);
            this._timeScale = k.timescale;
            this._tickCount = k.tickcount;
            this._execCount = k.execcount;
            this._startTime = Date.now() - k.start_time_offset;
            var g = k.running_layout;
            if (g !== this.GetMainRunningLayout().GetSID())
                if (g = f.GetLayoutBySID(g)) await this._DoChangeLayout(g);
                else return;
            for (const [l, m] of Object.entries(c.types)) g = parseInt(l, 10), g = this.GetObjectClassBySID(g), !g || g.IsFamily() || g.HasNoSaveBehavior() || g._LoadFromJson(m);
            this.FlushPendingInstances();
            this._RefreshUidMap();
            this._isLoadingState = !1;
            this._nextUid = k.next_uid;
            for (const [l, m] of Object.entries(c.layouts)) k = parseInt(l, 10), (k = f.GetLayoutBySID(k)) && k._LoadFromJson(m);
            this._eventSheetManager._LoadFromJson(c.events);
            for (const l of this._allObjectClasses)
                if (!l.IsFamily() && l.IsInContainer())
                    for (const m of l.GetInstances()) {
                        k = m.GetIID();
                        for (const u of l.GetContainer().objectTypes())
                            if (u !== l) {
                                g = u.GetInstances();
                                if (0 > k || k >= g.length) throw Error("missing sibling instance");
                                m._AddSibling(g[k])
                            }
                    }
            this._timelineManager._LoadFromJson(c.timelines);
            f.SetAllLayerProjectionChanged();
            f.SetAllLayerMVChanged();
            this._dispatcher.dispatchEvent(e.New(e.Event, "afterload"));
            f = this._CreateUserScriptEvent("load");
            f.saveData = c.user_script_data;
            await this.DispatchUserScriptEventAsyncWait(f);
            this.UpdateRender()
        }
        async AddJobWorkerScripts(c) {
            c = (await Promise.all(c.map(f => this._assetManager.FetchBlob(f)))).map(f => URL.createObjectURL(f));
            this._jobScheduler.ImportScriptsToJobWorkers(c)
        }
        AddJobWorkerBlob(c, f) {
            this._jobScheduler.SendBlobToJobWorkers(c, f)
        }
        AddJobWorkerBuffer(c, f) {
            this._jobScheduler.SendBufferToJobWorkers(c, f)
        }
        AddJob(c, f, k) {
            return this._jobScheduler.AddJob(c, f, k)
        }
        BroadcastJob(c, f, k) {
            return this._jobScheduler.BroadcastJob(c, f, k)
        }
        InvokeDownload(c,
            f) {
            this.PostComponentMessageToDOM("runtime", "invoke-download", {
                url: c,
                filename: f
            })
        }
        async RasterSvgImage(c, f, k, g, l, m) {
            g = g || f;
            l = l || k;
            if (this.IsInWorker()) return (await this.PostComponentMessageToDOMAsync("runtime", "raster-svg-image", {
                blob: c,
                imageWidth: f,
                imageHeight: k,
                surfaceWidth: g,
                surfaceHeight: l,
                imageBitmapOpts: m
            })).imageBitmap;
            c = await self.C3_RasterSvgImageBlob(c, f, k, g, l);
            return m ? await self.createImageBitmap(c, m) : c
        }
        async GetSvgImageSize(c) {
            return this.IsInWorker() ? await this.PostComponentMessageToDOMAsync("runtime",
                "get-svg-image-size", {
                    blob: c
                }) : await self.C3_GetSvgImageSize(c)
        }
        RequestDeviceOrientationEvent() {
            this._didRequestDeviceOrientationEvent || (this._didRequestDeviceOrientationEvent = !0, this.PostComponentMessageToDOM("runtime", "enable-device-orientation"))
        }
        RequestDeviceMotionEvent() {
            this._didRequestDeviceMotionEvent || (this._didRequestDeviceMotionEvent = !0, this.PostComponentMessageToDOM("runtime", "enable-device-motion"))
        }
        Random() {
            return this._randomNumberCallback()
        }
        SetRandomNumberGeneratorCallback(c) {
            this._randomNumberCallback =
                c
        }
        _GetRemotePreviewStatusInfo() {
            const c = this.GetWebGLRenderer();
            return {
                fps: this.GetFPS(),
                cpu: this.GetMainThreadTime(),
                gpu: this.GetGPUUtilisation(),
                layout: this.GetMainRunningLayout() ? this.GetMainRunningLayout().GetName() : "",
                renderer: c ? c.GetUnmaskedRenderer() : "<unavailable>"
            }
        }
        HitBreakpoint() {
            return this.IsDebug() ? b.HitBreakpoint() : !1
        }
        DebugBreak(c) {
            return this.IsDebugging() ? b.DebugBreak(c) : Promise.resolve()
        }
        DebugBreakNext() {
            return this.IsDebugging() ? b.BreakNext() : !1
        }
        SetDebugBreakpointsEnabled(c) {
            this._breakpointsEnabled = !!c;
            this._UpdateDebuggingFlag()
        }
        AreDebugBreakpointsEnabled() {
            return this._breakpointsEnabled
        }
        IsDebugging() {
            return this._isDebugging
        }
        SetDebuggingEnabled(c) {
            c ? this._debuggingDisabled-- : this._debuggingDisabled++;
            this._UpdateDebuggingFlag()
        }
        _UpdateDebuggingFlag() {
            this._isDebugging = this.IsDebug() && this._breakpointsEnabled && 0 === this._debuggingDisabled
        }
        IsCPUProfiling() {
            return this.IsDebug() && b.IsCPUProfiling()
        }
        IsGPUProfiling() {
            return this.IsDebug() && this.GetRenderer().SupportsGPUProfiling() && b.IsGPUProfiling()
        }
        async DebugIterateAndBreak(c) {
            if (c)
                for (const f of c) await this.DebugBreak(f)
        }
        DebugFireGeneratorEventAndBreak(c) {
            return this.DebugIterateAndBreak(this._dispatcher.dispatchGeneratorEvent(c))
        }
        _InvokeFunctionFromJS(c) {
            return this._eventSheetManager._InvokeFunctionFromJS(c.name,
                c.params)
        }
        GetIRuntime() {
            return this._iRuntime
        }
        _CreateUserScriptEvent(c) {
            c = e.New(e.Event, c, !1);
            c.runtime = this._iRuntime;
            return c
        }
        _InitScriptInterfaces() {
            var c = {};
            for (const f of this._allObjectClasses) c[f.GetJsPropName()] = {
                value: f.GetIObjectClass(),
                enumerable: !0,
                writable: !1
            };
            c = Object.create(Object.prototype, c);
            this._iRuntime = new self.IRuntime(this, c);
            this._userScriptEventObjects = {
                tick: this._CreateUserScriptEvent("tick")
            }
        }
        _InitGlobalVariableScriptInterface() {
            const c = {};
            for (const f of this.GetEventSheetManager().GetAllGlobalVariables()) c[f.GetJsPropName()] =
                f._GetScriptInterfaceDescriptor();
            this._iRuntime._InitGlobalVars(c)
        }
        _GetCommonScriptInterfaces() {
            return this._commonScriptInterfaces
        }
        _MapScriptInterface(c, f) {
            this._interfaceMap.set(c, f)
        }
        _UnwrapScriptInterface(c) {
            return this._interfaceMap.get(c)
        }
        _UnwrapIObjectClass(c) {
            if (!(c instanceof self.IObjectClass)) throw new TypeError("expected IObjectClass");
            c = this._UnwrapScriptInterface(c);
            if (!(c && c instanceof e.ObjectClass)) throw Error("invalid IObjectClass");
            return c
        }
        _UnwrapIWorldInstance(c) {
            if (!(c instanceof self.IWorldInstance)) throw new TypeError("expected IWorldInstance");
            c = this._UnwrapScriptInterface(c);
            if (!(c && c instanceof e.Instance)) throw Error("invalid IInstance");
            return c
        }
    };
    self.C3_CreateRuntime = e.Runtime.Create;
    self.C3_InitRuntime = (c, f) => c.Init(f)
} {
    "use strict";
    const e = self.C3;
    e.JobSchedulerRuntime = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._runtime = b;
            this._jobPromises = new Map;
            this._nextJobId = 0;
            this._inputPort = a.inputPort;
            a.outputPort.onmessage = d => this._OnJobWorkerMessage(d);
            this._maxNumWorkers = a.maxNumWorkers;
            this._jobWorkerCount = 1;
            this._hadErrorCreatingWorker = this._isCreatingWorker = !1
        }
        async Init() {}
        ImportScriptsToJobWorkers(b) {
            this._inputPort.postMessage({
                type: "_import_scripts",
                scripts: b
            })
        }
        SendBlobToJobWorkers(b, a) {
            this._inputPort.postMessage({
                type: "_send_blob",
                blob: b,
                id: a
            })
        }
        SendBufferToJobWorkers(b, a) {
            this._inputPort.postMessage({
                type: "_send_buffer",
                buffer: b,
                id: a
            }, [b])
        }
        AddJob(b, a, d, c, f) {
            d || (d = []);
            const k = this._nextJobId++;
            b = {
                type: b,
                isBroadcast: !1,
                jobId: k,
                params: a,
                transferables: d
            };
            a = new Promise((g, l) => {
                this._jobPromises.set(k, {
                    resolve: g,
                    progress: c,
                    reject: l,
                    cancelled: !1
                })
            });
            f && f.SetAction(() => this._CancelJob(k));
            this._inputPort.postMessage(b, d);
            this._MaybeCreateExtraWorker();
            return a
        }
        BroadcastJob(b, a, d) {
            d || (d = []);
            const c = this._nextJobId++;
            this._inputPort.postMessage({
                type: b,
                isBroadcast: !0,
                jobId: c,
                params: a,
                transferables: d
            }, d)
        }
        _CancelJob(b) {
            const a = this._jobPromises.get(b);
            a && (a.cancelled = !0, a.resolve = null, a.progress = null, a.reject = null, this._inputPort.postMessage({
                type: "_cancel",
                jobId: b
            }))
        }
        _OnJobWorkerMessage(b) {
            b = b.data;
            const a = b.type,
                d = b.jobId;
            switch (a) {
                case "result":
                    this._OnJobResult(d, b.result);
                    break;
                case "progress":
                    this._OnJobProgress(d, b.progress);
                    break;
                case "error":
                    this._OnJobError(d, b.error);
                    break;
                case "ready":
                    this._OnJobWorkerReady();
                    break;
                default:
                    throw Error(`unknown message from worker '${a}'`);
            }
        }
        _OnJobResult(b, a) {
            const d = this._jobPromises.get(b);
            if (!d) throw Error("invalid job ID");
            d.cancelled || d.resolve(a);
            this._jobPromises.delete(b)
        }
        _OnJobProgress(b, a) {
            b = this._jobPromises.get(b);
            if (!b) throw Error("invalid job ID");
            !b.cancelled && b.progress && b.progress(a)
        }
        _OnJobError(b, a) {
            const d = this._jobPromises.get(b);
            if (!d) throw Error("invalid job ID");
            d.cancelled || d.reject(a);
            this._jobPromises.delete(b)
        }
        _OnJobWorkerReady() {
            this._isCreatingWorker && (this._isCreatingWorker = !1, this._jobWorkerCount++, this._jobWorkerCount <
                this._maxNumWorkers ? this._MaybeCreateExtraWorker() : this._inputPort.postMessage({
                    type: "_no_more_workers"
                }))
        }
        async _MaybeCreateExtraWorker() {
            if (!(this._jobWorkerCount >= this._maxNumWorkers || this._isCreatingWorker || this._hadErrorCreatingWorker || this._jobPromises.size <= this._jobWorkerCount)) try {
                this._isCreatingWorker = !0, (await this._runtime.PostComponentMessageToDOMAsync("runtime", "create-job-worker")).outputPort.onmessage = b => this._OnJobWorkerMessage(b)
            } catch (b) {
                this._hadErrorCreatingWorker = !0, this._isCreatingWorker = !1, console.error(`[Construct 3] Failed to create job worker; stopping creating any more (created ${this._jobWorkerCount} so far)`, b)
            }
        }
    }
}
self.C3_Shaders = {};
self.C3_Shaders.water = {
    glsl: "#ifdef GL_FRAGMENT_PRECISION_HIGH\n#define highmedp highp\n#else\n#define highmedp mediump\n#endif\nvarying mediump vec2 vTex;\nuniform lowp sampler2D samplerFront;\nuniform mediump vec2 srcStart;\nuniform mediump vec2 srcEnd;\nprecision mediump float;\nuniform highmedp float seconds;\nuniform mediump vec2 pixelSize;\nconst float PI = 3.1415926535897932;\nuniform float speed;\nuniform float speed_x;\nuniform float speed_y;\nuniform float intensity;\nconst float steps = 8.0;\nuniform float frequency;\nuniform float angle; // better when a prime\nuniform float delta;\nuniform float intence;\nuniform float emboss;\nfloat col(vec2 coord)\n{\nfloat delta_theta = 2.0 * PI / angle;\nfloat col = 0.0;\nfloat theta = 0.0;\nfor (float i = 0.0; i < steps; i++)\n{\nvec2 adjc = coord;\ntheta = delta_theta*i;\nadjc.x += cos(theta)*seconds*speed + seconds * speed_x;\nadjc.y -= sin(theta)*seconds*speed - seconds * speed_y;\ncol = col + cos( (adjc.x*cos(theta) - adjc.y*sin(theta))*frequency)*intensity;\n}\nreturn cos(col);\n}\nvoid main(void)\n{\nmediump vec2 tex = (vTex - srcStart) / (srcEnd - srcStart);\nvec2 p = tex, c1 = p, c2 = p;\nfloat cc1 = col(c1);\nc2.x += (1.0 / pixelSize.x) / delta;\nfloat dx = emboss*(cc1-col(c2))/delta;\nc2.x = p.x;\nc2.y += (1.0 / pixelSize.y) / delta;\nfloat dy = emboss*(cc1-col(c2))/delta;\nc1.x += dx;\nc1.y = -(c1.y+dy);\nfloat alpha = 1.+dot(dx,dy)*intence;\nc1.y = -c1.y;\nc1 = clamp(c1, 0.0, 1.0);\ngl_FragColor = texture2D(samplerFront, mix(srcStart, srcEnd, c1)) * alpha;\n}",
    wgsl: "",
    extendBoxHorizontal: 40,
    extendBoxVertical: 40,
    crossSampling: !1,
    mustPreDraw: !1,
    preservesOpaqueness: !1,
    animated: !0,
    parameters: [
        ["speed", 0, "percent"],
        ["speed_x", 0, "percent"],
        ["speed_y", 0, "percent"],
        ["intensity", 0, "float"],
        ["frequency", 0, "float"],
        ["angle", 0, "float"],
        ["delta", 0, "float"],
        ["intence", 0, "float"],
        ["emboss", 0, "percent"]
    ]
}; {
    "use strict";
    const e = self.C3;
    let b = null,
        a = "",
        d = "",
        c = [],
        f = "",
        k = "",
        g = "";
    const l = e.New(e.ArrayStack);

    function m(u, x) {
        u = u[1];
        x = x[1];
        if ("number" === typeof u && "number" === typeof x) return u - x;
        u = "" + u;
        x = "" + x;
        return u < x ? -1 : u > x ? 1 : 0
    }
    e.Plugins.System = class extends e.SDKPluginBase {
        constructor(u) {
            super(u);
            this._loopStack = this._runtime.GetEventSheetManager().GetLoopStack();
            this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
            this._imagesLoadingComplete = this._imagesLoadingTotal = 0;
            this._functionMaps =
                new Map
        }
        Release() {
            super.Release()
        }
        UpdateRender() {
            this._runtime.UpdateRender()
        }
        Trigger(u) {
            this._runtime.Trigger(u, null, null)
        }
        GetRegex(u, x) {
            b && u === a && x === d || (b = new RegExp(u, x), a = u, d = x);
            b.lastIndex = 0;
            return b
        }
        GetRegexMatches(u, x, p) {
            if (u === f && x === k && p === g) return c;
            const r = this.GetRegex(x, p);
            c = u.match(r);
            f = u;
            k = x;
            g = p;
            return c
        }
        async _LoadTexturesForObjectClasses(u, x) {
            if (x.length) {
                this._imagesLoadingTotal += x.length;
                var p = [];
                for (const r of x) p.push(u.MaybeLoadTexturesFor(r));
                await e.PromiseAllWithProgress(p,
                    () => {
                        this._imagesLoadingComplete++
                    });
                this._imagesLoadingComplete++;
                this._imagesLoadingComplete === this._imagesLoadingTotal && (this._runtime.Trigger(e.Plugins.System.Cnds.OnImageLoadingComplete, null, null), this._imagesLoadingTotal = this._imagesLoadingComplete = 0)
            }
        }
        _UnloadTexturesForObjectClasses(u, x) {
            for (const p of x) 0 === p.GetInstanceCount() && u.MaybeUnloadTexturesFor(p)
        }
        _GetForEachStack() {
            return l
        }
        _Repeat(u) {
            var x = this._runtime.GetEventSheetManager();
            const p = x.GetEventStack(),
                r = p.GetCurrentStackFrame(),
                t = r.GetCurrentEvent(),
                q = t.GetSolModifiers();
            var w = r.IsSolModifierAfterCnds();
            const y = p.Push(t),
                C = x.GetLoopStack(),
                F = C.Push();
            F.SetEnd(u);
            if (w)
                for (w = 0; w < u && !F.IsStopped(); ++w) x.PushCopySol(q), F.SetIndex(w), t.Retrigger(r, y), x.PopSol(q);
            else
                for (x = 0; x < u && !F.IsStopped(); ++x) F.SetIndex(x), t.Retrigger(r, y);
            p.Pop();
            C.Pop();
            return !1
        }* _DebugRepeat(u) {
            var x = this._runtime.GetEventSheetManager();
            const p = x.GetEventStack(),
                r = p.GetCurrentStackFrame(),
                t = r.GetCurrentEvent(),
                q = t.GetSolModifiers();
            var w = r.IsSolModifierAfterCnds();
            const y = p.Push(t),
                C = x.GetLoopStack(),
                F = C.Push();
            F.SetEnd(u);
            if (w)
                for (w = 0; w < u && !F.IsStopped(); ++w) x.PushCopySol(q), F.SetIndex(w), yield* t.DebugRetrigger(r, y), x.PopSol(q);
            else
                for (x = 0; x < u && !F.IsStopped(); ++x) F.SetIndex(x), yield* t.DebugRetrigger(r, y);
            p.Pop();
            C.Pop();
            return !1
        }
        _While() {
            var u = this._runtime.GetEventSheetManager();
            const x = u.GetEventStack(),
                p = x.GetCurrentStackFrame(),
                r = p.GetCurrentEvent(),
                t = r.GetSolModifiers();
            var q = p.IsSolModifierAfterCnds();
            const w = x.Push(r),
                y = u.GetLoopStack(),
                C = y.Push();
            if (q)
                for (q = 0; !C.IsStopped(); ++q) u.PushCopySol(t), C.SetIndex(q), r.Retrigger(p, w) || C.Stop(), u.PopSol(t);
            else
                for (u = 0; !C.IsStopped(); ++u) C.SetIndex(u), r.Retrigger(p, w) || C.Stop();
            x.Pop();
            y.Pop();
            return !1
        }* _DebugWhile() {
            var u = this._runtime.GetEventSheetManager();
            const x = u.GetEventStack(),
                p = x.GetCurrentStackFrame(),
                r = p.GetCurrentEvent(),
                t = r.GetSolModifiers();
            var q = p.IsSolModifierAfterCnds();
            const w = x.Push(r),
                y = u.GetLoopStack(),
                C = y.Push();
            if (q)
                for (q = 0; !C.IsStopped(); ++q) u.PushCopySol(t), C.SetIndex(q), (yield* r.DebugRetrigger(p,
                    w)) || C.Stop(), u.PopSol(t);
            else
                for (u = 0; !C.IsStopped(); ++u) C.SetIndex(u), (yield* r.DebugRetrigger(p, w)) || C.Stop();
            x.Pop();
            y.Pop();
            return !1
        }
        _For(u, x, p) {
            var r = this._runtime.GetEventSheetManager();
            const t = r.GetEventStack(),
                q = t.GetCurrentStackFrame(),
                w = q.GetCurrentEvent(),
                y = w.GetSolModifiers(),
                C = q.IsSolModifierAfterCnds(),
                F = t.Push(w),
                H = r.GetLoopStack(),
                M = H.Push();
            M.SetName(u);
            M.SetEnd(p);
            if (p < x)
                if (C)
                    for (u = x; u >= p && !M.IsStopped(); --u) r.PushCopySol(y), M.SetIndex(u), w.Retrigger(q, F), r.PopSol(y);
                else
                    for (r =
                        x; r >= p && !M.IsStopped(); --r) M.SetIndex(r), w.Retrigger(q, F);
            else if (C)
                for (u = x; u <= p && !M.IsStopped(); ++u) r.PushCopySol(y), M.SetIndex(u), w.Retrigger(q, F), r.PopSol(y);
            else
                for (r = x; r <= p && !M.IsStopped(); ++r) M.SetIndex(r), w.Retrigger(q, F);
            t.Pop();
            H.Pop();
            return !1
        }* _DebugFor(u, x, p) {
            var r = this._runtime.GetEventSheetManager();
            const t = r.GetEventStack(),
                q = t.GetCurrentStackFrame(),
                w = q.GetCurrentEvent(),
                y = w.GetSolModifiers(),
                C = q.IsSolModifierAfterCnds(),
                F = t.Push(w),
                H = r.GetLoopStack(),
                M = H.Push();
            M.SetName(u);
            M.SetEnd(p);
            if (p < x)
                if (C)
                    for (u = x; u >= p && !M.IsStopped(); --u) r.PushCopySol(y), M.SetIndex(u), yield* w.DebugRetrigger(q, F), r.PopSol(y);
                else
                    for (r = x; r >= p && !M.IsStopped(); --r) M.SetIndex(r), yield* w.DebugRetrigger(q, F);
            else if (C)
                for (u = x; u <= p && !M.IsStopped(); ++u) r.PushCopySol(y), M.SetIndex(u), yield* w.DebugRetrigger(q, F), r.PopSol(y);
            else
                for (r = x; r <= p && !M.IsStopped(); ++r) M.SetIndex(r), yield* w.DebugRetrigger(q, F);
            t.Pop();
            H.Pop();
            return !1
        }
        _ForEach(u) {
            var x = this._runtime.GetEventSheetManager();
            const p = x.GetEventStack(),
                r = p.GetCurrentStackFrame(),
                t = r.GetCurrentEvent(),
                q = t.GetSolModifiers();
            var w = r.IsSolModifierAfterCnds();
            const y = p.Push(t),
                C = x.GetLoopStack(),
                F = C.Push(),
                H = u.IsInContainer(),
                M = u.GetCurrentSol(),
                B = l.Push();
            e.shallowAssignArray(B, M.GetInstances());
            F.SetEnd(B.length);
            if (w)
                for (let A = 0, G = B.length; A < G && !F.IsStopped(); ++A) x.PushCopySol(q), w = B[A], u.GetCurrentSol().SetSinglePicked(w), H && w.SetSiblingsSinglePicked(), F.SetIndex(A), t.Retrigger(r, y), x.PopSol(q);
            else {
                M._SetSelectAll(!1);
                u = M._GetOwnInstances();
                e.clearArray(u);
                u.push(null);
                for (let A =
                        0, G = B.length; A < G && !F.IsStopped(); ++A) x = B[A], u[0] = x, H && x.SetSiblingsSinglePicked(), F.SetIndex(A), t.Retrigger(r, y)
            }
            p.Pop();
            C.Pop();
            e.clearArray(B);
            l.Pop();
            return !1
        }* _DebugForEach(u) {
            var x = this._runtime.GetEventSheetManager();
            const p = x.GetEventStack(),
                r = p.GetCurrentStackFrame(),
                t = r.GetCurrentEvent(),
                q = t.GetSolModifiers();
            var w = r.IsSolModifierAfterCnds();
            const y = p.Push(t),
                C = x.GetLoopStack(),
                F = C.Push(),
                H = u.IsInContainer(),
                M = u.GetCurrentSol(),
                B = l.Push();
            e.shallowAssignArray(B, M.GetInstances());
            F.SetEnd(B.length);
            if (w)
                for (let A = 0, G = B.length; A < G && !F.IsStopped(); ++A) x.PushCopySol(q), w = B[A], u.GetCurrentSol().SetSinglePicked(w), H && w.SetSiblingsSinglePicked(), F.SetIndex(A), yield* t.DebugRetrigger(r, y), x.PopSol(q);
            else {
                M._SetSelectAll(!1);
                u = M._GetOwnInstances();
                e.clearArray(u);
                u.push(null);
                for (let A = 0, G = B.length; A < G && !F.IsStopped(); ++A) x = B[A], u[0] = x, H && x.SetSiblingsSinglePicked(), F.SetIndex(A), yield* t.DebugRetrigger(r, y)
            }
            p.Pop();
            C.Pop();
            e.clearArray(B);
            l.Pop();
            return !1
        }
        _ForEachOrdered(u, x) {
            var p = this._runtime.GetEventSheetManager();
            const r = p.GetEventStack(),
                t = p.GetCurrentCondition(),
                q = r.GetCurrentStackFrame(),
                w = q.GetCurrentEvent(),
                y = w.GetSolModifiers(),
                C = q.IsSolModifierAfterCnds(),
                F = r.Push(w),
                H = p.GetLoopStack(),
                M = H.Push(),
                B = u.IsInContainer(),
                A = u.GetCurrentSol(),
                G = l.Push();
            e.clearArray(G);
            const J = A.GetInstances();
            M.SetEnd(J.length);
            for (let L = 0, R = J.length; L < R; ++L) G.push([J[L], t.ReevaluateParameter(1, L)]);
            G.sort(m);
            1 === x && G.reverse();
            if (C)
                for (let L = 0, R = G.length; L < R && !M.IsStopped(); ++L) p.PushCopySol(y), x = G[L][0], u.GetCurrentSol().SetSinglePicked(x),
                    B && x.SetSiblingsSinglePicked(), M.SetIndex(L), w.Retrigger(q, F), p.PopSol(y);
            else {
                A._SetSelectAll(!1);
                u = A._GetOwnInstances();
                e.clearArray(u);
                u.push(null);
                for (let L = 0, R = G.length; L < R && !M.IsStopped(); ++L) p = G[L][0], u[0] = p, B && p.SetSiblingsSinglePicked(), M.SetIndex(L), w.Retrigger(q, F)
            }
            r.Pop();
            H.Pop();
            e.clearArray(G);
            l.Pop();
            return !1
        }* _DebugForEachOrdered(u, x) {
            var p = this._runtime.GetEventSheetManager();
            const r = p.GetEventStack(),
                t = p.GetCurrentCondition(),
                q = r.GetCurrentStackFrame(),
                w = q.GetCurrentEvent(),
                y = w.GetSolModifiers(),
                C = q.IsSolModifierAfterCnds(),
                F = r.Push(w),
                H = p.GetLoopStack(),
                M = H.Push(),
                B = u.IsInContainer(),
                A = u.GetCurrentSol(),
                G = l.Push();
            e.clearArray(G);
            const J = A.GetInstances();
            M.SetEnd(J.length);
            for (let L = 0, R = J.length; L < R; ++L) G.push([J[L], t.ReevaluateParameter(1, L)]);
            G.sort(m);
            1 === x && G.reverse();
            if (C)
                for (let L = 0, R = G.length; L < R && !M.IsStopped(); ++L) p.PushCopySol(y), x = G[L][0], u.GetCurrentSol().SetSinglePicked(x), B && x.SetSiblingsSinglePicked(), M.SetIndex(L), yield* w.DebugRetrigger(q, F), p.PopSol(y);
            else {
                A._SetSelectAll(!1);
                u = A._GetOwnInstances();
                e.clearArray(u);
                u.push(null);
                for (let L = 0, R = G.length; L < R && !M.IsStopped(); ++L) p = G[L][0], u[0] = p, B && p.SetSiblingsSinglePicked(), M.SetIndex(L), yield* w.DebugRetrigger(q, F)
            }
            r.Pop();
            H.Pop();
            e.clearArray(G);
            l.Pop();
            return !1
        }
        _GetFunctionMap(u, x) {
            let p = this._functionMaps.get(u);
            if (p) return p;
            if (!x) return null;
            p = {
                defaultFunc: null,
                strMap: new Map
            };
            this._functionMaps.set(u, p);
            return p
        }
        _DoCallMappedFunction(u, x, p, r, t) {
            x.GetEventBlock().RunAsMappedFunctionCall(p);
            r && u.PopSol(t)
        }* _DebugDoCallMappedFunction(u,
            x, p, r, t) {
            yield* x.GetEventBlock().DebugRunAsMappedFunctionCall(p);
            r && u.PopSol(t)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.System.Type = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._objectClass = b;
            this._runtime = b.GetRuntime();
            this._plugin = b.GetPlugin()
        }
        OnCreate() {}
        Release() {
            this._plugin = this._runtime = this._objectClass = null
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.System.Instance = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._inst = b;
            this._objectClass = this._inst.GetObjectClass();
            this._sdkType = this._objectClass.GetSdkType();
            this._runtime = this._inst.GetRuntime()
        }
        Release() {
            this._runtime = this._sdkType = this._objectClass = this._inst = null
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = [];
    e.Plugins.System.Cnds = {
        EveryTick() {
            return !0
        },
        OnLayoutStart() {
            return !0
        },
        OnLayoutEnd() {
            return !0
        },
        OnSuspend() {
            return !0
        },
        OnResume() {
            return !0
        },
        IsSuspended() {
            return this._runtime.IsSuspended()
        },
        Else() {
            const a = this._runtime.GetCurrentEventStackFrame();
            return a.GetElseBranchRan() ? !1 : !a.GetLastEventTrue()
        },
        TriggerOnce() {
            const a = this._runtime.GetCurrentCondition().GetSavedDataMap();
            let d = a.get("TriggerOnce_lastTick");
            "undefined" === typeof d && (d = -1, a.set("TriggerOnce_lastTick", -1));
            const c = this._runtime.GetTickCount();
            a.set("TriggerOnce_lastTick", c);
            return this._runtime.IsLayoutFirstTick() || d !== c - 1
        },
        Every(a) {
            const d = this._runtime.GetCurrentCondition().GetSavedDataMap(),
                c = d.get("Every_lastTime") || 0,
                f = this._runtime.GetGameTime();
            d.has("Every_seconds") || d.set("Every_seconds", a);
            const k = d.get("Every_seconds");
            if (f >= c + k) return d.set("Every_lastTime", c + k), f >= d.get("Every_lastTime") + .04 && d.set("Every_lastTime", f), d.set("Every_seconds", a), !0;
            f < c - .1 && d.set("Every_lastTime", f);
            return !1
        },
        IsGroupActive(a) {
            return (a = this._runtime.GetEventSheetManager().GetEventGroupByName(a)) && a.IsGroupActive()
        },
        IsPreview() {
            return this._runtime.IsPreview()
        },
        IsMobile() {
            return e.Platform.IsMobile
        },
        OnLoadFinished() {
            return !0
        },
        OnCanvasSnapshot() {
            return !0
        },
        EffectsSupported() {
            return !0
        },
        OnSaveComplete() {
            return !0
        },
        OnSaveFailed() {
            return !0
        },
        OnLoadComplete() {
            return !0
        },
        OnLoadFailed() {
            return !0
        },
        ObjectUIDExists(a) {
            return !!this._runtime.GetInstanceByUID(a)
        },
        IsOnPlatform(a) {
            switch (a) {
                case 0:
                    return "browser" === e.Platform.Context;
                case 1:
                    return "iOS" === e.Platform.OS;
                case 2:
                    return "Android" === e.Platform.OS;
                case 8:
                    return "cordova" === e.Platform.Context;
                case 9:
                    return "scirra-arcade" === this._runtime.GetExportType();
                case 10:
                    return "nwjs" === e.Platform.Context;
                case 13:
                    return "windows-uwp" === this._runtime.GetExportType();
                default:
                    return !1
            }
        },
        RegexTest(a, d, c) {
            return this.GetRegex(d, c).test(a)
        },
        Compare(a, d, c) {
            return e.compare(a, d, c)
        },
        CompareBetween(a, d, c) {
            return a >= d && a <= c
        },
        CompareVar(a, d, c) {
            return e.compare(a.GetValue(), d, c)
        },
        CompareBoolVar(a) {
            return !!a.GetValue()
        },
        CompareTime(a, d) {
            const c = this._runtime.GetGameTime();
            return 0 === a ? (a = this._runtime.GetCurrentCondition().GetSavedDataMap(), !a.get("CompareTime_executed") && c >= d ? (a.set("CompareTime_executed", !0), !0) : !1) : e.compare(c, a, d)
        },
        IsNaN(a) {
            return isNaN(a)
        },
        AngleWithin(a, d, c) {
            return e.angleDiff(e.toRadians(a), e.toRadians(c)) <= e.toRadians(d)
        },
        IsClockwiseFrom(a, d) {
            return e.angleClockwise(e.toRadians(a), e.toRadians(d))
        },
        IsBetweenAngles(a, d, c) {
            a = e.toRadians(a);
            d = e.toRadians(d);
            c = e.toRadians(c);
            return e.angleClockwise(c,
                d) ? e.angleClockwise(a, d) && !e.angleClockwise(a, c) : !(!e.angleClockwise(a, d) && e.angleClockwise(a, c))
        },
        IsValueType(a, d) {
            return "number" === typeof a ? 0 === d : 1 === d
        },
        EvaluateExpression(a) {
            return !!a
        },
        PickByComparison(a, d, c, f) {
            if (!a) return !1;
            const k = this._GetForEachStack(),
                g = k.Push(),
                l = a.GetCurrentSol();
            e.shallowAssignArray(g, l.GetInstances());
            l.IsSelectAll() && e.clearArray(l._GetOwnElseInstances());
            const m = this._runtime.GetCurrentCondition();
            let u = 0;
            for (let x = 0, p = g.length; x < p; ++x) {
                const r = g[x];
                g[u] = r;
                d = m.ReevaluateParameter(1,
                    x);
                f = m.ReevaluateParameter(3, x);
                e.compare(d, c, f) ? ++u : l._PushElseInstance(r)
            }
            e.truncateArray(g, u);
            l.SetArrayPicked(g);
            d = !!g.length;
            e.clearArray(g);
            k.Pop();
            a.ApplySolToContainer();
            return d
        },
        PickByEvaluate(a, d) {
            if (!a) return !1;
            const c = this._GetForEachStack(),
                f = c.Push(),
                k = a.GetCurrentSol();
            e.shallowAssignArray(f, k.GetInstances());
            k.IsSelectAll() && e.clearArray(k._GetOwnElseInstances());
            const g = this._runtime.GetCurrentCondition();
            let l = 0;
            for (let m = 0, u = f.length; m < u; ++m) {
                const x = f[m];
                f[l] = x;
                (d = g.ReevaluateParameter(1,
                    m)) ? ++l: k._PushElseInstance(x)
            }
            e.truncateArray(f, l);
            k.SetArrayPicked(f);
            d = !!f.length;
            e.clearArray(f);
            c.Pop();
            a.ApplySolToContainer();
            return d
        },
        PickNth(a, d) {
            if (!a) return !1;
            const c = a.GetCurrentSol(),
                f = c.GetInstances();
            d = Math.floor(d);
            if (d >= f.length) return !1;
            c.PickOne(f[d]);
            a.ApplySolToContainer();
            return !0
        },
        PickRandom(a) {
            if (!a) return !1;
            const d = a.GetCurrentSol(),
                c = d.GetInstances(),
                f = Math.floor(this._runtime.Random() * c.length);
            if (f >= c.length) return !1;
            d.PickOne(c[f]);
            a.ApplySolToContainer();
            return !0
        },
        PickAll(a) {
            if (!a ||
                !a.GetInstanceCount()) return !1;
            a.GetCurrentSol()._SetSelectAll(!0);
            a.ApplySolToContainer();
            return !0
        },
        PickOverlappingPoint(a, d, c) {
            if (!a) return !1;
            const f = a.GetCurrentSol();
            var k = f.GetInstances();
            const g = this._runtime.GetCurrentEvent().IsOrBlock(),
                l = this._runtime.GetCurrentCondition().IsInverted();
            f.IsSelectAll() ? (e.shallowAssignArray(b, k), f.ClearArrays(), f._SetSelectAll(!1)) : g ? (e.shallowAssignArray(b, f._GetOwnElseInstances()), e.clearArray(f._GetOwnElseInstances())) : (e.shallowAssignArray(b, f._GetOwnInstances()),
                e.clearArray(f._GetOwnInstances()));
            for (let m = 0, u = b.length; m < u; ++m) k = b[m], e.xor(k.GetWorldInfo().ContainsPoint(d, c), l) ? f._PushInstance(k) : f._PushElseInstance(k);
            a.ApplySolToContainer();
            return e.xor(!!f._GetOwnInstances().length, l)
        },
        PickLastCreated(a) {
            if (!a) return !1;
            var d = a.IsFamily();
            let c = null;
            const f = this._runtime._GetInstancesPendingCreate();
            for (let k = f.length - 1; 0 <= k; --k) {
                const g = f[k];
                if (d) {
                    if (g.GetObjectClass().BelongsToFamily(a)) {
                        c = g;
                        break
                    }
                } else if (g.GetObjectClass() === a) {
                    c = g;
                    break
                }
            }
            c || (d = a.GetInstances(),
                d.length && (c = d.at(-1)));
            if (!c) return !1;
            a.GetCurrentSol().PickOne(c);
            a.ApplySolToContainer();
            return !0
        },
        Repeat(a) {
            return this._runtime.IsDebugging() ? this._DebugRepeat(a) : this._Repeat(a)
        },
        While() {
            return this._runtime.IsDebugging() ? this._DebugWhile() : this._While()
        },
        For(a, d, c) {
            return this._runtime.IsDebugging() ? this._DebugFor(a, d, c) : this._For(a, d, c)
        },
        ForEach(a) {
            return this._runtime.IsDebugging() ? this._DebugForEach(a) : this._ForEach(a)
        },
        ForEachOrdered(a, d, c) {
            return this._runtime.IsDebugging() ? this._DebugForEachOrdered(a,
                c) : this._ForEachOrdered(a, c)
        },
        LayerVisible(a) {
            return a ? a.IsVisible() : !1
        },
        LayerEmpty(a) {
            return a ? !a.GetInstanceCount() : !1
        },
        LayerCmpOpacity(a, d, c) {
            return a ? e.compare(100 * a.GetOpacity(), d, c) : !1
        },
        OnImageLoadingComplete() {
            return !0
        },
        IsLoadingImages() {
            return 0 < this._imagesLoadingTotal
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(g, l) {
        const m = g[0] - l[0];
        return 0 !== m ? m : g[1] - l[1]
    }

    function a(g, l) {
        return g[1] - l[1]
    }
    const d = [],
        c = [],
        f = e.New(e.Rect),
        k = e.New(e.Color);
    e.Plugins.System.Acts = {
        SetVar(g, l) {
            g.SetValue(l)
        },
        AddVar(g, l) {
            g.IsNumber() && "number" !== typeof l && (l = parseFloat(l));
            g.SetValue(g.GetValue() + l)
        },
        SubVar(g, l) {
            g.IsNumber() && g.SetValue(g.GetValue() - l)
        },
        SetBoolVar(g, l) {
            g.SetValue(!!l)
        },
        ToggleBoolVar(g) {
            g.SetValue(!g.GetValue())
        },
        ResetGlobals() {
            this._runtime.GetEventSheetManager().ResetAllGlobalsToInitialValue()
        },
        CreateObject(g, l, m, u, x) {
            g && l && (m = this._runtime.CreateInstance(g, l, m, u, x)) && (x && l.SortAndAddInstancesByZIndex(m), l = this._runtime.GetEventSheetManager(), l.BlockFlushingInstances(!0), m._TriggerOnCreatedOnSelfAndRelated(), l.BlockFlushingInstances(!1), g.GetCurrentSol().SetSinglePicked(m), m.IsInContainer() && m.SetSiblingsSinglePicked())
        },
        CreateObjectByName(g, l, m, u, x) {
            g && l && (g = this._runtime.GetObjectClassByName(g)) && e.Plugins.System.Acts.CreateObject.call(this, g, l, m, u, x)
        },
        RecreateInitialObjects(g, l, m, u, x,
            p, r, t, q, w) {
            if (g) {
                var y = this._runtime.GetCurrentLayout();
                if (p && (y = this._runtime.GetLayoutManager().GetLayoutByName(p), !y)) return;
                p = null;
                if ("number" !== typeof r || 0 <= r)
                    if (p = y.GetLayer(r), !p) return;
                f.set(l, m, u, x);
                l = y.RecreateInitialObjects(g, f, p, t, q, w);
                g.GetCurrentSol().SetArrayPicked(l);
                g.ApplySolToContainer()
            }
        },
        StopLoop() {
            const g = this._loopStack;
            g.IsInLoop() && g.GetCurrent().Stop()
        },
        SetGroupActive(g, l) {
            (g = this._runtime.GetEventSheetManager().GetEventGroupByName(g)) && (0 === l ? g.SetGroupActive(!1) : 1 === l ?
                g.SetGroupActive(!0) : g.SetGroupActive(!g.IsGroupActive()))
        },
        SetTimescale(g) {
            this._runtime.SetTimeScale(g)
        },
        SetObjectTimescale(g, l) {
            0 > l && (l = 0);
            if (g) {
                g = g.GetCurrentSol().GetInstances();
                for (const m of g) m.SetTimeScale(l)
            }
        },
        RestoreObjectTimescale(g) {
            if (g) {
                g = g.GetCurrentSol().GetInstances();
                for (const l of g) l.RestoreTimeScale()
            }
        },
        Wait(g) {
            if (!(0 > g)) return this._runtime.GetEventSheetManager().AddScheduledWait().InitTimer(g), !0
        },
        WaitForSignal(g) {
            this._runtime.GetEventSheetManager().AddScheduledWait().InitSignal(g);
            return !0
        },
        WaitForPreviousActions() {
            const g = this._runtime.GetEventSheetManager();
            g.AddScheduledWait().InitPromise(g.GetPromiseForAllAsyncActions());
            return !0
        },
        Signal(g) {
            g = g.toLowerCase();
            for (const l of this._runtime.GetEventSheetManager().scheduledWaits()) l.IsSignal() && l.GetSignalTag() === g && l.SetSignalled()
        },
        async SnapshotCanvas(g, l, m, u, x, p) {
            const r = this._runtime.GetCanvasManager();
            r && (this.UpdateRender(), await r.SnapshotCanvas(0 === g ? "image/png" : "image/jpeg", l / 100, m, u, x, p), await this._runtime.TriggerAsync(e.Plugins.System.Cnds.OnCanvasSnapshot,
                null))
        },
        SetCanvasSize(g, l) {
            if (!(0 >= g || 0 >= l)) {
                this._runtime.SetViewportSize(g, l);
                var m = this._runtime.GetCurrentLayout();
                m.BoundScrolling();
                for (const u of m.GetLayers()) u.UpdateViewport();
                if (m = this._runtime.GetCanvasManager()) "off" !== m.GetCurrentFullscreenMode() && this._runtime.SetOriginalViewportSize(g, l), m.SetSize(m.GetLastWidth(), m.GetLastHeight(), !0), this._runtime.UpdateRender()
            }
        },
        SetFullscreenQuality(g) {
            const l = this._runtime.GetCanvasManager();
            l && "off" !== l.GetCurrentFullscreenMode() && (l.SetFullscreenScalingQuality(0 !==
                g ? "high" : "low"), l.SetSize(l.GetLastWidth(), l.GetLastHeight(), !0))
        },
        SaveState(g) {
            this._runtime.SaveToSlot(g)
        },
        LoadState(g) {
            this._runtime.LoadFromSlot(g)
        },
        LoadStateJSON(g) {
            this._runtime.LoadFromJsonString(g)
        },
        SetHalfFramerateMode(g) {},
        ResetPersisted() {
            for (const g of this._runtime.GetLayoutManager().GetAllLayouts()) g.ResetPersistData()
        },
        SetPixelRounding(g) {
            this._runtime.SetPixelRoundingEnabled(0 !== g)
        },
        SetMinimumFramerate(g) {
            this._runtime.SetMinimumFramerate(g)
        },
        SortZOrderByInstVar(g, l) {
            if (g) {
                var m = g.GetCurrentSol().GetInstances(),
                    u = this._runtime.GetCurrentLayout(),
                    x = g.IsFamily();
                g = g.GetFamilyIndex();
                for (let r = 0, t = m.length; r < t; ++r) {
                    var p = m[r];
                    const q = p.GetWorldInfo();
                    if (!q) continue;
                    let w;
                    w = x ? p.GetInstanceVariableValue(l + p.GetObjectClass().GetFamilyInstanceVariableOffset(g)) : p.GetInstanceVariableValue(l);
                    d.push([q.GetLayer().GetIndex(), q.GetZIndex()]);
                    c.push([p, w])
                }
                if (d.length) {
                    d.sort(b);
                    c.sort(a);
                    l = !1;
                    for (let r = 0, t = d.length; r < t; ++r) m = c[r][0], x = u.GetLayerByIndex(d[r][0]), g = d[r][1], p = x._GetInstances(), p[g] !== m && (p[g] = m, m.GetWorldInfo()._SetLayer(x),
                        x.SetZIndicesChanged(), l = !0);
                    l && this._runtime.UpdateRender();
                    e.clearArray(d);
                    e.clearArray(c)
                }
            }
        },
        GoToLayout(g) {
            if (!this._runtime.IsLoading()) {
                var l = this._runtime.GetLayoutManager();
                l.IsPendingChangeMainLayout() || l.ChangeMainLayout(g)
            }
        },
        GoToLayoutByName(g) {
            if (!this._runtime.IsLoading()) {
                var l = this._runtime.GetLayoutManager();
                l.IsPendingChangeMainLayout() || (g = l.GetLayoutByName(g)) && l.ChangeMainLayout(g)
            }
        },
        NextPrevLayout(g) {
            if (!this._runtime.IsLoading()) {
                var l = this._runtime.GetLayoutManager();
                if (!l.IsPendingChangeMainLayout()) {
                    var m =
                        l.GetAllLayouts(),
                        u = m.indexOf(l.GetMainRunningLayout());
                    g && 0 === u || (g || u !== m.length - 1) && l.ChangeMainLayout(m[u + (g ? -1 : 1)])
                }
            }
        },
        RestartLayout() {
            if (!this._runtime.IsLoading()) {
                var g = this._runtime.GetLayoutManager();
                g.IsPendingChangeMainLayout() || (g.ChangeMainLayout(g.GetMainRunningLayout()), this._runtime.GetEventSheetManager().ResetAllGroupsInitialActivation())
            }
        },
        SetLayerVisible(g, l) {
            g && g.SetVisible(l)
        },
        SetLayerOpacity(g, l) {
            g && g.SetOpacity(l / 100)
        },
        SetLayerScale(g, l) {
            g && g.SetOwnScale(l)
        },
        SetLayerScaleRate(g,
            l) {
            g && g.SetScaleRate(l)
        },
        SetLayerAngle(g, l) {
            g && g.SetAngle(e.toRadians(+l))
        },
        SetLayerScroll(g, l, m) {
            g && (g.SetOwnScrollPositionEnabled(!0), g.SetScrollX(l), g.SetScrollY(m))
        },
        RestoreLayerScroll(g) {
            g && g.SetOwnScrollPositionEnabled(!1)
        },
        SetLayerParallax(g, l, m) {
            g && g.SetParallax(l / 100, m / 100)
        },
        SetLayerZElevation(g, l) {
            g && g.SetZElevation(+l)
        },
        SetLayerBackground(g, l) {
            g && (k.setFromRgbValue(l), k.clamp(), g = g.GetBackgroundColor(), g.equalsIgnoringAlpha(k) || (g.copyRgb(k), this.UpdateRender()))
        },
        SetLayerTransparent(g,
            l) {
            g && g.SetTransparent(l)
        },
        SetLayerBlendMode(g, l) {
            g && g.SetBlendMode(l)
        },
        SetLayerEffectEnabled(g, l, m) {
            g && (g = g.GetEffectList(), m = g.GetEffectTypeByName(m)) && (l = 1 === l, m.IsActive() !== l && (m.SetActive(l), g.UpdateActiveEffects(), this._runtime.UpdateRender()))
        },
        SetLayerEffectParam(g, l, m, u) {
            if (g && (g = g.GetEffectList(), l = g.GetEffectTypeByName(l))) {
                var x = l.GetIndex();
                g = g.GetEffectParametersForIndex(x);
                m = Math.floor(m);
                if (!(0 > m || m >= g.length)) {
                    x = l.GetShaderProgram().GetParameterType(m);
                    if ("color" === x) {
                        k.setFromRgbValue(u);
                        m = g[m];
                        if (k.equalsIgnoringAlpha(m)) return;
                        m.copyRgb(k)
                    } else {
                        "percent" === x && (u /= 100);
                        if (g[m] === u) return;
                        g[m] = u
                    }
                    l.IsActive() && this._runtime.UpdateRender()
                }
            }
        },
        SetLayerForceOwnTexture(g, l) {
            g && g.SetForceOwnTexture(l)
        },
        SetLayoutScale(g) {
            this._runtime.GetCurrentLayout().SetScale(+g)
        },
        SetLayoutAngle(g) {
            this._runtime.GetCurrentLayout().SetAngle(e.toRadians(+g))
        },
        SetLayoutEffectEnabled(g, l) {
            const m = this._runtime.GetCurrentLayout().GetEffectList();
            if (l = m.GetEffectTypeByName(l)) g = 1 === g, l.IsActive() !== g && (l.SetActive(g),
                m.UpdateActiveEffects(), this._runtime.UpdateRender())
        },
        SetLayoutEffectParam(g, l, m) {
            var u = this._runtime.GetCurrentLayout().GetEffectList();
            if (g = u.GetEffectTypeByName(g)) {
                var x = g.GetIndex();
                u = u.GetEffectParametersForIndex(x);
                l = Math.floor(l);
                if (!(0 > l || l >= u.length)) {
                    x = g.GetShaderProgram().GetParameterType(l);
                    if ("color" === x) {
                        k.setFromRgbValue(m);
                        l = u[l];
                        if (k.equalsIgnoringAlpha(l)) return;
                        l.copyRgb(k)
                    } else {
                        "percent" === x && (m /= 100);
                        if (u[l] === m) return;
                        u[l] = m
                    }
                    g.IsActive() && this._runtime.UpdateRender()
                }
            }
        },
        SetLayoutVanishingPoint(g,
            l) {
            this._runtime.GetCurrentLayout().SetVanishingPointXY(g / 100, l / 100)
        },
        SetLayoutProjection(g) {
            const l = this._runtime.GetCurrentLayout();
            0 === g ? l.SetPerspectiveProjection() : l.SetOrthographicProjection()
        },
        ScrollX(g) {
            this._runtime.GetCurrentLayout().SetScrollX(g)
        },
        ScrollY(g) {
            this._runtime.GetCurrentLayout().SetScrollY(g)
        },
        Scroll(g, l) {
            const m = this._runtime.GetCurrentLayout();
            m.SetScrollX(g);
            m.SetScrollY(l)
        },
        ScrollToObject(g) {
            if (g && (g = g.GetFirstPicked()) && (g = g.GetWorldInfo())) {
                var l = this._runtime.GetCurrentLayout();
                l.SetScrollX(g.GetX());
                l.SetScrollY(g.GetY())
            }
        },
        async LoadObjectTextures(g) {
            const l = this._runtime.GetMainRunningLayout();
            l && g && !this._runtime.IsLoading() && (g = g.IsFamily() ? g.GetFamilyMembers() : [g], await this._LoadTexturesForObjectClasses(l, g))
        },
        async LoadObjectTexturesByName(g) {
            await e.Plugins.System.Acts.LoadObjectTextures.call(this, this._runtime.GetObjectClassByName(g))
        },
        UnloadObjectTextures(g) {
            const l = this._runtime.GetMainRunningLayout();
            l && g && (g = g.IsFamily() ? g.GetFamilyMembers() : [g], this._UnloadTexturesForObjectClasses(l,
                g))
        },
        UnloadObjectTexturesByName(g) {
            e.Plugins.System.Acts.UnloadObjectTexturesByName.call(this, this._runtime.GetObjectClassByName(g))
        },
        UnloadUnusedTextures() {
            const g = this._runtime.GetMainRunningLayout();
            if (g) {
                var l = g._GetTextureLoadedObjectTypes();
                this._UnloadTexturesForObjectClasses(g, l)
            }
        },
        async LoadLayoutTextures(g) {
            const l = this._runtime.GetMainRunningLayout();
            g && l && !this._runtime.IsLoading() && await this._LoadTexturesForObjectClasses(l, g._GetInitialObjectClasses())
        },
        async LoadLayoutTexturesByName(g) {
            const l =
                this._runtime.GetMainRunningLayout();
            (g = this._runtime.GetLayoutManager().GetLayoutByName(g)) && l && !this._runtime.IsLoading() && await this._LoadTexturesForObjectClasses(l, g._GetInitialObjectClasses())
        },
        SetFunctionReturnValue(g) {
            const l = this._eventStack.GetCurrentExpFuncStackFrame();
            if (l) switch (l.GetFunctionReturnType()) {
                case 1:
                    "number" === typeof g && l.SetFunctionReturnValue(g);
                    break;
                case 2:
                    "string" === typeof g && l.SetFunctionReturnValue(g);
                    break;
                case 3:
                    l.SetFunctionReturnValue(g)
            }
        },
        MapFunction(g, l, m) {
            var u =
                this._GetFunctionMap(g.toLowerCase(), !0);
            const x = u.strMap,
                p = l.toLowerCase();
            x.has(p) && console.warn(`[Construct 3] Function map '${g}' string '${l}' already in map; overwriting entry`);
            if (u = e.first(x.values()) || u.defaultFunc) {
                u = 0 !== u.GetReturnType();
                const r = 0 !== m.GetReturnType();
                if (u !== r) {
                    console.error(`[Construct 3] Function map '${g}' string '${l}' function return type not compatible with other functions in the map; entry ignored`);
                    return
                }
            }
            x.set(p, m)
        },
        MapFunctionDefault(g, l) {
            const m = this._GetFunctionMap(g.toLowerCase(), !0);
            m.defaultFunc && console.warn(`[Construct 3] Function map '${g}' already has a default; overwriting entry`);
            var u = e.first(m.strMap.values()) || m.defaultFunc;
            if (u) {
                u = 0 !== u.GetReturnType();
                const x = 0 !== l.GetReturnType();
                if (u !== x) {
                    console.error(`[Construct 3] Function map '${g}' default: function return type not compatible with other functions in the map; entry ignored`);
                    return
                }
            }
            m.defaultFunc = l
        },
        CallMappedFunction(g, l, m) {
            m = Math.floor(m);
            var u = this._GetFunctionMap(g.toLowerCase(), !1);
            if (u) {
                var x = u.strMap.get(l.toLowerCase());
                if (!x)
                    if (u.defaultFunc) x = u.defaultFunc, m = 0;
                    else {
                        console.warn(`[Construct 3] Call mapped function: no function associated with map '${g}' string '${l}'; call ignored (consider setting a default)`);
                        return
                    }
                if (x.IsEnabled())
                    if (0 !== x.GetReturnType()) console.warn(`[Construct 3] Call mapped function: map '${g}' string '${l}' has a return type so cannot be called`);
                    else {
                        g = this._runtime;
                        l = g.GetEventSheetManager();
                        var p = l.GetCurrentEvent();
                        u = p.GetSolModifiersIncludingParents();
                        var r = 0 < u.length;
                        r && l.PushCleanSol(u);
                        var t = [];
                        if (p = l.FindFirstFunctionBlockParent(p)) {
                            p = p.GetFunctionParameters();
                            for (let q = m, w = p.length; q < w; ++q) t.push(p[q].GetValue())
                        }
                        m = x.GetFunctionParameters();
                        for (let q = t.length, w = m.length; q < w; ++q) t.push(m[q].GetInitialValue());
                        return g.IsDebugging() ? this._DebugDoCallMappedFunction(l, x, t, r, u) : this._DoCallMappedFunction(l, x, t, r, u)
                    }
            } else console.warn(`[Construct 3] Call mapped function: map name '${g}' not found; call ignored`)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.System.Exps = {
        int: function(b) {
            "string" === typeof b && (b = parseInt(b, 10), isNaN(b) && (b = 0));
            return Math.floor(b)
        },
        float: function(b) {
            "string" === typeof b && (b = parseFloat(b), isNaN(b) && (b = 0));
            return b
        },
        str(b) {
            return b.toString()
        },
        len(b) {
            return "string" === typeof b ? b.length : 0
        },
        random(b, a) {
            return "undefined" === typeof a ? this._runtime.Random() * b : this._runtime.Random() * (a - b) + b
        },
        choose(...b) {
            const a = Math.floor(this._runtime.Random() * b.length);
            return b[a]
        },
        pi() {
            return Math.PI
        },
        infinity() {
            return Infinity
        },
        sqrt(b) {
            return Math.sqrt(b)
        },
        abs(b) {
            return Math.abs(b)
        },
        round(b) {
            return Math.round(b)
        },
        roundtodp(b, a) {
            a = Math.max(Math.floor(a), 0);
            a = Math.pow(10, a);
            return Math.round((b + Number.EPSILON) * a) / a
        },
        floor(b) {
            return Math.floor(b)
        },
        ceil(b) {
            return Math.ceil(b)
        },
        sign(b) {
            return Math.sign(b)
        },
        sin(b) {
            return Math.sin(e.toRadians(b))
        },
        cos(b) {
            return Math.cos(e.toRadians(b))
        },
        tan(b) {
            return Math.tan(e.toRadians(b))
        },
        asin(b) {
            return e.toDegrees(Math.asin(b))
        },
        acos(b) {
            return e.toDegrees(Math.acos(b))
        },
        atan(b) {
            return e.toDegrees(Math.atan(b))
        },
        exp(b) {
            return Math.exp(b)
        },
        ln(b) {
            return Math.log(b)
        },
        log10(b) {
            return Math.log(b) / Math.LN10
        },
        max(...b) {
            let a = b[0];
            "number" !== typeof a && (a = 0);
            for (let d = 1, c = b.length; d < c; ++d) {
                let f = b[d];
                "number" === typeof f && a < f && (a = f)
            }
            return a
        },
        min(...b) {
            let a = b[0];
            "number" !== typeof a && (a = 0);
            for (let d = 1, c = b.length; d < c; ++d) {
                let f = b[d];
                "number" === typeof f && a > f && (a = f)
            }
            return a
        },
        clamp(b, a, d) {
            return e.clamp(b, a, d)
        },
        distance(b, a, d, c) {
            return e.distanceTo(b, a, d, c)
        },
        angle(b, a, d, c) {
            return e.toDegrees(e.angleTo(b, a, d, c))
        },
        lerp(b,
            a, d) {
            return e.lerp(b, a, d)
        },
        unlerp(b, a, d) {
            return e.unlerp(b, a, d)
        },
        qarp(b, a, d, c) {
            return e.qarp(b, a, d, c)
        },
        cubic(b, a, d, c, f) {
            return e.cubic(b, a, d, c, f)
        },
        cosp(b, a, d) {
            return e.cosp(b, a, d)
        },
        anglediff(b, a) {
            return e.toDegrees(e.angleDiff(e.toRadians(b), e.toRadians(a)))
        },
        anglelerp(b, a, d) {
            return e.toDegrees(e.angleLerp(e.toRadians(b), e.toRadians(a), d))
        },
        anglerotate(b, a, d) {
            return e.toDegrees(e.angleRotate(e.toRadians(b), e.toRadians(a), e.toRadians(d)))
        },
        setbit(b, a, d) {
            a |= 0;
            return (b | 0) & ~(1 << a) | (0 !== d ? 1 : 0) << a
        },
        togglebit(b,
            a) {
            return (b | 0) ^ 1 << (a | 0)
        },
        getbit(b, a) {
            return (b | 0) & 1 << (a | 0) ? 1 : 0
        },
        newline() {
            return "\n"
        },
        uppercase(b) {
            return "string" === typeof b ? b.toUpperCase() : ""
        },
        lowercase(b) {
            return "string" === typeof b ? b.toLowerCase() : ""
        },
        left(b, a) {
            return "string" === typeof b ? b.substr(0, a) : ""
        },
        mid(b, a, d) {
            return "string" !== typeof b ? "" : 0 > d ? b.substr(a) : b.substr(a, d)
        },
        right(b, a) {
            return "string" === typeof b ? b.substr(b.length - a) : ""
        },
        trim(b) {
            return "string" === typeof b ? b.trim() : ""
        },
        tokenat(b, a, d) {
            if ("string" !== typeof b || "string" !== typeof d) return "";
            b = b.split(d);
            a = Math.floor(a);
            return 0 > a || a >= b.length ? "" : b[a]
        },
        tokencount(b, a) {
            return "string" === typeof b && "string" === typeof a && b.length ? b.split(a).length : 0
        },
        find(b, a) {
            return "string" === typeof b && "string" === typeof a ? b.search(new RegExp(e.EscapeRegex(a), "i")) : -1
        },
        findcase(b, a) {
            return "string" === typeof b && "string" === typeof a ? b.search(new RegExp(e.EscapeRegex(a), "")) : -1
        },
        replace(b, a, d) {
            return "string" === typeof b && "string" === typeof a && "string" === typeof d ? b.replace(new RegExp(e.EscapeRegex(a), "gi"), d) : "string" ===
                typeof b ? b : ""
        },
        regexsearch(b, a, d) {
            a = this.GetRegex(a, d);
            return b ? b.search(a) : -1
        },
        regexreplace(b, a, d, c) {
            a = this.GetRegex(a, d);
            return b ? b.replace(a, c) : ""
        },
        regexmatchcount(b, a, d) {
            return (b = this.GetRegexMatches(b.toString(), a, d)) ? b.length : 0
        },
        regexmatchat(b, a, d, c) {
            c = Math.floor(c);
            b = this.GetRegexMatches(b.toString(), a, d);
            return !b || 0 > c || c >= b.length ? "" : b[c]
        },
        zeropad(b, a) {
            let d = 0 > b ? "-" : "";
            0 > b && (b = -b);
            d += "0".repeat(Math.max(a - b.toString().length, 0));
            return d + b.toString()
        },
        urlencode(b) {
            return encodeURIComponent(b)
        },
        urldecode(b) {
            return decodeURIComponent(b)
        },
        dt() {
            return this._runtime._GetDtFast()
        },
        timescale() {
            return this._runtime.GetTimeScale()
        },
        wallclocktime() {
            return (Date.now() - this._runtime.GetStartTime()) / 1E3
        },
        unixtime() {
            return Date.now()
        },
        time() {
            return this._runtime.GetGameTime()
        },
        tickcount() {
            return this._runtime.GetTickCount()
        },
        objectcount() {
            return this._runtime.GetObjectCount()
        },
        fps() {
            return this._runtime.GetFPS()
        },
        cpuutilisation() {
            return this._runtime.GetMainThreadTime()
        },
        gpuutilisation() {
            return this._runtime.GetGPUUtilisation()
        },
        windowwidth() {
            return this._runtime.GetCanvasManager().GetDeviceWidth()
        },
        windowheight() {
            return this._runtime.GetCanvasManager().GetDeviceHeight()
        },
        originalwindowwidth() {
            return this._runtime.GetOriginalViewportWidth()
        },
        originalwindowheight() {
            return this._runtime.GetOriginalViewportHeight()
        },
        originalviewportwidth() {
            return this._runtime.GetOriginalViewportWidth()
        },
        originalviewportheight() {
            return this._runtime.GetOriginalViewportHeight()
        },
        scrollx() {
            return this._runtime.GetCurrentLayout().GetScrollX()
        },
        scrolly() {
            return this._runtime.GetCurrentLayout().GetScrollY()
        },
        layoutname() {
            return this._runtime.GetCurrentLayout().GetName()
        },
        layoutscale() {
            return this._runtime.GetCurrentLayout().GetScale()
        },
        layoutangle() {
            return e.toDegrees(this._runtime.GetCurrentLayout().GetAngle())
        },
        layoutwidth() {
            return this._runtime.GetCurrentLayout().GetWidth()
        },
        layoutheight() {
            return this._runtime.GetCurrentLayout().GetHeight()
        },
        viewportleft(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport3D().getLeft() :
                0
        },
        viewporttop(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport3D().getTop() : 0
        },
        viewportright(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport3D().getRight() : 0
        },
        viewportbottom(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport3D().getBottom() : 0
        },
        viewportwidth(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport3D().width() : 0
        },
        viewportheight(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport3D().height() :
                0
        },
        canvastolayerx(b, a, d) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.CanvasCssToLayer(a, d)[0] : 0
        },
        canvastolayery(b, a, d) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.CanvasCssToLayer(a, d)[1] : 0
        },
        layertocanvasx(b, a, d) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.LayerToCanvasCss(a, d)[0] : 0
        },
        layertocanvasy(b, a, d) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.LayerToCanvasCss(a, d)[1] : 0
        },
        layerscale(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetOwnScale() :
                0
        },
        layerangle(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? e.toDegrees(b.GetOwnAngle()) : 0
        },
        layeropacity(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? 100 * b.GetOpacity() : 0
        },
        layerscalerate(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetScaleRate() : 0
        },
        layerscrollx(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetScrollX() : 0
        },
        layerscrolly(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetScrollY() : 0
        },
        layerparallaxx(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ?
                100 * b.GetParallaxX() : 0
        },
        layerparallaxy(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? 100 * b.GetParallaxY() : 0
        },
        layerzelevation(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetZElevation() : 0
        },
        layerindex(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetIndex() : -1
        },
        canvassnapshot() {
            const b = this._runtime.GetCanvasManager();
            return b ? b.GetCanvasSnapshotUrl() : ""
        },
        loopindex(b) {
            const a = this._loopStack;
            return a.IsInLoop() ? b ? (b = a.FindByName(b)) ? b.GetIndex() : 0 : a.GetCurrent().GetIndex() :
                0
        },
        savestatejson() {
            return this._runtime.GetLastSaveJsonString()
        },
        callmapped(b, a, ...d) {
            var c = this._GetFunctionMap(b.toLowerCase(), !1);
            if (!c) return console.warn(`[Construct 3] Call mapped function: map name '${b}' not found; returning 0`), 0;
            var f = c.strMap.get(a.toLowerCase());
            if (!f)
                if (c.defaultFunc) f = c.defaultFunc;
                else return console.warn(`[Construct 3] Call mapped function: no function associated with map '${b}' string '${a}'; returning 0 (consider setting a default)`), 0;
            c = f.GetReturnType();
            const k =
                f.GetDefaultReturnValue();
            if (0 === c) return console.warn(`[Construct 3] Call mapped function: map '${b}' string '${a}' has no return type so cannot be called from an expression; returning 0`), 0;
            if (!f.IsEnabled()) return k;
            b = this._runtime.GetEventSheetManager();
            a = b.GetCurrentEvent().GetSolModifiersIncludingParents();
            const g = 0 < a.length;
            g && b.PushCleanSol(a);
            const l = f.GetFunctionParameters();
            for (let m = d.length, u = l.length; m < u; ++m) d.push(l[m].GetInitialValue());
            f = f.GetEventBlock();
            d = f.RunAsExpressionFunctionCall(f.GetSolModifiersIncludingParents(),
                c, k, ...d);
            g && b.PopSol(a);
            return d
        },
        loadingprogress() {
            return this._runtime.GetAssetManager().GetLoadProgress()
        },
        imageloadingprogress() {
            return 0 === this._imagesLoadingTotal ? 1 : this._imagesLoadingComplete / this._imagesLoadingTotal
        },
        renderer() {
            return this._runtime.GetWebGPURenderer() ? "webgpu" : "webgl"
        },
        rendererdetail() {
            return this._runtime.GetWebGPURenderer() ? "<unavailable>" : this._runtime.GetWebGLRenderer().GetUnmaskedRenderer()
        },
        imagememoryusage() {
            let b = this._runtime.GetRenderer().GetEstimatedTextureMemoryUsage();
            return Math.round(100 * b / 1048576) / 100
        },
        rgb(b, a, d) {
            return e.PackRGB(b, a, d)
        },
        rgbex(b, a, d) {
            return e.PackRGBEx(b / 100, a / 100, d / 100)
        },
        rgba(b, a, d, c) {
            return e.PackRGBAEx(b / 100, a / 100, d / 100, c / 100)
        },
        rgbex255(b, a, d) {
            return e.PackRGBEx(b / 255, a / 255, d / 255)
        },
        rgba255(b, a, d, c) {
            return e.PackRGBAEx(b / 255, a / 255, d / 255, c / 255)
        },
        projectname() {
            return this._runtime.GetProjectName()
        },
        projectversion() {
            return this._runtime.GetProjectVersion()
        },
        currenteventsheetname() {
            return this._runtime.GetCurrentEvent().GetEventSheet().GetName()
        },
        currenteventnumber() {
            return this._runtime.GetCurrentEvent().GetDisplayNumber()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.TiledBg = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(a) {
        switch (a) {
            case 0:
                return "clamp-to-edge";
            case 2:
                return "mirror-repeat"
        }
        return "repeat"
    }
    e.Plugins.TiledBg.Type = class extends e.SDKTypeBase {
        constructor(a, d) {
            super(a);
            this._wrapY = this._wrapX = "repeat";
            d && (this._wrapX = b(d[0]), this._wrapY = b(d[1]))
        }
        Release() {
            super.Release()
        }
        OnCreate() {
            this.GetImageInfo().LoadAsset(this._runtime)
        }
        LoadTextures(a) {
            return this.GetImageInfo().LoadStaticTexture(a, {
                sampling: this._runtime.GetSampling(),
                wrapX: this._wrapX,
                wrapY: this._wrapY
            })
        }
        ReleaseTextures() {
            this.GetImageInfo().ReleaseTexture()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = e.New(e.Rect),
        d = e.New(e.Quad),
        c = e.New(e.Rect),
        f = e.New(e.Quad);
    e.Plugins.TiledBg.Instance = class extends e.SDKWorldInstanceBase {
        constructor(g, l) {
            super(g);
            this._imageOffsetY = this._imageOffsetX = 0;
            this._imageScaleY = this._imageScaleX = 1;
            this._imageAngle = 0;
            this._ownImageInfo = null;
            l && (this.GetWorldInfo().SetVisible(!!l[0]), this._imageOffsetX = l[4], this._imageOffsetY = l[5], this._imageScaleX = l[6], this._imageScaleY = l[7], this._imageAngle = e.toRadians(l[8]))
        }
        Release() {
            this._ReleaseOwnImage();
            super.Release()
        }
        _ReleaseOwnImage() {
            this._ownImageInfo && (this._ownImageInfo.Release(), this._ownImageInfo = null)
        }
        CalculateTextureCoordsFor3DFace(g, l, m) {
            var u = this.GetCurrentImageInfo();
            const x = u.GetWidth();
            u = u.GetHeight();
            const p = this._imageOffsetX / x,
                r = this._imageOffsetY / u,
                t = this._imageAngle;
            c.set(0, 0, g / (x * this._imageScaleX), l / (u * this._imageScaleY));
            c.offset(-p, -r);
            0 === t ? m.setFromRect(c) : m.setFromRotatedRect(c, -t)
        }
        Draw(g) {
            var l = this.GetCurrentImageInfo(),
                m = l.GetTexture();
            if (null !== m) {
                g.SetTexture(m);
                m = l.GetWidth();
                l = l.GetHeight();
                var u = this._imageOffsetX / m,
                    x = this._imageOffsetY / l,
                    p = this.GetWorldInfo();
                c.set(0, 0, p.GetWidth() / (m * this._imageScaleX), p.GetHeight() / (l * this._imageScaleY));
                c.offset(-u, -x);
                p.HasMesh() ? this._DrawMesh(p, g) : this._DrawStandard(p, g)
            }
        }
        _DrawStandard(g, l) {
            let m = g.GetBoundingQuad();
            this._runtime.IsPixelRoundingEnabled() && (m = g.PixelRoundQuad(m));
            0 === this._imageAngle ? l.Quad3(m, c) : (f.setFromRotatedRect(c, -this._imageAngle), l.Quad4(m, f))
        }
        _DrawMesh(g, l) {
            const m = g.GetTransformedMesh();
            if (g.IsMeshChanged()) {
                g.CalculateBbox(a, d, !1);
                let u = d;
                this._runtime.IsPixelRoundingEnabled() && (u = g.PixelRoundQuad(u));
                let x = c;
                0 !== this._imageAngle && (f.setFromRotatedRect(c, -this._imageAngle), x = f);
                m.CalculateTransformedMesh(g.GetSourceMesh(), u, x);
                g.SetMeshChanged(!1)
            }
            m.Draw(l)
        }
        GetCurrentImageInfo() {
            return this._ownImageInfo || this._objectClass.GetImageInfo()
        }
        IsOriginalSizeKnown() {
            return !0
        }
        GetTexture() {
            return this.GetCurrentImageInfo().GetTexture()
        }
        _SetMeshChanged() {
            this.GetWorldInfo().SetMeshChanged(!0)
        }
        _SetImageOffsetX(g) {
            this._imageOffsetX !==
                g && (this._imageOffsetX = g, this._runtime.UpdateRender(), this._SetMeshChanged())
        }
        _GetImageOffsetX() {
            return this._imageOffsetX
        }
        _SetImageOffsetY(g) {
            this._imageOffsetY !== g && (this._imageOffsetY = g, this._runtime.UpdateRender(), this._SetMeshChanged())
        }
        _GetImageOffsetY() {
            return this._imageOffsetY
        }
        _SetImageScaleX(g) {
            this._imageScaleX !== g && (this._imageScaleX = g, this._runtime.UpdateRender(), this._SetMeshChanged())
        }
        _GetImageScaleX() {
            return this._imageScaleX
        }
        _SetImageScaleY(g) {
            this._imageScaleY !== g && (this._imageScaleY =
                g, this._runtime.UpdateRender(), this._SetMeshChanged())
        }
        _GetImageScaleY() {
            return this._imageScaleY
        }
        _SetImageAngle(g) {
            this._imageAngle !== g && (this._imageAngle = g, this._runtime.UpdateRender(), this._SetMeshChanged())
        }
        _GetImageAngle() {
            return this._imageAngle
        }
        GetPropertyValueByIndex(g) {
            switch (g) {
                case 4:
                    return this._GetImageOffsetX();
                case 5:
                    return this._GetImageOffsetY();
                case 6:
                    return this._GetImageScaleX();
                case 7:
                    return this._GetImageScaleY();
                case 8:
                    return this._GetImageAngle()
            }
        }
        SetPropertyValueByIndex(g,
            l) {
            switch (g) {
                case 4:
                    this._SetImageOffsetX(l);
                    break;
                case 5:
                    this._SetImageOffsetY(l);
                    break;
                case 6:
                    this._SetImageScaleX(l);
                    break;
                case 7:
                    this._SetImageScaleY(l);
                    break;
                case 8:
                    this._SetImageAngle(l)
            }
        }
        GetScriptInterfaceClass() {
            return self.ITiledBackgroundInstance
        }
    };
    const k = new WeakMap;
    self.ITiledBackgroundInstance = class extends self.IWorldInstance {
        constructor() {
            super();
            k.set(this, self.IInstance._GetInitInst().GetSdkInstance())
        }
        set imageOffsetX(g) {
            b.RequireFiniteNumber(g);
            k.get(this)._SetImageOffsetX(g)
        }
        get imageOffsetX() {
            return k.get(this)._GetImageOffsetX()
        }
        set imageOffsetY(g) {
            b.RequireFiniteNumber(g);
            k.get(this)._SetImageOffsetY(g)
        }
        get imageOffsetY() {
            return k.get(this)._GetImageOffsetY()
        }
        set imageScaleX(g) {
            b.RequireFiniteNumber(g);
            k.get(this)._SetImageScaleX(g)
        }
        get imageScaleX() {
            return k.get(this)._GetImageScaleX()
        }
        set imageScaleY(g) {
            b.RequireFiniteNumber(g);
            k.get(this)._SetImageScaleY(g)
        }
        get imageScaleY() {
            return k.get(this)._GetImageScaleY()
        }
        set imageAngle(g) {
            b.RequireFiniteNumber(g);
            k.get(this)._SetImageAngle(g)
        }
        get imageAngle() {
            return k.get(this)._GetImageAngle()
        }
        set imageAngleDegrees(g) {
            b.RequireFiniteNumber(g);
            k.get(this)._SetImageAngle(e.toRadians(g))
        }
        get imageAngleDegrees() {
            return e.toDegrees(k.get(this)._GetImageAngle())
        }
        get imageWidth() {
            return k.get(this).GetCurrentImageInfo().GetWidth()
        }
        get imageHeight() {
            return k.get(this).GetCurrentImageInfo().GetHeight()
        }
    }
}
"use strict";
self.C3.Plugins.TiledBg.Cnds = {
    OnURLLoaded() {
        return !0
    },
    OnURLFailed() {
        return !0
    }
}; {
    "use strict";
    const e = self.C3;
    e.Plugins.TiledBg.Acts = {
        SetImageOffsetX(b) {
            this._SetImageOffsetX(b)
        },
        SetImageOffsetY(b) {
            this._SetImageOffsetY(b)
        },
        SetImageScaleX(b) {
            this._SetImageScaleX(b / 100)
        },
        SetImageScaleY(b) {
            this._SetImageScaleY(b / 100)
        },
        SetImageAngle(b) {
            this._SetImageAngle(e.toRadians(b))
        },
        SetEffect(b) {
            this.GetWorldInfo().SetBlendMode(b);
            this._runtime.UpdateRender()
        },
        async LoadURL(b, a) {
            if (!this._ownImageInfo || this._ownImageInfo.GetURL() !== b) {
                a = this._runtime;
                var d = e.New(e.ImageInfo);
                try {
                    await d.LoadDynamicAsset(a,
                        b);
                    if (!d.IsLoaded()) throw Error("image failed to load");
                    if (this.WasReleased()) return d.Release(), null;
                    if (!await d.LoadStaticTexture(a.GetRenderer(), {
                            sampling: this._runtime.GetSampling(),
                            wrapX: "repeat",
                            wrapY: "repeat"
                        })) return
                } catch (c) {
                    console.error("Load image from URL failed: ", c);
                    this.Trigger(e.Plugins.TiledBg.Cnds.OnURLFailed);
                    return
                }
                this.WasReleased() ? d.Release() : (this._ReleaseOwnImage(), this._ownImageInfo = d, a.UpdateRender(), await this.TriggerAsync(e.Plugins.TiledBg.Cnds.OnURLLoaded))
            }
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.TiledBg.Exps = {
        ImageWidth() {
            return this.GetCurrentImageInfo().GetWidth()
        },
        ImageHeight() {
            return this.GetCurrentImageInfo().GetHeight()
        },
        ImageOffsetX() {
            return this._imageOffsetX
        },
        ImageOffsetY() {
            return this._imageOffsetY
        },
        ImageScaleX() {
            return 100 * this._imageScaleX
        },
        ImageScaleY() {
            return 100 * this._imageScaleY
        },
        ImageAngle() {
            return e.toDegrees(this._imageAngle)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Sprite = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Sprite.Type = class extends e.SDKTypeBase {
        constructor(b) {
            super(b);
            this._animations = b.GetAnimations()
        }
        Release() {
            e.clearArray(this._animations);
            super.Release()
        }
        OnCreate() {
            for (const b of this._animations) b.LoadAllAssets(this._runtime)
        }
        LoadTextures(b) {
            const a = {
                sampling: this._runtime.GetSampling()
            };
            return Promise.all(this._animations.map(d => d.LoadAllTextures(b, a)))
        }
        ReleaseTextures() {
            for (const b of this._animations) b.ReleaseAllTextures()
        }
        OnDynamicTextureLoadComplete() {
            this._UpdateAllCurrentTexture()
        }
        _UpdateAllCurrentTexture() {
            for (const b of this._objectClass.instancesIncludingPendingCreate()) b.GetSdkInstance()._UpdateCurrentTexture()
        }
        FinishCondition(b) {
            e.Plugins.Sprite.FinishCollisionCondition(this,
                b)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = e.New(e.Rect),
        d = e.New(e.Quad),
        c = e.New(e.Vector2);
    e.Plugins.Sprite.Instance = class extends e.SDKWorldInstanceBase {
        constructor(g, l) {
            super(g);
            let m = !0,
                u = "",
                x = 0,
                p = !0;
            l && (m = !!l[0], u = l[1], x = l[2], p = l[3]);
            this._currentAnimation = this._objectClass.GetAnimationByName(u) || this._objectClass.GetAnimations()[0];
            this._currentFrameIndex = e.clamp(x, 0, this._currentAnimation.GetFrameCount() - 1);
            this._currentAnimationFrame = this._currentAnimation.GetFrameAt(this._currentFrameIndex);
            l =
                this._currentAnimationFrame.GetImageInfo();
            this._currentTexture = l.GetTexture();
            this._currentRcTex = l.GetTexRect();
            this._currentQuadTex = l.GetTexQuad();
            this.HandleWebGLContextLoss();
            g.SetFlag(2, !0);
            g.SetFlag(1, 0 <= this._currentAnimation.GetSpeed());
            this._currentAnimationSpeed = Math.abs(this._currentAnimation.GetSpeed());
            this._currentAnimationRepeatTo = this._currentAnimation.GetRepeatTo();
            this._animationTimer = e.New(e.KahanSum);
            this._animationRepeats = this._frameStartTime = 0;
            this._animTriggerName = "";
            this._changeAnimFrameIndex = -1;
            this._changeAnimationName = "";
            this._changeAnimationFrom = 0;
            g = this.GetWorldInfo();
            this._bquadRef = g.GetBoundingQuad();
            g.SetVisible(m);
            g.SetCollisionEnabled(p);
            g.SetOriginX(this._currentAnimationFrame.GetOriginX());
            g.SetOriginY(this._currentAnimationFrame.GetOriginY());
            g.SetSourceCollisionPoly(this._currentAnimationFrame.GetCollisionPoly());
            g.SetBboxChanged();
            1 === this._objectClass.GetAnimationCount() && 1 === this._objectClass.GetAnimations()[0].GetFrameCount() || 0 === this._currentAnimationSpeed || this._StartTicking()
        }
        Release() {
            this._animationTimer =
                this._currentTexture = this._currentAnimationFrame = this._currentAnimation = null;
            super.Release()
        }
        GetCurrentImageInfo() {
            return this._currentAnimationFrame.GetImageInfo()
        }
        IsOriginalSizeKnown() {
            return !0
        }
        OnWebGLContextLost() {
            this._currentTexture = null
        }
        OnWebGLContextRestored() {
            this._UpdateCurrentTexture()
        }
        Draw(g) {
            var l = this._currentTexture;
            null !== l && (g.SetTexture(l), l = this.GetWorldInfo(), l.HasMesh() ? this._DrawMesh(l, g) : this._DrawStandard(l, g))
        }
        _DrawStandard(g, l) {
            let m = this._bquadRef;
            this._runtime.IsPixelRoundingEnabled() &&
                (m = g.PixelRoundQuad(m));
            l.Quad4(m, this._currentQuadTex)
        }
        _DrawMesh(g, l) {
            const m = g.GetTransformedMesh();
            if (g.IsMeshChanged()) {
                g.CalculateBbox(a, d, !1);
                let u = d;
                this._runtime.IsPixelRoundingEnabled() && (u = g.PixelRoundQuad(u));
                m.CalculateTransformedMesh(g.GetSourceMesh(), u, this._currentQuadTex);
                g.SetMeshChanged(!1)
            }
            m.Draw(l)
        }
        GetAnimationTime() {
            return this._animationTimer.Get()
        }
        IsAnimationPlaying() {
            return this._inst.GetFlag(2)
        }
        SetAnimationPlaying(g) {
            this._inst.SetFlag(2, g)
        }
        IsPlayingForwards() {
            return this._inst.GetFlag(1)
        }
        SetPlayingForwards(g) {
            this._inst.SetFlag(1,
                g)
        }
        IsInAnimationTrigger() {
            return this._inst.GetFlag(4)
        }
        SetInAnimationTrigger(g) {
            this._inst.SetFlag(4, g)
        }
        Tick() {
            this._changeAnimationName && this._DoChangeAnimation();
            0 <= this._changeAnimFrameIndex && this._DoChangeAnimFrame();
            const g = this._currentAnimationSpeed;
            if (this.IsAnimationPlaying() && 0 !== g) {
                var l = this._runtime.GetDt(this._inst);
                this._animationTimer.Add(l);
                l = this.GetAnimationTime();
                var m = this._currentAnimationFrame,
                    u = m.GetDuration() / g;
                if (!(l < this._frameStartTime + u)) {
                    var x = this._currentAnimation,
                        p = this._currentAnimationRepeatTo,
                        r = x.GetFrameCount(),
                        t = x.GetRepeatCount(),
                        q = x.IsLooping(),
                        w = x.IsPingPong();
                    this.IsPlayingForwards() ? this._currentFrameIndex++ : this._currentFrameIndex--;
                    this._frameStartTime += u;
                    this._currentFrameIndex >= r && (w ? (this.SetPlayingForwards(!1), this._currentFrameIndex = r - 2) : q ? this._currentFrameIndex = p : (this._animationRepeats++, this._animationRepeats >= t ? this._FinishAnimation(!1) : this._currentFrameIndex = p));
                    0 > this._currentFrameIndex && (w ? (this._currentFrameIndex = 1, this.SetPlayingForwards(!0),
                        q || (this._animationRepeats++, this._animationRepeats >= t && this._FinishAnimation(!0))) : q ? this._currentFrameIndex = p : (this._animationRepeats++, this._animationRepeats >= t ? this._FinishAnimation(!0) : this._currentFrameIndex = p));
                    this._currentFrameIndex = e.clamp(this._currentFrameIndex, 0, r - 1);
                    u = x.GetFrameAt(this._currentFrameIndex);
                    l > this._frameStartTime + u.GetDuration() / g && (this._frameStartTime = l);
                    this._OnFrameChanged(m, u)
                }
            } else this._StopTicking()
        }
        _FinishAnimation(g) {
            this._currentFrameIndex = g ? 0 : this._currentAnimation.GetFrameCount() -
                1;
            this.SetAnimationPlaying(!1);
            this._animTriggerName = this._currentAnimation.GetName();
            this.SetInAnimationTrigger(!0);
            this.Trigger(e.Plugins.Sprite.Cnds.OnAnyAnimFinished);
            this.Trigger(e.Plugins.Sprite.Cnds.OnAnimFinished);
            this.SetInAnimationTrigger(!1);
            this._animationRepeats = 0
        }
        _OnFrameChanged(g, l) {
            if (g !== l) {
                var m = this.GetWorldInfo(),
                    u = g.GetImageInfo(),
                    x = l.GetImageInfo(),
                    p = u.GetWidth();
                u = u.GetHeight();
                var r = x.GetWidth(),
                    t = x.GetHeight();
                p !== r && m.SetWidth(m.GetWidth() * (r / p));
                u !== t && m.SetHeight(m.GetHeight() *
                    (t / u));
                m.SetOriginX(l.GetOriginX());
                m.SetOriginY(l.GetOriginY());
                m.SetSourceCollisionPoly(l.GetCollisionPoly());
                m.SetBboxChanged();
                this._currentAnimationFrame = l;
                this._currentTexture = x.GetTexture();
                this._currentRcTex = x.GetTexRect();
                this._currentQuadTex = x.GetTexQuad();
                m = this.GetInstance().GetBehaviorInstances();
                for (let q = 0, w = m.length; q < w; ++q) m[q].OnSpriteFrameChanged(g, l);
                this.Trigger(e.Plugins.Sprite.Cnds.OnFrameChanged);
                this._runtime.UpdateRender()
            }
        }
        _StartAnim(g) {
            this.SetAnimationPlaying(!0);
            this._frameStartTime =
                this.GetAnimationTime();
            1 === g && 0 !== this._currentFrameIndex && (this._changeAnimFrameIndex = 0, this.IsInAnimationTrigger() || this._DoChangeAnimFrame());
            this._StartTicking()
        }
        _SetAnim(g, l) {
            this._changeAnimationName = g;
            this._changeAnimationFrom = l;
            this._StartTicking();
            this.IsInAnimationTrigger() || this._DoChangeAnimation()
        }
        _GetCurrentAnimationName() {
            return this._changeAnimationName ? this._changeAnimationName : this._currentAnimation.GetName()
        }
        _SetAnimFrame(g) {
            isFinite(g) && (this._changeAnimFrameIndex = g, this.IsInAnimationTrigger() ||
                this._DoChangeAnimFrame())
        }
        _GetAnimFrame() {
            return this._currentFrameIndex
        }
        _SetAnimSpeed(g) {
            this._currentAnimationSpeed = Math.abs(g);
            this.SetPlayingForwards(0 <= g);
            0 < this._currentAnimationSpeed && this._StartTicking()
        }
        _GetAnimSpeed() {
            return this.IsPlayingForwards() ? this._currentAnimationSpeed : -this._currentAnimationSpeed
        }
        _SetAnimRepeatToFrame(g) {
            this._currentAnimationRepeatTo = g = e.clamp(Math.floor(g), 0, this._currentAnimation.GetFrameCount() - 1)
        }
        _GetAnimRepeatToFrame() {
            return this._currentAnimationRepeatTo
        }
        _DoChangeAnimation() {
            const g =
                this._currentAnimationFrame;
            var l = this._objectClass.GetAnimationByName(this._changeAnimationName);
            this._changeAnimationName = "";
            !l || l === this._currentAnimation && this.IsAnimationPlaying() || (this._currentAnimation = l, this.SetPlayingForwards(0 <= l.GetSpeed()), this._currentAnimationSpeed = Math.abs(l.GetSpeed()), this._currentAnimationRepeatTo = l.GetRepeatTo(), this._currentFrameIndex = e.clamp(this._currentFrameIndex, 0, this._currentAnimation.GetFrameCount() - 1), 1 === this._changeAnimationFrom && (this._currentFrameIndex =
                0), this.SetAnimationPlaying(!0), this._frameStartTime = this.GetAnimationTime(), l = this._currentAnimation.GetFrameAt(this._currentFrameIndex), this._OnFrameChanged(g, l))
        }
        _DoChangeAnimFrame() {
            const g = this._currentAnimationFrame;
            var l = this._currentFrameIndex;
            this._currentFrameIndex = e.clamp(Math.floor(this._changeAnimFrameIndex), 0, this._currentAnimation.GetFrameCount() - 1);
            this._changeAnimFrameIndex = -1;
            l !== this._currentFrameIndex && (l = this._currentAnimation.GetFrameAt(this._currentFrameIndex), this._OnFrameChanged(g,
                l), this._frameStartTime = this.GetAnimationTime())
        }
        _UpdateCurrentTexture() {
            const g = this._currentAnimationFrame.GetImageInfo();
            this._currentTexture = g.GetTexture();
            this._currentRcTex = g.GetTexRect();
            this._currentQuadTex = g.GetTexQuad();
            this.GetWorldInfo().SetMeshChanged(!0)
        }
        GetTexture() {
            return this._currentTexture
        }
        GetTexRect() {
            return this._currentRcTex
        }
        GetTexQuad() {
            return this._currentQuadTex
        }
        GetImagePointCount() {
            return this._currentAnimationFrame.GetImagePointCount()
        }
        GetImagePoint(g) {
            const l = this._currentAnimationFrame,
                m = this.GetWorldInfo();
            if ("string" === typeof g) g = l.GetImagePointByName(g);
            else if ("number" === typeof g) g = l.GetImagePointByIndex(g - 1);
            else throw new TypeError("expected string or number");
            if (!g) return [m.GetX(), m.GetY()];
            c.copy(g.GetVec2());
            if (m.HasMesh()) {
                const [u, x] = m.GetSourceMesh().TransformPoint(c.getX(), c.getY());
                c.set(u, x)
            }
            c.offset(-l.GetOriginX(), -l.GetOriginY());
            c.scale(m.GetWidth(), m.GetHeight());
            c.rotate(m.GetAngle());
            c.offset(m.GetX(), m.GetY());
            return [c.getX(), c.getY()]
        }
        GetCollisionPolyPointCount() {
            return this.GetWorldInfo().GetTransformedCollisionPoly().pointCount()
        }
        GetCollisionPolyPoint(g) {
            g =
                Math.floor(g);
            const l = this.GetWorldInfo();
            var m = l.GetTransformedCollisionPoly();
            const u = m.pointCount();
            g === u && (g = 0);
            if (0 > g || g >= u) return [0, 0];
            m = m.pointsArr();
            return [m[2 * g] + l.GetX(), m[2 * g + 1] + l.GetY()]
        }
        GetDebuggerProperties() {
            const g = e.Plugins.Sprite.Acts;
            return [{
                title: "plugins.sprite.debugger.animation-properties.title",
                properties: [{
                    name: "plugins.sprite.debugger.animation-properties.current-animation",
                    value: this._currentAnimation.GetName(),
                    onedit: l => this.CallAction(g.SetAnim, l, 0)
                }, {
                    name: "plugins.sprite.debugger.animation-properties.current-frame",
                    value: this._currentFrameIndex,
                    onedit: l => this.CallAction(g.SetAnimFrame, l)
                }, {
                    name: "plugins.sprite.debugger.animation-properties.is-playing",
                    value: this.IsAnimationPlaying(),
                    onedit: l => l ? this.CallAction(g.StartAnim, 0) : this.CallAction(g.StopAnim)
                }, {
                    name: "plugins.sprite.debugger.animation-properties.speed",
                    value: this._currentAnimationSpeed,
                    onedit: l => this.CallAction(g.SetAnimSpeed, l)
                }, {
                    name: "plugins.sprite.debugger.animation-properties.repeats",
                    value: this._animationRepeats,
                    onedit: l => this._animationRepeats =
                        l
                }]
            }]
        }
        SaveToJson() {
            const g = {
                a: this._currentAnimation.GetSID()
            };
            0 !== this._frameStartTime && (g.fs = this._frameStartTime);
            var l = this.GetAnimationTime();
            0 !== l && (g.at = l);
            0 !== this._currentFrameIndex && (g.f = this._currentFrameIndex);
            0 !== this._currentAnimationSpeed && (g.cas = this._currentAnimationSpeed);
            1 !== this._animationRepeats && (g.ar = this._animationRepeats);
            0 !== this._currentAnimationRepeatTo && (g.rt = this._currentAnimationRepeatTo);
            this.IsAnimationPlaying() || (g.ap = this.IsAnimationPlaying());
            this.IsPlayingForwards() ||
                (g.af = this.IsPlayingForwards());
            l = this.GetWorldInfo();
            l.IsCollisionEnabled() && (g.ce = l.IsCollisionEnabled());
            return g
        }
        LoadFromJson(g) {
            var l = this.GetObjectClass().GetAnimationBySID(g.a);
            l && (this._currentAnimation = l);
            this._frameStartTime = g.hasOwnProperty("fs") ? g.fs : 0;
            this._animationTimer.Set(g.hasOwnProperty("at") ? g.at : 0);
            l = g.hasOwnProperty("f") ? g.f : 0;
            this._currentFrameIndex = e.clamp(l, 0, this._currentAnimation.GetFrameCount() - 1);
            this._currentAnimationSpeed = g.hasOwnProperty("cas") ? g.cas : 0;
            this._animationRepeats =
                g.hasOwnProperty("ar") ? g.ar : 1;
            l = g.hasOwnProperty("rt") ? g.rt : 0;
            this._currentAnimationRepeatTo = e.clamp(l, 0, this._currentAnimation.GetFrameCount() - 1);
            this.SetAnimationPlaying(g.hasOwnProperty("ap") ? !!g.ap : !0);
            this.SetPlayingForwards(g.hasOwnProperty("af") ? !!g.af : !0);
            this._currentAnimationFrame = l = this._currentAnimation.GetFrameAt(this._currentFrameIndex);
            this._UpdateCurrentTexture();
            const m = this.GetWorldInfo();
            m.SetOriginX(l.GetOriginX());
            m.SetOriginY(l.GetOriginY());
            m.SetSourceCollisionPoly(l.GetCollisionPoly());
            m.SetCollisionEnabled(!!g.ce)
        }
        GetPropertyValueByIndex(g) {
            const l = this.GetWorldInfo();
            switch (g) {
                case 3:
                    return l.IsCollisionEnabled();
                case 2:
                    return e.clamp(this._currentFrameIndex, 0, this._currentAnimation.GetFrameCount() - 1)
            }
        }
        SetPropertyValueByIndex(g, l) {
            var m = this.GetWorldInfo();
            switch (g) {
                case 3:
                    m.SetCollisionEnabled(!!l);
                    break;
                case 2:
                    this.SetAnimationPlaying(!1);
                    g = this._currentAnimation.GetFrameCount() - 1;
                    m = l = e.clamp(l, 0, g);
                    l = this._currentAnimation.GetFrameAt(this._currentFrameIndex);
                    const u = this._currentAnimation.GetFrameAt(m);
                    this._OnFrameChanged(l, u);
                    this._currentFrameIndex = e.clamp(m, 0, g)
            }
        }
        GetScriptInterfaceClass() {
            return self.ISpriteInstance
        }
    };
    const f = new WeakMap,
        k = new Map([
            ["current-frame", 0],
            ["beginning", 1]
        ]);
    self.ISpriteInstance = class extends self.IWorldInstance {
        constructor() {
            super();
            f.set(this, self.IInstance._GetInitInst().GetSdkInstance())
        }
        getImagePointCount() {
            return f.get(this).GetImagePointCount()
        }
        getImagePointX(g) {
            if ("string" !== typeof g && "number" !== typeof g) throw new TypeError("expected string or number");
            return f.get(this).GetImagePoint(g)[0]
        }
        getImagePointY(g) {
            if ("string" !==
                typeof g && "number" !== typeof g) throw new TypeError("expected string or number");
            return f.get(this).GetImagePoint(g)[1]
        }
        getImagePoint(g) {
            if ("string" !== typeof g && "number" !== typeof g) throw new TypeError("expected string or number");
            return f.get(this).GetImagePoint(g)
        }
        getPolyPointCount() {
            return f.get(this).GetCollisionPolyPointCount()
        }
        getPolyPointX(g) {
            b.RequireFiniteNumber(g);
            return f.get(this).GetCollisionPolyPoint(g)[0]
        }
        getPolyPointY(g) {
            b.RequireFiniteNumber(g);
            return f.get(this).GetCollisionPolyPoint(g)[1]
        }
        getPolyPoint(g) {
            b.RequireFiniteNumber(g);
            return f.get(this).GetCollisionPolyPoint(g)
        }
        stopAnimation() {
            f.get(this).SetAnimationPlaying(!1)
        }
        startAnimation(g = "current-frame") {
            b.RequireString(g);
            g = k.get(g);
            if ("undefined" === typeof g) throw Error("invalid mode");
            f.get(this)._StartAnim(g)
        }
        setAnimation(g, l = "beginning") {
            b.RequireString(g);
            b.RequireString(l);
            l = k.get(l);
            if ("undefined" === typeof l) throw Error("invalid mode");
            f.get(this)._SetAnim(g, l)
        }
        get animationName() {
            return f.get(this)._GetCurrentAnimationName()
        }
        set animationFrame(g) {
            b.RequireFiniteNumber(g);
            f.get(this)._SetAnimFrame(g)
        }
        get animationFrame() {
            return f.get(this)._GetAnimFrame()
        }
        set animationSpeed(g) {
            b.RequireFiniteNumber(g);
            f.get(this)._SetAnimSpeed(g)
        }
        get animationSpeed() {
            return f.get(this)._GetAnimSpeed()
        }
        set animationRepeatToFrame(g) {
            b.RequireFiniteNumber(g);
            f.get(this)._SetAnimRepeatToFrame(g)
        }
        get animationRepeatToFrame() {
            return f.get(this)._GetAnimRepeatToFrame()
        }
        get imageWidth() {
            return f.get(this).GetCurrentImageInfo().GetWidth()
        }
        get imageHeight() {
            return f.get(this).GetCurrentImageInfo().GetHeight()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Sprite.Cnds = {
        IsAnimPlaying(b) {
            return e.equalsNoCase(this._GetCurrentAnimationName(), b)
        },
        CompareFrame(b, a) {
            return e.compare(this._currentFrameIndex, b, a)
        },
        CompareAnimSpeed(b, a) {
            return e.compare(this._GetAnimSpeed(), b, a)
        },
        OnAnimFinished(b) {
            return e.equalsNoCase(this._animTriggerName, b)
        },
        OnAnyAnimFinished() {
            return !0
        },
        OnFrameChanged() {
            return !0
        },
        IsMirrored() {
            return 0 > this.GetWorldInfo().GetWidth()
        },
        IsFlipped() {
            return 0 > this.GetWorldInfo().GetHeight()
        },
        OnURLLoaded() {
            return !0
        },
        OnURLFailed() {
            return !0
        },
        IsCollisionEnabled() {
            return this.GetWorldInfo().IsCollisionEnabled()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Sprite.Acts = {
        Spawn(b, a, d, c) {
            if (b && a) {
                var [f, k] = this.GetImagePoint(d);
                if (d = this._runtime.CreateInstance(b, a, f, k, c)) {
                    c && a.SortAndAddInstancesByZIndex(d);
                    b.GetPlugin().IsRotatable() && (a = d.GetWorldInfo(), a.SetAngle(this.GetWorldInfo().GetAngle()), a.SetBboxChanged());
                    a = this._runtime.GetEventSheetManager();
                    a.BlockFlushingInstances(!0);
                    d._TriggerOnCreatedOnSelfAndRelated();
                    a.BlockFlushingInstances(!1);
                    c = this._runtime.GetCurrentAction().GetSavedDataMap();
                    a = !1;
                    if (!c.has("Spawn_LastExec") ||
                        c.get("Spawn_LastExec") < this._runtime.GetExecCount()) a = !0, c.set("Spawn_LastExec", this._runtime.GetExecCount());
                    if (b !== this.GetObjectClass() && (b = b.GetCurrentSol(), b._SetSelectAll(!1), b = b._GetOwnInstances(), a && e.clearArray(b), b.push(d), d.IsInContainer()))
                        for (const g of d.siblings()) d = g.GetObjectClass().GetCurrentSol(), a ? d.SetSinglePicked(g) : (d._SetSelectAll(!1), d._PushInstance(g))
                }
            }
        },
        StopAnim() {
            this.SetAnimationPlaying(!1)
        },
        StartAnim(b) {
            this._StartAnim(b)
        },
        SetAnim(b, a) {
            this._SetAnim(b, a)
        },
        SetAnimFrame(b) {
            this._SetAnimFrame(b)
        },
        SetAnimSpeed(b) {
            this._SetAnimSpeed(b)
        },
        SetAnimRepeatToFrame(b) {
            this._SetAnimRepeatToFrame(b)
        },
        SetMirrored(b) {
            const a = this.GetWorldInfo(),
                d = a.GetWidth();
            b = Math.abs(d) * (0 === b ? -1 : 1);
            d !== b && (a.SetWidth(b), a.SetBboxChanged())
        },
        SetFlipped(b) {
            const a = this.GetWorldInfo(),
                d = a.GetHeight();
            b = Math.abs(d) * (0 === b ? -1 : 1);
            d !== b && (a.SetHeight(b), a.SetBboxChanged())
        },
        SetScale(b) {
            const a = this._currentAnimationFrame.GetImageInfo(),
                d = this.GetWorldInfo();
            var c = 0 > d.GetWidth() ? -1 : 1;
            const f = 0 > d.GetHeight() ? -1 : 1;
            c *= a.GetWidth() *
                b;
            b = a.GetHeight() * b * f;
            if (d.GetWidth() !== c || d.GetHeight() !== b) d.SetSize(c, b), d.SetBboxChanged()
        },
        async LoadURL(b, a, d) {
            d = this._currentAnimationFrame.GetImageInfo();
            const c = this.GetWorldInfo(),
                f = this._runtime;
            if (d.GetURL() === b) 0 === a && (c.SetSize(d.GetWidth(), d.GetHeight()), c.SetBboxChanged()), this.Trigger(e.Plugins.Sprite.Cnds.OnURLLoaded);
            else {
                var k = e.New(e.ImageInfo);
                try {
                    await k.LoadDynamicAsset(f, b);
                    if (!k.IsLoaded()) throw Error("image failed to load");
                    await k.LoadStaticTexture(f.GetRenderer(), {
                        sampling: this._runtime.GetSampling()
                    })
                } catch (g) {
                    console.error("Load image from URL failed: ",
                        g);
                    this.Trigger(e.Plugins.Sprite.Cnds.OnURLFailed);
                    return
                }
                d.ReplaceWith(k);
                this._sdkType._UpdateAllCurrentTexture();
                this.WasReleased() || 0 !== a || (c.SetSize(d.GetWidth(), d.GetHeight()), c.SetBboxChanged());
                f.UpdateRender();
                this.WasReleased() || await this.TriggerAsync(e.Plugins.Sprite.Cnds.OnURLLoaded)
            }
        },
        SetCollisions(b) {
            this.GetWorldInfo().SetCollisionEnabled(b)
        },
        SetSolidCollisionFilter(b, a) {
            this.GetWorldInfo().SetSolidCollisionFilter(0 === b, a)
        },
        SetEffect(b) {
            this.GetWorldInfo().SetBlendMode(b);
            this._runtime.UpdateRender()
        }
    }
}
"use strict";
self.C3.Plugins.Sprite.Exps = {
    AnimationFrame() {
        return this._currentFrameIndex
    },
    AnimationFrameCount() {
        return this._currentAnimation.GetFrameCount()
    },
    AnimationName() {
        return this._currentAnimation.GetName()
    },
    AnimationSpeed() {
        return this._GetAnimSpeed()
    },
    OriginalAnimationSpeed() {
        return this._currentAnimation.GetSpeed()
    },
    ImagePointX(e) {
        return this.GetImagePoint(e)[0]
    },
    ImagePointY(e) {
        return this.GetImagePoint(e)[1]
    },
    ImagePointCount() {
        return this.GetImagePointCount()
    },
    ImageWidth() {
        return this.GetCurrentImageInfo().GetWidth()
    },
    ImageHeight() {
        return this.GetCurrentImageInfo().GetHeight()
    },
    PolyPointXAt(e) {
        return this.GetCollisionPolyPoint(e)[0]
    },
    PolyPointYAt(e) {
        return this.GetCollisionPolyPoint(e)[1]
    },
    PolyPointCount() {
        return this.GetCollisionPolyPointCount()
    }
}; {
    "use strict";
    const e = self.C3;
    e.Plugins.Text = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Text.Type = class extends e.SDKTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
        LoadTextures(b) {}
        ReleaseTextures() {}
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = [0, 0, 0],
        d = ["left", "center", "right"],
        c = ["top", "center", "bottom"],
        f = new e.Rect,
        k = new e.Quad,
        g = new e.Color;
    e.Plugins.Text.Instance = class extends e.SDKWorldInstanceBase {
        constructor(p, r) {
            super(p);
            this._text = "";
            this._enableBBcode = !0;
            this._faceName = "Arial";
            this._ptSize = 12;
            this._lineHeightOffset = 0;
            this._isItalic = this._isBold = !1;
            this._color = e.New(e.Color);
            this._verticalAlign = this._horizontalAlign = 0;
            this._wrapByWord = !0;
            this._typewriterEndTime = this._typewriterStartTime = -1;
            this._typewriterLength = 0;
            this._rendererText = e.New(e.Gfx.RendererText, this._runtime.GetRenderer(), {
                timeout: 5
            });
            this._rendererText.ontextureupdate = () => this._runtime.UpdateRender();
            this._rendererText.SetIsAsync(!1);
            r && (this._text = r[0], this._enableBBcode = !!r[1], this._faceName = r[2], this._ptSize = r[3], this._lineHeightOffset = r[4], this._isBold = !!r[5], this._isItalic = !!r[6], this._horizontalAlign = r[8], this._verticalAlign = r[9], this._wrapByWord = 0 === r[10], p = r[7], this._color.setRgb(p[0], p[1], p[2]), this.GetWorldInfo().SetVisible(r[11]));
            this._UpdateTextSettings()
        }
        Release() {
            this._CancelTypewriter();
            this._rendererText.Release();
            this._rendererText = null;
            super.Release()
        }
        _UpdateTextSettings() {
            const p = this._rendererText;
            p.SetText(this._text);
            p.SetBBCodeEnabled(this._enableBBcode);
            p.SetFontName(this._faceName);
            p.SetLineHeight(this._lineHeightOffset);
            p.SetBold(this._isBold);
            p.SetItalic(this._isItalic);
            p.SetColor(this._color);
            p.SetHorizontalAlignment(d[this._horizontalAlign]);
            p.SetVerticalAlignment(c[this._verticalAlign]);
            p.SetWordWrapMode(this._wrapByWord ?
                "word" : "character")
        }
        _UpdateTextSize() {
            const p = this.GetWorldInfo();
            this._rendererText.SetFontSize(this._ptSize);
            this._rendererText.SetFontSizeScale(p.GetSceneGraphScale());
            var r = p.GetLayer();
            r = r.GetRenderScale() * r.Get2DScaleFactorToZ(p.GetTotalZElevation());
            this._rendererText.SetSize(p.GetWidth(), p.GetHeight(), r)
        }
        Draw(p) {
            var r = this.GetWorldInfo();
            this._UpdateTextSize();
            const t = this._rendererText.GetTexture();
            if (t) {
                var q = r.GetLayer();
                if (0 === r.GetAngle() && 0 === q.GetAngle() && 0 === r.GetTotalZElevation() &&
                    !r.HasMesh() && q.RendersIn2DMode()) {
                    r = r.GetBoundingQuad();
                    const [w, y] = q.LayerToDrawSurface(r.getTlx(), r.getTly()), [C, F] = q.LayerToDrawSurface(r.getBrx(), r.getBry());
                    r = w - Math.round(w);
                    const H = y - Math.round(y);
                    f.set(w, y, C, F);
                    f.offset(-r, -H);
                    k.setFromRect(f);
                    const [M, B] = p.GetRenderTargetSize(p.GetRenderTarget());
                    this._runtime.GetCanvasManager().SetDeviceTransform(p, M, B);
                    p.SetTexture(t);
                    p.Quad3(k, this._rendererText.GetTexRect());
                    q._SetTransform(p)
                } else p.SetTexture(t), r.HasMesh() ? this._DrawMesh(r, p) : this._DrawStandard(r,
                    p)
            }
        }
        _DrawStandard(p, r) {
            p = p.GetBoundingQuad();
            this._runtime.IsPixelRoundingEnabled() && (p = this._PixelRoundQuad(p));
            r.Quad3(p, this._rendererText.GetTexRect())
        }
        _DrawMesh(p, r) {
            const t = p.GetTransformedMesh();
            if (p.IsMeshChanged()) {
                p.CalculateBbox(f, k, !1);
                let q = k;
                this._runtime.IsPixelRoundingEnabled() && (q = this._PixelRoundQuad(q));
                t.CalculateTransformedMesh(p.GetSourceMesh(), q, this._rendererText.GetTexRect());
                p.SetMeshChanged(!1)
            }
            t.Draw(r)
        }
        _PixelRoundQuad(p) {
            const r = p.getTlx() - Math.round(p.getTlx()),
                t = p.getTly() -
                Math.round(p.getTly());
            if (0 === r && 0 === t) return p;
            k.copy(p);
            k.offset(-r, -t);
            return k
        }
        SaveToJson() {
            const p = {
                t: this._text,
                c: this._color.toJSON(),
                fn: this._faceName,
                ps: this._ptSize
            };
            this._enableBBcode && (p.bbc = this._enableBBcode);
            0 !== this._horizontalAlign && (p.ha = this._horizontalAlign);
            0 !== this._verticalAlign && (p.va = this._verticalAlign);
            this._wrapByWord || (p.wr = this._wrapByWord);
            0 !== this._lineHeightOffset && (p.lho = this._lineHeightOffset);
            this._isBold && (p.b = this._isBold);
            this._isItalic && (p.i = this._isItalic); -
            1 !== this._typewriterEndTime && (p.tw = {
                st: this._typewriterStartTime,
                en: this._typewriterEndTime,
                l: this._typewriterLength
            });
            return p
        }
        LoadFromJson(p) {
            this._CancelTypewriter();
            this._text = p.t;
            this._color.setFromJSON(p.c);
            this._faceName = p.fn;
            this._ptSize = p.ps;
            this._enableBBcode = p.hasOwnProperty("bbc") ? p.bbc : !1;
            this._horizontalAlign = p.hasOwnProperty("ha") ? p.ha : 0;
            this._verticalAlign = p.hasOwnProperty("va") ? p.va : 0;
            this._wrapByWord = p.hasOwnProperty("wr") ? p.wr : !0;
            this._lineHeightOffset = p.hasOwnProperty("lho") ?
                p.lho : 0;
            this._isBold = p.hasOwnProperty("b") ? p.b : !1;
            this._isItalic = p.hasOwnProperty("i") ? p.i : !1;
            p.hasOwnProperty("tw") && (p = p.tw, this._typewriterStartTime = p.st, this._typewriterEndTime = p.en, this._typewriterLength = p.l);
            this._UpdateTextSettings(); - 1 !== this._typewriterEndTime && this._StartTicking()
        }
        GetPropertyValueByIndex(p) {
            switch (p) {
                case 0:
                    return this._text;
                case 1:
                    return this._enableBBcode;
                case 2:
                    return this._faceName;
                case 3:
                    return this._ptSize;
                case 4:
                    return this._lineHeightOffset;
                case 5:
                    return this._isBold;
                case 6:
                    return this._isItalic;
                case 7:
                    return a[0] = this._color.getR(), a[1] = this._color.getG(), a[2] = this._color.getB(), a;
                case 8:
                    return this._horizontalAlign;
                case 9:
                    return this._verticalAlign;
                case 10:
                    return this._wrapByWord ? 1 : 0
            }
        }
        SetPropertyValueByIndex(p, r) {
            switch (p) {
                case 0:
                    if (this._text === r) break;
                    this._text = r;
                    this._UpdateTextSettings();
                    break;
                case 1:
                    if (this._enableBBcode === !!r) break;
                    this._enableBBcode = !!r;
                    this._UpdateTextSettings();
                    break;
                case 2:
                    if (this._faceName === r) break;
                    this._faceName = r;
                    this._UpdateTextSettings();
                    break;
                case 3:
                    if (this._ptSize === r) break;
                    this._ptSize = r;
                    this._UpdateTextSettings();
                    break;
                case 4:
                    if (this._lineHeightOffset === r) break;
                    this._lineHeightOffset = r;
                    this._UpdateTextSettings();
                    break;
                case 5:
                    if (this._isBold === !!r) break;
                    this._isBold = !!r;
                    this._UpdateTextSettings();
                    break;
                case 6:
                    if (this._isItalic === !!r) break;
                    this._isItalic = !!r;
                    this._UpdateTextSettings();
                    break;
                case 7:
                    p = this._color;
                    if (p.getR() === r[0] && p.getG() === r[1] && p.getB() === r[2]) break;
                    this._color.setRgb(r[0], r[1], r[2]);
                    this._UpdateTextSettings();
                    break;
                case 8:
                    if (this._horizontalAlign === r) break;
                    this._horizontalAlign = r;
                    this._UpdateTextSettings();
                    break;
                case 9:
                    if (this._verticalAlign === r) break;
                    this._verticalAlign = r;
                    this._UpdateTextSettings();
                    break;
                case 10:
                    this._wrapByWord !== (0 === r) && (this._wrapByWord = 0 === r, this._UpdateTextSettings())
            }
        }
        SetPropertyColorOffsetValueByIndex(p, r, t, q) {
            if (0 !== r || 0 !== t || 0 !== q) switch (p) {
                case 7:
                    this._color.addRgb(r, t, q), this._UpdateTextSettings()
            }
        }
        _SetText(p) {
            this._text !== p && (this._text = p, this._rendererText.SetText(p), this._runtime.UpdateRender())
        }
        GetText() {
            return this._text
        }
        _StartTypewriter(p,
            r) {
            this._SetText(p);
            this._typewriterStartTime = this._runtime.GetWallTime();
            this._typewriterEndTime = this._typewriterStartTime + r / this.GetInstance().GetActiveTimeScale();
            this._typewriterLength = e.BBString.StripAnyTags(p).length;
            this._rendererText.SetDrawMaxCharacterCount(0);
            this._StartTicking()
        }
        _CancelTypewriter() {
            this._typewriterEndTime = this._typewriterStartTime = -1;
            this._typewriterLength = 0;
            this._rendererText.SetDrawMaxCharacterCount(-1);
            this._StopTicking()
        }
        _FinishTypewriter() {
            -1 !== this._typewriterEndTime &&
                (this._CancelTypewriter(), this.Trigger(e.Plugins.Text.Cnds.OnTypewriterTextFinished), this._runtime.UpdateRender())
        }
        _SetFontFace(p) {
            this._faceName !== p && (this._faceName = p, this._rendererText.SetFontName(p), this._runtime.UpdateRender())
        }
        _GetFontFace() {
            return this._faceName
        }
        _SetBold(p) {
            p = !!p;
            this._isBold !== p && (this._isBold = p, this._rendererText.SetBold(p), this._runtime.UpdateRender())
        }
        _IsBold() {
            return this._isBold
        }
        _SetItalic(p) {
            p = !!p;
            this._isItalic !== p && (this._isItalic = p, this._rendererText.SetItalic(p),
                this._runtime.UpdateRender())
        }
        _IsItalic() {
            return this._isItalic
        }
        _SetFontSize(p) {
            this._ptSize !== p && (this._ptSize = p, this._runtime.UpdateRender())
        }
        _GetFontSize() {
            return this._ptSize
        }
        _SetFontColor(p) {
            this._color.equalsIgnoringAlpha(p) || (this._color.copyRgb(p), this._rendererText.SetColor(this._color), this._runtime.UpdateRender())
        }
        _GetFontColor() {
            return this._color
        }
        _SetLineHeight(p) {
            this._lineHeightOffset !== p && (this._lineHeightOffset = p, this._UpdateTextSettings(), this._runtime.UpdateRender())
        }
        _GetLineHeight() {
            return this._lineHeightOffset
        }
        _SetHAlign(p) {
            this._horizontalAlign !==
                p && (this._horizontalAlign = p, this._UpdateTextSettings(), this._runtime.UpdateRender())
        }
        _GetHAlign() {
            return this._horizontalAlign
        }
        _SetVAlign(p) {
            this._verticalAlign !== p && (this._verticalAlign = p, this._UpdateTextSettings(), this._runtime.UpdateRender())
        }
        _GetVAlign() {
            return this._verticalAlign
        }
        _SetWrapByWord(p) {
            p = !!p;
            this._wrapByWord !== p && (this._wrapByWord = p, this._UpdateTextSettings(), this._runtime.UpdateRender())
        }
        _IsWrapByWord() {
            return this._wrapByWord
        }
        _GetTextWidth() {
            this._UpdateTextSize();
            return this._rendererText.GetTextWidth()
        }
        _GetTextHeight() {
            this._UpdateTextSize();
            return this._rendererText.GetTextHeight()
        }
        Tick() {
            var p = this._runtime.GetWallTime();
            p >= this._typewriterEndTime ? (this._CancelTypewriter(), this.Trigger(e.Plugins.Text.Cnds.OnTypewriterTextFinished), this._runtime.UpdateRender()) : (p = e.relerp(this._typewriterStartTime, this._typewriterEndTime, p, 0, this._typewriterLength), p = Math.floor(p), p !== this._rendererText.GetDrawMaxCharacterCount() && (this._rendererText.SetDrawMaxCharacterCount(p), this._runtime.UpdateRender()))
        }
        GetDebuggerProperties() {
            return [{
                title: "plugins.text.name",
                properties: [{
                    name: "plugins.text.properties.text.name",
                    value: this._text,
                    onedit: p => this._SetText(p)
                }]
            }]
        }
        GetScriptInterfaceClass() {
            return self.ITextInstance
        }
    };
    const l = new WeakMap,
        m = new Map([
            ["left", 0],
            ["center", 1],
            ["right", 2]
        ]),
        u = new Map([
            ["top", 0],
            ["center", 1],
            ["bottom", 2]
        ]),
        x = new Map([
            ["word", !0],
            ["character", !1]
        ]);
    self.ITextInstance = class extends self.IWorldInstance {
        constructor() {
            super();
            l.set(this, self.IInstance._GetInitInst().GetSdkInstance())
        }
        get text() {
            return l.get(this).GetText()
        }
        set text(p) {
            b.RequireString(p);
            const r = l.get(this);
            r._CancelTypewriter();
            r._SetText(p)
        }
        typewriterText(p, r) {
            b.RequireString(p);
            b.RequireFiniteNumber(r);
            const t = l.get(this);
            t._CancelTypewriter();
            t._StartTypewriter(p, r)
        }
        typewriterFinish() {
            l.get(this)._FinishTypewriter()
        }
        set fontFace(p) {
            b.RequireString(p);
            l.get(this)._SetFontFace(p)
        }
        get fontFace() {
            return l.get(this)._GetFontFace()
        }
        set isBold(p) {
            l.get(this)._SetBold(p)
        }
        get isBold() {
            return l.get(this)._IsBold()
        }
        set isItalic(p) {
            l.get(this)._SetItalic(p)
        }
        get isItalic() {
            return l.get(this)._IsItalic()
        }
        set sizePt(p) {
            b.RequireFiniteNumber(p);
            l.get(this)._SetFontSize(p)
        }
        get sizePt() {
            return l.get(this)._GetFontSize()
        }
        set fontColor(p) {
            b.RequireArray(p);
            if (3 > p.length) throw Error("expected 3 elements");
            g.setRgb(p[0], p[1], p[2]);
            l.get(this)._SetFontColor(g)
        }
        get fontColor() {
            const p = l.get(this)._GetFontColor();
            return [p.getR(), p.getG(), p.getB()]
        }
        set lineHeight(p) {
            b.RequireFiniteNumber(p);
            l.get(this)._SetLineHeight(p)
        }
        get lineHeight() {
            return l.get(this)._GetLineHeight()
        }
        set horizontalAlign(p) {
            b.RequireString(p);
            p = m.get(p);
            if ("undefined" === typeof p) throw Error("invalid mode");
            l.get(this)._SetHAlign(p)
        }
        get horizontalAlign() {
            return d[l.get(this)._GetHAlign()]
        }
        set verticalAlign(p) {
            b.RequireString(p);
            p = u.get(p);
            if ("undefined" === typeof p) throw Error("invalid mode");
            l.get(this)._SetVAlign(p)
        }
        get verticalAlign() {
            return c[l.get(this)._GetVAlign()]
        }
        set wordWrapMode(p) {
            b.RequireString(p);
            p = x.get(p);
            if ("undefined" === typeof p) throw Error("invalid mode");
            l.get(this)._SetWrapByWord(p)
        }
        get wordWrapMode() {
            return l.get(this)._IsWrapByWord() ? "word" : "character"
        }
        get textWidth() {
            return l.get(this)._GetTextWidth()
        }
        get textHeight() {
            return l.get(this)._GetTextHeight()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Text.Cnds = {
        CompareText(b, a) {
            return a ? this._text === b : e.equalsNoCase(this._text, b)
        },
        IsRunningTypewriterText() {
            return -1 !== this._typewriterEndTime
        },
        OnTypewriterTextFinished() {
            return !0
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = e.New(e.Color);
    e.Plugins.Text.Acts = {
        SetText(a) {
            this._CancelTypewriter();
            "number" === typeof a && 1E9 > a && (a = Math.round(1E10 * a) / 1E10);
            this._SetText(a.toString())
        },
        AppendText(a) {
            this._CancelTypewriter();
            "number" === typeof a && 1E9 > a && (a = Math.round(1E10 * a) / 1E10);
            (a = a.toString()) && this._SetText(this._text + a)
        },
        TypewriterText(a, d) {
            this._CancelTypewriter();
            "number" === typeof a && 1E9 > a && (a = Math.round(1E10 * a) / 1E10);
            this._StartTypewriter(a.toString(), d)
        },
        SetFontFace(a, d) {
            let c = !1,
                f = !1;
            switch (d) {
                case 1:
                    c = !0;
                    break;
                case 2:
                    f = !0;
                    break;
                case 3:
                    f = c = !0
            }
            if (a !== this._faceName || c !== this._isBold || f !== this._isItalic) this._SetFontFace(a), this._SetBold(c), this._SetItalic(f)
        },
        SetFontSize(a) {
            this._SetFontSize(a)
        },
        SetFontColor(a) {
            b.setFromRgbValue(a);
            b.clamp();
            this._SetFontColor(b)
        },
        SetWebFont(a, d) {
            console.warn("[Text] 'Set web font' action is deprecated and no longer has any effect")
        },
        SetEffect(a) {
            this.GetWorldInfo().SetBlendMode(a);
            this._runtime.UpdateRender()
        },
        TypewriterFinish() {
            this._FinishTypewriter()
        },
        SetLineHeight(a) {
            this._SetLineHeight(a)
        },
        SetHAlign(a) {
            this._SetHAlign(a)
        },
        SetVAlign(a) {
            this._SetVAlign(a)
        },
        SetWrapping(a) {
            this._SetWrapByWord(0 === a)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Text.Exps = {
        Text() {
            return this._text
        },
        PlainText() {
            return this._enableBBcode ? e.BBString.StripAnyTags(this._text) : this._text
        },
        FaceName() {
            return this._faceName
        },
        FaceSize() {
            return this._ptSize
        },
        TextWidth() {
            return this._GetTextWidth()
        },
        TextHeight() {
            return this._GetTextHeight()
        },
        LineHeight() {
            return this._lineHeightOffset
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Arr = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Arr.Type = class extends e.SDKTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = self.IInstance;

    function d(f, k, g) {
        if (k < f.length) e.truncateArray(f, k);
        else if (k > f.length)
            if ("function" === typeof g)
                for (var l = f.length; l < k; ++l) f.push(g());
            else
                for (l = f.length; l < k; ++l) f.push(g)
    }
    e.Plugins.Arr.Instance = class extends e.SDKInstanceBase {
        constructor(f, k) {
            super(f);
            this._cx = 10;
            this._cz = this._cy = 1;
            this._arr = null;
            this._forX = [];
            this._forY = [];
            this._forZ = [];
            this._forDepth = -1;
            k && (this._cx = k[0], this._cy = k[1], this._cz = k[2]);
            this._arr = e.MakeFilledArray(this._cx,
                () => e.MakeFilledArray(this._cy, () => e.MakeFilledArray(this._cz, 0)))
        }
        Release() {
            this._arr = null;
            super.Release()
        }
        At(f, k, g) {
            f = Math.floor(f);
            k = Math.floor(k);
            g = Math.floor(g);
            return 0 <= f && f < this._cx && 0 <= k && k < this._cy && 0 <= g && g < this._cz ? this._arr[f][k][g] : 0
        }
        Set(f, k, g, l) {
            f = Math.floor(f);
            k = Math.floor(k);
            g = Math.floor(g);
            0 <= f && f < this._cx && 0 <= k && k < this._cy && 0 <= g && g < this._cz && (this._arr[f][k][g] = l)
        }
        SetSize(f, k, g) {
            f = Math.floor(f);
            k = Math.floor(k);
            g = Math.floor(g);
            0 > f && (f = 0);
            0 > k && (k = 0);
            0 > g && (g = 0);
            if (this._cx !== f || this._cy !==
                k || this._cz !== g) {
                this._cx = f;
                this._cy = k;
                this._cz = g;
                var l = this._arr;
                d(l, f, () => e.MakeFilledArray(k, () => e.MakeFilledArray(g, 0)));
                for (let m = 0; m < f; ++m) {
                    d(l[m], k, () => e.MakeFilledArray(g, 0));
                    for (let u = 0; u < k; ++u) d(l[m][u], g, 0)
                }
            }
        }
        GetWidth() {
            return this._cx
        }
        GetHeight() {
            return this._cy
        }
        GetDepth() {
            return this._cz
        }
        GetDebuggerProperties() {
            const f = [{
                    title: "plugins.arr.debugger.array-properties.title",
                    properties: [{
                            name: "plugins.arr.properties.width.name",
                            value: this._cx,
                            onedit: g => this.SetSize(g, this._cy, this._cz)
                        },
                        {
                            name: "plugins.arr.properties.height.name",
                            value: this._cy,
                            onedit: g => this.SetSize(this._cx, g, this._cz)
                        }, {
                            name: "plugins.arr.properties.depth.name",
                            value: this._cz,
                            onedit: g => this.SetSize(this._cx, this._cy, g)
                        }, {
                            name: "plugins.arr.properties.elements.name",
                            value: this._cx * this._cy * this._cz
                        }
                    ]
                }],
                k = [];
            if (1 === this._cy && 1 === this._cz)
                for (let g = 0; g < this._cx; ++g) k.push({
                    name: "$" + g,
                    value: this._arr[g][0][0],
                    onedit: l => this._arr[g][0][0] = l
                });
            else
                for (let g = 0; g < this._cx; ++g) k.push({
                    name: "$" + g,
                    value: this._arr[g].toString()
                });
            k.length && f.push({
                title: "plugins.arr.debugger.array-data.title",
                properties: k
            });
            return f
        }
        GetAsJsonString() {
            return JSON.stringify({
                c2array: !0,
                size: [this._cx, this._cy, this._cz],
                data: this._arr
            })
        }
        SaveToJson() {
            return {
                size: [this._cx, this._cy, this._cz],
                data: this._arr
            }
        }
        LoadFromJson(f) {
            const k = f.size;
            this._cx = k[0];
            this._cy = k[1];
            this._cz = k[2];
            this._arr = f.data
        }
        _GetForX() {
            return 0 <= this._forDepth && this._forDepth < this._forX.length ? this._forX[this._forDepth] : 0
        }
        _GetForY() {
            return 0 <= this._forDepth && this._forDepth <
                this._forY.length ? this._forY[this._forDepth] : 0
        }
        _GetForZ() {
            return 0 <= this._forDepth && this._forDepth < this._forZ.length ? this._forZ[this._forDepth] : 0
        }
        GetScriptInterfaceClass() {
            return self.IArrayInstance
        }
    };
    const c = new WeakMap;
    self.IArrayInstance = class extends a {
        constructor() {
            super();
            c.set(this, a._GetInitInst().GetSdkInstance())
        }
        get width() {
            return c.get(this).GetWidth()
        }
        get height() {
            return c.get(this).GetHeight()
        }
        get depth() {
            return c.get(this).GetDepth()
        }
        setSize(f, k = 1, g = 1) {
            b.RequireFiniteNumber(f);
            b.RequireFiniteNumber(k);
            b.RequireFiniteNumber(g);
            c.get(this).SetSize(f, k, g)
        }
        getAt(f, k = 0, g = 0) {
            b.RequireFiniteNumber(f);
            b.RequireFiniteNumber(k);
            b.RequireFiniteNumber(g);
            return c.get(this).At(f, k, g)
        }
        setAt(f, k, g = 0, l = 0) {
            b.RequireFiniteNumber(k);
            b.RequireFiniteNumber(g);
            b.RequireFiniteNumber(l);
            if ("number" !== typeof f && "string" !== typeof f) throw new TypeError("invalid type");
            c.get(this).Set(k, g, l, f)
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(a, d, c, f, k) {
        a.PushCopySol(c);
        d.Retrigger(f, k);
        a.PopSol(c)
    }
    e.Plugins.Arr.Cnds = {
        CompareX(a, d, c) {
            return e.compare(this.At(a, 0, 0), d, c)
        },
        CompareXY(a, d, c, f) {
            return e.compare(this.At(a, d, 0), c, f)
        },
        CompareXYZ(a, d, c, f, k) {
            return e.compare(this.At(a, d, c), f, k)
        },
        ArrForEach(a) {
            const d = this._runtime,
                c = d.GetEventSheetManager(),
                f = d.GetCurrentEvent(),
                k = f.GetSolModifiers(),
                g = d.GetEventStack(),
                l = g.GetCurrentStackFrame(),
                m = g.Push(f),
                u = ++this._forDepth,
                x = this._forX;
            var p = this._forY,
                r = this._forZ;
            const t = this._cx,
                q = this._cy;
            var w = this._cz;
            u === this._forX.length ? (x.push(0), p.push(0), r.push(0)) : (x[u] = 0, p[u] = 0, r[u] = 0);
            d.SetDebuggingEnabled(!1);
            if (0 === a)
                for (a = 0; a < t; ++a)
                    for (let y = 0; y < q; ++y)
                        for (let C = 0; C < w; ++C) x[u] = a, p[u] = y, r[u] = C, b(c, f, k, l, m);
            else if (1 === a)
                for (r = 0; r < t; ++r)
                    for (w = 0; w < q; ++w) x[u] = r, p[u] = w, b(c, f, k, l, m);
            else
                for (p = 0; p < t; ++p) x[u] = p, b(c, f, k, l, m);
            d.SetDebuggingEnabled(!0);
            this._forDepth--;
            g.Pop();
            return !1
        },
        CompareCurrent(a, d) {
            return e.compare(this.At(this._GetForX(), this._GetForY(),
                this._GetForZ()), a, d)
        },
        Contains(a) {
            const d = this._cx,
                c = this._cy,
                f = this._cz,
                k = this._arr;
            for (let g = 0; g < d; ++g)
                for (let l = 0; l < c; ++l)
                    for (let m = 0; m < f; ++m)
                        if (k[g][l][m] === a) return !0;
            return !1
        },
        IsEmpty() {
            return 0 === this._cx || 0 === this._cy || 0 === this._cz
        },
        CompareSize(a, d, c) {
            let f = 0;
            switch (a) {
                case 0:
                    f = this._cx;
                    break;
                case 1:
                    f = this._cy;
                    break;
                case 2:
                    f = this._cz
            }
            return e.compare(f, d, c)
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(a, d) {
        if ("number" === typeof a && "number" === typeof d) return a - d;
        a = a.toString();
        d = d.toString();
        return a < d ? -1 : a > d ? 1 : 0
    }
    e.Plugins.Arr.Acts = {
        Clear(a) {
            const d = this._cx,
                c = this._cy,
                f = this._cz,
                k = this._arr;
            for (let g = 0; g < d; ++g)
                for (let l = 0; l < c; ++l)
                    for (let m = 0; m < f; ++m) k[g][l][m] = a
        },
        SetSize(a, d, c) {
            this.SetSize(a, d, c)
        },
        SetX(a, d) {
            this.Set(a, 0, 0, d)
        },
        SetXY(a, d, c) {
            this.Set(a, d, 0, c)
        },
        SetXYZ(a, d, c, f) {
            this.Set(a, d, c, f)
        },
        Push(a, d, c) {
            var f = this._cx,
                k = this._cy;
            const g = this._cz,
                l = this._arr;
            if (0 === c) f = e.MakeFilledArray(k, () => e.MakeFilledArray(g, d)), 0 === a ? l.push(f) : l.unshift(f), this._cx++;
            else if (1 === c) {
                for (k = 0; k < f; ++k) c = e.MakeFilledArray(g, d), 0 === a ? l[k].push(c) : l[k].unshift(c);
                this._cy++
            } else {
                for (c = 0; c < f; ++c)
                    for (let m = 0; m < k; ++m) 0 === a ? l[c][m].push(d) : l[c][m].unshift(d);
                this._cz++
            }
        },
        Pop(a, d) {
            const c = this._cx;
            var f = this._cy,
                k = this._cz;
            const g = this._arr;
            if (0 === d) 0 !== c && (0 === a ? g.pop() : g.shift(), this._cx--);
            else if (1 === d) {
                if (0 !== f) {
                    for (f = 0; f < c; ++f) 0 === a ? g[f].pop() : g[f].shift();
                    this._cy--
                }
            } else if (0 !==
                k) {
                for (d = 0; d < c; ++d)
                    for (k = 0; k < f; ++k) 0 === a ? g[d][k].pop() : g[d][k].shift();
                this._cz--
            }
        },
        Reverse(a) {
            const d = this._cx;
            var c = this._cy,
                f = this._cz;
            const k = this._arr;
            if (0 !== d && 0 !== c && 0 !== f)
                if (0 === a) k.reverse();
                else if (1 === a)
                for (c = 0; c < d; ++c) k[c].reverse();
            else
                for (a = 0; a < d; ++a)
                    for (f = 0; f < c; ++f) k[a][f].reverse()
        },
        Sort(a) {
            const d = this._cx;
            var c = this._cy,
                f = this._cz;
            const k = this._arr;
            if (0 !== d && 0 !== c && 0 !== f)
                if (0 === a) k.sort((g, l) => b(g[0][0], l[0][0]));
                else if (1 === a)
                for (c = 0; c < d; ++c) k[c].sort((g, l) => b(g[0], l[0]));
            else
                for (a =
                    0; a < d; ++a)
                    for (f = 0; f < c; ++f) k[a][f].sort(b)
        },
        Delete(a, d) {
            a = Math.floor(a);
            if (!(0 > a)) {
                var c = this._cx,
                    f = this._cy,
                    k = this._cz,
                    g = this._arr;
                if (0 === d) a >= c || (g.splice(a, 1), this._cx--);
                else if (1 === d) {
                    if (!(a >= f)) {
                        for (f = 0; f < c; ++f) g[f].splice(a, 1);
                        this._cy--
                    }
                } else if (!(a >= k)) {
                    for (d = 0; d < c; ++d)
                        for (k = 0; k < f; ++k) g[d][k].splice(a, 1);
                    this._cz--
                }
            }
        },
        Insert(a, d, c) {
            d = Math.floor(d);
            if (!(0 > d)) {
                var f = this._cx,
                    k = this._cy,
                    g = this._cz,
                    l = this._arr;
                if (0 === c) d > f || (l.splice(d, 0, e.MakeFilledArray(k, () => e.MakeFilledArray(g, a))), this._cx++);
                else if (1 === c) {
                    if (!(d > k)) {
                        for (k = 0; k < f; ++k) l[k].splice(d, 0, e.MakeFilledArray(g, a));
                        this._cy++
                    }
                } else if (!(d > g)) {
                    for (c = 0; c < f; ++c)
                        for (let m = 0; m < k; ++m) l[c][m].splice(d, 0, a);
                    this._cz++
                }
            }
        },
        JSONLoad(a) {
            let d = null;
            try {
                d = JSON.parse(a)
            } catch (c) {
                console.error("[Construct 3] Failed to parse JSON: ", c);
                return
            }
            d.c2array && (a = d.size, this._cx = a[0], this._cy = a[1], this._cz = a[2], this._arr = d.data)
        },
        JSONDownload(a) {
            const d = URL.createObjectURL(new Blob([this.GetAsJsonString()], {
                type: "application/json"
            }));
            this._runtime.InvokeDownload(d,
                a)
        }
    }
}
"use strict";
self.C3.Plugins.Arr.Exps = {
    At(e, b, a) {
        return this.At(e, b || 0, a || 0)
    },
    Width() {
        return this._cx
    },
    Height() {
        return this._cy
    },
    Depth() {
        return this._cz
    },
    CurX() {
        return this._GetForX()
    },
    CurY() {
        return this._GetForY()
    },
    CurZ() {
        return this._GetForZ()
    },
    CurValue() {
        return this.At(this._GetForX(), this._GetForY(), this._GetForZ())
    },
    Front() {
        return this.At(0, 0, 0)
    },
    Back() {
        return this.At(this._cx - 1, 0, 0)
    },
    IndexOf(e) {
        const b = this._arr;
        for (let a = 0, d = this._cx; a < d; ++a)
            if (b[a][0][0] === e) return a;
        return -1
    },
    LastIndexOf(e) {
        const b = this._arr;
        for (let a = this._cx - 1; 0 <= a; --a)
            if (b[a][0][0] === e) return a;
        return -1
    },
    AsJSON() {
        return this.GetAsJsonString()
    }
}; {
    "use strict";
    const e = self.C3;
    e.Plugins.AJAX = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.AJAX.Type = class extends e.SDKTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.AJAX.Instance = class extends e.SDKInstanceBase {
        constructor(b, a) {
            super(b);
            this._curTag = this._lastData = "";
            this._progress = 0;
            this._timeout = -1;
            this._nextRequestHeaders = new Map;
            this._nextReponseBinaryData = null;
            this._nextRequestOverrideMimeType = "";
            this._nwjsAppFolder = this._nwjsPath = this._nwjsFs = null;
            if (this._isNWjs = "nwjs" === this._runtime.GetExportType()) this._nwjsFs = require("fs"), this._nwjsPath = require("path"), this._nwjsAppFolder = this._nwjsPath.dirname((self.process ||
                nw.process).execPath) + "\\"
        }
        Release() {
            super.Release()
        }
        async _TriggerError(b, a, d) {
            console.error(`[Construct 3] AJAX request to '${a}' (tag '${b}') failed: `, d);
            this._curTag = b;
            await this.TriggerAsync(e.Plugins.AJAX.Cnds.OnAnyError);
            await this.TriggerAsync(e.Plugins.AJAX.Cnds.OnError)
        }
        async _TriggerComplete(b) {
            this._curTag = b;
            await this.TriggerAsync(e.Plugins.AJAX.Cnds.OnAnyComplete);
            await this.TriggerAsync(e.Plugins.AJAX.Cnds.OnComplete)
        }
        async _OnProgress(b, a) {
            a.lengthComputable && (this._progress = a.loaded /
                a.total, this._curTag = b, await this.TriggerAsync(e.Plugins.AJAX.Cnds.OnProgress))
        }
        _OnError(b, a, d) {
            if (this._isNWjs) {
                var c = this._nwjsFs,
                    f = this._nwjsAppFolder + a;
                c.existsSync(f) ? c.readFile(f, {
                    encoding: "utf8"
                }, (k, g) => {
                    k ? this._TriggerError(b, a, k) : (this._lastData = g.replace(/\r\n/g, "\n"), this._TriggerComplete(b))
                }) : this._TriggerError(b, a, d)
            } else this._TriggerError(b, a, d)
        }
        async _DoCordovaRequest(b, a) {
            const d = this._runtime.GetAssetManager(),
                c = this._nextReponseBinaryData;
            this._nextReponseBinaryData = null;
            try {
                if (c) {
                    const f =
                        await d.CordovaFetchLocalFileAsArrayBuffer(a);
                    c.SetArrayBufferTransfer(f);
                    this._lastData = ""
                } else this._lastData = (await d.CordovaFetchLocalFileAsText(a)).replace(/\r\n/g, "\n");
                this._TriggerComplete(b)
            } catch (f) {
                this._TriggerError(b, a, f)
            }
        }
        _DoRequest(b, a, d, c) {
            return new Promise(f => {
                const k = l => {
                        this._OnError(b, a, l);
                        f()
                    },
                    g = this._nextReponseBinaryData;
                this._nextReponseBinaryData = null;
                try {
                    const l = new XMLHttpRequest;
                    l.onreadystatechange = () => {
                        if (4 === l.readyState) {
                            this._lastData = g ? "" : (l.responseText || "").replace(/\r\n/g,
                                "\n");
                            if (400 <= l.status) this._TriggerError(b, a, l.status + l.statusText);
                            else {
                                const m = this._lastData.length || g && l.response instanceof ArrayBuffer;
                                this._isNWjs && !m || !this._isNWjs && 0 === l.status && !m || (g && g.SetArrayBufferTransfer(l.response), this._TriggerComplete(b))
                            }
                            f()
                        }
                    };
                    l.onerror = k;
                    l.ontimeout = k;
                    l.onabort = k;
                    l.onprogress = m => this._OnProgress(b, m);
                    l.open(d, a);
                    0 <= this._timeout && "undefined" !== typeof l.timeout && (l.timeout = this._timeout);
                    l.responseType = g ? "arraybuffer" : "text";
                    c && !this._nextRequestHeaders.has("Content-Type") &&
                        ("string" !== typeof c ? l.setRequestHeader("Content-Type", "application/octet-stream") : l.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"));
                    for (const [m, u] of this._nextRequestHeaders) try {
                        l.setRequestHeader(m, u)
                    } catch (x) {
                        console.error(`[Construct 3] AJAX: Failed to set header '${m}: ${u}': `, x)
                    }
                    this._nextRequestHeaders.clear();
                    if (this._nextRequestOverrideMimeType) {
                        try {
                            l.overrideMimeType(this._nextRequestOverrideMimeType)
                        } catch (m) {
                            console.error("[Construct 3] AJAX: failed to override MIME type: ",
                                m)
                        }
                        this._nextRequestOverrideMimeType = ""
                    }
                    c ? l.send(c) : l.send()
                } catch (l) {
                    k(l)
                }
            })
        }
        GetDebuggerProperties() {
            return [{
                title: "plugins.ajax.debugger.title",
                properties: [{
                    name: "plugins.ajax.debugger.last-data",
                    value: this._lastData
                }]
            }]
        }
        SaveToJson() {
            return {
                lastData: this._lastData
            }
        }
        LoadFromJson(b) {
            this._lastData = b.lastData;
            this._curTag = "";
            this._progress = 0
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.AJAX.Cnds = {
        OnComplete(b) {
            return e.equalsNoCase(this._curTag, b)
        },
        OnAnyComplete() {
            return !0
        },
        OnError(b) {
            return e.equalsNoCase(this._curTag, b)
        },
        OnAnyError() {
            return !0
        },
        OnProgress(b) {
            return e.equalsNoCase(this._curTag, b)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.AJAX.Acts = {
        async Request(b, a) {
            this._runtime.IsCordova() && e.IsRelativeURL(a) && this._runtime.GetAssetManager().IsFileProtocol() ? await this._DoCordovaRequest(b, a) : this._runtime.IsPreview() && e.IsRelativeURL(a) ? (a = this._runtime.GetAssetManager().GetLocalUrlAsBlobUrl(a.toLowerCase()), await this._DoRequest(b, a, "GET", null)) : await this._DoRequest(b, a, "GET", null)
        },
        async RequestFile(b, a) {
            this._runtime.IsCordova() && this._runtime.GetAssetManager().IsFileProtocol() ? await this._DoCordovaRequest(b,
                a) : await this._DoRequest(b, this._runtime.GetAssetManager().GetLocalUrlAsBlobUrl(a), "GET", null)
        },
        async Post(b, a, d, c) {
            await this._DoRequest(b, a, c, d)
        },
        async PostBinary(b, a, d, c) {
            d && (d = d.GetFirstPicked(this._inst)) && (d = d.GetSdkInstance().GetArrayBufferReadOnly(), await this._DoRequest(b, a, c, d))
        },
        SetTimeout(b) {
            this._timeout = 1E3 * b
        },
        SetHeader(b, a) {
            this._nextRequestHeaders.set(b, a)
        },
        SetResponseBinary(b) {
            b && (b = b.GetFirstPicked(this._inst)) && (this._nextReponseBinaryData = b.GetSdkInstance())
        },
        OverrideMIMEType(b) {
            this._nextRequestOverrideMimeType =
                b
        }
    }
}
"use strict";
self.C3.Plugins.AJAX.Exps = {
    LastData() {
        return this._lastData
    },
    Progress() {
        return this._progress
    },
    Tag() {
        return this._curTag
    }
}; {
    "use strict";
    const e = self.C3;
    e.Plugins.XML = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.XML.Type = class extends e.SDKTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3,
        b = self.xmlDomLib,
        a = b.XPathResult;

    function d(f) {
        switch (f) {
            case "number":
                return a.NUMBER_TYPE;
            case "string":
                return a.STRING_TYPE;
            case "unordered-node-snapshot":
                return a.UNORDERED_NODE_SNAPSHOT_TYPE;
            case "ordered-node-snapshot":
                return a.ORDERED_NODE_SNAPSHOT_TYPE;
            default:
                throw Error("invalid result str");
        }
    }

    function c(f) {
        if (!f) return null;
        const k = f.resultType;
        return k === a.NUMBER_TYPE ? f.numberValue : k === a.STRING_TYPE ? f.stringValue : 0
    }
    e.Plugins.XML.Instance = class extends e.SDKInstanceBase {
        constructor(f,
            k) {
            super(f);
            this._xmlDoc = null;
            this._nodeStack = []
        }
        Release() {
            super.Release()
        }
        PushNodeStack(f) {
            this._nodeStack.push(f)
        }
        PopNodeStack() {
            this._nodeStack.pop()
        }
        EvalXpathOne(f, k) {
            if (!this._xmlDoc) return null;
            k = d(k);
            const g = this._nodeStack.length ? this._nodeStack.at(-1) : this._xmlDoc.documentElement;
            try {
                const l = b.evaluate(f, g, null, k, null);
                return c(l)
            } catch (l) {
                return console.warn("Error evaluating XPath: ", l), null
            }
        }
        EvalXpathMany(f, k) {
            if (!this._xmlDoc) return [];
            k = d(k);
            const g = this._nodeStack.length ? this._nodeStack.at(-1) :
                this._xmlDoc.documentElement;
            try {
                const l = b.evaluate(f, g, null, k, null);
                if (!l) return [];
                f = [];
                for (let m = 0, u = l.snapshotLength; m < u; ++m) f.push(l.snapshotItem(m));
                return f
            } catch (l) {
                return console.warn("Error evaluating XPath: ", l), []
            }
        }
    }
}
"use strict";
self.C3.Plugins.XML.Cnds = {
    ForEach(e) {
        const b = this._runtime,
            a = b.GetEventSheetManager(),
            d = b.GetCurrentEvent(),
            c = d.GetSolModifiers(),
            f = b.GetEventStack(),
            k = f.GetCurrentStackFrame(),
            g = f.Push(d),
            l = a.GetLoopStack(),
            m = l.Push();
        e = this.EvalXpathMany(e, "ordered-node-snapshot");
        b.SetDebuggingEnabled(!1);
        for (let u = 0, x = e.length; u < x; ++u) {
            const p = e[u];
            m.SetIndex(u);
            this.PushNodeStack(p);
            a.PushCopySol(c);
            d.Retrigger(k, g);
            a.PopSol(c);
            this.PopNodeStack()
        }
        b.SetDebuggingEnabled(!0);
        l.Pop();
        f.Pop();
        return !1
    }
};
"use strict";
self.C3.Plugins.XML.Acts = {
    Load(e) {
        try {
            this._xmlDoc = (new self.xmlDomLib.DOMParser).parseFromString(e, "text/xml")
        } catch (b) {
            console.warn("Error loading XML document: ", b)
        }
    }
};
"use strict";
self.C3.Plugins.XML.Exps = {
    NumberValue(e) {
        return this.EvalXpathOne(e, "number")
    },
    StringValue(e) {
        return this.EvalXpathOne(e, "string")
    },
    NodeCount(e) {
        return this.EvalXpathMany(e, "unordered-node-snapshot").length
    }
}; {
    "use strict";
    const e = self.C3;
    e.Plugins.Touch = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X;
    e.Plugins.Touch.Type = class extends e.SDKTypeBase {
        constructor(c) {
            super(c)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
        GetScriptInterfaceClass() {
            return self.ITouchObjectType
        }
    };
    let a = null;

    function d() {
        return a.GetSingleGlobalInstance().GetSdkInstance()
    }
    self.ITouchObjectType = class extends self.IObjectClass {
        constructor(c) {
            super(c);
            a = c;
            c.GetRuntime()._GetCommonScriptInterfaces().touch = this
        }
        requestPermission(c) {
            b.RequireString(c);
            const f = d();
            if ("orientation" === c) return f._RequestPermission(0);
            if ("motion" === c) return f._RequestPermission(1);
            throw Error("invalid type");
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Touch.Instance = class extends e.SDKInstanceBase {
        constructor(b, a) {
            super(b, "touch");
            this._touches = new Map;
            this._isMouseDown = this._useMouseInput = !1;
            this._getTouchIndex = this._curTouchY = this._curTouchX = this._triggerPermission = this._triggerId = this._triggerIndex = this._accWithGZ = this._accWithGY = this._accWithGX = this._accZ = this._accY = this._accX = this._orientGamma = this._orientBeta = this._orientAlpha = this._orientCompassHeading = 0;
            this._permissionPromises = [];
            a && (this._useMouseInput =
                a[0]);
            this.AddDOMMessageHandler("permission-result", d => this._OnPermissionResult(d));
            b = this.GetRuntime().Dispatcher();
            this._disposables = new e.CompositeDisposable(e.Disposable.From(b, "pointerdown", d => this._OnPointerDown(d.data)), e.Disposable.From(b, "pointermove", d => this._OnPointerMove(d.data)), e.Disposable.From(b, "pointerup", d => this._OnPointerUp(d.data, !1)), e.Disposable.From(b, "pointercancel", d => this._OnPointerUp(d.data, !0)), e.Disposable.From(b, "deviceorientation", d => this._OnDeviceOrientation(d.data)),
                e.Disposable.From(b, "deviceorientationabsolute", d => this._OnDeviceOrientationAbsolute(d.data)), e.Disposable.From(b, "devicemotion", d => this._OnDeviceMotion(d.data)), e.Disposable.From(b, "tick2", d => this._OnTick2()))
        }
        Release() {
            this._touches.clear();
            super.Release()
        }
        _OnPointerDown(b) {
            if ("mouse" === b.pointerType)
                if (this._useMouseInput) this._isMouseDown = !0;
                else return;
            const a = b.pointerId;
            if (!this._touches.has(a)) {
                var d = b.pageX - this._runtime.GetCanvasClientX();
                b = b.pageY - this._runtime.GetCanvasClientY();
                var c =
                    performance.now(),
                    f = this._touches.size;
                this._triggerIndex = f;
                this._triggerId = a;
                var k = e.New(e.Plugins.Touch.TouchInfo);
                k.Init(c, d, b, a, f);
                this._touches.set(a, k);
                this.Trigger(e.Plugins.Touch.Cnds.OnNthTouchStart);
                this.Trigger(e.Plugins.Touch.Cnds.OnTouchStart);
                this._curTouchX = d;
                this._curTouchY = b;
                this.Trigger(e.Plugins.Touch.Cnds.OnTouchObject)
            }
        }
        _OnPointerMove(b) {
            if ("mouse" !== b.pointerType || this._isMouseDown) {
                var a = this._touches.get(b.pointerId);
                if (a) {
                    var d = performance.now();
                    if (!(2 > d - a.GetTime())) {
                        var c =
                            b.pageX - this._runtime.GetCanvasClientX(),
                            f = b.pageY - this._runtime.GetCanvasClientY();
                        a.Update(d, c, f, b.width, b.height, b.pressure)
                    }
                }
            }
        }
        _OnPointerUp(b, a) {
            if ("mouse" === b.pointerType)
                if (this._isMouseDown) this._isMouseDown = !1;
                else return;
            const d = performance.now();
            b = b.pointerId;
            const c = this._touches.get(b);
            c && (this._triggerIndex = c.GetStartIndex(), this._triggerId = c.GetId(), this.Trigger(e.Plugins.Touch.Cnds.OnNthTouchEnd), this.Trigger(e.Plugins.Touch.Cnds.OnTouchEnd), a || (a = c.ShouldTriggerTap(d), "single-tap" ===
                a ? (this.Trigger(e.Plugins.Touch.Cnds.OnTapGesture), this._curTouchX = c.GetX(), this._curTouchY = c.GetY(), this.Trigger(e.Plugins.Touch.Cnds.OnTapGestureObject)) : "double-tap" === a && (this.Trigger(e.Plugins.Touch.Cnds.OnDoubleTapGesture), this._curTouchX = c.GetX(), this._curTouchY = c.GetY(), this.Trigger(e.Plugins.Touch.Cnds.OnDoubleTapGestureObject))), c.Release(), this._touches.delete(b))
        }
        _RequestPermission(b) {
            this._PostToDOMMaybeSync("request-permission", {
                type: b
            });
            return new Promise((a, d) => {
                this._permissionPromises.push({
                    type: b,
                    resolve: a,
                    reject: d
                })
            })
        }
        _OnPermissionResult(b) {
            const a = b.result,
                d = b.type;
            this._triggerPermission = d;
            b = this._permissionPromises.filter(c => c.type === d);
            for (const c of b) c.resolve(a ? "granted" : "denied");
            this._permissionPromises = this._permissionPromises.filter(c => c.type !== d);
            a ? (this.Trigger(e.Plugins.Touch.Cnds.OnPermissionGranted), 0 === d ? this._runtime.RequestDeviceOrientationEvent() : this._runtime.RequestDeviceMotionEvent()) : this.Trigger(e.Plugins.Touch.Cnds.OnPermissionDenied)
        }
        _OnDeviceOrientation(b) {
            "number" ===
            typeof b.webkitCompassHeading ? this._orientCompassHeading = b.webkitCompassHeading : b.absolute && (this._orientCompassHeading = b.alpha);
            this._orientAlpha = b.alpha;
            this._orientBeta = b.beta;
            this._orientGamma = b.gamma
        }
        _OnDeviceOrientationAbsolute(b) {
            this._orientCompassHeading = b.alpha
        }
        _OnDeviceMotion(b) {
            const a = b.acceleration;
            a && (this._accX = a.x, this._accY = a.y, this._accZ = a.z);
            if (b = b.accelerationIncludingGravity) this._accWithGX = b.x, this._accWithGY = b.y, this._accWithGZ = b.z
        }
        _OnTick2() {
            const b = performance.now();
            let a =
                0;
            for (const d of this._touches.values()) d.GetTime() <= b - 50 && d._SetLastTime(b), d.ShouldTriggerHold(b) && (this._triggerIndex = d.GetStartIndex(), this._triggerId = d.GetId(), this._getTouchIndex = a, this.Trigger(e.Plugins.Touch.Cnds.OnHoldGesture), this._curTouchX = d.GetX(), this._curTouchY = d.GetY(), this.Trigger(e.Plugins.Touch.Cnds.OnHoldGestureObject), this._getTouchIndex = 0), ++a
        }
        _GetTouchByIndex(b) {
            b = Math.floor(b);
            for (const a of this._touches.values()) {
                if (0 === b) return a;
                --b
            }
            return null
        }
        _IsClientPosOnCanvas(b, a) {
            return 0 <=
                b && 0 <= a && b < this._runtime.GetCanvasCssWidth() && a < this._runtime.GetCanvasCssHeight()
        }
        GetDebuggerProperties() {
            return [{
                title: "plugins.touch.debugger.touches",
                properties: [...this._touches.values()].map(b => ({
                    name: "$" + b.GetId(),
                    value: b.GetX() + ", " + b.GetY()
                }))
            }]
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = [];
    e.Plugins.Touch.Cnds = {
        OnTouchStart() {
            return !0
        },
        OnTouchEnd() {
            return !0
        },
        IsInTouch() {
            return 0 < this._touches.size
        },
        OnTouchObject(a) {
            return a && this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY) ? this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(a, this._curTouchX, this._curTouchY, !1) : !1
        },
        IsTouchingObject(a) {
            if (!a) return !1;
            const d = a.GetCurrentSol();
            var c = d.GetInstances();
            for (const f of c) {
                c = f.GetWorldInfo();
                const k = c.GetLayer();
                for (const g of this._touches.values()) {
                    if (!this._IsClientPosOnCanvas(g.GetX(),
                            g.GetY())) continue;
                    const [l, m] = k.CanvasCssToLayer(g.GetX(), g.GetY(), c.GetTotalZElevation());
                    if (c.ContainsPoint(l, m)) {
                        b.push(f);
                        break
                    }
                }
            }
            return b.length ? (d.SetArrayPicked(b), a.ApplySolToContainer(), e.clearArray(b), !0) : !1
        },
        CompareTouchSpeed(a, d, c) {
            return (a = this._GetTouchByIndex(a)) ? e.compare(a.GetSpeed(), d, c) : !1
        },
        OrientationSupported() {
            return !0
        },
        MotionSupported() {
            return !0
        },
        CompareOrientation(a, d, c) {
            this._runtime.RequestDeviceOrientationEvent();
            return e.compare(0 === a ? this._orientAlpha : 1 === a ? this._orientBeta :
                this._orientGamma, d, c)
        },
        CompareAcceleration(a, d, c) {
            this._runtime.RequestDeviceMotionEvent();
            return e.compare(0 === a ? this._accWithGX : 1 === a ? this._accWithGY : 2 === a ? this._accWithGZ : 3 === a ? this._accX : 4 === a ? this._accY : this._accZ, d, c)
        },
        OnNthTouchStart(a) {
            a = Math.floor(a);
            return a === this._triggerIndex
        },
        OnNthTouchEnd(a) {
            a = Math.floor(a);
            return a === this._triggerIndex
        },
        HasNthTouch(a) {
            a = Math.floor(a);
            return this._touches.size >= a + 1
        },
        OnHoldGesture() {
            return !0
        },
        OnTapGesture() {
            return !0
        },
        OnDoubleTapGesture() {
            return !0
        },
        OnHoldGestureObject(a) {
            return a && this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY) ? this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(a, this._curTouchX, this._curTouchY, !1) : !1
        },
        OnTapGestureObject(a) {
            return a && this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY) ? this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(a, this._curTouchX, this._curTouchY, !1) : !1
        },
        OnDoubleTapGestureObject(a) {
            return a && this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY) ? this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(a,
                this._curTouchX, this._curTouchY, !1) : !1
        },
        OnPermissionGranted(a) {
            return this._triggerPermission === a
        },
        OnPermissionDenied(a) {
            return this._triggerPermission === a
        }
    }
}
"use strict";
self.C3.Plugins.Touch.Acts = {
    RequestPermission(e) {
        this._RequestPermission(e)
    }
}; {
    "use strict";
    const e = self.C3;
    e.Plugins.Touch.Exps = {
        TouchCount() {
            return this._touches.size
        },
        X(b) {
            const a = this._GetTouchByIndex(this._getTouchIndex);
            return a ? a.GetPositionForLayer(this._runtime.GetCurrentLayout(), b, !0) : 0
        },
        Y(b) {
            const a = this._GetTouchByIndex(this._getTouchIndex);
            return a ? a.GetPositionForLayer(this._runtime.GetCurrentLayout(), b, !1) : 0
        },
        XAt(b, a) {
            return (b = this._GetTouchByIndex(b)) ? b.GetPositionForLayer(this._runtime.GetCurrentLayout(), a, !0) : 0
        },
        YAt(b, a) {
            return (b = this._GetTouchByIndex(b)) ?
                b.GetPositionForLayer(this._runtime.GetCurrentLayout(), a, !1) : 0
        },
        XForID(b, a) {
            return (b = this._touches.get(b)) ? b.GetPositionForLayer(this._runtime.GetCurrentLayout(), a, !0) : 0
        },
        YForID(b, a) {
            return (b = this._touches.get(b)) ? b.GetPositionForLayer(this._runtime.GetCurrentLayout(), a, !1) : 0
        },
        AbsoluteX() {
            const b = this._GetTouchByIndex(0);
            return b ? b.GetX() : 0
        },
        AbsoluteY() {
            const b = this._GetTouchByIndex(0);
            return b ? b.GetY() : 0
        },
        AbsoluteXAt(b) {
            return (b = this._GetTouchByIndex(b)) ? b.GetX() : 0
        },
        AbsoluteYAt(b) {
            return (b = this._GetTouchByIndex(b)) ?
                b.GetY() : 0
        },
        AbsoluteXForID(b) {
            return (b = this._touches.get(b)) ? b.GetX() : 0
        },
        AbsoluteYForID(b) {
            return (b = this._touches.get(b)) ? b.GetY() : 0
        },
        SpeedAt(b) {
            return (b = this._GetTouchByIndex(b)) ? b.GetSpeed() : 0
        },
        SpeedForID(b) {
            return (b = this._touches.get(b)) ? b.GetSpeed() : 0
        },
        AngleAt(b) {
            return (b = this._GetTouchByIndex(b)) ? e.toDegrees(b.GetAngle()) : 0
        },
        AngleForID(b) {
            return (b = this._touches.get(b)) ? e.toDegrees(b.GetAngle()) : 0
        },
        CompassHeading() {
            this._runtime.RequestDeviceOrientationEvent();
            return this._orientCompassHeading
        },
        Alpha() {
            this._runtime.RequestDeviceOrientationEvent();
            return this._orientAlpha
        },
        Beta() {
            this._runtime.RequestDeviceOrientationEvent();
            return this._orientBeta
        },
        Gamma() {
            this._runtime.RequestDeviceOrientationEvent();
            return this._orientGamma
        },
        AccelerationXWithG() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accWithGX
        },
        AccelerationYWithG() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accWithGY
        },
        AccelerationZWithG() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accWithGZ
        },
        AccelerationX() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accX
        },
        AccelerationY() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accY
        },
        AccelerationZ() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accZ
        },
        TouchIndex() {
            return this._triggerIndex
        },
        TouchID() {
            return this._triggerId
        },
        WidthForID(b) {
            return (b = this._touches.get(b)) ? b.GetWidth() : 0
        },
        HeightForID(b) {
            return (b = this._touches.get(b)) ? b.GetHeight() : 0
        },
        PressureForID(b) {
            return (b = this._touches.get(b)) ? b.GetPressure() : 0
        }
    }
} {
    "use strict";
    const e = self.C3;
    let b = -1E3,
        a = -1E3,
        d = -1E4;
    e.Plugins.Touch.TouchInfo = class extends e.DefendedBase {
        constructor() {
            super();
            this._pressure = this._height = this._width = this._lastY = this._lastX = this._y = this._x = this._startY = this._startX = this._lastTime = this._time = this._startTime = this._startIndex = this._pointerId = 0;
            this._isTooFarForHold = this._hasTriggeredHold = !1
        }
        Release() {}
        Init(c, f, k, g, l) {
            this._pointerId = g;
            this._startIndex = l;
            this._startTime = this._lastTime = this._time = c;
            this._startX = f;
            this._startY = k;
            this._x = f;
            this._y = k;
            this._lastX = f;
            this._lastY = k
        }
        Update(c, f, k, g, l, m) {
            this._lastTime = this._time;
            this._time = c;
            this._lastX = this._x;
            this._lastY = this._y;
            this._x = f;
            this._y = k;
            this._width = g;
            this._height = l;
            this._pressure = m;
            !this._isTooFarForHold && 15 <= e.distanceTo(this._startX, this._startY, this._x, this._y) && (this._isTooFarForHold = !0)
        }
        GetId() {
            return this._pointerId
        }
        GetStartIndex() {
            return this._startIndex
        }
        GetTime() {
            return this._time
        }
        _SetLastTime(c) {
            this._lastTime = c
        }
        GetX() {
            return this._x
        }
        GetY() {
            return this._y
        }
        GetSpeed() {
            const c =
                e.distanceTo(this._x, this._y, this._lastX, this._lastY),
                f = (this._time - this._lastTime) / 1E3;
            return 0 < f ? c / f : 0
        }
        GetAngle() {
            return e.angleTo(this._lastX, this._lastY, this._x, this._y)
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetPressure() {
            return this._pressure
        }
        ShouldTriggerHold(c) {
            return this._hasTriggeredHold ? !1 : 500 <= c - this._startTime && !this._isTooFarForHold && 15 > e.distanceTo(this._startX, this._startY, this._x, this._y) ? this._hasTriggeredHold = !0 : !1
        }
        ShouldTriggerTap(c) {
            if (this._hasTriggeredHold) return "";
            if (333 >= c - this._startTime && !this._isTooFarForHold && 15 > e.distanceTo(this._startX, this._startY, this._x, this._y)) {
                if (666 >= c - d && 25 > e.distanceTo(b, a, this._x, this._y)) return a = b = -1E3, d = -1E4, "double-tap";
                b = this._x;
                a = this._y;
                d = c;
                return "single-tap"
            }
            return ""
        }
        GetPositionForLayer(c, f, k) {
            return "undefined" === typeof f ? c.GetLayerByIndex(0).CanvasCssToLayer_DefaultTransform(this._x, this._y)[k ? 0 : 1] : (c = c.GetLayer(f)) ? c.CanvasCssToLayer(this._x, this._y)[k ? 0 : 1] : 0
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Particles = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Particles.Type = class extends e.SDKTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {
            this.GetImageInfo().LoadAsset(this._runtime)
        }
        LoadTextures(b) {
            return this.GetImageInfo().LoadStaticTexture(b, {
                sampling: this._runtime.GetSampling()
            })
        }
        ReleaseTextures() {
            this.GetImageInfo().ReleaseTexture()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = e.New(e.Rect);
    e.Plugins.Particles.Instance = class extends e.SDKWorldInstanceBase {
        constructor(a, d) {
            super(a);
            this._isFirstTick = !0;
            this._particleEngine = a = e.New(self.ParticleEngine);
            a.ononeshotfinish = () => this._OnOneShotFinish();
            this._spawnObjectClass = null;
            this._particleUpdateCallback = (f, k, g, l, m, u) => this._OnParticleUpdate(f, k, g, l, m, u);
            this._particleDestroyCallback = f => this._OnParticleDestroy(f);
            this._hasAnyDefaultParticle = !0;
            d && (a.SetRate(d[0]), a.SetSprayCone(e.toRadians(d[1])),
                a.SetSprayType(d[2] ? "one-shot" : "continuous-spray"), this._SetParticleObjectClass(this._runtime.GetObjectClassBySID(d[3])), a.SetInitSpeed(d[4]), a.SetInitSize(d[5]), a.SetInitOpacity(d[6] / 100), a.SetGrowRate(d[7]), a.SetInitXRandom(d[8]), a.SetInitYRandom(d[9]), a.SetInitSpeedRandom(d[10]), a.SetInitSizeRandom(d[11]), a.SetGrowRandom(d[12]), a.SetAcceleration(d[13]), a.SetGravity(d[14]), a.SetLifeAngleRandom(d[15]), a.SetLifeSpeedRandom(d[16]), a.SetLifeOpacityRandom(d[17]), a.SetDestroyModeIndex(d[18]), a.SetTimeout(d[19]));
            this._UpdateEngineParameters();
            this._spawnObjectClass && (this._hasAnyDefaultParticle = !1);
            "one-shot" === a.GetSprayType() ? a.CreateOneShotSpray() : a.SetSpraying(!0);
            const c = this.GetWorldInfo();
            c.SetBboxChangeEventEnabled(!0);
            this._inst.Dispatcher().addEventListener("bboxchange", () => {
                c.OverwriteBoundingBox(this._particleEngine.GetBoundingBox())
            });
            this.GetRuntime().GetRenderer().IsWebGPU() && c.SetUsePointsShaderProgram();
            this._StartTicking()
        }
        Release() {
            this._particleEngine.Release();
            this._particleDestroyCallback =
                this._particleUpdateCallback = this._particleEngine = null;
            super.Release()
        }
        _SetParticleObjectClass(a) {
            a === this.GetObjectClass() && (a = null);
            this._spawnObjectClass = a;
            this._particleEngine.onparticlecreate = a ? d => this._OnParticleCreate(d) : null;
            this._spawnObjectClass || (this._hasAnyDefaultParticle = !0)
        }
        _UpdateEngineParameters() {
            const a = this._particleEngine,
                d = this.GetWorldInfo();
            a.SetMasterOpacity(d.GetOpacity());
            a.SetPixelRounding(this._runtime.IsPixelRoundingEnabled());
            a.SetSpawnX(d.GetX());
            a.SetSpawnY(d.GetY());
            a.SetSpawnAngle(d.GetAngle());
            a.SetInitSizeScale(d.GetSceneGraphScale())
        }
        _OnOneShotFinish() {
            this._runtime.DestroyInstance(this._inst)
        }
        Draw(a) {
            if (this._hasAnyDefaultParticle) {
                var d = this._objectClass.GetImageInfo(),
                    c = d.GetTexture();
                if (c) {
                    var f = this.GetWorldInfo(),
                        k = f.GetLayer();
                    this._runtime.GetCanvasManager().IsPastingToDrawingCanvas() ? b.set(-Infinity, -Infinity, Infinity, Infinity) : k.Has3DCamera() ? k.CalculateViewport3D(f.GetTotalZElevation(), b) : k.GetViewportForZ(f.GetTotalZElevation(), b);
                    a.SetTexture(c);
                    c = k.Get2DScaleFactorToZ(f.GetTotalZElevation());
                    this._particleEngine.SetParticleScale(k.GetRenderScale() * c);
                    this._particleEngine.Draw(a, d.GetTexRect(), b, k.Has3DCamera())
                }
            }
        }
        SaveToJson() {
            const a = this._particleEngine;
            return {
                r: a.GetRate(),
                sc: a.GetSprayCone(),
                st: a.GetSprayType(),
                isp: a.GetInitSpeed(),
                isz: a.GetInitSize(),
                io: a.GetInitOpacity(),
                gr: a.GetGrowRate(),
                xr: a.GetInitXRandom(),
                yr: a.GetInitYRandom(),
                spr: a.GetInitSpeedRandom(),
                szr: a.GetInitSizeRandom(),
                grnd: a.GetGrowRandom(),
                acc: a.GetAcceleration(),
                g: a.GetGravity(),
                lar: a.GetLifeAngleRandom(),
                lsr: a.GetLifeSpeedRandom(),
                lor: a.GetLifeOpacityRandom(),
                dm: a.GetDestroyModeIndex(),
                to: a.GetTimeout(),
                s: a.IsSpraying(),
                pcc: a._GetCreateCounter(),
                ft: this._isFirstTick,
                p: a.GetParticles().map(d => d.toJSON())
            }
        }
        LoadFromJson(a) {
            var d = this._particleEngine;
            d.SetRate(a.r);
            d.SetSprayCone(a.sc);
            d.SetSprayType(a.st);
            d.SetInitSpeed(a.isp);
            d.SetInitSize(a.isz);
            d.SetInitOpacity(a.io);
            d.SetGrowRate(a.gr);
            d.SetInitXRandom(a.xr);
            d.SetInitYRandom(a.yr);
            d.SetInitSpeedRandom(a.spr);
            d.SetInitSizeRandom(a.szr);
            d.SetGrowRandom(a.grnd);
            d.SetAcceleration(a.acc);
            d.SetGravity(a.g);
            d.SetLifeAngleRandom(a.lar);
            d.SetLifeSpeedRandom(a.lsr);
            d.SetLifeOpacityRandom(a.lor);
            d.SetDestroyModeIndex(a.dm);
            d.SetTimeout(a.to);
            d.SetSpraying(a.s);
            d._SetCreateCounter(a.pcc);
            this._isFirstTick = a.ft;
            a = a.p;
            d.SetParticleCount(a.length);
            d = d.GetParticles();
            for (let c = 0, f = d.length; c < f; ++c) d[c].setFromJSON(a[c])
        }
        Tick() {
            const a = this._runtime.GetDt(this._inst);
            this._UpdateEngineParameters();
            this._isFirstTick &&
                "one-shot" === this._particleEngine.GetSprayType() && this._particleEngine.ReInitAllParticles();
            this._particleEngine.Tick(a);
            this._particleEngine.IsSpraying() && this._runtime.UpdateRender();
            this.GetWorldInfo().SetBboxChanged();
            this._isFirstTick = !1
        }
        _OnParticleCreate(a) {
            const d = this._runtime.CreateInstance(this._spawnObjectClass, this.GetWorldInfo().GetLayer(), a.GetX(), a.GetY()),
                c = d.GetWorldInfo();
            c.SetSize(a.GetSize(), a.GetSize());
            c.SetAngle(a.GetAngle());
            c.SetOpacity(a.GetOpacity());
            c.SetUnpremultipliedColor(this.GetWorldInfo().GetUnpremultipliedColor());
            c.SetBboxChanged();
            c.ZOrderMoveAdjacentToInstance(this.GetInstance(), !0);
            d._TriggerOnCreated();
            a.SetUpdateCallback(this._particleUpdateCallback);
            a.SetDestroyCallback(this._particleDestroyCallback);
            return d
        }
        _OnParticleUpdate(a, d, c, f, k, g) {
            a.IsDestroyed() || (a = a.GetWorldInfo(), a.OffsetXY(d, c), a.SetSize(a.GetWidth() + f, a.GetHeight() + f), a.SetAngle(a.GetAngle() + k), a.SetOpacity(a.GetOpacity() + g), a.SetBboxChanged())
        }
        _OnParticleDestroy(a) {
            a.IsDestroyed() || this._runtime.DestroyInstance(a)
        }
        GetPropertyValueByIndex(a) {
            const d =
                this._particleEngine;
            switch (a) {
                case 0:
                    return d.GetRate();
                case 1:
                    return e.toDegrees(d.GetSprayCone());
                case 2:
                    return "one-shot" === d.GetSprayType() ? 1 : 0;
                case 4:
                    return d.GetInitSpeed();
                case 5:
                    return d.GetInitSize();
                case 6:
                    return 100 * d.GetInitOpacity();
                case 7:
                    return d.GetGrowRate();
                case 8:
                    return d.GetInitXRandom();
                case 9:
                    return d.GetInitYRandom();
                case 10:
                    return d.GetInitSpeedRandom();
                case 11:
                    return d.GetInitSizeRandom();
                case 12:
                    return d.GetGrowRandom();
                case 13:
                    return d.GetAcceleration();
                case 14:
                    return d.GetGravity();
                case 15:
                    return d.GetLifeAngleRandom();
                case 16:
                    return d.GetLifeSpeedRandom();
                case 17:
                    return d.GetLifeOpacityRandom();
                case 18:
                    return d.GetDestroyModeIndex();
                case 19:
                    return d.GetTimeout()
            }
        }
        SetPropertyValueByIndex(a, d) {
            const c = this._particleEngine;
            switch (a) {
                case 0:
                    c.SetRate(d);
                    break;
                case 1:
                    c.SetSprayCone(e.toRadians(d));
                    break;
                case 2:
                    c.SetSprayType(d ? "one-shot" : "continuous-spray");
                    break;
                case 4:
                    c.SetInitSpeed(d);
                    break;
                case 5:
                    c.SetInitSize(d);
                    break;
                case 6:
                    c.SetInitOpacity(d / 100);
                    break;
                case 7:
                    c.SetGrowRate(d);
                    break;
                case 8:
                    c.SetInitXRandom(d);
                    break;
                case 9:
                    c.SetInitYRandom(d);
                    break;
                case 10:
                    c.SetInitSpeedRandom(d);
                    break;
                case 11:
                    c.SetInitSizeRandom(d);
                    break;
                case 12:
                    c.SetGrowRandom(d);
                    break;
                case 13:
                    c.SetAcceleration(d);
                    break;
                case 14:
                    c.SetGravity(d);
                    break;
                case 15:
                    c.SetLifeAngleRandom(d);
                    break;
                case 16:
                    c.SetLifeSpeedRandom(d);
                    break;
                case 17:
                    c.SetLifeOpacityRandom(d);
                    break;
                case 18:
                    c.SetDestroyModeIndex(d);
                    break;
                case 19:
                    c.SetTimeout(d)
            }
        }
        GetDebuggerProperties() {
            const a = this._particleEngine;
            return [{
                title: "plugins.particles.name",
                properties: [{
                        name: "plugins.particles.debugger.particle-count",
                        value: a.GetParticleCount()
                    }, {
                        name: "plugins.particles.properties.type.name",
                        value: ["plugins.particles.properties.type.items." + a.GetSprayType()]
                    }, {
                        name: "plugins.particles.debugger.is-spraying",
                        value: a.IsSpraying(),
                        onedit: d => a.SetSpraying(d)
                    }, {
                        name: "plugins.particles.properties.rate.name",
                        value: a.GetRate(),
                        onedit: d => a.SetRate(d)
                    }, {
                        name: "plugins.particles.properties.spray-cone.name",
                        value: e.toDegrees(a.GetSprayCone()),
                        onedit: d => a.SetSprayCone(e.toRadians(d))
                    },
                    {
                        name: "plugins.particles.properties.speed.name",
                        value: a.GetInitSpeed(),
                        onedit: d => a.SetInitSpeed(d)
                    }, {
                        name: "plugins.particles.properties.size.name",
                        value: a.GetInitSize(),
                        onedit: d => a.SetInitSize(d)
                    }, {
                        name: "plugins.particles.properties.opacity.name",
                        value: a.GetInitOpacity(),
                        onedit: d => a.SetInitOpacity(d)
                    }, {
                        name: "plugins.particles.properties.grow-rate.name",
                        value: a.GetGrowRate(),
                        onedit: d => a.SetGrowRate(d)
                    }, {
                        name: "plugins.particles.properties.x-randomiser.name",
                        value: a.GetInitXRandom(),
                        onedit: d => a.SetInitXRandom(d)
                    },
                    {
                        name: "plugins.particles.properties.y-randomiser.name",
                        value: a.GetInitYRandom(),
                        onedit: d => a.SetInitYRandom(d)
                    }, {
                        name: "plugins.particles.properties.initial-speed-randomiser.name",
                        value: a.GetInitSpeedRandom(),
                        onedit: d => a.SetInitSpeedRandom(d)
                    }, {
                        name: "plugins.particles.properties.size-randomiser.name",
                        value: a.GetInitSizeRandom(),
                        onedit: d => a.SetInitSizeRandom(d)
                    }, {
                        name: "plugins.particles.properties.grow-rate-randomiser.name",
                        value: a.GetGrowRandom(),
                        onedit: d => a.SetGrowRandom(d)
                    }, {
                        name: "plugins.particles.properties.acceleration.name",
                        value: a.GetAcceleration(),
                        onedit: d => a.SetAcceleration(d)
                    }, {
                        name: "plugins.particles.properties.gravity.name",
                        value: a.GetGravity(),
                        onedit: d => a.SetGravity(d)
                    }, {
                        name: "plugins.particles.properties.angle-randomiser.name",
                        value: a.GetLifeAngleRandom(),
                        onedit: d => a.SetLifeAngleRandom(d)
                    }, {
                        name: "plugins.particles.properties.life-speed-randomiser.name",
                        value: a.GetLifeSpeedRandom(),
                        onedit: d => a.SetLifeSpeedRandom(d)
                    }, {
                        name: "plugins.particles.properties.opacity-randomiser.name",
                        value: a.GetLifeOpacityRandom(),
                        onedit: d =>
                            a.SetLifeOpacityRandom(d)
                    }, {
                        name: "plugins.particles.properties.timeout.name",
                        value: a.GetTimeout(),
                        onedit: d => a.SetTimeout(d)
                    }
                ]
            }]
        }
    }
}
"use strict";
self.C3.Plugins.Particles.Cnds = {
    IsSpraying() {
        return this._particleEngine.IsSpraying()
    }
}; {
    "use strict";
    const e = self.C3;
    e.Plugins.Particles.Acts = {
        SetSpraying(b) {
            this._particleEngine.SetSpraying(0 !== b)
        },
        SetRate(b) {
            this._particleEngine.SetRate(b);
            "one-shot" === this._particleEngine.GetSprayType() && this._isFirstTick && this._particleEngine.SetParticleCount(b)
        },
        SetParticleObject(b) {
            this._SetParticleObjectClass(b)
        },
        UnsetParticleObject() {
            this._SetParticleObjectClass(null)
        },
        SetSprayCone(b) {
            this._particleEngine.SetSprayCone(e.toRadians(b))
        },
        SetInitSpeed(b) {
            this._particleEngine.SetInitSpeed(b)
        },
        SetInitSize(b) {
            this._particleEngine.SetInitSize(b)
        },
        SetInitOpacity(b) {
            this._particleEngine.SetInitOpacity(b / 100)
        },
        SetGrowRate(b) {
            this._particleEngine.SetGrowRate(b)
        },
        SetXRandomiser(b) {
            this._particleEngine.SetInitXRandom(b)
        },
        SetYRandomiser(b) {
            this._particleEngine.SetInitYRandom(b)
        },
        SetSpeedRandomiser(b) {
            this._particleEngine.SetInitSpeedRandom(b)
        },
        SetSizeRandomiser(b) {
            this._particleEngine.SetInitSizeRandom(b)
        },
        SetGrowRateRandomiser(b) {
            this._particleEngine.SetGrowRandom(b)
        },
        SetParticleAcc(b) {
            this._particleEngine.SetAcceleration(b)
        },
        SetGravity(b) {
            this._particleEngine.SetGravity(b)
        },
        SetAngleRandomiser(b) {
            this._particleEngine.SetLifeAngleRandom(b)
        },
        SetLifeSpeedRandomiser(b) {
            this._particleEngine.SetLifeSpeedRandom(b)
        },
        SetOpacityRandomiser(b) {
            this._particleEngine.SetLifeOpacityRandom(b)
        },
        SetTimeout(b) {
            this._particleEngine.SetTimeout(b)
        },
        SetEffect(b) {
            this.GetWorldInfo().SetBlendMode(b);
            this._runtime.UpdateRender()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Particles.Exps = {
        ParticleCount() {
            return this._particleEngine.GetParticleCount()
        },
        Rate() {
            return this._particleEngine.GetRate()
        },
        SprayCone() {
            return e.toDegrees(this._particleEngine.GetSprayCone())
        },
        InitSpeed() {
            return this._particleEngine.GetInitSpeed()
        },
        InitSize() {
            return this._particleEngine.GetInitSize()
        },
        InitOpacity() {
            return 100 * this._particleEngine.GetInitOpacity()
        },
        InitGrowRate() {
            return this._particleEngine.GetGrowRate()
        },
        XRandom() {
            return this._particleEngine.GetInitXRandom()
        },
        YRandom() {
            return this._particleEngine.GetInitYRandom()
        },
        InitSizeRandom() {
            return this._particleEngine.GetInitSizeRandom()
        },
        InitSpeedRandom() {
            return this._particleEngine.GetInitSpeedRandom()
        },
        InitGrowRandom() {
            return this._particleEngine.GetGrowRandom()
        },
        ParticleAcceleration() {
            return this._particleEngine.GetAcceleration()
        },
        Gravity() {
            return this._particleEngine.GetGravity()
        },
        ParticleAngleRandom() {
            return this._particleEngine.GetLifeAngleRandom()
        },
        ParticleSpeedRandom() {
            return this._particleEngine.GetLifeSpeedRandom()
        },
        ParticleOpacityRandom() {
            return this._particleEngine.GetLifeOpacityRandom()
        },
        Timeout() {
            return this._particleEngine.GetTimeout()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = [],
        a = new Set(["continuous-spray", "one-shot"]),
        d = ["fade-to-invisible", "timeout-expired", "particle-stopped"];
    self.ParticleEngine = class {
        constructor() {
            this._sprayCone = this._rate = 0;
            this._sprayType = "continuous-spray";
            this._isSpraying = !1;
            this._masterOpacity = 0;
            this._isPixelRounding = !1;
            this._initSize = this._initSpeed = this._spawnAngle = this._spawnY = this._spawnX = 0;
            this._initSizeScale = 1;
            this._createCounter = this._timeout = this._destroyMode = this._lifeOpacityRandom = this._lifeSpeedRandom =
                this._lifeAngleRandom = this._gravity = this._acceleration = this._growRandom = this._initSizeRandom = this._initSpeedRandom = this._yRandom = this._xRandom = this._growRate = this._initOpacity = 0;
            this._particleScale = 1;
            this.onparticlecreate = this.ononeshotfinish = null;
            this._particles = [];
            this._boundingBox = new e.Rect;
            this._color = new e.Color
        }
        Release() {
            this.Cancel();
            e.clearArray(this._particles);
            this._color = this._boundingBox = this.onparticlecreate = this.ononeshotfinish = this._particles = null
        }
        Cancel() {
            const c = this._particles;
            for (let f = 0, k = c.length; f < k; ++f) c[f].Destroy();
            e.appendArray(b, c);
            e.clearArray(c);
            1E3 < b.length && e.truncateArray(b, 1E3);
            this._isSpraying = !1
        }
        CreateOneShotSpray() {
            for (let c = 0, f = this._rate; c < f; ++c) this._CreateParticle();
            this._particles.length && (this._isSpraying = !0)
        }
        _CreateParticle() {
            let c;
            b.length ? (c = b.pop(), c.SetEngine(this)) : c = e.New(self.Particle, this);
            this._particles.push(c);
            c.Init(this.onparticlecreate);
            return c
        }
        ReInitAllParticles() {
            const c = this._particles,
                f = this.onparticlecreate;
            for (let k = 0, g = c.length; k <
                g; ++k) c[k].Init(f)
        }
        SetParticleCount(c) {
            var f = this._particles;
            if (c < f.length) {
                c = f.length - c;
                for (let k = 0; k < c; ++k) {
                    const g = f.pop();
                    g.Destroy();
                    b.push(g)
                }
                1E3 < b.length && e.truncateArray(b, 1E3)
            } else if (c > f.length)
                for (f = c - f.length, c = 0; c < f; ++c) this._CreateParticle()
        }
        GetParticles() {
            return this._particles
        }
        GetParticleCount() {
            return this._particles.length
        }
        Tick(c) {
            this._SpawnContinuous(c);
            this._TickParticles(c);
            this._MaybeFinishOneShot()
        }
        _SpawnContinuous(c) {
            if ("continuous-spray" === this._sprayType && this._isSpraying) {
                this._createCounter +=
                    c * this._rate;
                c = Math.floor(this._createCounter);
                this._createCounter -= c;
                for (let f = 0; f < c; ++f) this._CreateParticle()
            }
        }
        _SetCreateCounter(c) {
            this._createCounter = c
        }
        _GetCreateCounter() {
            return this._createCounter
        }
        _TickParticles(c) {
            const f = this._boundingBox;
            f.set(this._spawnX, this._spawnY, this._spawnX, this._spawnY);
            const k = this._particles;
            let g = 0;
            for (let l = 0, m = k.length; l < m; ++l) {
                const u = k[l];
                k[g] = u;
                u.Tick(c);
                u.IsActive() ? (++g, f.expandToContain(u.GetBoundingBox())) : (u.Destroy(), b.push(u))
            }
            e.truncateArray(k, g);
            1E3 < b.length && e.truncateArray(b, 1E3)
        }
        _MaybeFinishOneShot() {
            if ("one-shot" === this._sprayType && 0 === this._particles.length && this._isSpraying) {
                if (this.ononeshotfinish) this.ononeshotfinish();
                this._isSpraying = !1
            }
        }
        Draw(c, f, k, g) {
            c.StartRenderingPoints(f);
            this._color.copy(c.GetColor());
            const l = this._particles;
            for (let m = 0, u = l.length; m < u; ++m) {
                const x = l[m];
                k.intersectsRect(x.GetBoundingBox()) && x.Draw(c, f, g)
            }
            c.FinishRenderingPoints()
        }
        GetColor() {
            return this._color
        }
        SetRate(c) {
            this._rate = +c
        }
        GetRate() {
            return this._rate
        }
        SetSprayCone(c) {
            this._sprayCone = +c
        }
        GetSprayCone() {
            return this._sprayCone
        }
        SetSprayType(c) {
            if (!a.has(c)) throw Error("invalid spray type");
            this._sprayType = c
        }
        GetSprayType() {
            return this._sprayType
        }
        SetSpraying(c) {
            this._isSpraying = !!c
        }
        IsSpraying() {
            return this._isSpraying
        }
        SetMasterOpacity(c) {
            this._masterOpacity = +c
        }
        GetMasterOpacity() {
            return this._masterOpacity
        }
        SetPixelRounding(c) {
            this._isPixelRounding = !!c
        }
        IsPixelRounding() {
            return this._isPixelRounding
        }
        SetSpawnX(c) {
            this._spawnX = +c
        }
        GetSpawnX() {
            return this._spawnX
        }
        SetSpawnY(c) {
            this._spawnY = +c
        }
        GetSpawnY() {
            return this._spawnY
        }
        SetSpawnAngle(c) {
            this._spawnAngle = +c
        }
        GetInitAngle() {
            return this._spawnAngle
        }
        SetInitSpeed(c) {
            this._initSpeed = +c
        }
        GetInitSpeed() {
            return this._initSpeed
        }
        SetInitSize(c) {
            this._initSize = +c
        }
        GetInitSize() {
            return this._initSize
        }
        SetInitSizeScale(c) {
            this._initSizeScale = +c
        }
        GetInitSizeScale() {
            return this._initSizeScale
        }
        SetInitOpacity(c) {
            this._initOpacity = +c
        }
        GetInitOpacity() {
            return this._initOpacity
        }
        SetGrowRate(c) {
            this._growRate = +c
        }
        GetGrowRate() {
            return this._growRate
        }
        SetInitXRandom(c) {
            this._xRandom = +c
        }
        GetInitXRandom() {
            return this._xRandom
        }
        SetInitYRandom(c) {
            this._yRandom = +c
        }
        GetInitYRandom() {
            return this._yRandom
        }
        SetInitSpeedRandom(c) {
            this._initSpeedRandom = +c
        }
        GetInitSpeedRandom() {
            return this._initSpeedRandom
        }
        SetInitSizeRandom(c) {
            this._initSizeRandom = +c
        }
        GetInitSizeRandom() {
            return this._initSizeRandom
        }
        SetGrowRandom(c) {
            this._growRandom = +c
        }
        GetGrowRandom() {
            return this._growRandom
        }
        SetAcceleration(c) {
            this._acceleration = +c
        }
        GetAcceleration() {
            return this._acceleration
        }
        SetGravity(c) {
            this._gravity = +c
        }
        GetGravity() {
            return this._gravity
        }
        SetLifeAngleRandom(c) {
            this._lifeAngleRandom = +c
        }
        GetLifeAngleRandom() {
            return this._lifeAngleRandom
        }
        SetLifeSpeedRandom(c) {
            this._lifeSpeedRandom = +c
        }
        GetLifeSpeedRandom() {
            return this._lifeSpeedRandom
        }
        SetLifeOpacityRandom(c) {
            this._lifeOpacityRandom = +c
        }
        GetLifeOpacityRandom() {
            return this._lifeOpacityRandom
        }
        SetDestroyMode(c) {
            c = d.indexOf(c);
            if (-1 === c) throw Error("invalid destroy mode");
            this._destroyMode = c
        }
        SetDestroyModeIndex(c) {
            this.SetDestroyMode(d[c])
        }
        GetDestroyMode() {
            return d[this._destroyMode]
        }
        GetDestroyModeIndex() {
            return this._destroyMode
        }
        SetTimeout(c) {
            this._timeout = +c
        }
        GetTimeout() {
            return this._timeout
        }
        SetParticleScale(c) {
            this._particleScale = +c
        }
        GetParticleScale() {
            return this._particleScale
        }
        GetBoundingBox() {
            return this._boundingBox
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(k) {
        return Math.random() * k - k / 2
    }
    const a = new e.Quad,
        d = new e.Color,
        c = self.devicePixelRatio || 1;
    let f = !1;
    self.Particle = class {
        constructor(k) {
            this._engine = k;
            this._isActive = !1;
            this._angle = this._speed = this._y = this._x = 0;
            this._opacity = 1;
            this._age = this._gs = this._halfSize = this._size = this._grow = this._lastOpacity = 0;
            this._bbox = new e.Rect;
            this._destroyCallback = this._updateCallback = this._userData = null
        }
        SetEngine(k) {
            this._engine = k
        }
        Init(k) {
            const g = this._engine;
            this._isActive = !0;
            this._x = g.GetSpawnX() + b(g.GetInitXRandom());
            this._y = g.GetSpawnY() + b(g.GetInitYRandom());
            this._speed = g.GetInitSpeed() + b(g.GetInitSpeedRandom());
            this._angle = g.GetInitAngle() + b(g.GetSprayCone());
            this._lastOpacity = this._opacity = g.GetInitOpacity();
            this._size = (g.GetInitSize() + b(g.GetInitSizeRandom())) * g.GetInitSizeScale();
            this._halfSize = this._size / 2;
            this._grow = g.GetGrowRate() + b(g.GetGrowRandom());
            this._age = this._gs = 0;
            this._UpdateBoundingBox();
            k ? this._userData || (this._userData = k(this)) : this._destroyCallback =
                this._updateCallback = this._userData = null
        }
        SetUpdateCallback(k) {
            this._updateCallback = k
        }
        SetDestroyCallback(k) {
            this._destroyCallback = k
        }
        Destroy() {
            const k = this._destroyCallback;
            k && k(this._userData);
            this._destroyCallback = this._updateCallback = this._userData = null
        }
        toJSON() {
            return [this._x, this._y, this._speed, this._angle, this._opacity, this._grow, this._size, this._gs, this._age]
        }
        setFromJSON(k) {
            this._x = k[0];
            this._y = k[1];
            this._speed = k[2];
            this._angle = k[3];
            this._opacity = k[4];
            this._grow = k[5];
            this._size = k[6];
            this._gs =
                k[7];
            this._age = k[8];
            this._halfSize = this._size / 2;
            this._UpdateBoundingBox()
        }
        Tick(k) {
            var g = this._engine,
                l = this._speed * k,
                m = this._angle;
            const u = Math.cos(m) * l;
            l = Math.sin(m) * l + this._gs * k;
            this._x += u;
            this._y += l;
            m = this._grow * k;
            this._size += m;
            this._halfSize = this._size / 2;
            this._speed += g.GetAcceleration() * k;
            this._gs += g.GetGravity() * k;
            this._age += k;
            this._UpdateBoundingBox();
            var x = g.GetLifeAngleRandom(),
                p = g.GetLifeSpeedRandom();
            const r = g.GetLifeOpacityRandom();
            let t = 0;
            0 !== x && (t = b(x * k), this._angle += t);
            0 !== p && (this._speed +=
                b(p * k));
            0 !== r && (this._opacity = e.clamp(this._opacity + b(r * k), 0, 1));
            k = 1 <= this._size && (2 === g.GetDestroyModeIndex() ? 0 < this._speed : this._age < g.GetTimeout());
            (x = this._updateCallback) && k && (p = g.GetMasterOpacity() * this._opacity, 0 === g.GetDestroyModeIndex() && (p *= 1 - this._age / g.GetTimeout()), g = p - this._lastOpacity, this._lastOpacity = p, x(this._userData, u, l, m, t, g));
            this._isActive = k
        }
        IsActive() {
            return this._isActive
        }
        GetBoundingBox() {
            return this._bbox
        }
        _UpdateBoundingBox() {
            const k = this._x,
                g = this._y,
                l = this._halfSize;
            this._bbox.set(k -
                l, g - l, k + l, g + l)
        }
        Draw(k, g, l) {
            if (!this._userData) {
                var m = this._engine,
                    u = m.GetMasterOpacity() * this._opacity;
                0 === m.GetDestroyModeIndex() && (u *= 1 - this._age / m.GetTimeout());
                if (!(0 >= u)) {
                    var x = this._size,
                        p = x * m.GetParticleScale() * c;
                    if (!(1 > p)) {
                        var r = this._x,
                            t = this._y;
                        m.IsPixelRounding() && (r = r + .5 | 0, t = t + .5 | 0);
                        k.IsWebGPU() ? k.Point(r, t, x, u) : l || p > k.GetMaxPointSize() || p < k.GetMinPointSize() ? (d.copy(m.GetColor()), d.multiplyAlpha(u), k.SetColor(d), f = !0, a.setFromRect(this._bbox), k.Quad3(a, g)) : (f && (k.SetColor(m.GetColor()),
                            f = !1), k.Point(r, t, p, u))
                    }
                }
            }
        }
        GetUserData() {
            return this._userData
        }
        GetX() {
            return this._x
        }
        GetY() {
            return this._y
        }
        GetSize() {
            return this._size
        }
        GetAngle() {
            return this._angle
        }
        GetOpacity() {
            return this._opacity
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Audio = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Audio.Type = class extends e.SDKTypeBase {
        constructor(a) {
            super(a)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
        GetScriptInterfaceClass() {
            return self.IAudioObjectType
        }
    };

    function b() {
        if (self.C3Audio_DOMInterface) return self.C3Audio_DOMInterface;
        throw Error("audio scripting API cannot be used here - make sure the project is using DOM mode, not worker mode");
    }
    self.IAudioObjectType = class extends self.IObjectClass {
        constructor(a) {
            super(a)
        }
        get audioContext() {
            return b().GetAudioContext()
        }
        get destinationNode() {
            return b().GetDestinationNode()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = ["interactive", "balanced", "playback"];
    e.Plugins.Audio.Instance = class extends e.SDKInstanceBase {
        constructor(a, d) {
            super(a, "audio");
            this._nextPlayTime = 0;
            this._triggerTag = "";
            this._saveLoadMode = this._timeScaleMode = 0;
            this._playInBackground = !1;
            this._distanceModel = this._panningModel = 1;
            this._listenerX = this._runtime.GetViewportWidth() / 2;
            this._listenerY = this._runtime.GetViewportHeight() / 2;
            this._listenerZ = -600;
            this._referenceDistance = 600;
            this._maxDistance = 1E4;
            this._rolloffFactor =
                1;
            this._listenerInst = null;
            this._loadListenerUid = -1;
            this._masterVolume = 1;
            this._isSilent = !1;
            this._sampleRate = 0;
            this._effectCount = new Map;
            this._preloadCount = this._preloadTotal = 0;
            this._remoteUrls = new Map;
            a = "interactive";
            d && (this._timeScaleMode = d[0], this._saveLoadMode = d[1], this._playInBackground = d[2], a = b[d[3]], this._panningModel = d[4], this._distanceModel = d[5], this._listenerZ = -d[6], this._referenceDistance = d[7], this._maxDistance = d[8], this._rolloffFactor = d[9]);
            this._lastAIState = [];
            this._lastFxState = [];
            this._lastAnalysersData = [];
            this.AddDOMMessageHandlers([
                ["state", c => this._OnUpdateState(c)],
                ["fxstate", c => this._OnUpdateFxState(c)],
                ["trigger", c => this._OnTrigger(c)]
            ]);
            d = this.GetRuntime().Dispatcher();
            this._disposables = new e.CompositeDisposable(e.Disposable.From(d, "instancedestroy", c => this._OnInstanceDestroyed(c.instance)), e.Disposable.From(d, "afterload", () => this._OnAfterLoad()), e.Disposable.From(d, "suspend", () => this._OnSuspend()), e.Disposable.From(d, "resume", () => this._OnResume()));
            this._runtime.AddLoadPromise(this.PostToDOMAsync("create-audio-context", {
                preloadList: this._runtime.GetAssetManager().GetAudioToPreload().map(c => ({
                    originalUrl: c.originalUrl,
                    url: c.url,
                    type: c.type,
                    fileSize: c.fileSize
                })),
                isiOSCordova: this._runtime.IsiOSCordova(),
                timeScaleMode: this._timeScaleMode,
                latencyHint: a,
                panningModel: this._panningModel,
                distanceModel: this._distanceModel,
                refDistance: this._referenceDistance,
                maxDistance: this._maxDistance,
                rolloffFactor: this._rolloffFactor,
                listenerPos: [this._listenerX, this._listenerY, this._listenerZ]
            }).then(c => {
                this._sampleRate = c.sampleRate
            }));
            this._StartTicking()
        }
        Release() {
            this._listenerInst = null;
            super.Release()
        }
        _OnInstanceDestroyed(a) {
            this._listenerInst === a && (this._listenerInst = null)
        }
        DbToLinearNoCap(a) {
            return Math.pow(10, a / 20)
        }
        DbToLinear(a) {
            a = this.DbToLinearNoCap(a);
            return isFinite(a) ? Math.max(Math.min(a, 1), 0) : 0
        }
        LinearToDbNoCap(a) {
            return Math.log(a) / Math.log(10) * 20
        }
        LinearToDb(a) {
            return this.LinearToDbNoCap(Math.max(Math.min(a, 1), 0))
        }
        _OnSuspend() {
            this._playInBackground || this.PostToDOM("set-suspended", {
                isSuspended: !0
            })
        }
        _OnResume() {
            this._playInBackground ||
                this.PostToDOM("set-suspended", {
                    isSuspended: !1
                })
        }
        _OnUpdateState(a) {
            const d = a.tickCount,
                c = this._lastAIState.filter(f => f.hasOwnProperty("placeholder") && (f.placeholder > d || -1 === f.placeholder));
            this._lastAIState = a.audioInstances;
            this._lastAnalysersData = a.analysers;
            0 < c.length && e.appendArray(this._lastAIState, c)
        }
        _OnUpdateFxState(a) {
            this._lastFxState = a.fxstate
        }
        _GetFirstAudioStateByTag(a) {
            for (const d of this._lastAIState)
                if (e.equalsNoCase(d.tag, a)) return d;
            return null
        }
        _IsTagPlaying(a) {
            return this._lastAIState.some(d =>
                e.equalsNoCase(a, d.tag) && d.isPlaying)
        }
        _MaybeMarkAsPlaying(a, d, c, f) {
            if (this._IsTagPlaying(a)) return null;
            a = {
                tag: a,
                duration: 0,
                volume: f,
                isPlaying: !0,
                playbackTime: 0,
                playbackRate: 1,
                uid: -1,
                bufferOriginalUrl: "",
                bufferUrl: "",
                bufferType: "",
                isMusic: d,
                isLooping: c,
                isMuted: !1,
                resumePosition: 0,
                pan: null,
                placeholder: -1
            };
            this._lastAIState.push(a);
            return a
        }
        async _OnTrigger(a) {
            const d = a.type;
            this._triggerTag = a.tag;
            a = a.aiid;
            if ("ended" === d) {
                for (const c of this._lastAIState)
                    if (c.aiid === a) {
                        c.isPlaying = !1;
                        break
                    }
                await this.TriggerAsync(e.Plugins.Audio.Cnds.OnEnded)
            } else "fade-ended" ===
                d && await this.TriggerAsync(e.Plugins.Audio.Cnds.OnFadeEnded)
        }
        Tick() {
            const a = {
                timeScale: this._runtime.GetTimeScale(),
                gameTime: this._runtime.GetGameTimeRaw(),
                instPans: this.GetInstancePans(),
                tickCount: this._runtime.GetTickCountNoSave()
            };
            if (this._listenerInst) {
                const d = this._listenerInst.GetWorldInfo();
                this._listenerX = d.GetX();
                this._listenerY = d.GetY();
                a.listenerPos = [this._listenerX, this._listenerY, this._listenerZ]
            }
            this.PostToDOM("tick", a)
        }
        rotatePtAround(a, d, c, f, k) {
            if (0 === c) return [a, d];
            const g = Math.sin(c);
            c = Math.cos(c);
            a -= f;
            d -= k;
            const l = a * g;
            a = a * c - d * g;
            return [a + f, d * c + l + k]
        }
        GetInstancePans() {
            return this._lastAIState.filter(a => -1 !== a.uid).map(a => this._runtime.GetInstanceByUID(a.uid)).filter(a => a).map(a => {
                const d = a.GetWorldInfo(),
                    c = d.GetLayer().GetAngle(),
                    [f, k] = this.rotatePtAround(d.GetX(), d.GetY(), -c, this._listenerX, this._listenerY);
                return {
                    uid: a.GetUID(),
                    x: f,
                    y: k,
                    angle: d.GetAngle() - c
                }
            })
        }
        GetAnalyserData(a, d) {
            for (const c of this._lastAnalysersData)
                if (c.index === d && e.equalsNoCase(c.tag, a)) return c;
            return null
        }
        _IncrementEffectCount(a) {
            this._effectCount.set(a,
                (this._effectCount.get(a) || 0) + 1)
        }
        _ShouldSave(a) {
            return a.hasOwnProperty("placeholder") || 3 === this._saveLoadMode ? !1 : a.isMusic && 1 === this._saveLoadMode ? !1 : a.isMusic || 2 !== this._saveLoadMode ? !0 : !1
        }
        SaveToJson() {
            return {
                isSilent: this._isSilent,
                masterVolume: this._masterVolume,
                listenerZ: this._listenerZ,
                listenerUid: this._listenerInst ? this._listenerInst.GetUID() : -1,
                remoteUrls: [...this._remoteUrls.entries()],
                playing: this._lastAIState.filter(a => this._ShouldSave(a)),
                effects: this._lastFxState,
                analysers: this._lastAnalysersData
            }
        }
        LoadFromJson(a) {
            this._isSilent =
                a.isSilent;
            this._masterVolume = a.masterVolume;
            this._listenerZ = a.listenerZ;
            this._listenerInst = null;
            this._loadListenerUid = a.listenerUid;
            this._remoteUrls.clear();
            if (a.remoteUrls)
                for (const [d, c] of a.remoteUrls) this._remoteUrls.set(d, c);
            this._lastAIState = a.playing;
            this._lastFxState = a.effects;
            this._lastAnalysersData = a.analysers
        }
        _OnAfterLoad() {
            if (-1 !== this._loadListenerUid && (this._listenerInst = this._runtime.GetInstanceByUID(this._loadListenerUid), this._loadListenerUid = -1, this._listenerInst)) {
                var a = this._listenerInst.GetWorldInfo();
                this._listenerX = a.GetX();
                this._listenerY = a.GetY()
            }
            for (var d of this._lastAIState)(a = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d.bufferOriginalUrl)) ? (d.bufferUrl = a.url, d.bufferType = a.type) : d.bufferUrl = null;
            for (const c of Object.values(this._lastFxState))
                for (const f of c) f.hasOwnProperty("bufferOriginalUrl") && (d = this._runtime.GetAssetManager().GetProjectAudioFileUrl(f.bufferOriginalUrl)) && (f.bufferUrl = d.url, f.bufferType = d.type);
            this.PostToDOM("load-state", {
                saveLoadMode: this._saveLoadMode,
                timeScale: this._runtime.GetTimeScale(),
                gameTime: this._runtime.GetGameTimeRaw(),
                listenerPos: [this._listenerX, this._listenerY, this._listenerZ],
                isSilent: this._isSilent,
                masterVolume: this._masterVolume,
                playing: this._lastAIState.filter(c => null !== c.bufferUrl),
                effects: this._lastFxState
            })
        }
        GetDebuggerProperties() {
            const a = [];
            for (const [d, c] of Object.entries(this._lastFxState)) a.push({
                name: "$" + d,
                value: c.map(f => f.type).join(", ")
            });
            return [{
                title: "plugins.audio.debugger.tag-effects",
                properties: a
            }, {
                title: "plugins.audio.debugger.currently-playing",
                properties: [{
                    name: "plugins.audio.debugger.currently-playing-count",
                    value: this._lastAIState.length
                }, ...this._lastAIState.map((d, c) => ({
                    name: "$#" + c,
                    value: `${d.bufferOriginalUrl} ("${d.tag}") ${Math.round(10*d.playbackTime)/10} / ${Math.round(10*d.duration)/10}`
                }))]
            }]
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Audio.Cnds = {
        OnEnded(b) {
            return e.equalsNoCase(this._triggerTag, b)
        },
        OnFadeEnded(b) {
            return e.equalsNoCase(this._triggerTag, b)
        },
        PreloadsComplete() {
            return this._preloadCount === this._preloadTotal
        },
        AdvancedAudioSupported() {
            return !0
        },
        IsSilent() {
            return this._isSilent
        },
        IsAnyPlaying() {
            for (const b of this._lastAIState)
                if (b.isPlaying) return !0;
            return !1
        },
        IsTagPlaying(b) {
            return this._IsTagPlaying(b)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = "lowpass highpass bandpass lowshelf highshelf peaking notch allpass".split(" ");
    e.Plugins.Audio.Acts = {
        async Play(a, d, c, f) {
            if (!this._isSilent) {
                var k = a[1],
                    g = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0]);
                if (g) {
                    var l = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var m = this._MaybeMarkAsPlaying(f.toLowerCase(), k, 0 !== d, this.DbToLinear(c));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: a[0],
                            url: g.url,
                            type: g.type,
                            isMusic: k,
                            tag: f.toLowerCase(),
                            isLooping: 0 !== d,
                            vol: this.DbToLinear(c),
                            pos: 0,
                            off: l,
                            trueClock: !!self.C3_GetAudioContextCurrentTime
                        })
                    } finally {
                        m && (m.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayAtPosition(a, d, c, f, k, g, l, m, u, x) {
            if (!this._isSilent) {
                var p = a[1],
                    r = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0]);
                if (r) {
                    var t = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var q = this._MaybeMarkAsPlaying(x.toLowerCase(), p, 0 !== d, this.DbToLinear(c));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: a[0],
                            url: r.url,
                            type: r.type,
                            isMusic: p,
                            tag: x.toLowerCase(),
                            isLooping: 0 !==
                                d,
                            vol: this.DbToLinear(c),
                            pos: 0,
                            off: t,
                            trueClock: !!self.C3_GetAudioContextCurrentTime,
                            panning: {
                                x: f,
                                y: k,
                                angle: e.toRadians(g),
                                innerAngle: e.toRadians(l),
                                outerAngle: e.toRadians(m),
                                outerGain: this.DbToLinear(u)
                            }
                        })
                    } finally {
                        q && (q.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayAtObject(a, d, c, f, k, g, l, m) {
            if (!this._isSilent && f && (f = f.GetFirstPicked()) && f.GetWorldInfo()) {
                var u = f.GetWorldInfo(),
                    x = u.GetLayer().GetAngle(),
                    [p, r] = this.rotatePtAround(u.GetX(), u.GetY(), -x, this._listenerX, this._listenerY),
                    t = a[1],
                    q = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0]);
                if (q) {
                    var w = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var y = this._MaybeMarkAsPlaying(m.toLowerCase(), t, 0 !== d, this.DbToLinear(c));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: a[0],
                            url: q.url,
                            type: q.type,
                            isMusic: t,
                            tag: m.toLowerCase(),
                            isLooping: 0 !== d,
                            vol: this.DbToLinear(c),
                            pos: 0,
                            off: w,
                            trueClock: !!self.C3_GetAudioContextCurrentTime,
                            panning: {
                                x: p,
                                y: r,
                                angle: u.GetAngle() - x,
                                innerAngle: e.toRadians(k),
                                outerAngle: e.toRadians(g),
                                outerGain: this.DbToLinear(l),
                                uid: f.GetUID()
                            }
                        })
                    } finally {
                        y && (y.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayByName(a, d, c, f, k) {
            if (!this._isSilent) {
                a = 1 === a;
                var g = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase());
                if (g) {
                    var l = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var m = this._MaybeMarkAsPlaying(k.toLowerCase(), a, 0 !== c, this.DbToLinear(f));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: d,
                            url: g.url,
                            type: g.type,
                            isMusic: a,
                            tag: k.toLowerCase(),
                            isLooping: 0 !== c,
                            vol: this.DbToLinear(f),
                            pos: 0,
                            off: l,
                            trueClock: !!self.C3_GetAudioContextCurrentTime
                        })
                    } finally {
                        m && (m.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayAtPositionByName(a, d, c, f, k, g, l, m, u, x, p) {
            if (!this._isSilent) {
                a = 1 === a;
                var r = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase());
                if (r) {
                    var t = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var q = this._MaybeMarkAsPlaying(p.toLowerCase(), a, 0 !== c, this.DbToLinear(f));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: d,
                            url: r.url,
                            type: r.type,
                            isMusic: a,
                            tag: p.toLowerCase(),
                            isLooping: 0 !== c,
                            vol: this.DbToLinear(f),
                            pos: 0,
                            off: t,
                            trueClock: !!self.C3_GetAudioContextCurrentTime,
                            panning: {
                                x: k,
                                y: g,
                                angle: e.toRadians(l),
                                innerAngle: e.toRadians(m),
                                outerAngle: e.toRadians(u),
                                outerGain: this.DbToLinear(x)
                            }
                        })
                    } finally {
                        q && (q.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayAtObjectByName(a, d, c, f, k, g, l, m, u) {
            if (!this._isSilent && !this._isSilent && k && (k = k.GetFirstPicked()) && k.GetWorldInfo()) {
                var x = k.GetWorldInfo(),
                    p = x.GetLayer().GetAngle(),
                    [r, t] = this.rotatePtAround(x.GetX(),
                        x.GetY(), -p, this._listenerX, this._listenerY);
                a = 1 === a;
                var q = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase());
                if (q) {
                    var w = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var y = this._MaybeMarkAsPlaying(u.toLowerCase(), a, 0 !== c, this.DbToLinear(f));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: d,
                            url: q.url,
                            type: q.type,
                            isMusic: a,
                            tag: u.toLowerCase(),
                            isLooping: 0 !== c,
                            vol: this.DbToLinear(f),
                            pos: 0,
                            off: w,
                            trueClock: !!self.C3_GetAudioContextCurrentTime,
                            panning: {
                                x: r,
                                y: t,
                                angle: x.GetAngle() - p,
                                innerAngle: e.toRadians(g),
                                outerAngle: e.toRadians(l),
                                outerGain: this.DbToLinear(m),
                                uid: k.GetUID()
                            }
                        })
                    } finally {
                        y && (y.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        SetLooping(a, d) {
            this.PostToDOM("set-looping", {
                tag: a.toLowerCase(),
                isLooping: 0 === d
            })
        },
        SetMuted(a, d) {
            this.PostToDOM("set-muted", {
                tag: a.toLowerCase(),
                isMuted: 0 === d
            })
        },
        SetVolume(a, d) {
            this.PostToDOM("set-volume", {
                tag: a.toLowerCase(),
                vol: this.DbToLinear(d)
            })
        },
        FadeVolume(a, d, c, f) {
            this.PostToDOM("fade-volume", {
                tag: a.toLowerCase(),
                vol: this.DbToLinear(d),
                duration: c,
                stopOnEnd: 0 === f
            })
        },
        async Preload(a) {
            const d = a[1],
                c = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0]);
            c && (this._preloadTotal++, await this.PostToDOMAsync("preload", {
                originalUrl: a[0],
                url: c.url,
                type: c.type,
                isMusic: d
            }), this._preloadCount++)
        },
        async PreloadByName(a, d) {
            a = 1 === a;
            const c = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase());
            c && (this._preloadTotal++, await this.PostToDOMAsync("preload", {
                originalUrl: d,
                url: c.url,
                type: c.type,
                isMusic: a
            }), this._preloadCount++)
        },
        SetPlaybackRate(a, d) {
            this.PostToDOM("set-playback-rate", {
                tag: a.toLowerCase(),
                rate: Math.max(d, 0)
            })
        },
        Stop(a) {
            this.PostToDOM("stop", {
                tag: a.toLowerCase()
            })
        },
        StopAll() {
            this.PostToDOM("stop-all")
        },
        SetPaused(a, d) {
            this.PostToDOM("set-paused", {
                tag: a.toLowerCase(),
                paused: 0 === d
            })
        },
        Seek(a, d) {
            this.PostToDOM("seek", {
                tag: a.toLowerCase(),
                pos: d
            })
        },
        SetSilent(a) {
            2 === a && (a = this._isSilent ? 1 : 0);
            a = 0 === a;
            this._isSilent !== a && (this._isSilent = a, this.PostToDOM("set-silent", {
                isSilent: a
            }))
        },
        SetMasterVolume(a) {
            a = this.DbToLinear(a);
            this._masterVolume !== a && (this._masterVolume = a, this.PostToDOM("set-master-volume", {
                vol: a
            }))
        },
        AddFilterEffect(a, d, c, f, k, g, l) {
            a = a.toLowerCase();
            d = b[d];
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "filter",
                tag: a,
                params: [d, c, f, k, g, e.clamp(l / 100, 0, 1)]
            })
        },
        AddDelayEffect(a, d, c, f) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "delay",
                tag: a,
                params: [d, this.DbToLinear(c), e.clamp(f / 100, 0, 1)]
            })
        },
        AddFlangerEffect(a, d,
            c, f, k, g) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "flanger",
                tag: a,
                params: [d / 1E3, c / 1E3, f, k / 100, e.clamp(g / 100, 0, 1)]
            })
        },
        AddPhaserEffect(a, d, c, f, k, g, l) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "phaser",
                tag: a,
                params: [d, c, f, k, g, e.clamp(l / 100, 0, 1)]
            })
        },
        AddConvolutionEffect(a, d, c, f) {
            a = a.toLowerCase();
            const k = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d[0]);
            k && (this._IncrementEffectCount(a), this.PostToDOM("add-effect", {
                type: "convolution",
                tag: a,
                bufferOriginalUrl: d[0],
                bufferUrl: k.url,
                bufferType: k.type,
                params: [0 === c, e.clamp(f / 100, 0, 1)]
            }))
        },
        AddGainEffect(a, d) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "gain",
                tag: a,
                params: [this.DbToLinear(d)]
            })
        },
        AddMuteEffect(a) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "gain",
                tag: a,
                params: [0]
            })
        },
        AddTremoloEffect(a, d, c) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "tremolo",
                tag: a,
                params: [d, e.clamp(c / 100, 0, 1)]
            })
        },
        AddRingModEffect(a, d, c) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "ringmod",
                tag: a,
                params: [d, e.clamp(c / 100, 0, 1)]
            })
        },
        AddDistortionEffect(a, d, c, f, k, g) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "distortion",
                tag: a,
                params: [this.DbToLinearNoCap(d), this.DbToLinearNoCap(c), f, this.DbToLinearNoCap(k), e.clamp(g / 100, 0, 1)]
            })
        },
        AddCompressorEffect(a, d, c, f, k, g) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "compressor",
                tag: a,
                params: [d, c, f, k / 1E3, g / 1E3]
            })
        },
        AddAnalyserEffect(a, d, c) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "analyser",
                tag: a,
                params: [d, c]
            })
        },
        RemoveEffects(a) {
            a = a.toLowerCase();
            this._effectCount.set(a, 0);
            this.PostToDOM("remove-effects", {
                tag: a
            });
            this._lastFxState = {}
        },
        SetEffectParameter(a, d, c, f, k, g) {
            this.PostToDOM("set-effect-param", {
                tag: a.toLowerCase(),
                index: Math.floor(d),
                param: c,
                value: f,
                ramp: k,
                time: g
            })
        },
        SetListenerObject(a) {
            a &&
                (a = a.GetFirstPicked()) && a.GetWorldInfo() && (this._listenerInst = a)
        },
        SetListenerZ(a) {
            this._listenerZ = a
        },
        ScheduleNextPlay(a) {
            this._nextPlayTime = Math.max(a, 0)
        },
        UnloadAudio(a) {
            const d = a[1];
            (a = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0])) && this.PostToDOM("unload", {
                url: a.url,
                type: a.type,
                isMusic: d
            })
        },
        UnloadAudioByName(a, d) {
            a = 1 === a;
            (d = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase())) && this.PostToDOM("unload", {
                url: d.url,
                type: d.type,
                isMusic: a
            })
        },
        UnloadAll() {
            this.PostToDOM("unload-all")
        },
        AddRemoteURL(a, d, c) {
            this._remoteUrls.set(c.toLowerCase(), {
                url: a,
                type: d
            })
        }
    }
}
"use strict";
self.C3.Plugins.Audio.Exps = {
    Duration(e) {
        return (e = this._GetFirstAudioStateByTag(e)) ? e.duration : 0
    },
    PlaybackTime(e) {
        return (e = this._GetFirstAudioStateByTag(e)) ? e.playbackTime : 0
    },
    PlaybackRate(e) {
        return (e = this._GetFirstAudioStateByTag(e)) ? e.playbackRate : 0
    },
    Volume(e) {
        return (e = this._GetFirstAudioStateByTag(e)) ? this.LinearToDb(e.volume) : 0
    },
    MasterVolume() {
        return this.LinearToDb(this._masterVolume)
    },
    EffectCount(e) {
        return this._effectCount.get(e.toLowerCase()) || 0
    },
    AnalyserFreqBinCount(e, b) {
        return (e = this.GetAnalyserData(e,
            Math.floor(b))) ? e.binCount : 0
    },
    AnalyserFreqBinAt(e, b, a) {
        e = this.GetAnalyserData(e, Math.floor(b));
        if (!e) return 0;
        a = Math.floor(a);
        return 0 > a || a >= e.binCount ? 0 : e.freqBins[a]
    },
    AnalyserPeakLevel(e, b) {
        return (e = this.GetAnalyserData(e, Math.floor(b))) ? e.peak : 0
    },
    AnalyserRMSLevel(e, b) {
        return (e = this.GetAnalyserData(e, Math.floor(b))) ? e.rms : 0
    },
    SampleRate() {
        return this._sampleRate
    },
    CurrentTime() {
        return self.C3_GetAudioContextCurrentTime ? self.C3_GetAudioContextCurrentTime() : performance.now() / 1E3
    }
}; {
    "use strict";
    const e = self.C3;
    e.Plugins.LocalStorage = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.LocalStorage.Type = class extends e.SDKTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.LocalStorage.Instance = class extends e.SDKInstanceBase {
        constructor(b, a) {
            super(b);
            this._lastValue = this._currentKey = "";
            this._keyNamesList = [];
            this._errorMessage = "";
            this._pendingSets = this._pendingGets = 0;
            this._storage = this._runtime._GetProjectStorage();
            this._debugCache = new Map;
            this._isLoadingDebugCache = !1
        }
        Release() {
            super.Release()
        }
        async _TriggerStorageError(b) {
            this._errorMessage = this._GetErrorString(b);
            await this.TriggerAsync(e.Plugins.LocalStorage.Cnds.OnError)
        }
        _GetErrorString(b) {
            return b ?
                "string" === typeof b ? b : "string" === typeof b.message ? b.message : "string" === typeof b.name ? b.name : "string" === typeof b.data ? b.data : "unknown error" : "unknown error"
        }
        GetDebuggerProperties() {
            this._isLoadingDebugCache || this._DebugCacheStorage();
            return [{
                title: "plugins.localstorage.name",
                properties: [...this._debugCache.entries()].map(b => ({
                    name: "$" + b[0],
                    value: b[1],
                    onedit: a => this._storage.setItem(b[0], a)
                }))
            }]
        }
        async _DebugCacheStorage() {
            this._isLoadingDebugCache = !0;
            try {
                const b = await this._storage.keys();
                b.sort((d,
                    c) => {
                    d = d.toLowerCase();
                    c = c.toLowerCase();
                    return d < c ? -1 : c < d ? 1 : 0
                });
                const a = await Promise.all(b.map(d => this._storage.getItem(d)));
                this._debugCache.clear();
                for (let d = 0, c = b.length; d < c; ++d) this._debugCache.set(b[d], a[d])
            } catch (b) {
                console.warn("[C3 debugger] Error displaying local storage: ", b)
            } finally {
                this._isLoadingDebugCache = !1
            }
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.LocalStorage.Cnds = {
        OnItemSet(b) {
            return this._currentKey === b
        },
        OnAnyItemSet() {
            return !0
        },
        OnItemGet(b) {
            return this._currentKey === b
        },
        OnAnyItemGet() {
            return !0
        },
        OnItemRemoved(b) {
            return this._currentKey === b
        },
        OnAnyItemRemoved() {
            return !0
        },
        OnCleared() {
            return !0
        },
        OnAllKeyNamesLoaded() {
            return !0
        },
        OnError() {
            return !0
        },
        OnItemExists(b) {
            return this._currentKey === b
        },
        OnItemMissing(b) {
            return this._currentKey === b
        },
        CompareKey(b, a) {
            return e.compare(this._currentKey, b, a)
        },
        CompareValue(b,
            a) {
            return e.compare(this._lastValue, b, a)
        },
        IsProcessingSets() {
            return 0 < this._pendingSets
        },
        IsProcessingGets() {
            return 0 < this._pendingGets
        },
        OnAllSetsComplete() {
            return !0
        },
        OnAllGetsComplete() {
            return !0
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(a) {
        return "string" === typeof a || "number" === typeof a
    }
    e.Plugins.LocalStorage.Acts = {
        async SetItem(a, d) {
            this._pendingSets++;
            try {
                const c = await this._storage.setItem(a, d);
                await this.ScheduleTriggers(async () => {
                    this._currentKey = a;
                    this._lastValue = c;
                    await this.TriggerAsync(e.Plugins.LocalStorage.Cnds.OnAnyItemSet);
                    await this.TriggerAsync(e.Plugins.LocalStorage.Cnds.OnItemSet)
                })
            } catch (c) {
                await this._TriggerStorageError(c)
            } finally {
                this._pendingSets--, 0 === this._pendingSets &&
                    await this.TriggerAsync(e.Plugins.LocalStorage.Cnds.OnAllSetsComplete)
            }
        },
        async SetBinaryItem(a, d) {
            if (d && (d = d.GetFirstPicked(this._inst)) && (d = d.GetSdkInstance())) {
                d = d.GetArrayBufferReadOnly();
                this._pendingSets++;
                try {
                    await this._storage.setItem(a, d), await this.ScheduleTriggers(async () => {
                        this._currentKey = a;
                        this._lastValue = "";
                        await this.TriggerAsync(e.Plugins.LocalStorage.Cnds.OnAnyItemSet);
                        await this.TriggerAsync(e.Plugins.LocalStorage.Cnds.OnItemSet)
                    })
                } catch (c) {
                    await this._TriggerStorageError(c)
                } finally {
                    this._pendingSets--,
                        0 === this._pendingSets && await this.TriggerAsync(e.Plugins.LocalStorage.Cnds.OnAllSetsComplete)
                }
            }
        },
        async GetItem(a) {
            this._pendingGets++;
            try {
                const d = await this._storage.getItem(a);
                await this.ScheduleTriggers(async () => {
                    this._currentKey = a;
                    this._lastValue = b(d) ? d : "";
                    await this.TriggerAsync(e.Plugins.LocalStorage.Cnds.OnAnyItemGet);
                    await this.TriggerAsync(e.Plugins.LocalStorage.Cnds.OnItemGet)
                })
            } catch (d) {
                await this._TriggerStorageError(d)
            } finally {
                this._pendingGets--, 0 === this._pendingGets && await this.TriggerAsync(e.Plugins.LocalStorage.Cnds.OnAllGetsComplete)
            }
        },
        async GetBinaryItem(a, d) {
            if (d && (d = d.GetFirstPicked(this._inst))) {
                var c = d.GetSdkInstance();
                this._pendingGets++;
                try {
                    let f = await this._storage.getItem(a);
                    f = f instanceof ArrayBuffer ? f : new ArrayBuffer(0);
                    await this.ScheduleTriggers(async () => {
                        this._lastValue = "";
                        this._currentKey = a;
                        c.SetArrayBufferTransfer(f);
                        await this.TriggerAsync(e.Plugins.LocalStorage.Cnds.OnAnyItemGet);
                        await this.TriggerAsync(e.Plugins.LocalStorage.Cnds.OnItemGet)
                    })
                } catch (f) {
                    await this._TriggerStorageError(f)
                } finally {
                    this._pendingGets--,
                        0 === this._pendingGets && await this.TriggerAsync(e.Plugins.LocalStorage.Cnds.OnAllGetsComplete)
                }
            }
        },
        async CheckItemExists(a) {
            try {
                const d = await this._storage.getItem(a);
                await this.ScheduleTriggers(async () => {
                    this._currentKey = a;
                    "undefined" === typeof d || null === d ? (this._lastValue = "", await this.TriggerAsync(e.Plugins.LocalStorage.Cnds.OnItemMissing)) : (this._lastValue = b(d) ? d : "", await this.TriggerAsync(e.Plugins.LocalStorage.Cnds.OnItemExists))
                })
            } catch (d) {
                await this._TriggerStorageError(d)
            }
        },
        async RemoveItem(a) {
            try {
                await this._storage.removeItem(a),
                    await this.ScheduleTriggers(async () => {
                        this._currentKey = a;
                        this._lastValue = "";
                        await this.TriggerAsync(e.Plugins.LocalStorage.Cnds.OnAnyItemRemoved);
                        await this.TriggerAsync(e.Plugins.LocalStorage.Cnds.OnItemRemoved)
                    })
            } catch (d) {
                await this._TriggerStorageError(d)
            }
        },
        async ClearStorage() {
            try {
                await this._storage.clear(), await this.ScheduleTriggers(async () => {
                    this._lastValue = this._currentKey = "";
                    e.clearArray(this._keyNamesList);
                    await this.TriggerAsync(e.Plugins.LocalStorage.Cnds.OnCleared)
                })
            } catch (a) {
                await this._TriggerStorageError(a)
            }
        },
        async GetAllKeyNames() {
            try {
                const a = await this._storage.keys();
                await this.ScheduleTriggers(async () => {
                    this._keyNamesList = a;
                    await this.TriggerAsync(e.Plugins.LocalStorage.Cnds.OnAllKeyNamesLoaded)
                })
            } catch (a) {
                await this._TriggerStorageError(a)
            }
        }
    }
}
"use strict";
self.C3.Plugins.LocalStorage.Exps = {
    ItemValue() {
        return this._lastValue
    },
    Key() {
        return this._currentKey
    },
    KeyCount() {
        return this._keyNamesList.length
    },
    KeyAt(e) {
        e = Math.floor(e);
        return 0 > e || e >= this._keyNamesList.length ? "" : this._keyNamesList[e]
    },
    ErrorMessage() {
        return this._errorMessage
    }
}; {
    "use strict";
    const e = self.C3;
    e.Behaviors.MoveTo = class extends e.SDKBehaviorBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.MoveTo.Type = class extends e.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = self.IBehaviorInstance;
    e.Behaviors.MoveTo.Instance = class extends e.SDKBehaviorInstanceBase {
        constructor(c, f) {
            super(c);
            this._maxSpeed = 200;
            this._dec = this._acc = 600;
            this._rotateSpeed = 0;
            this._setAngle = !0;
            this._stopOnSolids = !1;
            this._isEnabled = !0;
            this._speed = 0;
            this._movingAngle = this.GetWorldInfo().GetAngle();
            this._waypoints = [];
            f && (this._maxSpeed = f[0], this._acc = f[1], this._dec = f[2], this._rotateSpeed = e.toRadians(f[3]), this._setAngle = f[4], this._stopOnSolids = f[5], this._isEnabled =
                f[6])
        }
        Release() {
            super.Release()
        }
        SaveToJson() {
            return {
                ms: this._maxSpeed,
                acc: this._acc,
                dec: this._dec,
                rs: this._rotateSpeed,
                sa: this._setAngle,
                sos: this._stopOnSolids,
                s: this._speed,
                ma: this._movingAngle,
                wp: this._waypoints.map(c => ({
                    x: c.x,
                    y: c.y
                })),
                e: this._isEnabled
            }
        }
        LoadFromJson(c) {
            this._maxSpeed = c.ms;
            this._acc = c.acc;
            this._dec = c.dec;
            this._rotateSpeed = c.rs;
            this._setAngle = c.sa;
            this._stopOnSolids = c.sos;
            this._speed = c.s;
            this._movingAngle = c.ma;
            this._waypoints = c.wp.map(f => ({
                x: f.x,
                y: f.y
            }));
            this._SetEnabled(c.e);
            this._isEnabled &&
                0 < this._waypoints.length && this._StartTicking()
        }
        _AddWaypoint(c, f, k) {
            k && e.clearArray(this._waypoints);
            this._waypoints.push({
                x: c,
                y: f
            });
            this._isEnabled && this._StartTicking()
        }
        _GetWaypointCount() {
            return this._waypoints.length
        }
        _GetWaypointXAt(c) {
            c = Math.floor(c);
            return 0 > c || c >= this._waypoints.length ? 0 : this._waypoints[c].x
        }
        _GetWaypointYAt(c) {
            c = Math.floor(c);
            return 0 > c || c >= this._waypoints.length ? 0 : this._waypoints[c].y
        }
        _IsMoving() {
            return 0 < this._waypoints.length
        }
        _Stop() {
            e.clearArray(this._waypoints);
            this._speed =
                0;
            this._StopTicking()
        }
        _GetTargetX() {
            return 0 < this._waypoints.length ? this._waypoints[0].x : 0
        }
        _GetTargetY() {
            return 0 < this._waypoints.length ? this._waypoints[0].y : 0
        }
        _SetSpeed(c) {
            this._IsMoving() && (this._speed = Math.min(c, this._maxSpeed))
        }
        _GetSpeed() {
            return this._speed
        }
        _SetMaxSpeed(c) {
            this._maxSpeed = Math.max(c, 0);
            this._SetSpeed(this._speed)
        }
        _GetMaxSpeed() {
            return this._maxSpeed
        }
        _IsRotationEnabled() {
            return 0 !== this._rotateSpeed
        }
        Tick() {
            if (this._isEnabled && this._IsMoving()) {
                var c = this._runtime.GetDt(this._inst),
                    f = this._inst.GetWorldInfo(),
                    k = f.GetX(),
                    g = f.GetY(),
                    l = f.GetAngle(),
                    m = this._speed,
                    u = this._maxSpeed,
                    x = this._acc,
                    p = this._dec,
                    r = this._GetTargetX(),
                    t = this._GetTargetY(),
                    q = e.angleTo(k, g, r, t),
                    w = !1;
                0 < p && 1 === this._waypoints.length && (w = .5 * m * m / p * 1.0001, w = e.distanceSquared(k, g, r, t) <= w * w) && (u = e.distanceTo(k, g, r, t), this._speed = u = m = Math.sqrt(2 * p * u));
                if (this._IsRotationEnabled()) {
                    var y = e.angleDiff(this._movingAngle, q);
                    if (y > Number.EPSILON) {
                        const C = y / this._rotateSpeed;
                        y *= e.distanceTo(f.GetX(), f.GetY(), r, t) / (2 * Math.sin(y));
                        u = Math.min(u, e.clamp(y / C, 0, this._maxSpeed))
                    }
                }
                m = Math.min(m * c + .5 * (w ? -p : x) * c * c, u * c);
                if (w) {
                    if (0 < p && (this._speed = Math.max(this._speed - p * c, 0), 0 === this._speed)) {
                        this._OnArrived(f, r, t);
                        return
                    }
                } else this._speed = 0 === x ? u : Math.min(this._speed + x * c, u);
                e.distanceSquared(f.GetX(), f.GetY(), r, t) <= m * m ? this._OnArrived(f, r, t) : (this._IsRotationEnabled() ? this._movingAngle = e.angleRotate(this._movingAngle, q, this._rotateSpeed * c) : this._movingAngle = q, f.OffsetXY(Math.cos(this._movingAngle) * m, Math.sin(this._movingAngle) * m), this._setAngle &&
                    f.SetAngle(this._movingAngle), f.SetBboxChanged(), this._CheckSolidCollision(k, g, l))
            }
        }
        _OnArrived(c, f, k) {
            c.SetXY(f, k);
            c.SetBboxChanged();
            this._waypoints.shift();
            0 === this._waypoints.length && (this._speed = 0, this._StopTicking());
            this.GetScriptInterface().dispatchEvent(e.New(e.Event, "arrived"));
            this.Trigger(e.Behaviors.MoveTo.Cnds.OnArrived)
        }
        _CheckSolidCollision(c, f, k) {
            const g = this._runtime.GetCollisionEngine();
            if (this._stopOnSolids && g.TestOverlapSolid(this._inst)) {
                this._Stop();
                const m = this._inst.GetWorldInfo();
                var l = m.GetX();
                const u = m.GetY(),
                    x = e.angleTo(l, u, c, f);
                l = e.distanceTo(l, u, c, f);
                g.PushOutSolid(this._inst, Math.cos(x), Math.sin(x), Math.max(l, 1)) || (m.SetXY(c, f), m.SetAngle(k), m.SetBboxChanged());
                this.GetScriptInterface().dispatchEvent(e.New(e.Event, "hitsolid"));
                this.Trigger(e.Behaviors.MoveTo.Cnds.OnHitSolid)
            }
        }
        _IsSetAngle() {
            return this._setAngle
        }
        _SetSetAngle(c) {
            this._setAngle = !!c
        }
        _SetAngleOfMotion(c) {
            this._movingAngle = c;
            this._isEnabled && this._setAngle && !this._IsMoving() && (c = this.GetWorldInfo(), c.SetAngle(this._movingAngle),
                c.SetBboxChanged())
        }
        _GetAngleOfMotion() {
            return this._movingAngle
        }
        _SetAcceleration(c) {
            this._acc = Math.max(c, 0)
        }
        _GetAcceleration() {
            return this._acc
        }
        _SetDeceleration(c) {
            this._dec = Math.max(c, 0)
        }
        _GetDeceleration() {
            return this._dec
        }
        _SetRotateSpeed(c) {
            this._rotateSpeed = Math.max(c, 0)
        }
        _GetRotateSpeed() {
            return this._rotateSpeed
        }
        _SetStopOnSolids(c) {
            this._stopOnSolids = !!c
        }
        _IsStopOnSolids() {
            return this._stopOnSolids
        }
        _SetEnabled(c) {
            c = !!c;
            this._isEnabled !== c && ((this._isEnabled = c) && this._IsMoving() ? this._StartTicking() :
                this._StopTicking())
        }
        _IsEnabled() {
            return this._isEnabled
        }
        GetPropertyValueByIndex(c) {
            switch (c) {
                case 0:
                    return this._GetMaxSpeed();
                case 1:
                    return this._GetAcceleration();
                case 2:
                    return this._GetDeceleration();
                case 3:
                    return e.toDegrees(this._GetRotateSpeed());
                case 4:
                    return this._IsSetAngle();
                case 5:
                    return this._IsStopOnSolids();
                case 6:
                    return this._IsEnabled()
            }
        }
        SetPropertyValueByIndex(c, f) {
            switch (c) {
                case 0:
                    this._SetMaxSpeed(f);
                    break;
                case 1:
                    this._SetAcceleration(f);
                    break;
                case 2:
                    this._SetDeceleration(f);
                    break;
                case 3:
                    this._SetRotateSpeed(e.toRadians(f));
                    break;
                case 4:
                    this._SetSetAngle(f);
                    break;
                case 5:
                    this._SetStopOnSolids(f);
                    break;
                case 6:
                    this._SetEnabled(f)
            }
        }
        GetDebuggerProperties() {
            return [{
                title: "$" + this.GetBehaviorType().GetName(),
                properties: [{
                        name: "behaviors.moveto.debugger.speed",
                        value: this._GetSpeed(),
                        onedit: c => this._SetSpeed(c)
                    }, {
                        name: "behaviors.moveto.debugger.angle-of-motion",
                        value: e.toDegrees(this._GetAngleOfMotion()),
                        onedit: c => this._movingAngle = e.toRadians(c)
                    }, {
                        name: "behaviors.moveto.debugger.target-x",
                        value: this._GetTargetX()
                    }, {
                        name: "behaviors.moveto.debugger.target-y",
                        value: this._GetTargetY()
                    }, {
                        name: "behaviors.moveto.debugger.waypoint-count",
                        value: this._GetWaypointCount()
                    }, {
                        name: "behaviors.moveto.properties.max-speed.name",
                        value: this._GetMaxSpeed(),
                        onedit: c => this._SetMaxSpeed(c)
                    }, {
                        name: "behaviors.moveto.properties.acceleration.name",
                        value: this._GetAcceleration(),
                        onedit: c => this._SetAcceleration(c)
                    }, {
                        name: "behaviors.moveto.properties.deceleration.name",
                        value: this._GetDeceleration(),
                        onedit: c => this._SetDeceleration(c)
                    },
                    {
                        name: "behaviors.moveto.properties.rotate-speed.name",
                        value: e.toDegrees(this._GetRotateSpeed()),
                        onedit: c => this._SetRotateSpeed(e.toRadians(c))
                    }, {
                        name: "behaviors.moveto.properties.enabled.name",
                        value: this._IsEnabled(),
                        onedit: c => this._SetEnabled(c)
                    }
                ]
            }]
        }
        GetScriptInterfaceClass() {
            return self.IMoveToBehaviorInstance
        }
    };
    const d = new WeakMap;
    self.IMoveToBehaviorInstance = class extends a {
        constructor() {
            super();
            d.set(this, a._GetInitInst().GetSdkInstance())
        }
        moveToPosition(c, f, k = !0) {
            b.RequireFiniteNumber(c);
            b.RequireFiniteNumber(f);
            d.get(this)._AddWaypoint(c, f, !!k)
        }
        getTargetX() {
            return d.get(this)._GetTargetX()
        }
        getTargetY() {
            return d.get(this)._GetTargetY()
        }
        getTargetPosition() {
            const c = d.get(this);
            return [c._GetTargetX(), c._GetTargetY()]
        }
        getWaypointCount() {
            return d.get(this)._GetWaypointCount()
        }
        getWaypointX(c) {
            b.RequireFiniteNumber(c);
            return d.get(this)._GetWaypointXAt(c)
        }
        getWaypointY(c) {
            b.RequireFiniteNumber(c);
            return d.get(this)._GetWaypointYAt(c)
        }
        getWaypoint(c) {
            b.RequireFiniteNumber(c);
            const f = d.get(this);
            return [f._GetWaypointXAt(c),
                f._GetWaypointYAt(c)
            ]
        }
        stop() {
            d.get(this)._Stop()
        }
        get isMoving() {
            return d.get(this)._IsMoving()
        }
        get speed() {
            return d.get(this)._GetSpeed()
        }
        set speed(c) {
            b.RequireFiniteNumber(c);
            d.get(this)._SetSpeed(c)
        }
        get maxSpeed() {
            return d.get(this)._GetMaxSpeed()
        }
        set maxSpeed(c) {
            b.RequireFiniteNumber(c);
            d.get(this)._SetMaxSpeed(c)
        }
        get acceleration() {
            return d.get(this)._GetAcceleration()
        }
        set acceleration(c) {
            b.RequireFiniteNumber(c);
            d.get(this)._SetAcceleration(c)
        }
        get deceleration() {
            return d.get(this)._GetDeceleration()
        }
        set deceleration(c) {
            b.RequireFiniteNumber(c);
            d.get(this)._SetDeceleration(c)
        }
        get angleOfMotion() {
            return d.get(this)._GetAngleOfMotion()
        }
        set angleOfMotion(c) {
            b.RequireFiniteNumber(c);
            d.get(this)._SetAngleOfMotion(c)
        }
        get rotateSpeed() {
            return d.get(this)._GetRotateSpeed()
        }
        set rotateSpeed(c) {
            b.RequireFiniteNumber(c);
            d.get(this)._SetRotateSpeed(c)
        }
        get isStopOnSolids() {
            return d.get(this)._IsStopOnSolids()
        }
        set isStopOnSolids(c) {
            d.get(this)._SetStopOnSolids(c)
        }
        get isEnabled() {
            return d.get(this)._IsEnabled()
        }
        set isEnabled(c) {
            d.get(this)._SetEnabled(c)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.MoveTo.Cnds = {
        IsMoving() {
            return this._IsMoving()
        },
        CompareSpeed(b, a) {
            return e.compare(this._GetSpeed(), b, a)
        },
        IsEnabled() {
            return this._IsEnabled()
        },
        OnArrived() {
            return !0
        },
        OnHitSolid() {
            return !0
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.MoveTo.Acts = {
        MoveToPosition(b, a, d) {
            this._AddWaypoint(b, a, 0 === d)
        },
        MoveToObject(b, a, d) {
            if (b && (b = b.GetPairedInstance(this._inst)) && b.GetWorldInfo()) {
                var [c, f] = b.GetImagePoint(a);
                this._AddWaypoint(c, f, 0 === d)
            }
        },
        MoveAlongPathfindingPath(b) {
            var a = this._inst.GetBehaviorSdkInstanceFromCtor(e.Behaviors.Pathfinding);
            if (a && (a = a._GetPath(), 0 !== a.length))
                for (let d = 0, c = a.length; d < c; ++d) {
                    const f = a[d];
                    this._AddWaypoint(f.x, f.y, 0 === d && 0 === b)
                }
        },
        MoveAlongTimeline(b, a, d) {
            if (a =
                a ? b.GetTrackById(a) : e.first(b.GetTracks()))
                if (b = a.GetPropertyTrack("offsetX"), a = a.GetPropertyTrack("offsetY"), b && a) {
                    var c = [...b.GetPropertyKeyframeValues()],
                        f = [...a.GetPropertyKeyframeValues()];
                    if (0 !== c.length && 0 !== f.length) {
                        var k = 0,
                            g = 0,
                            l = this._inst.GetWorldInfo();
                        "relative" === b.GetResultMode() && (k = l.GetX());
                        "relative" === a.GetResultMode() && (g = l.GetY());
                        for (let m = 0, u = Math.min(c.length, f.length); m < u; ++m) this._AddWaypoint(c[m] + k, f[m] + g, 0 === m && 0 === d)
                    }
                }
        },
        MoveAlongTimelineByName(b, a, d) {
            (b = this._runtime.GetTimelineManager().GetTimelineByName(b)) &&
            e.Behaviors.MoveTo.Acts.MoveAlongTimeline.call(this, b, a, d)
        },
        Stop() {
            this._Stop()
        },
        SetMovingAngle(b) {
            this._SetAngleOfMotion(e.toRadians(b))
        },
        SetSpeed(b) {
            this._SetSpeed(b)
        },
        SetMaxSpeed(b) {
            this._SetMaxSpeed(b)
        },
        SetAcceleration(b) {
            this._SetAcceleration(b)
        },
        SetDeceleration(b) {
            this._SetDeceleration(b)
        },
        SetRotateSpeed(b) {
            this._SetRotateSpeed(e.toRadians(b))
        },
        SetStopOnSolids(b) {
            this._SetStopOnSolids(b)
        },
        SetEnabled(b) {
            this._SetEnabled(b)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.MoveTo.Exps = {
        Speed() {
            return this._GetSpeed()
        },
        MaxSpeed() {
            return this._GetMaxSpeed()
        },
        Acceleration() {
            return this._GetAcceleration()
        },
        Deceleration() {
            return this._GetDeceleration()
        },
        MovingAngle() {
            return e.toDegrees(this._GetAngleOfMotion())
        },
        RotateSpeed() {
            return e.toDegrees(this._GetRotateSpeed())
        },
        TargetX() {
            return this._GetTargetX()
        },
        TargetY() {
            return this._GetTargetY()
        },
        WaypointCount() {
            return this._GetWaypointCount()
        },
        WaypointXAt(b) {
            return this._GetWaypointXAt(b)
        },
        WaypointYAt(b) {
            return this._GetWaypointYAt(b)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Pin = class extends e.SDKBehaviorBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Pin.Type = class extends e.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Pin.Instance = class extends e.SDKBehaviorInstanceBase {
        constructor(b, a) {
            super(b);
            this._pinInst = null;
            this._pinUid = -1;
            this._mode = "";
            this._propSet = new Set;
            this._lastKnownAngle = this._dz = this._dAngle = this._dHeight = this._dWidth = this._dy = this._dx = this._pinImagePoint = this._pinAngle = this._pinDist = 0;
            this._destroy = !1;
            a && (this._destroy = a[0]);
            b = this._runtime.Dispatcher();
            this._disposables = new e.CompositeDisposable(e.Disposable.From(b, "instancedestroy", d => this._OnInstanceDestroyed(d.instance)),
                e.Disposable.From(b, "afterload", d => this._OnAfterLoad()))
        }
        Release() {
            this._pinInst = null;
            super.Release()
        }
        _SetPinInst(b) {
            b ? (this._pinInst = b, this._StartTicking2()) : (this._pinInst = null, this._StopTicking2())
        }
        _Pin(b, a, d) {
            if (b && (b = b.GetFirstPicked(this._inst)))
                if (this._mode = a, this._SetPinInst(b), a = this._inst.GetWorldInfo(), b = b.GetWorldInfo(), "properties" === this._mode) {
                    const c = this._propSet;
                    c.clear();
                    for (const f of d) c.add(f);
                    this._dx = a.GetX() - b.GetX();
                    this._dy = a.GetY() - b.GetY();
                    this._dAngle = a.GetAngle() - b.GetAngle();
                    this._lastKnownAngle = a.GetAngle();
                    this._dz = a.GetZElevation() - b.GetZElevation();
                    c.has("x") && c.has("y") && (this._pinAngle = e.angleTo(b.GetX(), b.GetY(), a.GetX(), a.GetY()) - b.GetAngle(), this._pinDist = e.distanceTo(b.GetX(), b.GetY(), a.GetX(), a.GetY()));
                    c.has("width-abs") ? this._dWidth = a.GetWidth() - b.GetWidth() : c.has("width-scale") && (this._dWidth = a.GetWidth() / b.GetWidth());
                    c.has("height-abs") ? this._dHeight = a.GetHeight() - b.GetHeight() : c.has("height-scale") && (this._dHeight = a.GetHeight() / b.GetHeight())
                } else this._pinDist =
                    e.distanceTo(b.GetX(), b.GetY(), a.GetX(), a.GetY())
        }
        SaveToJson() {
            const b = this._propSet,
                a = this._mode,
                d = {
                    uid: this._pinInst ? this._pinInst.GetUID() : -1,
                    m: a
                };
            if ("rope" === a || "bar" === a) d.pd = this._pinDist;
            else if ("properties" === a) {
                d.ps = [...this._propSet];
                b.has("imagepoint") ? d.ip = this._pinImagePoint : b.has("x") && b.has("y") ? (d.pa = this._pinAngle, d.pd = this._pinDist) : (b.has("x") && (d.dx = this._dx), b.has("y") && (d.dy = this._dy));
                b.has("angle") && (d.da = this._dAngle, d.lka = this._lastKnownAngle);
                if (b.has("width-abs") || b.has("width-scale")) d.dw =
                    this._dWidth;
                if (b.has("height-abs") || b.has("height-scale")) d.dh = this._dHeight;
                b.has("z") && (d.dz = this._dz)
            }
            return d
        }
        LoadFromJson(b) {
            const a = b.m,
                d = this._propSet;
            d.clear();
            this._pinUid = b.uid;
            if ("number" === typeof a) this._LoadFromJson_Legacy(b);
            else if (this._mode = a, "rope" === a || "bar" === a) this._pinDist = b.pd;
            else if ("properties" === a) {
                for (const c of b.ps) d.add(c);
                d.has("imagepoint") ? this._pinImagePoint = b.ip : d.has("x") && d.has("y") ? (this._pinAngle = b.pa, this._pinDist = b.pd) : (d.has("x") && (this._dx = b.dx), d.has("y") &&
                    (this._dy = b.dy));
                d.has("angle") && (this._dAngle = b.da, this._lastKnownAngle = b.lka || 0);
                if (d.has("width-abs") || d.has("width-scale")) this._dWidth = b.dw;
                if (d.has("height-abs") || d.has("height-scale")) this._dHeight = b.dh;
                d.has("z") && (this._dz = b.dz)
            }
        }
        _LoadFromJson_Legacy(b) {
            const a = this._propSet,
                d = b.msa,
                c = b.tsa,
                f = b.pa,
                k = b.pd;
            switch (b.m) {
                case 0:
                    this._mode = "properties";
                    a.add("x").add("y").add("angle");
                    this._pinAngle = f;
                    this._pinDist = k;
                    this._dAngle = d - c;
                    this._lastKnownAngle = b.lka;
                    break;
                case 1:
                    this._mode = "properties";
                    a.add("x").add("y");
                    this._pinAngle = f;
                    this._pinDist = k;
                    break;
                case 2:
                    this._mode = "properties";
                    a.add("angle");
                    this._dAngle = d - c;
                    this._lastKnownAngle = b.lka;
                    break;
                case 3:
                    this._mode = "rope";
                    this._pinDist = b.pd;
                    break;
                case 4:
                    this._mode = "bar", this._pinDist = b.pd
            }
        }
        _OnAfterLoad() {
            -1 === this._pinUid ? this._SetPinInst(null) : (this._SetPinInst(this._runtime.GetInstanceByUID(this._pinUid)), this._pinUid = -1)
        }
        _OnInstanceDestroyed(b) {
            this._pinInst === b && (this._SetPinInst(null), this._destroy && this._runtime.DestroyInstance(this._inst))
        }
        Tick2() {
            var b =
                this._pinInst;
            if (b) {
                var a = b.GetWorldInfo(),
                    d = this._inst.GetWorldInfo(),
                    c = this._mode,
                    f = !1;
                if ("rope" === c || "bar" === c) {
                    if (b = e.distanceTo(d.GetX(), d.GetY(), a.GetX(), a.GetY()), b > this._pinDist || "bar" === c && b < this._pinDist) f = e.angleTo(a.GetX(), a.GetY(), d.GetX(), d.GetY()), d.SetXY(a.GetX() + Math.cos(f) * this._pinDist, a.GetY() + Math.sin(f) * this._pinDist), f = !0
                } else {
                    c = this._propSet;
                    if (c.has("imagepoint")) {
                        const [k, g] = b.GetImagePoint(this._pinImagePoint);
                        d.EqualsXY(k, g) || (d.SetXY(k, g), f = !0)
                    } else if (c.has("x") && c.has("y")) {
                        b =
                            a.GetX() + Math.cos(a.GetAngle() + this._pinAngle) * this._pinDist;
                        const k = a.GetY() + Math.sin(a.GetAngle() + this._pinAngle) * this._pinDist;
                        d.EqualsXY(b, k) || (d.SetXY(b, k), f = !0)
                    } else b = a.GetX() + this._dx, c.has("x") && b !== d.GetX() && (d.SetX(b), f = !0), b = a.GetY() + this._dy, c.has("y") && b !== d.GetY() && (d.SetY(b), f = !0);
                    c.has("angle") && (this._lastKnownAngle !== d.GetAngle() && (this._dAngle = e.clampAngle(this._dAngle + (d.GetAngle() - this._lastKnownAngle))), b = e.clampAngle(a.GetAngle() + this._dAngle), b !== d.GetAngle() && (d.SetAngle(b),
                        f = !0), this._lastKnownAngle = d.GetAngle());
                    c.has("width-abs") && (b = a.GetWidth() + this._dWidth, b !== d.GetWidth() && (d.SetWidth(b), f = !0));
                    c.has("width-scale") && (b = a.GetWidth() * this._dWidth, b !== d.GetWidth() && (d.SetWidth(b), f = !0));
                    c.has("height-abs") && (b = a.GetHeight() + this._dHeight, b !== d.GetHeight() && (d.SetHeight(b), f = !0));
                    c.has("height-scale") && (b = a.GetHeight() * this._dHeight, b !== d.GetHeight() && (d.SetHeight(b), f = !0));
                    c.has("z") && (b = a.GetZElevation() + this._dz, b !== d.GetZElevation() && (d.SetZElevation(b), this._runtime.UpdateRender()))
                }
                f &&
                    d.SetBboxChanged()
            }
        }
        GetDebuggerProperties() {
            return [{
                title: "$" + this.GetBehaviorType().GetName(),
                properties: [{
                    name: "behaviors.pin.debugger.is-pinned",
                    value: !!this._pinInst
                }, {
                    name: "behaviors.pin.debugger.pinned-uid",
                    value: this._pinInst ? this._pinInst.GetUID() : 0
                }]
            }]
        }
    }
}
"use strict";
self.C3.Behaviors.Pin.Cnds = {
    IsPinned() {
        return !!this._pinInst
    },
    WillDestroy() {
        return this._destroy
    }
};
"use strict";
self.C3.Behaviors.Pin.Acts = {
    PinByDistance(e, b) {
        this._Pin(e, 0 === b ? "rope" : "bar")
    },
    PinByProperties(e, b, a, d, c, f, k) {
        const g = [];
        b && g.push("x");
        a && g.push("y");
        d && g.push("angle");
        k && g.push("z");
        1 === c ? g.push("width-abs") : 2 === c && g.push("width-scale");
        1 === f ? g.push("height-abs") : 2 === f && g.push("height-scale");
        0 !== g.length && this._Pin(e, "properties", g)
    },
    PinByImagePoint(e, b, a, d, c, f) {
        const k = ["imagepoint"];
        a && k.push("angle");
        f && k.push("z");
        1 === d ? k.push("width-abs") : 2 === d && k.push("width-scale");
        1 === c ? k.push("height-abs") :
            2 === c && k.push("height-scale");
        this._pinImagePoint = b;
        this._Pin(e, "properties", k)
    },
    SetPinDistance(e) {
        if ("rope" === this._mode || "bar" === this._mode) this._pinDist = Math.max(e, 0)
    },
    SetDestroy(e) {
        this._destroy = e
    },
    Unpin() {
        this._SetPinInst(null);
        this._mode = "";
        this._propSet.clear();
        this._pinImagePoint = ""
    },
    Pin(e, b) {
        switch (b) {
            case 0:
                this._Pin(e, "properties", ["x", "y", "angle"]);
                break;
            case 1:
                this._Pin(e, "properties", ["x", "y"]);
                break;
            case 2:
                this._Pin(e, "properties", ["angle"]);
                break;
            case 3:
                this._Pin(e, "rope");
                break;
            case 4:
                this._Pin(e,
                    "bar")
        }
    }
};
"use strict";
self.C3.Behaviors.Pin.Exps = {
    PinnedUID() {
        return this._pinInst ? this._pinInst.GetUID() : -1
    }
}; {
    "use strict";
    const e = self.C3;
    e.Behaviors.Bullet = class extends e.SDKBehaviorBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Bullet.Type = class extends e.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = self.IBehaviorInstance;
    e.Behaviors.Bullet.Instance = class extends e.SDKBehaviorInstanceBase {
        constructor(c, f) {
            super(c);
            c = this.GetWorldInfo();
            this._g = this._acc = this._speed = 0;
            this._isStepping = this._setAngle = this._bounceOffSolid = !1;
            this._isEnabled = !0;
            this._dy = this._dx = 0;
            this._lastX = c.GetX();
            this._lastY = c.GetY();
            this._lastKnownAngle = c.GetAngle();
            this._travelled = 0;
            this._stepSize = Math.min(Math.abs(c.GetWidth()), Math.abs(c.GetHeight()) / 2);
            this._stopStepping = !1;
            f &&
                (this._speed = f[0], this._acc = f[1], this._g = f[2], this._bounceOffSolid = !!f[3], this._setAngle = !!f[4], this._isStepping = !!f[5], this._isEnabled = !!f[6]);
            f = c.GetAngle();
            this._dx = Math.cos(f) * this._speed;
            this._dy = Math.sin(f) * this._speed;
            this._isEnabled && (this._StartTicking(), this._bounceOffSolid && this._StartPostTicking())
        }
        Release() {
            super.Release()
        }
        SaveToJson() {
            const c = {
                dx: this._dx,
                dy: this._dy,
                lx: this._lastX,
                ly: this._lastY,
                lka: this._lastKnownAngle,
                t: this._travelled
            };
            0 !== this._acc && (c.acc = this._acc);
            0 !== this._g &&
                (c.g = this._g);
            this._isStepping && (c.st = this._isStepping);
            this._isEnabled || (c.e = this._isEnabled);
            this._bounceOffSolid && (c.bos = this._bounceOffSolid);
            this._setAngle && (c.sa = this._setAngle);
            return c
        }
        LoadFromJson(c) {
            this._dx = c.dx;
            this._dy = c.dy;
            this._lastX = c.lx;
            this._lastY = c.ly;
            this._lastKnownAngle = c.lka;
            this._travelled = c.t;
            this._acc = c.hasOwnProperty("acc") ? c.acc : 0;
            this._g = c.hasOwnProperty("g") ? c.g : 0;
            this._isStepping = c.hasOwnProperty("st") ? c.st : !1;
            this._bounceOffSolid = c.hasOwnProperty("bos") ? c.bos : !1;
            this._setAngle =
                c.hasOwnProperty("sa") ? c.sa : !1;
            this._SetEnabled(c.hasOwnProperty("e") ? c.e : !0)
        }
        Tick() {
            if (this._isEnabled) {
                var c = this._runtime.GetDt(this._inst),
                    f = this._inst.GetWorldInfo();
                if (f.GetAngle() !== this._lastKnownAngle) {
                    var k = f.GetAngle();
                    if (this._setAngle) {
                        var g = e.distanceTo(0, 0, this._dx, this._dy);
                        this._dx = Math.cos(k) * g;
                        this._dy = Math.sin(k) * g
                    }
                    this._lastKnownAngle = k
                }
                k = g = 0;
                if (0 !== this._acc) {
                    let l = e.distanceTo(0, 0, this._dx, this._dy),
                        m;
                    m = 0 === this._dx && 0 === this._dy ? f.GetAngle() : e.angleTo(0, 0, this._dx, this._dy);
                    l += this._acc * c;
                    g = Math.cos(m) * this._acc;
                    k = Math.sin(m) * this._acc;
                    0 > l && (k = g = l = 0);
                    this._dx = Math.cos(m) * l;
                    this._dy = Math.sin(m) * l
                }
                0 !== this._g && (this._dy += this._g * c, k += this._g);
                this._lastX = f.GetX();
                this._lastY = f.GetY();
                if (0 !== this._dx || 0 !== this._dy) g = this._dx * c + .5 * g * c * c, c = this._dy * c + .5 * k * c * c, k = e.distanceTo(0, 0, g, c), this._MoveBy(g, c, k), this._travelled += k, !this._setAngle || 0 === g && 0 === c || (c = e.angleTo(0, 0, g, c), f.SetAngle(c), this._lastKnownAngle = f.GetAngle()), f.SetBboxChanged()
            }
        }
        _MoveBy(c, f, k) {
            const g = this.GetWorldInfo();
            if (!this._isStepping || k <= this._stepSize) g.OffsetXY(c, f), g.SetBboxChanged(), this._isStepping && this.Trigger(e.Behaviors.Bullet.Cnds.OnStep);
            else {
                this._stopStepping = !1;
                var l = g.GetX(),
                    m = g.GetY(),
                    u = l + c,
                    x = m + f;
                f = e.angleTo(0, 0, c, f);
                c = Math.cos(f) * this._stepSize;
                f = Math.sin(f) * this._stepSize;
                k = Math.floor(k / this._stepSize);
                for (let p = 1; p <= k; ++p)
                    if (g.SetXY(l + c * p, m + f * p), g.SetBboxChanged(), this.Trigger(e.Behaviors.Bullet.Cnds.OnStep), this._inst.IsDestroyed() || this._stopStepping) return;
                g.SetXY(u, x);
                g.SetBboxChanged();
                this.Trigger(e.Behaviors.Bullet.Cnds.OnStep)
            }
        }
        PostTick() {
            if (this._isEnabled && this._bounceOffSolid && (0 !== this._dx || 0 !== this._dy)) {
                var c = this._runtime.GetDt(this._inst),
                    f = this._inst.GetWorldInfo(),
                    k = this._runtime.GetCollisionEngine(),
                    g = k.TestOverlapSolid(this._inst);
                if (g) {
                    k.RegisterCollision(this._inst, g);
                    g = e.distanceTo(0, 0, this._dx, this._dy);
                    const l = k.CalculateBounceAngle(this._inst, this._lastX, this._lastY);
                    this._dx = Math.cos(l) * g;
                    this._dy = Math.sin(l) * g;
                    f.OffsetXY(this._dx * c, this._dy * c);
                    f.SetBboxChanged();
                    this._setAngle && (f.SetAngle(l), this._lastKnownAngle = f.GetAngle(), f.SetBboxChanged());
                    k.PushOutSolid(this._inst, this._dx / g, this._dy / g, Math.max(2.5 * g * c, 30)) || k.PushOutSolidNearest(this._inst, 100)
                }
            }
        }
        GetPropertyValueByIndex(c) {
            switch (c) {
                case 0:
                    return this._GetSpeed();
                case 1:
                    return this._GetAcceleration();
                case 2:
                    return this._GetGravity();
                case 4:
                    return this._setAngle;
                case 5:
                    return this._isStepping;
                case 6:
                    return this._IsEnabled()
            }
        }
        SetPropertyValueByIndex(c, f) {
            switch (c) {
                case 0:
                    this._SetSpeed(f);
                    break;
                case 1:
                    this._acc =
                        f;
                    break;
                case 2:
                    this._g = f;
                    break;
                case 4:
                    this._setAngle = !!f;
                    break;
                case 5:
                    this._isStepping = !!f;
                    break;
                case 6:
                    this._SetEnabled(!!f)
            }
        }
        _SetSpeed(c) {
            const f = e.angleTo(0, 0, this._dx, this._dy);
            this._dx = Math.cos(f) * c;
            this._dy = Math.sin(f) * c
        }
        _GetSpeed() {
            return e.round6dp(e.distanceTo(0, 0, this._dx, this._dy))
        }
        _SetAcceleration(c) {
            this._acc = c
        }
        _GetAcceleration() {
            return this._acc
        }
        _SetGravity(c) {
            this._g = c
        }
        _GetGravity() {
            return this._g
        }
        _SetAngleOfMotion(c) {
            const f = e.distanceTo(0, 0, this._dx, this._dy);
            this._dx = Math.cos(c) *
                f;
            this._dy = Math.sin(c) * f
        }
        _GetAngleOfMotion() {
            return e.angleTo(0, 0, this._dx, this._dy)
        }
        _SetBounceOffSolids(c) {
            c = !!c;
            this._bounceOffSolid !== c && (this._bounceOffSolid = c, this._isEnabled && (this._bounceOffSolid ? this._StartPostTicking() : this._StopPostTicking()))
        }
        _IsBounceOffSolids() {
            return this._bounceOffSolid
        }
        _SetDistanceTravelled(c) {
            this._travelled = c
        }
        _GetDistanceTravelled() {
            return this._travelled
        }
        _SetEnabled(c) {
            (this._isEnabled = !!c) ? (this._StartTicking(), this._bounceOffSolid && this._StartPostTicking()) : (this._StopTicking(),
                this._StopPostTicking())
        }
        _IsEnabled() {
            return this._isEnabled
        }
        GetDebuggerProperties() {
            return [{
                title: "$" + this.GetBehaviorType().GetName(),
                properties: [{
                        name: "behaviors.bullet.debugger.vector-x",
                        value: this._dx,
                        onedit: c => this._dx = c
                    }, {
                        name: "behaviors.bullet.debugger.vector-y",
                        value: this._dy,
                        onedit: c => this._dy = c
                    }, {
                        name: "behaviors.bullet.properties.speed.name",
                        value: this._GetSpeed(),
                        onedit: c => this._SetSpeed(c)
                    }, {
                        name: "behaviors.bullet.debugger.angle-of-motion",
                        value: e.toDegrees(this._GetAngleOfMotion())
                    },
                    {
                        name: "behaviors.bullet.properties.gravity.name",
                        value: this._GetGravity(),
                        onedit: c => this._SetGravity(c)
                    }, {
                        name: "behaviors.bullet.properties.acceleration.name",
                        value: this._GetAcceleration(),
                        onedit: c => this._SetAcceleration(c)
                    }, {
                        name: "behaviors.bullet.debugger.distance-travelled",
                        value: this._GetDistanceTravelled()
                    }, {
                        name: "behaviors.bullet.properties.enabled.name",
                        value: this._IsEnabled(),
                        onedit: c => this._SetEnabled(c)
                    }
                ]
            }]
        }
        GetScriptInterfaceClass() {
            return self.IBulletBehaviorInstance
        }
    };
    const d = new WeakMap;
    self.IBulletBehaviorInstance = class extends a {
        constructor() {
            super();
            d.set(this, a._GetInitInst().GetSdkInstance())
        }
        get speed() {
            return d.get(this)._GetSpeed()
        }
        set speed(c) {
            b.RequireFiniteNumber(c);
            d.get(this)._SetSpeed(c)
        }
        get acceleration() {
            return d.get(this)._GetAcceleration()
        }
        set acceleration(c) {
            b.RequireFiniteNumber(c);
            d.get(this)._SetAcceleration(c)
        }
        get gravity() {
            return d.get(this)._GetGravity()
        }
        set gravity(c) {
            b.RequireFiniteNumber(c);
            d.get(this)._SetGravity(c)
        }
        get angleOfMotion() {
            return d.get(this)._GetAngleOfMotion()
        }
        set angleOfMotion(c) {
            b.RequireFiniteNumber(c);
            d.get(this)._SetAngleOfMotion(c)
        }
        get bounceOffSolids() {
            return d.get(this)._IsBounceOffSolids()
        }
        set bounceOffSolids(c) {
            d.get(this)._SetBounceOffSolids(!!c)
        }
        get distanceTravelled() {
            return d.get(this)._GetDistanceTravelled()
        }
        set distanceTravelled(c) {
            b.RequireFiniteNumber(c);
            d.get(this)._SetDistanceTravelled(c)
        }
        get isEnabled() {
            return d.get(this)._IsEnabled()
        }
        set isEnabled(c) {
            d.get(this)._SetEnabled(c)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Bullet.Cnds = {
        CompareSpeed(b, a) {
            return e.compare(Math.sqrt(this._dx * this._dx + this._dy * this._dy), b, a)
        },
        CompareTravelled(b, a) {
            return e.compare(this._GetDistanceTravelled(), b, a)
        },
        OnStep() {
            return !0
        },
        IsEnabled() {
            return this._IsEnabled()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Bullet.Acts = {
        SetSpeed(b) {
            this._SetSpeed(b)
        },
        SetAcceleration(b) {
            this._SetAcceleration(b)
        },
        SetGravity(b) {
            this._SetGravity(b)
        },
        SetAngleOfMotion(b) {
            this._SetAngleOfMotion(e.toRadians(b))
        },
        Bounce(b) {
            if (b && (b = b.GetFirstPicked(this._inst))) {
                var a = this._inst.GetWorldInfo(),
                    d = this._runtime.GetCollisionEngine(),
                    c = this._runtime.GetDt(this._inst),
                    f = e.distanceTo(0, 0, this._dx, this._dy),
                    k = d.CalculateBounceAngle(this._inst, this._lastX, this._lastY, b);
                this._dx = Math.cos(k) *
                    f;
                this._dy = Math.sin(k) * f;
                a.OffsetXY(this._dx * c, this._dy * c);
                a.SetBboxChanged();
                this._setAngle && (a.SetAngle(k), this._lastKnownAngle = a.GetAngle(), a.SetBboxChanged());
                0 !== f && (this._bounceOffSolid ? d.PushOutSolid(this._inst, this._dx / f, this._dy / f, Math.max(2.5 * f * c, 30)) || d.PushOutSolidNearest(this._inst, 100) : d.PushOut(this._inst, this._dx / f, this._dy / f, Math.max(2.5 * f * c, 30), b))
            }
        },
        SetBounceOffSolids(b) {
            this._SetBounceOffSolids(b)
        },
        SetDistanceTravelled(b) {
            this._SetDistanceTravelled(b)
        },
        SetEnabled(b) {
            this._SetEnabled(b)
        },
        StopStepping() {
            this._stopStepping = !0
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Bullet.Exps = {
        Speed() {
            return this._GetSpeed()
        },
        Acceleration() {
            return this._GetAcceleration()
        },
        AngleOfMotion() {
            return e.toDegrees(this._GetAngleOfMotion())
        },
        DistanceTravelled() {
            return this._GetDistanceTravelled()
        },
        Gravity() {
            return this._GetGravity()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.wrap = class extends e.SDKBehaviorBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.wrap.Type = class extends e.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3,
        b = new e.Rect;
    e.Behaviors.wrap.Instance = class extends e.SDKBehaviorInstanceBase {
        constructor(a, d) {
            super(a);
            this._mode = 0;
            d && (this._mode = d[0]);
            this._StartTicking()
        }
        Release() {
            super.Release()
        }
        SaveToJson() {
            return {
                m: this._mode
            }
        }
        LoadFromJson(a) {
            this._mode = a.m
        }
        Tick() {
            const a = this._inst.GetWorldInfo(),
                d = a.GetLayer(),
                c = d.GetLayout(),
                f = a.GetBoundingBox();
            0 === this._mode ? b.set(0, 0, c.GetWidth(), c.GetHeight()) : b.copy(d.GetViewport());
            f.getRight() < b.getLeft() ? (a.SetX(b.getRight() - 1 + (a.GetX() -
                f.getLeft())), a.SetBboxChanged()) : f.getLeft() > b.getRight() ? (a.SetX(b.getLeft() + 1 - (f.getRight() - a.GetX())), a.SetBboxChanged()) : f.getBottom() < b.getTop() ? (a.SetY(b.getBottom() - 1 + (a.GetY() - f.getTop())), a.SetBboxChanged()) : f.getTop() > b.getBottom() && (a.SetY(b.getTop() + 1 - (f.getBottom() - a.GetY())), a.SetBboxChanged())
        }
        GetPropertyValueByIndex(a) {
            switch (a) {
                case 0:
                    return this._mode
            }
        }
        SetPropertyValueByIndex(a, d) {
            switch (a) {
                case 0:
                    this._mode = d
            }
        }
    }
}
"use strict";
self.C3.Behaviors.wrap.Cnds = {};
"use strict";
self.C3.Behaviors.wrap.Acts = {};
"use strict";
self.C3.Behaviors.wrap.Exps = {}; {
    "use strict";
    const e = self.C3;
    e.Behaviors.Fade = class extends e.SDKBehaviorBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Fade.Type = class extends e.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Fade.Instance = class extends e.SDKBehaviorInstanceBase {
        constructor(b, a) {
            super(b);
            this._fadeOutTime = this._waitTime = this._fadeInTime = 0;
            this._activeAtStart = this._destroy = !0;
            this._setMaxOpacity = !1;
            this._stage = 0;
            this._stageTime = e.New(e.KahanSum);
            this._maxOpacity = this._inst.GetWorldInfo().GetOpacity() || 1;
            a && (this._fadeInTime = a[0], this._waitTime = a[1], this._fadeOutTime = a[2], this._destroy = !!a[3], this._stage = (this._activeAtStart = !!a[4]) ? 0 : 3);
            this._activeAtStart && (0 ===
                this._fadeInTime ? (this._stage = 1, 0 === this._waitTime && (this._stage = 2)) : (this._inst.GetWorldInfo().SetOpacity(0), this._runtime.UpdateRender()));
            this._StartTicking()
        }
        Release() {
            super.Release()
        }
        SaveToJson() {
            return {
                fit: this._fadeInTime,
                wt: this._waitTime,
                fot: this._fadeOutTime,
                d: this._destroy,
                s: this._stage,
                st: this._stageTime.Get(),
                mo: this._maxOpacity
            }
        }
        LoadFromJson(b) {
            this._fadeInTime = b.fit;
            this._waitTime = b.wt;
            this._fadeOutTime = b.fot;
            this._destroy = b.d;
            this._stage = b.s;
            this._stageTime.Set(b.st);
            this._maxOpacity =
                b.mo
        }
        Tick() {
            var b = this._runtime.GetDt(this._inst);
            this._stageTime.Add(b);
            b = this._inst.GetWorldInfo();
            0 === this._stage && (b.SetOpacity(this._stageTime.Get() / this._fadeInTime * this._maxOpacity), this._runtime.UpdateRender(), b.GetOpacity() >= this._maxOpacity && (b.SetOpacity(this._maxOpacity), this._stage = 1, this._stageTime.Reset(), this.Trigger(e.Behaviors.Fade.Cnds.OnFadeInEnd)));
            1 === this._stage && this._stageTime.Get() >= this._waitTime && (this._stage = 2, this._stageTime.Reset(), this.Trigger(e.Behaviors.Fade.Cnds.OnWaitEnd));
            2 === this._stage && 0 !== this._fadeOutTime && (b.SetOpacity(this._maxOpacity - this._stageTime.Get() / this._fadeOutTime * this._maxOpacity), this._runtime.UpdateRender(), 0 >= b.GetOpacity() && (this._stage = 3, this._stageTime.Reset(), this.Trigger(e.Behaviors.Fade.Cnds.OnFadeOutEnd), this._destroy && this._runtime.DestroyInstance(this._inst)))
        }
        Start() {
            this._stage = 0;
            this._stageTime.Reset();
            0 === this._fadeInTime ? (this._stage = 1, 0 === this._waitTime && (this._stage = 2)) : (this._inst.GetWorldInfo().SetOpacity(0), this._runtime.UpdateRender())
        }
        GetPropertyValueByIndex(b) {
            switch (b) {
                case 0:
                    return this._fadeInTime;
                case 1:
                    return this._waitTime;
                case 2:
                    return this._fadeOutTime;
                case 3:
                    return this._destroy
            }
        }
        SetPropertyValueByIndex(b, a) {
            switch (b) {
                case 0:
                    this._fadeInTime = a;
                    break;
                case 1:
                    this._waitTime = a;
                    break;
                case 2:
                    this._fadeOutTime = a;
                    break;
                case 3:
                    this._destroy = !!a
            }
        }
        GetDebuggerProperties() {
            return [{
                title: "$" + this.GetBehaviorType().GetName(),
                properties: [{
                    name: "behaviors.fade.properties.fade-in-time.name",
                    value: this._fadeInTime,
                    onedit: b => this._fadeInTime = b
                }, {
                    name: "behaviors.fade.properties.wait-time.name",
                    value: this._waitTime,
                    onedit: b => this._waitTime = b
                }, {
                    name: "behaviors.fade.properties.fade-out-time.name",
                    value: this._fadeOutTime,
                    onedit: b => this._fadeOutTime = b
                }, {
                    name: "behaviors.fade.debugger.stage",
                    value: ["behaviors.fade.debugger." + ["fade-in", "wait", "fade-out", "done"][this._stage]]
                }]
            }]
        }
    }
}
"use strict";
self.C3.Behaviors.Fade.Cnds = {
    OnFadeOutEnd() {
        return !0
    },
    OnFadeInEnd() {
        return !0
    },
    OnWaitEnd() {
        return !0
    }
};
"use strict";
self.C3.Behaviors.Fade.Acts = {
    StartFade() {
        this._activeAtStart || this._setMaxOpacity || (this._maxOpacity = this._inst.GetWorldInfo().GetOpacity() || 1, this._setMaxOpacity = !0);
        3 === this._stage && this.Start()
    },
    RestartFade() {
        this.Start()
    },
    SetFadeInTime(e) {
        0 > e && (e = 0);
        this._fadeInTime = e
    },
    SetWaitTime(e) {
        0 > e && (e = 0);
        this._waitTime = e
    },
    SetFadeOutTime(e) {
        0 > e && (e = 0);
        this._fadeOutTime = e
    }
};
"use strict";
self.C3.Behaviors.Fade.Exps = {
    FadeInTime() {
        return this._fadeInTime
    },
    WaitTime() {
        return this._waitTime
    },
    FadeOutTime() {
        return this._fadeOutTime
    }
}; {
    "use strict";
    const e = self.C3;
    e.Behaviors.scrollto = class extends e.SDKBehaviorBase {
        constructor(b) {
            super(b);
            this._shakeMode = this._shakeEnd = this._shakeStart = this._shakeMag = 0
        }
        Release() {
            super.Release()
        }
        SetShakeMagnitude(b) {
            this._shakeMag = b
        }
        GetShakeMagnitude() {
            return this._shakeMag
        }
        SetShakeStart(b) {
            this._shakeStart = b
        }
        GetShakeStart() {
            return this._shakeStart
        }
        SetShakeEnd(b) {
            this._shakeEnd = b
        }
        GetShakeEnd() {
            return this._shakeEnd
        }
        SetShakeMode(b) {
            this._shakeMode = b
        }
        GetShakeMode() {
            return this._shakeMode
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.scrollto.Type = class extends e.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.scrollto.Instance = class extends e.SDKBehaviorInstanceBase {
        constructor(b, a) {
            super(b);
            this._isEnabled = !0;
            a && (this._isEnabled = a[0]);
            this._isEnabled && this._StartTicking2()
        }
        Release() {
            super.Release()
        }
        SaveToJson() {
            const b = this.GetBehavior();
            return {
                e: this._isEnabled,
                smg: b.GetShakeMagnitude(),
                ss: b.GetShakeStart(),
                se: b.GetShakeEnd(),
                smd: b.GetShakeMode()
            }
        }
        LoadFromJson(b) {
            const a = this.GetBehavior();
            a.SetShakeMagnitude(b.smg);
            a.SetShakeStart(b.ss);
            a.SetShakeEnd(b.se);
            a.SetShakeMode(b.smd);
            (this._isEnabled = b.e) ? this._StartTicking2(): this._StopTicking2()
        }
        IsEnabled() {
            return this._isEnabled
        }
        Tick2() {
            if (this.IsEnabled()) {
                this._runtime.GetDt(this._inst);
                var b = this.GetBehavior(),
                    a = b.GetInstances(),
                    d = 0,
                    c = 0,
                    f = 0;
                for (var k of a)(a = k.GetBehaviorInstanceFromCtor(e.Behaviors.scrollto)) && a.GetSdkInstance().IsEnabled() && (a = k.GetWorldInfo(), d += a.GetX(), c += a.GetY(), ++f);
                k = this._inst.GetWorldInfo().GetLayout();
                var g = this._runtime.GetGameTime(),
                    l = a = 0;
                g >= b.GetShakeStart() && g < b.GetShakeEnd() &&
                    (a = b.GetShakeMagnitude() * Math.min(this._runtime.GetTimeScale(), 1), 0 === b.GetShakeMode() && (a *= 1 - (g - b.GetShakeStart()) / (b.GetShakeEnd() - b.GetShakeStart())), b = this._runtime.Random() * Math.PI * 2, g = this._runtime.Random() * a, a = Math.cos(b) * g, l = Math.sin(b) * g);
                k.SetScrollX(d / f + a);
                k.SetScrollY(c / f + l)
            }
        }
        GetPropertyValueByIndex(b) {
            switch (b) {
                case 0:
                    return this._isEnabled
            }
        }
        SetPropertyValueByIndex(b, a) {
            switch (b) {
                case 0:
                    (this._isEnabled = !!a) ? this._StartTicking2(): this._StopTicking2()
            }
        }
    }
}
"use strict";
self.C3.Behaviors.scrollto.Cnds = {
    IsEnabled() {
        return this._isEnabled
    }
};
"use strict";
self.C3.Behaviors.scrollto.Acts = {
    Shake(e, b, a) {
        const d = this.GetBehavior();
        d.SetShakeMagnitude(e);
        d.SetShakeStart(this._runtime.GetGameTime());
        d.SetShakeEnd(this._runtime.GetGameTime() + b);
        d.SetShakeMode(a)
    },
    SetEnabled(e) {
        (this._isEnabled = 0 !== e) ? this._StartTicking2(): this._StopTicking2()
    }
};
"use strict";
self.C3.Behaviors.scrollto.Exps = {}; {
    "use strict";
    const e = self.C3;
    e.Behaviors.Tween = class extends e.SDKBehaviorBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Tween.Type = class extends e.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3,
        b = e.Behaviors.Tween;
    b.Instance = class extends e.SDKBehaviorInstanceBase {
        constructor(a, d) {
            super(a);
            this._allowMultiple = !1;
            this._enabled = !0;
            d && (this._allowMultiple = !1, this._enabled = !!d[0]);
            this._activeTweens = new Map;
            this._disabledTweens = [];
            this._waitingForReleaseTweens = new Map;
            this._waitingForReleaseTweensJson = this._disabledTweensJson = this._activeTweensJson = this._finishingTween = null;
            this._finishingTweenName = "";
            this._enabled && this._StartTicking2();
            this._afterLoad = c => this._OnAfterLoad(c);
            this.GetRuntime().Dispatcher().addEventListener("afterload", this._afterLoad)
        }
        Release() {
            this.GetRuntime().Dispatcher().removeEventListener("afterload", this._afterLoad);
            this._afterLoad = null;
            this._finishingTween && (this.ReleaseAndCompleteTween(this._finishingTween), this._finishingTween = null);
            this.ReleaseAndCompleteTweens();
            this._tweens = null;
            this.ClearDisabledList();
            this._disabledTweens = null;
            this._ReleaseWaitingTweens();
            this._waitingForReleaseTweens = null;
            super.Release()
        }
        SetEnabled(a) {
            (this._enabled = a) ?
            this._StartTicking2(): this._StopTicking2()
        }
        GetEnabled() {
            return this._enabled
        }
        AddToDisabledList(a) {
            this._disabledTweens.push(a)
        }
        IsInDisabledList(a) {
            return this._disabledTweens.includes(a)
        }
        ClearDisabledList() {
            e.clearArray(this._disabledTweens)
        }
        GetFinishingTween() {
            return this._finishingTween
        }
        IsInstanceValid() {
            const a = this.GetObjectInstance();
            return a ? !a.IsDestroyed() : !1
        }
        GetTween(a, d, c = !1) {
            if ((d = d ? this.PropertyTweens(d, c) : this.AllTweens(c)) && d.length)
                for (const f of d)
                    if (f.HasTags(a)) return f
        }
        GetTweenIncludingWaitingForRelease(a,
            d) {
            return this.GetTween(a, d, !0)
        }* GetTweens(a, d, c = !1) {
            if ((d = d ? this.PropertyTweens(d, c) : this.AllTweens(c)) && d.length)
                for (const f of d) f.HasTags(a) && (yield f)
        }* GetTweensIncludingWaitingForRelease(a, d) {
            yield* this.GetTweens(a, d, !0)
        }
        PropertyTweens(a, d) {
            if (d) return d = this._activeTweens.get(a), a = this._waitingForReleaseTweens.get(a), d || (d = []), a || (a = []), d.concat(a).filter(c => c);
            (a = this._activeTweens.get(a)) || (a = []);
            return a.filter(c => c)
        }
        AllTweens(a) {
            if (a) {
                a = [...this._activeTweens.values()].flat();
                const d = [...this._waitingForReleaseTweens.values()].flat();
                return a.concat(d).filter(c => c)
            }
            return [...this._activeTweens.values()].flat().filter(d => d)
        }
        AllTweensIncludingWaitingForRelease() {
            return this.AllTweens(!0)
        }
        SaveToJson() {
            return {
                s: !1,
                e: !!this._enabled,
                at: this._SaveActiveTweensToJson(),
                dt: this._SaveDisabledTweensToJson(),
                wt: this._SaveWaitingForReleaseTweensToJson(),
                ft: this._SaveFinishingTweenToJson()
            }
        }
        LoadFromJson(a) {
            a && (this._activeTweensJson = a.at, this._disabledTweensJson = a.dt, this._waitingForReleaseTweensJson = a.wt, this._finishingTweenName = a.ft, this._allowMultiple = !1, this._enabled = !!a.e)
        }
        _OnAfterLoad(a) {
            a = this.GetRuntime().GetTimelineManager();
            this._PopulateTweenMap(this._activeTweensJson, this._activeTweens, a);
            if (this._disabledTweensJson) {
                e.clearArray(this._disabledTweens);
                for (const d of this._disabledTweensJson) this._PopulateTweenArray(this._disabledTweens, d, a)
            }
            this._PopulateTweenMap(this._waitingForReleaseTweensJson, this._waitingForReleaseTweens, a);
            this._finishingTween = this._GetTween(this._finishingTweenName, a);
            this._enabled ? this._StartTicking2() : this._StopTicking2()
        }
        _PopulateTweenMap(a,
            d, c) {
            if (a)
                for (const k in a) {
                    let g = d.get(k);
                    g ? e.clearArray(g) : g = [];
                    var f = a[k];
                    for (const l of f) this._PopulateTweenArray(g, l.name, c) ? this._LoadTweenFromJson(l.name, l, c) : (f = e.Tween.Build({
                        runtime: this.GetRuntime(),
                        json: l
                    }), f.AddCompletedCallback(m => this._FinishTriggers(m)), c.AddScheduledTimeline(f), this._PopulateTweenArray(g, f, c));
                    d.set(k, g)
                }
        }
        _GetTween(a, d) {
            return d.GetScheduledOrPlayingTimelineByName(a)
        }
        _PopulateTweenArray(a, d, c) {
            if ("string" === typeof d) {
                if (d = this._GetTween(d, c)) return !!a.push(d)
            } else return !!a.push(d);
            return !1
        }
        _LoadTweenFromJson(a, d, c) {
            "string" === typeof a ? (a = this._GetTween(a, c)) && a._LoadFromJson(d) : a._LoadFromJson(d)
        }
        _SaveActiveTweensToJson() {
            const a = {};
            for (const [d, c] of this._activeTweens) a[d] = c.map(f => f._SaveToJson());
            return a
        }
        _SaveDisabledTweensToJson() {
            return this._disabledTweens.map(a => a.GetName())
        }
        _SaveWaitingForReleaseTweensToJson() {
            const a = {};
            for (const [d, c] of this._waitingForReleaseTweens) a[d] = c.map(f => f._SaveToJson());
            return a
        }
        _SaveFinishingTweenToJson() {
            return this._finishingTween ? this._finishingTween.GetName() :
                ""
        }
        Tick2() {
            this._ReleaseWaitingTweens()
        }
        CreateTween(a) {
            var d = b.Config.GetPropertyTracksConfig(a.property, a.startValue, a.endValue, a.ease, a.resultMode, this.GetObjectInstance());
            const c = b.Maps.GetPropertyFromIndex(a.property);
            b.Maps.IsValueId(c) || this.ReleaseTweens(a.property);
            d = e.Tween.Build({
                runtime: this.GetRuntime(),
                id: c,
                tags: a.tags,
                time: a.time,
                instance: this.GetObjectInstance(),
                releaseOnComplete: !!a.releaseOnComplete,
                loop: !!a.loop,
                pingPong: !!a.pingPong,
                initialValueMode: a.initialValueMode,
                propertyTracksConfig: d
            });
            d.AddCompletedCallback(f => this._FinishTriggers(f));
            this._AddTween(d, a.property);
            return d
        }
        ReleaseTween(a, d = !1) {
            var c = a.GetId();
            if (this._activeTweens.has(c) && (c = this._activeTweens.get(c))) {
                const f = c.indexOf(a); - 1 !== f && c.splice(f, 1)
            }
            a.IsReleased() || this._IsInWaitingList(a) || (a.Stop(d), this._AddToWaitingList(a))
        }
        ReleaseTweens(a, d = !1) {
            if (e.IsFiniteNumber(a)) {
                var c = b.Maps.GetPropertyFromIndex(a);
                if (this._activeTweens.has(c)) {
                    c = this._activeTweens.get(c);
                    var f = this.GetFinishingTween();
                    for (var k of c) k ===
                        f || k.IsReleased() || this._IsInWaitingList(k) || (k.Stop(d), k.Release());
                    e.clearArray(c)
                }
            } else {
                k = this.GetFinishingTween();
                for (c of this.AllTweens()) c === k || c.IsReleased() || this._IsInWaitingList(c) || (c.Stop(d), c.Release());
                for (f of this._activeTweens.keys()) e.clearArray(this._activeTweens.get(f)), this._activeTweens.delete(f);
                this._activeTweens.clear()
            }
        }
        ReleaseAndCompleteTween(a) {
            this.ReleaseTween(a, !0)
        }
        ReleaseAndCompleteTweens() {
            this.ReleaseTweens(NaN, !0)
        }
        GetPropertyValueByIndex(a) {
            switch (a) {
                case 0:
                    return this._enabled
            }
        }
        SetPropertyValueByIndex(a,
            d) {
            switch (a) {
                case 0:
                    this._enabled = !!d
            }
        }
        _GetBehaviorType(a) {
            a = a.GetInstance().GetBehaviorInstances();
            for (const d of a)
                if (a = d.GetBehaviorType(), a.GetInstanceSdkCtor() === this.constructor) return a
        }
        Trigger(a, d, c, f) {
            return this._runtime ? super.Trigger(a) : d.Trigger(a, c, f)
        }
        _FinishTriggers(a) {
            this._finishingTween = a;
            b.Cnds.SetFinishingTween(a);
            let d, c;
            if (this.GetRuntime()) d = this._inst, c = this._runtime, this.Trigger(b.Cnds.OnTweensFinished), this.Trigger(b.Cnds.OnAnyTweensFinished), this.ReleaseTween(a);
            else {
                d = a.GetInstance();
                if (!d || d && d.IsDestroyed()) return;
                c = d.GetRuntime();
                const f = this._GetBehaviorType(a);
                this.Trigger(b.Cnds.OnTweensFinished, c, d, f);
                this.Trigger(b.Cnds.OnAnyTweensFinished, c, d, f);
                a.Stop()
            }
            this._finishingTween = null;
            b.Cnds.SetFinishingTween(null);
            a.GetDestroyInstanceOnComplete() && c.DestroyInstance(d)
        }
        _AddTween(a, d) {
            d = b.Maps.GetPropertyFromIndex(d);
            this._activeTweens.has(d) || this._activeTweens.set(d, []);
            this._activeTweens.get(d).push(a)
        }
        _AddToWaitingList(a) {
            const d = a.GetId();
            this._waitingForReleaseTweens.has(d) ||
                this._waitingForReleaseTweens.set(d, []);
            this._waitingForReleaseTweens.get(d).push(a)
        }
        _IsInWaitingList(a) {
            const d = a.GetId();
            return this._waitingForReleaseTweens.has(d) ? this._waitingForReleaseTweens.get(d).includes(a) : !1
        }
        _ReleaseWaitingTweens() {
            if (this._waitingForReleaseTweens.size) {
                for (const a of this._waitingForReleaseTweens.values()) {
                    for (const d of a) d.IsReleased() || d.Release();
                    e.clearArray(a)
                }
                this._waitingForReleaseTweens.clear()
            }
        }
    }
} {
    "use strict";
    const e = self.C3;
    let b = null;
    e.Behaviors.Tween.Cnds = {
        SetFinishingTween(a) {
            b = a
        },
        OnTweensFinished(a) {
            return b.HasTags(a)
        },
        OnAnyTweensFinished() {
            return !0
        },
        IsPlaying(a) {
            return (a = [...this.GetTweensIncludingWaitingForRelease(a)], a.length) ? a.some(e.Tween.IsPlaying) : !1
        },
        IsAnyPlaying() {
            const a = [...this.AllTweensIncludingWaitingForRelease()];
            return a && a.length ? a.some(e.Tween.IsPlaying) : !1
        },
        IsPaused(a) {
            return (a = [...this.GetTweensIncludingWaitingForRelease(a)], a.length) ? a.some(e.Tween.IsPaused) : !1
        },
        IsAnyPaused() {
            const a = [...this.AllTweensIncludingWaitingForRelease()];
            return a && a.length ? a.some(e.Tween.IsPaused) : !1
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.Ease,
        a = e.Behaviors.Tween;
    a.Acts = {
        SetEnabled(d) {
            this.SetEnabled(!!d);
            for (const c of this.AllTweens()) d ? this.IsInDisabledList(c) && c.Resume() : ((c.IsPlaying() || c.IsScheduled()) && this.AddToDisabledList(c), c.Stop());
            d && this.ClearDisabledList()
        },
        async TweenOneProperty(...d) {
            this.GetEnabled() && this.IsInstanceValid() && (d = this.CreateTween(a.TweenArguments.OneProperty(this, ...d)), d.Play() && await d.GetPlayPromise())
        },
        async TweenTwoProperties(...d) {
            this.GetEnabled() && this.IsInstanceValid() &&
                (d = this.CreateTween(a.TweenArguments.TwoProperties(this, ...d)), d.Play() && await d.GetPlayPromise())
        },
        async TweenValue(...d) {
            this.GetEnabled() && this.IsInstanceValid() && (d = this.CreateTween(a.TweenArguments.ValueProperty(this, ...d)), d.Play() && await d.GetPlayPromise())
        },
        PauseTweens(d) {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const c of this.GetTweens(d)) c.Stop()
        },
        PauseAllTweens() {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const d of this.AllTweens()) d.Stop()
        },
        ResumeTweens(d) {
            if (this.GetEnabled() &&
                this.IsInstanceValid())
                for (const c of this.GetTweens(d)) c.Resume()
        },
        ResumeAllTweens() {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const d of this.AllTweens()) d.Resume()
        },
        StopTweens(d) {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const c of this.GetTweens(d)) this.ReleaseTween(c)
        },
        StopAllTweens() {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const d of this.AllTweens()) this.ReleaseTween(d)
        },
        SetOnePropertyTweensEndValue(d, c, f) {
            if (this.GetEnabled() && this.IsInstanceValid()) {
                c = e.Behaviors.Tween.Maps.GetSinglePropertyFromIndex(c);
                for (const k of this.GetTweens(d)) k.BeforeSetEndValues([c]), k.SetEndValue(f, c)
            }
        },
        SetTwoPropertiesTweensEndValue(d, c, f, k) {
            if (this.GetEnabled() && this.IsInstanceValid()) {
                c = e.Behaviors.Tween.Maps.GetRealProperties(c);
                for (const g of this.GetTweens(d)) g.BeforeSetEndValues(c), g.SetEndValue(f, c[0]), g.SetEndValue(k, c[1])
            }
        },
        SetValuePropertyTweensStartValue(d, c) {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const f of this.GetTweens(d, "value")) f.SetStartValue(c, "value")
        },
        SetValuePropertyTweensEndValue(d, c) {
            if (this.GetEnabled() &&
                this.IsInstanceValid())
                for (const f of this.GetTweens(d, "value")) f.BeforeSetEndValues(["value"]), f.SetEndValue(c, "value")
        },
        SetTweensEase(d, c) {
            if (this.GetEnabled() && this.IsInstanceValid()) {
                c = b.GetEaseFromIndex(c);
                for (const f of this.GetTweens(d)) f.SetEase(c)
            }
        },
        SetAllTweensEase(d) {
            if (this.GetEnabled() && this.IsInstanceValid()) {
                d = b.GetEaseFromIndex(d);
                for (const c of this.AllTweens()) c.SetEase(d)
            }
        },
        SetTweensTime(d, c) {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const f of this.GetTweens(d)) f.SetTime(c)
        },
        SetAllTweensTime(d) {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const c of this.AllTweens()) c.SetTime(d)
        },
        SetTweensPlaybackRate(d, c) {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const f of this.GetTweens(d)) f.SetPlaybackRate(c)
        },
        SetAllTweensPlaybackRate(d) {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const c of this.AllTweens()) c.SetPlaybackRate(d)
        },
        SetTweensDestroyOnComplete(d, c) {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const f of this.GetTweens(d)) f.SetDestroyInstanceOnComplete(!!c)
        },
        SetAllTweensDestroyOnComplete(d) {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const c of this.AllTweens()) c.SetDestroyInstanceOnComplete(!!d)
        }
    }
}
"use strict";
self.C3.Behaviors.Tween.Exps = {
    Time(e) {
        return (e = this.GetTweenIncludingWaitingForRelease(e)) ? e.GetTime() : 0
    },
    Progress(e) {
        return (e = this.GetTweenIncludingWaitingForRelease(e)) ? e.GetTime() / e.GetTotalTime() : 0
    },
    Value(e) {
        return (e = this.GetTweenIncludingWaitingForRelease(e, "value")) ? e.GetPropertyTrack("value").GetSourceAdapterValue() : 0
    },
    Tags() {
        return this.GetFinishingTween() ? this.GetFinishingTween().GetStringTags() : ""
    }
}; {
    "use strict";
    const e = self.C3,
        b = self.Ease,
        a = ["position", "size", "scale"],
        d = "offsetX offsetY offsetWidth offsetHeight offsetAngle offsetOpacity offsetColor offsetZElevation offsetScaleX offsetScaleY".split(" "),
        c = ["value"],
        f = [].concat(a).concat(d).concat(c),
        k = {
            position: ["offsetX", "offsetY"],
            size: ["offsetWidth", "offsetHeight"],
            scale: ["offsetScaleX", "offsetScaleY"]
        },
        g = Object.assign({}, f.reduce((l, m) => Object.assign({}, l, {
            [m]: [m]
        }), {}), k);
    e.Behaviors.Tween.Maps = class {
        constructor() {}
        static GetEases() {
            return [...b.GetRuntimeEaseNames()]
        }
        static GetEaseFromIndex(l) {
            return [...b.GetRuntimeEaseNames()][l]
        }
        static GetPropertyFromIndex(l) {
            return f[l]
        }
        static GetPropertyIndexFromName(l) {
            return f.indexOf(l)
        }
        static GetPairPropertyFromIndex(l) {
            return a[l]
        }
        static GetSinglePropertyFromIndex(l) {
            return d[l]
        }
        static GetValuePropertyFromIndex(l) {
            return c[l]
        }
        static GetPairProperties(l) {
            return k[l]
        }
        static GetRealProperties(l) {
            return e.IsString(l) ?
                g[l] : g[f[l]]
        }
        static IsPairId(l) {
            return !!k[l]
        }
        static IsColorId(l) {
            return "offsetColor" === l
        }
        static IsAngleId(l) {
            return "offsetAngle" === l
        }
        static IsOpacityId(l) {
            return "offsetOpacity" === l
        }
        static IsValueId(l) {
            return "value" === l
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = e.Behaviors.Tween,
        a = new Map;
    b.Config = class {
        constructor() {}
        static GetPropertyTracksConfig(d, c, f, k, g, l) {
            0 === a.size && this._CreateConfigObjects();
            var m = b.PropertyTypes.Pick(d);
            m = a.get(m);
            e.IsFiniteNumber(d) && (d = b.Maps.GetPropertyFromIndex(d));
            return this._GetConfig(m, d, c, f, k, g, l)
        }
        static TransformValue(d, c) {
            return e.Behaviors.Tween.GetPropertyTracksConfig(d).valueGetter(c)
        }
        static _CreateConfigObjects() {
            const d = b.PropertyTypes,
                c = b.ValueGetters;
            this._AddConfigObject(d.PAIR,
                this._GetPairConfig, c._GetPropertyValue);
            this._AddConfigObject(d.COLOR, this._GetColorConfig, c._GetColorPropertyValue);
            this._AddConfigObject(d.ANGLE, this._GetAngleConfig, c._GetPropertyAngleValue);
            this._AddConfigObject(d.VALUE, this._GetValueConfig, c._GetPropertyValue);
            this._AddConfigObject(d.OTHER, this._GetCommonConfig, c._GetPropertyValue)
        }
        static _AddConfigObject(d, c, f) {
            a.set(d, this._CreateConfigObject(d, c, f))
        }
        static _CreateConfigObject(d, c, f) {
            return {
                name: d,
                configFunc: c,
                valueGetter: f
            }
        }
        static _GetConfig(d,
            c, f, k, g, l, m) {
            return d.configFunc(c, d.valueGetter(f), d.valueGetter(k), g, l, m)
        }
        static _GetPairConfig(d, c, f, k, g, l) {
            return b.Maps.GetPairProperties(d).map((m, u) => ({
                sourceId: "world-instance",
                property: m,
                type: "float",
                valueType: "numeric",
                startValue: c[u],
                endValue: f[u],
                ease: b.Maps.GetEaseFromIndex(k),
                resultMode: g
            }))
        }
        static _GetColorConfig(d, c, f, k, g, l) {
            return e.Plugins.Text && l.GetPlugin() instanceof e.Plugins.Text ? {
                sourceId: "plugin",
                sourceArgs: [7],
                property: "color",
                type: "color",
                valueType: "color",
                startValue: c,
                endValue: f,
                ease: b.Maps.GetEaseFromIndex(k),
                resultMode: g
            } : {
                sourceId: "world-instance",
                property: d,
                type: "color",
                valueType: "color",
                startValue: c,
                endValue: f,
                ease: b.Maps.GetEaseFromIndex(k),
                resultMode: g
            }
        }
        static _GetAngleConfig(d, c, f, k, g, l) {
            return {
                sourceId: "world-instance",
                property: d,
                type: "angle",
                valueType: "angle",
                startValue: c,
                endValue: f,
                ease: b.Maps.GetEaseFromIndex(k),
                resultMode: g
            }
        }
        static _GetCommonConfig(d, c, f, k, g, l) {
            return {
                sourceId: "world-instance",
                property: d,
                type: "float",
                valueType: "numeric",
                startValue: c,
                endValue: f,
                ease: b.Maps.GetEaseFromIndex(k),
                resultMode: g
            }
        }
        static _GetValueConfig(d, c, f, k, g, l) {
            return {
                sourceId: "value",
                property: d,
                type: "float",
                valueType: "numeric",
                startValue: c,
                endValue: f,
                ease: b.Maps.GetEaseFromIndex(k),
                resultMode: g
            }
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = e.Behaviors.Tween,
        a = Object.assign({}, {
            resultMode: "absolute"
        }, {
            tags: "",
            property: "",
            time: 0,
            ease: 0,
            releaseOnComplete: 0,
            loop: !1,
            pingPong: !1
        }),
        d = Object.assign({}, a, {
            initialValueMode: "current-state",
            startValue: 0,
            endValue: 0
        }),
        c = Object.assign({}, a, {
            initialValueMode: "current-state",
            startValue: [0, 0],
            endValue: [0, 0]
        }),
        f = Object.assign({}, a, {
            initialValueMode: "current-state",
            startValue: [0, 0, 0],
            endValue: [0, 0, 0]
        }),
        k = Object.assign({}, d, {
            initialValueMode: "start-value"
        });
    b.TweenArguments =
        class {
            constructor() {}
            static _SetCommonProperties(g, l, m, u, x, p, r) {
                g.tags = l;
                g.time = m;
                g.ease = u;
                g.releaseOnComplete = x;
                g.loop = p;
                g.pingPong = r
            }
            static OneProperty(g, l, m, u, x, p, r, t, q) {
                g = b.Maps.GetSinglePropertyFromIndex(m);
                m = b.Maps.IsColorId(g) ? f : d;
                this._SetCommonProperties(m, l, x, p, r, t, q);
                b.Maps.IsColorId(g) ? (f.endValue[0] = e.GetRValue(u), f.endValue[1] = e.GetGValue(u), f.endValue[2] = e.GetBValue(u), f.property = b.Maps.GetPropertyIndexFromName(g)) : b.Maps.IsOpacityId(g) ? d.endValue = u / 100 : d.endValue = u;
                m.property = b.Maps.GetPropertyIndexFromName(g);
                return m
            }
            static TwoProperties(g, l, m, u, x, p, r, t, q, w) {
                this._SetCommonProperties(c, l, p, r, t, q, w);
                g = b.Maps.GetPairPropertyFromIndex(m);
                c.endValue[0] = u;
                c.endValue[1] = x;
                c.property = b.Maps.GetPropertyIndexFromName(g);
                return c
            }
            static ValueProperty(g, l, m, u, x, p, r, t, q) {
                this._SetCommonProperties(k, l, x, p, r, t, q);
                k.startValue = m;
                k.endValue = u;
                k.property = b.Maps.GetPropertyIndexFromName("value");
                return k
            }
        }
} {
    "use strict";
    const e = self.C3,
        b = e.Behaviors.Tween,
        a = [];
    b.PropertyTypes = class {
        constructor() {}
        static Pick(d) {
            0 === a.length && (a.push({
                checkFunc: b.Maps.IsPairId,
                result: this.PAIR
            }), a.push({
                checkFunc: b.Maps.IsColorId,
                result: this.COLOR
            }), a.push({
                checkFunc: b.Maps.IsAngleId,
                result: this.ANGLE
            }), a.push({
                checkFunc: b.Maps.IsValueId,
                result: this.VALUE
            }), a.push({
                checkFunc: () => !0,
                result: this.OTHER
            }));
            e.IsFiniteNumber(d) && (d = e.Behaviors.Tween.Maps.GetPropertyFromIndex(d));
            for (const c of a)
                if (c.checkFunc(d)) return c.result
        }
        static get PAIR() {
            return "pair"
        }
        static get COLOR() {
            return "color"
        }
        static get ANGLE() {
            return "angle"
        }
        static get VALUE() {
            return "value"
        }
        static get OTHER() {
            return "other"
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Tween.ValueGetters = class {
        constructor() {}
        static _GetPropertyAngleValue(b) {
            b = e.toRadians(parseFloat(b));
            return e.clampAngle(b)
        }
        static _GetColorPropertyValue(b) {
            return b.slice(0)
        }
        static _GetPropertyValue(b) {
            return b
        }
    }
} {
    const e = self.C3;
    self.C3_GetObjectRefTable = function() {
        return [e.Plugins.TiledBg, e.Plugins.Sprite, e.Behaviors.MoveTo, e.Plugins.Text, e.Plugins.Arr, e.Plugins.AJAX, e.Plugins.XML, e.Plugins.Touch, e.Behaviors.Pin, e.Behaviors.Bullet, e.Behaviors.wrap, e.Behaviors.Fade, e.Plugins.Particles, e.Plugins.Audio, e.Plugins.LocalStorage, e.Behaviors.scrollto, e.Behaviors.Tween, e.Plugins.System.Cnds.OnLayoutStart, e.Plugins.LocalStorage.Acts.CheckItemExists, e.Plugins.Text.Acts.SetFontSize, e.Plugins.System.Acts.SetLayerVisible,
            e.Plugins.System.Acts.SetVar, e.Plugins.Arr.Acts.Clear, e.Plugins.Sprite.Acts.SetPos, e.Plugins.Sprite.Acts.Destroy, e.Behaviors.Bullet.Acts.SetSpeed, e.Plugins.System.Exps.random, e.Behaviors.Tween.Acts.TweenTwoProperties, e.Plugins.System.Acts.Wait, e.Behaviors.Pin.Acts.PinByProperties, e.Plugins.System.Cnds.CompareVar, e.Plugins.Audio.Acts.Play, e.Plugins.Audio.Acts.FadeVolume, e.Plugins.System.Cnds.IsGroupActive, e.Plugins.LocalStorage.Cnds.OnItemExists, e.Plugins.LocalStorage.Acts.GetItem, e.Plugins.LocalStorage.Cnds.OnItemMissing,
            e.Plugins.LocalStorage.Acts.SetItem, e.Plugins.LocalStorage.Cnds.OnItemGet, e.Plugins.Arr.Acts.JSONLoad, e.Plugins.LocalStorage.Exps.ItemValue, e.Plugins.Arr.Exps.At, e.Plugins.Sprite.Acts.ZMoveToObject, e.Plugins.Sprite.Acts.SetAnimFrame, e.Plugins.Text.Cnds.CompareInstanceVar, e.Plugins.Sprite.Cnds.CompareInstanceVar, e.Plugins.Text.Acts.SetText, e.Plugins.System.Cnds.Every, e.Plugins.System.Acts.SubVar, e.Plugins.System.Cnds.TriggerOnce, e.Plugins.Arr.Acts.SetX, e.Plugins.Arr.Exps.AsJSON, e.Plugins.Sprite.Acts.SetVisible,
            e.Plugins.Sprite.Acts.SetAnim, e.Behaviors.MoveTo.Acts.SetEnabled, e.Plugins.Sprite.Acts.SetOpacity, e.Plugins.AJAX.Acts.Request, e.Plugins.AJAX.Cnds.OnComplete, e.Plugins.XML.Acts.Load, e.Plugins.AJAX.Exps.LastData, e.Plugins.XML.Exps.NodeCount, e.Plugins.Arr.Acts.SetSize, e.Plugins.XML.Cnds.ForEach, e.Plugins.Arr.Acts.SetXY, e.Plugins.System.Exps.loopindex, e.Plugins.XML.Exps.StringValue, e.Plugins.System.Cnds.Compare, e.Plugins.Arr.Exps.Width, e.Behaviors.Tween.Acts.TweenOneProperty, e.Plugins.System.Cnds.Else,
            e.Plugins.System.Acts.AddVar, e.Plugins.Sprite.Cnds.OnCollision, e.Plugins.System.Acts.SetLayerForceOwnTexture, e.Behaviors.Pin.Acts.Unpin, e.Plugins.Sprite.Exps.X, e.Plugins.Sprite.Exps.Y, e.Plugins.Touch.Cnds.OnTouchObject, e.Plugins.Text.Exps.Text, e.Plugins.Sprite.Cnds.CompareFrame, e.Behaviors.MoveTo.Acts.MoveToObject, e.Plugins.Sprite.Acts.Spawn, e.Plugins.Sprite.Acts.SetInstanceVar, e.Plugins.Sprite.Acts.SetSize, e.Plugins.Sprite.Acts.MoveToTop, e.Plugins.System.Exps.int, e.Plugins.System.Acts.NextPrevLayout,
            e.Plugins.System.Acts.GoToLayout, e.Plugins.System.Cnds.EveryTick, e.Plugins.System.Cnds.LayerVisible, e.Plugins.Text.Acts.SetPos, e.Plugins.System.Acts.GoToLayoutByName, e.Plugins.Audio.Acts.SetMasterVolume, e.Plugins.Audio.Cnds.IsTagPlaying
        ]
    };
    self.C3_JsPropNameTable = [{
            TiledBackground: 0
        }, {
            doll: 0
        }, {
            line_red: 0
        }, {
            MoveTo: 0
        }, {
            playe_green: 0
        }, {
            tile_: 0
        }, {
            tile_2: 0
        }, {
            tile_3: 0
        }, {
            TiledBackground2: 0
        }, {
            tree: 0
        }, {
            TiledBackground3: 0
        }, {
            tile_4: 0
        }, {
            tile_5: 0
        }, {
            tile_6: 0
        }, {
            BLACK_OPACITY: 0
        }, {
            Soldado: 0
        }, {
            info: 0
        }, {
            num: 0
        }, {
            pergunta: 0
        },
        {
            timer: 0
        }, {
            LABEL_SUP: 0
        }, {
            alternatives: 0
        }, {
            btnmenu: 0
        }, {
            HOME_BTN: 0
        }, {
            BG_TELA: 0
        }, {
            COOKIE_CORACAO: 0
        }, {
            handplayer: 0
        }, {
            marblesplayer: 0
        }, {
            ponte: 0
        }, {
            torre_vidro: 0
        }, {
            finish: 0
        }, {
            black: 0
        }, {
            Move_player: 0
        }, {
            Array: 0
        }, {
            AJAX: 0
        }, {
            XML: 0
        }, {
            Touch: 0
        }, {
            checked: 0
        }, {
            blood: 0
        }, {
            b2: 0
        }, {
            guardas: 0
        }, {
            bg_end_game: 0
        }, {
            G_OVER_TITLE: 0
        }, {
            end_bottom: 0
        }, {
            end_sup: 0
        }, {
            menu_game: 0
        }, {
            next_round: 0
        }, {
            Pin: 0
        }, {
            coin_game: 0
        }, {
            TXT_score_GAME: 0
        }, {
            coin_game2: 0
        }, {
            guardas_EndGame: 0
        }, {
            Bullet: 0
        }, {
            Wrap: 0
        }, {
            clouds: 0
        }, {
            pig_money: 0
        }, {
            MOEDA: 0
        }, {
            quiz: 0
        }, {
            Sprite: 0
        },
        {
            Sprite2: 0
        }, {
            Sprite3: 0
        }, {
            Sprite4: 0
        }, {
            mascarados: 0
        }, {
            title_squid: 0
        }, {
            play_btn: 0
        }, {
            inst_btn: 0
        }, {
            Fade: 0
        }, {
            Fade2: 0
        }, {
            NG_STUDIO: 0
        }, {
            info_pos: 0
        }, {
            Sprite5: 0
        }, {
            info_boxes: 0
        }, {
            location_marble: 0
        }, {
            handEnemy: 0
        }, {
            marblesenemy: 0
        }, {
            tela_interation_game: 0
        }, {
            cloud_talk_game: 0
        }, {
            info_interation: 0
        }, {
            Text_Dicas: 0
        }, {
            BTN_GO: 0
        }, {
            jogo_da_lula: 0
        }, {
            playe_green2: 0
        }, {
            verify1: 0
        }, {
            verify2: 0
        }, {
            verify3: 0
        }, {
            rain: 0
        }, {
            TiledBackground4: 0
        }, {
            torre_cabo: 0
        }, {
            playe_cabo_de_guerra: 0
        }, {
            enemy_cabo_de_guerra2: 0
        }, {
            nublado_cenario: 0
        }, {
            rope: 0
        },
        {
            Move_Enemy: 0
        }, {
            rounds_interation: 0
        }, {
            Audio: 0
        }, {
            doubt: 0
        }, {
            INFO_DEV: 0
        }, {
            REACT: 0
        }, {
            BOX_DIALOG: 0
        }, {
            INSTRUCTION: 0
        }, {
            INST_TXT: 0
        }, {
            SOUND_OFF: 0
        }, {
            flags: 0
        }, {
            BlackScreenMenu: 0
        }, {
            LocalStorage: 0
        }, {
            arr_Scores: 0
        }, {
            CREDITS: 0
        }, {
            infoPos: 0
        }, {
            ScrollTo: 0
        }, {
            CAM_GAME: 0
        }, {
            CREDITS_SCREEN: 0
        }, {
            Tween: 0
        }, {
            TWEEN_F: 0
        }, {
            PIN_F: 0
        }, {
            Parameter0: 0
        }, {
            GameStart: 0
        }, {
            total_questoes: 0
        }, {
            total_questoes_temp: 0
        }, {
            questao_atual: 0
        }, {
            respondendo: 0
        }, {
            acertos: 0
        }, {
            lifes: 0
        }, {
            score: 0
        }, {
            highscore1: 0
        }, {
            highscore2: 0
        }, {
            highscore3: 0
        }, {
            highscore4: 0
        }, {
            highscore5: 0
        },
        {
            highscore6: 0
        }, {
            GameOver: 0
        }, {
            Control_Sub_timer: 0
        }, {
            roundGame: 0
        }, {
            currentLevel: 0
        }, {
            LS_NAME: 0
        }, {
            language: 0
        }, {
            sound: 0
        }
    ]
} {
    function e(b, a) {
        return "string" === typeof b || "string" === typeof a ? ("number" === typeof b ? (Math.round(1E10 * b) / 1E10).toString() : b) + ("number" === typeof a ? (Math.round(1E10 * a) / 1E10).toString() : a) : b && a ? 1 : 0
    }
    self.C3_ExpressionFuncs = [b => {
            const a = b._GetNode(0).GetVar();
            return () => a.GetValue()
        }, () => 35, () => "END_GAME", () => 0, () => 1, () => 15, () => 401, () => -517, b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(5, 10)
        }, () => "", () => 362, () => -341, () => .5, () => 363, () => 1760, () => 584, () => 1525, () => -10, () => "music1", () => "sound", () =>
        -100, () => 3, () => "music2", () => "music3", () => "music4", () => "music5", () => "music6", () => 2, () => -15, () => -20, () => 4, () => 5, () => 6, () => "LOCAL STORAGE", b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a()
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject(0)
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject(1)
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject(2)
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject(3)
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject(4)
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject(5)
        },
        () => "EFFECT INICIAL QUIZ", () => 370, () => -355, () => 138, () => 1458, () => .2, () => 523, () => .6, () => 550, () => 153, () => "pergunta", () => 258, () => "alternativa1", () => "alternativa2", () => "alternativa3", () => 360, () => 641, () => .4, () => 824, () => 1010, () => .8, () => 1198, () => 587, () => 1181, () => "TIMER COUNT GAME", b => {
            const a = b._GetNode(0);
            return () => a.ExpObject()
        }, () => "CONFIG INICIAIS", () => "idle", () => "Default", () => "carregaXML", b => {
            const a = b._GetNode(0).GetVar();
            return () => "perguntas." + a.GetValue() + ".xml"
        },
        b => {
            const a = b._GetNode(0).GetVar();
            return () => "perguntas2." + a.GetValue() + ".xml"
        },
        b => {
            const a = b._GetNode(0).GetVar();
            return () => "perguntas3." + a.GetValue() + ".xml"
        },
        b => {
            const a = b._GetNode(0).GetVar();
            return () => "perguntas4." + a.GetValue() + ".xml"
        },
        b => {
            const a = b._GetNode(0).GetVar();
            return () => "perguntas5." + a.GetValue() + ".xml"
        },
        b => {
            const a = b._GetNode(0).GetVar();
            return () => "perguntas6." + a.GetValue() + ".xml"
        }, () => "LOADING PERGUNTAS", b => {
            const a = b._GetNode(0);
            return () => a.ExpObject("/root/questao")
        }, () => 7, () => "/root/questao", b => {
            const a = b._GetNode(0);
            return () => a.ExpObject("pergunta/text()")
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject("alternativa1/text()")
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject("alternativa2/text()")
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject("alternativa3/text()")
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject("resposta/text()")
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject() - 1
        }, () => 100, b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1);
            return () => a(0, d.ExpObject())
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetVar();
            return () => a.ExpObject(d.GetValue(), 6)
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetVar();
            return () => a.ExpObject(d.GetValue(), 0)
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetVar();
            return () => a.ExpObject(d.GetValue(), 1)
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetVar();
            return () => a.ExpObject(d.GetValue(), 2)
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetVar();
            return () => a.ExpObject(d.GetValue(), 3)
        }, () => "LOADING PERGUNTAS2", () => "carregaXML2", () => "LOADING PERGUNTAS3", () => "carregaXML3",
        () => "LOADING PERGUNTAS4", () => "carregaXML4", () => "LOADING PERGUNTAS5", () => "carregaXML5", () => "LOADING PERGUNTAS6", () => "carregaXML6", () => "ANIMATIONS PLAYER", () => .3, () => 43, () => 66, () => "side", () => 51, () => 79, () => "side_rigth", () => "top", () => "um_pe", () => "TOUCH GAME", b => {
            const a = b._GetNode(0);
            return () => a.ExpInstVar()
        }, () => 25, () => 499, () => 586, () => 189, () => "VERIFY RESPOSTAS ROUND = 1", b => {
            const a = b._GetNode(0).GetVar();
            return () => a.GetValue().toString()
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetVar();
            return () =>
                a.ExpObject(d.GetValue(), 5).toString()
        }, () => "acerto", () => "walk", () => 1.5, () => "erro", () => "VERIFY RESPOSTAS ROUND = 2", () => "BG", () => 119, () => 300, () => 288, () => 309, () => 373, () => 200, () => 481, () => 287, () => 621, () => 381, () => 101, () => 955, () => 208, () => 1114, () => 8, () => 342, () => 993, () => 9, () => 433, () => 1120, () => 10, () => 582, () => "broke", () => "VERIFY RESPOSTAS ROUND = 3", () => "reverse", () => 1.4, () => 509, () => 243, () => "VERIFY RESPOSTAS ROUND = 4", () => -84, () => 405, () => 190, () => 80, () => 389, () => -234, b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(.3, .6)
        }, () => "VERIFY RESPOSTAS ROUND = 5", () => 56, () => 86, () => "jump", () => "VERIFY RESPOSTAS ROUND = 6", () => "REVERSE EFFECT QUIZ", () => 1465, () => 1162, () => "EFFECT COIN", () => "RASTRO_WALK", () => 60, () => 590, () => 70, () => 393, () => 63, () => 281, () => 21, () => 514, () => 1190, () => .05, () => 292, () => 11, b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetBoundMethod();
            return () => a(d(10, 15)) / 2
        }, () => "END GAME", () => 385, () => 1422, () => 372, () => 1798, () => "score", () => "best", () => 892, () => 1147, () => -216, () => 682, () => 147, () =>
        .1, () => 289, () => 691, () => 167, () => 163, () => 636, () => 81, () => "BTN_EFFECT", () => 127, () => 124, () => 179, () => 225, () => 83, () => "EVERY TICK GAME", () => 30, b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetVar(),
                c = b._GetNode(2).GetVar(),
                f = b._GetNode(3).GetVar(),
                k = b._GetNode(4).GetVar(),
                g = b._GetNode(5).GetVar(),
                l = b._GetNode(6).GetVar();
            return () => a(d.GetValue() + c.GetValue() + f.GetValue() + k.GetValue() + g.GetValue() + l.GetValue())
        }, () => 365, () => -399, () => 368, () => 1662, () => -172, () => 854, () => 67, () => -127, () => 75, () => 2196,
        () => 1768, () => "INFO", () => "INST", () => "EFFECT", () => "br", () => -99, () => 214, () => "en", () => 329, () => 597, () => 1474, () => 1496, () => "INSTRUCTIONS", () => "1. COMPLETE ALL MISSIONS OF EACH GAME WITHOUT FAILING.", () => "2. TAP THE CORRECT ANSWER TO VALIDATE.", () => "3. EXCEED EXPECTATIONS AND GET TO THE NEXT GAMES.", () => "INSTRU\u00c7\u00d5ES", () => "1. COMPLETE TODAS AS MISS\u00d5ES DE CADA JOGO SEM FALHAR. ", () => "2. TOQUE NA RESPOSTA CORRETA PARA VALIDAR.", () => "3. SUPERE AS EXPECTATIVAS E AVANCE PARA OS PR\u00d3XIMOS JOGOS.",
        () => "TOUCH MENU", () => 394, () => 952, () => 578, () => 570, () => 632, () => 294, () => 89, () => 350, () => 107, () => "FUNCTIONS INTRO MENU GAME", () => 403, () => 303, () => 663, () => 492, () => 286, () => 222, () => 217, () => 177, () => 174, () => 653, () => 77, () => 74, () => "INFORMA\u00c7\u00d5ES DEV", () => 623, () => 999, () => .25, () => "BTNS MENU", () => 186, () => 105, () => 103, () => 132, () => 129, () => 149, () => 125, () => 123, () => 605, () => 1907, () => 1113, () => 689, () => 788, () => 453, () => 335, () => 1577, () => 607, () => 175, () => 461, () => 268, () => 358, () => 1053, () => 204, b => {
            const a = b._GetNode(0).GetVar();
            return () => e("LEVEL", a.GetValue())
        }, () => 158, () => 155, () => "HELP THE PLAYER PASS\nRED LINE WITHOUT\nTHE DOLL SEE YOU.", () => "REMOVE THE SHAPE FROM\nDALGONA\nWITHOUT BREAKING!", () => "PULL YOUR OPPONENT UNTIL IT FALLS OFF THE BRIDGE.", () => "WIN ALL YOUR OPPOSITE'S MARBLES!", () => "RIGHT THE TEMPERED GLASSES AND CROSS THE BRIDGE.", () => "YOUR GOAL IS TO GET TO THE SQUID'S HEAD.", () => "AJUDE O PLAYER PASSAR\nDA LINHA VERMELHA SEM \nQUE A BONECA O VEJA.", () => "RETIRE A FORMA DO\nBISCOITO DE MEL\nSEM QUEBRAR!", () =>
        "PUXE O SEU ADVERS\u00c1RIO AT\u00c9 QUE CAIA DA PONTE.", () => "GANHE TODAS AS GUDES DO SEU ADVERS\u00c1RIO!", () => "ACERTE OS VIDROS TEMPERADOS E ATRAVESSE A PONTE.", () => "SEU OBJETIVO \u00c9 CHEGAR AT\u00c9 A CABE\u00c7A DA LULA."
    ]
}
var module$str$c3runtime = {};
var module$str$__c3root__ = {};